<?xml version="1.0"?>
<project name="AlloyMacrolib">
	<property name="regex.clean.vars" value="^component\.details\..*|global\.build\.component|details\.list|details|component\.(rollup|use|supersedes|requires|optional|lang|skinnable)|component.*$"/>
	<property name="aui.default.moduledefaultstemplate" value="${project.dir}/resources/builder/templates/moduledeftemplate.txt"/>
	<property name="aui.default.defaultstemplate" value="${project.dir}/resources/builder/templates/moduledefaults.txt"/>
	<property name="aui.default.defaultsfile" value="${project.dir}/resources/temp/defaults.js"/>
	<property name="aui.default.prependdefaults" value="true"/>

	<!-- Overwriting default YUI tasks -->
	<presetdef name="addlang">
		<addmodule
			dest="@{dest}"
			details="@{details}"
			dir="@{dir}"
			lang="@{lang}"
			langtemplate="${project.dir}/resources/builder/templates/langtemplate.txt"
			module="@{module}"
		/>
	</presetdef>

	<presetdef name="addmodule">
		<addmodule
			details="@{details}"
			file="@{file}"
			module="@{module}"
			moduletemplate="${project.dir}/resources/builder/templates/moduletemplate.txt"
		/>
	</presetdef>

	<presetdef name="addrollup">
		<addrollup
			details="@{details}"
			file="@{file}"
			module="@{module}"
			rolluptemplate="${project.dir}/resources/builder/templates/rolluptemplate.txt"
		/>
	</presetdef>

	<macrodef name="concatsource">
		<attribute name="destfile" />
		<attribute name="sourcedir" />
		<attribute name="sourcefiles" />
		<attribute name="workingdir" default="${workingdir}" />

		<element name="filters" optional="true" description="Additonal filters to apply to individual files"/>

		<sequential>
			<echo level="info">Concatenating</echo>
			<echo level="info">	Source Files : @{sourcefiles}</echo>
			<echo level="info">	In Source Dir : @{sourcedir}</echo>
			<echo level="info">	To : @{destfile}</echo>

			<delete dir="@{workingdir}" quiet="true"/>
			<copy todir="@{workingdir}">
				<filelist dir="@{sourcedir}" files="@{sourcefiles}" />
				<filterchain>
					<filters />
					<fixcrlf fixlast="true" eof="remove"/>
				</filterchain>
			</copy>

			<concat destfile="@{destfile}" fixlastline="true" eol="${buildfiles.eol}">
				<filelist dir="@{workingdir}" files="@{sourcefiles}" />
			</concat>

			<delete dir="${workingdir}" quiet="true" />
		</sequential>
	</macrodef>

	<!-- Alloy Macrodef utilities -->
	<macrodef name="clean-variables" description="Clean all properties which match with the regex attribute">
		<attribute name="regex"/>
		<sequential>
			<propertyselector
				casesensitive="false"
				delimiter=","
				match="@{regex}"
				override="true"
				property="aui.reset.list"
				select="\0"
			/>
			<if>
				<isset property="aui.reset.list"/>
				<then>
					<for list="${aui.reset.list}" param="val">
						<sequential>
							<var name="@{val}" unset="true" value=""/>
						</sequential>
					</for>
				</then>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="create-module-details">
		<attribute name="moduledefaultstemplate" default="${aui.default.moduledefaultstemplate}"/>
		<attribute name="defaultsfile" default="${aui.default.defaultsfile}"/>
		<sequential>
			<var name="submodule.module.name" value="${component}"/>
			<var name="submodule.module.details.hash" value="${component.details.hash}"/>

			<loadfile
				srcFile="@{moduledefaultstemplate}"
				property="module.deftemplate.content"
			/>

			<if>
				<equals arg1="${component.rollup}" arg2="true"/>
				<then>
					<var name="submodule.details.hash" value=""/>

					<for delimiter=", " list="${component.rollup.modules.buildfiles}" param="file" trim="true">
						<sequential>
							<propertyregex property="propertiesfile"
							               input="@{file}"
							               regexp=".xml$"
							               replace=".properties" />
							<clean-variables regex="${regex.clean.vars}"/>

							<var file="${project.dir}/src/${submodule.module.name}/${propertiesfile}"/>
							<createdetails/>
							<var name="submodule.details.hash" value="'${component}': ${component.details.hash}, ${submodule.details.hash}"/>

							<var name="propertiesfile" unset="true"/>
						</sequential>
					</for>

					<propertyregex
						casesensitive="false"
						input="${submodule.module.details.hash}"
						override="true"
						property="component.details.hash"
						regexp="^\{"
						replace="{submodules: {${submodule.details.hash}}, "
					/>
				</then>
			</if>

			<replaceregexp match="([\s\t\n]+)(@MODULES@)" replace="\1${module.deftemplate.content}\2" flags="g" byline="false">
				<fileset file="@{defaultsfile}"/>
			</replaceregexp>

			<replace file="@{defaultsfile}">
				<replacefilter token="@MODULE@" value="${submodule.module.name}"/>
				<replacefilter token="@DETAILS@" value="${component.details.hash}"/>
			</replace>
		</sequential>
	</macrodef>

	<macrodef name="create-module-list">
		<attribute name="defaultstemplate" default="${aui.default.defaultstemplate}"/>
		<attribute name="defaultsfile" default="${aui.default.defaultsfile}"/>
		<attribute name="prependdefaults" default="${aui.default.prependdefaults}"/>
		<sequential>
			<clean-variables regex="${regex.clean.vars}"/>

			<copy
				file="@{defaultstemplate}"
				tofile="@{defaultsfile}"
				overwrite="true"
			/>

			<antcall target="generate-skin-src"/>

			<for param="file">
				<path>
					<fileset dir="${project.dir}/src" includes="**/build.properties,**/build.all-css.properties" excludes="**/_diffs/build.properties"/>
				</path>
				<sequential>
					<var file="@{file}"/>
					<createdetails />
					<create-module-details/>
					<clean-variables regex="${regex.clean.vars}"/>
				</sequential>
			</for>

			<format-module-list defaultsfile="@{defaultsfile}"/>

			<if>
				<equals arg1="@{prependdefaults}" arg2="true"/>
				<then>
					<concat-module-list defaultsfile="@{defaultsfile}"/>
				</then>
			</if>

			<create-combined-file/>

			<antcall target="clean-skin-src"/>

			<delete dir="${aui.temp.dir}"/>

			<copy todir="${project.dir}/resources/temp/${build.aui.prefix}aui">
				<fileset dir="${global.build.base}/${build.aui.prefix}aui">
					<include name="**"/>
				</fileset>
			</copy>
			<copy todir="${project.dir}/resources/temp/${build.aui.prefix}aui-base">
				<fileset dir="${global.build.base}/${build.aui.prefix}aui-base">
					<include name="**"/>
				</fileset>
			</copy>

			<fixcrlf srcdir="${global.build.base}/${build.aui.prefix}aui" fixlast="true" eol="${buildfiles.eol}" />
			<fixcrlf srcdir="${global.build.base}/${build.aui.prefix}aui-base" fixlast="true" eol="${buildfiles.eol}" />

			<delete>
				<fileset dir="${global.build.base}/${build.aui.prefix}aui" includes="**"/>
			</delete>

			<delete>
				<fileset dir="${global.build.base}/${build.aui.prefix}aui-base" includes="**"/>
			</delete>

			<copy todir="${global.build.base}/${build.aui.prefix}aui">
				<fileset dir="${project.dir}/resources/temp/${build.aui.prefix}aui">
					<include name="**"/>
				</fileset>
			</copy>
			<copy todir="${global.build.base}/${build.aui.prefix}aui-base">
				<fileset dir="${project.dir}/resources/temp/${build.aui.prefix}aui-base">
					<include name="**"/>
				</fileset>
			</copy>
		</sequential>
	</macrodef>

	<macrodef name="create-combined-file">
		<sequential>
			<mkdir dir="${global.build.base}/${build.aui.prefix}aui" />

			<var name="aui.combined.dir" value="${global.build.base}/${build.aui.prefix}aui/" />
			<var name="aui.combined.file" value="${aui.combined.dir}/${build.aui.prefix}aui.js" />
			<var name="aui.combined.min.file" value="${aui.combined.dir}/${build.aui.prefix}aui-min.js" />

			<delete>
				<fileset dir="${aui.combined.dir}" includes="aui*.js"/>
			</delete>

			<concat destfile="${aui.combined.file}" fixlastline="yes" eol="${buildfiles.eol}">
				<header file="${global.build.base}/yui/yui.js"/>
				<fileset dir="${global.build.base}/${build.aui.prefix}aui-base" includes="${build.aui.prefix}aui-base.js"/>
			</concat>
			<concat destfile="${aui.combined.min.file}" fixlastline="yes" eol="${buildfiles.eol}">
				<header file="${global.build.base}/yui/yui-min.js"/>
				<fileset dir="${global.build.base}/${build.aui.prefix}aui-base" includes="${build.aui.prefix}aui-base-min.js"/>
			</concat>

			<var name="aui.detect.path.regex.from" value="/(?:\?(?:[^&amp;]*&amp;)*([^&amp;]*))?\b(simpleyui|yui(?:-\w+)?)\/\2(?:-(min|debug))?\.js/"/>
			<var name="aui.detect.path.regex.to" value="/(?:\?(?:[^&amp;]*&amp;)*([^&amp;]*))?\b(simpleyui|[ay]ui(?:-\w+)?)\/\2(?:-(min|debug))?\.js/"/>

			<replace file="${aui.combined.file}">
				<replacefilter token="${aui.detect.path.regex.from}" value="${aui.detect.path.regex.to}" />
			</replace>

			<replace file="${aui.combined.file}">
				<replacefilter token="${aui.detect.path.combo.regex.from}" value="${aui.detect.path.combo.regex.to}" />
			</replace>

			<replace file="${aui.combined.min.file}">
				<replacefilter token="${aui.detect.path.regex.from}" value="${aui.detect.path.regex.to}" />
			</replace>

			<replace file="${aui.combined.min.file}">
				<replacefilter token="${aui.detect.path.combo.regex.from}" value="${aui.detect.path.combo.regex.to}" />
			</replace>
		</sequential>
	</macrodef>

	<macrodef name="concat-module-list">
		<attribute name="defaultsfile" default="${aui.default.defaultsfile}"/>
		<sequential>
			<property name="aui.base.component.dir" value="${global.build.base}/${build.aui.prefix}aui-base/" />
			<property name="aui.base.component.tmp.dir" value="${project.dir}/src/${build.aui.prefix}aui-base/build_rollup_tmp/" />

			<if>
				<not>
					<available file="${aui.base.component.tmp.dir}" />
				</not>
				<then>
					<clean-variables regex="component\.rollup\.modules\.buildfiles"/>
					<subant target="local">
						<fileset dir="${project.dir}/src/${build.aui.prefix}aui-base/">
							<include name="build.xml"/>
						</fileset>
					</subant>
				</then>
			</if>

			<concat destfile="${aui.base.component.dir}/${build.aui.prefix}aui-base.js" fixlastline="yes" eol="${buildfiles.eol}">
				<header file="@{defaultsfile}"/>
				<fileset dir="${aui.base.component.tmp.dir}" includes="${build.aui.prefix}aui-base.js"/>
			</concat>
			<concat destfile="${aui.base.component.dir}/${build.aui.prefix}aui-base-debug.js" fixlastline="yes" eol="${buildfiles.eol}">
				<header file="@{defaultsfile}"/>
				<fileset dir="${aui.base.component.tmp.dir}" includes="${build.aui.prefix}aui-base-debug.js"/>
			</concat>
			<concat destfile="${aui.base.component.dir}/${build.aui.prefix}aui-base-min.js" fixlastline="yes" eol="${buildfiles.eol}">
				<header file="@{defaultsfile}"/>
				<fileset dir="${aui.base.component.tmp.dir}" includes="${build.aui.prefix}aui-base-min.js"/>
			</concat>

			<yuicompress
				args="${yuicompressor.js.args.internal}"
				dest="${project.dir}/build/${build.aui.prefix}aui-base/${build.aui.prefix}aui-base-min.js"
				src="${aui.base.component.dir}/${build.aui.prefix}aui-base.js"
			/>

			<copy
				file="@{defaultsfile}"
				tofile="${aui.base.component.dir}/${build.aui.prefix}${build.aui.prefix}aui-base-meta.js"
				overwrite="true"
			/>

			<yuicompress
				args="${yuicompressor.js.args.internal}"
				dest="${project.dir}/build/${build.aui.prefix}aui-base/${build.aui.prefix}aui-base-meta-min.js"
				src="${aui.base.component.dir}/${build.aui.prefix}aui-base-meta.js"
			/>
		</sequential>
	</macrodef>

	<macrodef name="format-module-list">
		<attribute name="defaultsfile" default="${aui.default.defaultsfile}"/>
		<sequential>
			<replace file="@{defaultsfile}">
				<replacefilter token=": ," value=": "/>
			</replace>
			<replaceregexp match="@MODULES@[\r\n]" replace="" flags="g" byline="false">
				<fileset file="@{defaultsfile}"/>
			</replaceregexp>
			<replaceregexp match="\},([\s\t\n]+)}" replace="}\1}" flags="g" byline="false">
				<fileset file="@{defaultsfile}"/>
			</replaceregexp>
		</sequential>
	</macrodef>
</project>
