<?xml version="1.0" encoding="UTF-8"?>

<taglibs short-name="alloy" uri="http://alloy.liferay.com/tld/alloy" tlib-version="1.0">
  <component name="A.io" module="aui-io" package="alloy" bodyContent="false" alloyComponent="true">
    <attributes/>
    <events/>
  </component>
  <component name="AutoComplete" module="aui-autocomplete" package="alloy" bodyContent="false" alloyComponent="true">
    <attributes>
      <attribute>
        <name>alwaysShowContainer</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Always show the results container, instead of only showing when the 
user is requesting them.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>applyLocalFilter</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[If set to true, the <a href="AutoComplete.html#method_filterResults">filterResults</a> 
method will be run on the response from the data source.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>autoHighlight</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[Automatically highlight the first item in the list when the results are
made visible.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>boundingBox</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The outermost DOM node for the Widget, used for sizing and positioning 
of a Widget as well as a containing element for any decorator elements used 
for skinning.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>button</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[To use a button<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>contentBox</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[A DOM node that is a direct descendant of a Widget's bounding box that 
houses its content.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>cssClass</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[CSS class to be automatically added to the <code>boundingBox</code>.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>dataSource</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The data source that results will be read from. This can either be
an existing <a href="DataSource.html">DataSource</a> object, or it can be a
value that would be passed to <a href="DataSource.html">DataSource</a>.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>dataSourceType</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The type of the data source passed into <a href="AutoComplete.html#config_dataSource">dataSource</a>.
This can be used to explicitly declare what kind of <a href="DataSource.html">DataSource</a> object will
be created.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>delimChar</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The character used to indicate the beginning or ending of a new value. Most commonly used
is a ",".<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>destroyed</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this object
has been through the destroy lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>disabled</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Boolean indicating if the Widget should be disabled. The disabled implementation
is left to the specific classes extending widget.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>focused</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Boolean indicating if the Widget, or one of its descendants, 
has focus.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>forceSelection</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[If <a href="AutoComplete.html#config_typeAhead">typeAhead</a> is true, this
will clear a selection when the overlay closes unless a user explicitly selects an item.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>height</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[String with units, or number, representing the height of the Widget. If a number is provided,
the default unit, defined by the Widgets DEF_UNIT, property is used.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>hideClass</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue>aui-helper-hidden</defaultValue>
        <description><![CDATA[css class added to hide the <code>boundingBox</code> when
<a href="Component.html#config_visible">visible</a> is set to
<code>false</code>.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false,"defaultValue":"aui-helper-hidden"}-->]]></description>
      </attribute>
      <attribute>
        <name>id</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>initialized</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this object
has been through the init lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>input</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The input field which will recieve the users input.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>matchKey</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue>0</defaultValue>
        <description><![CDATA[The key or numeric index in the schema to match the result against.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false,"defaultValue":"0"}-->]]></description>
      </attribute>
      <attribute>
        <name>maxResultsDisplayed</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>10</defaultValue>
        <description><![CDATA[The maximum number of results to display.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"10"}-->]]></description>
      </attribute>
      <attribute>
        <name>minQueryLength</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>1</defaultValue>
        <description><![CDATA[The minimum number of characters required to query the data source.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"1"}-->]]></description>
      </attribute>
      <attribute>
        <name>queryDelay</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>0.2</defaultValue>
        <description><![CDATA[The amount of time in seconds to delay before submitting the query.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0.2"}-->]]></description>
      </attribute>
      <attribute>
        <name>queryInterval</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>0.5</defaultValue>
        <description><![CDATA[When IME usage is detected or interval detection is explicitly enabled,
AutoComplete will detect the input value at the given interval and send a
query if the value has changed.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0.5"}-->]]></description>
      </attribute>
      <attribute>
        <name>queryMatchCase</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[When <a href="AutoComplete.html#config_applyLocalFilter">applyLocalFilter</a> is true,
setting this to true will match only results with the same case.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>queryMatchContains</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[When <a href="AutoComplete.html#config_applyLocalFilter">applyLocalFilter</a> is true,
setting this to true will match results which contain the query anywhere in the text,
instead of just matching just items that start with the query.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>queryQuestionMark</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[For IO DataSources, AutoComplete will automatically insert a "?" between the server URI and 
the encoded query string. To prevent this behavior, you can
set this value to false. If you need to customize this even further, you
can override the <a href="AutoComplete.html#method_generateRequest">generateRequest</a> method.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>render</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[If <code>true</code> the render phase will be autimatically invoked
preventing the <code>.render()</code> manual call.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>rendered</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this Widget
has been through the render lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>schema</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.HashMap</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[A valid configuration object for any of <a href="module_datasource.html">DataSource</a> schema plugins.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.HashMap","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>schemaType</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue>array</defaultValue>
        <description><![CDATA[A valid type of <a href="module_datasource.html">DataSource</a> schema plugin, such as array, json, xml, etc.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false,"defaultValue":"array"}-->]]></description>
      </attribute>
      <attribute>
        <name>srcNode</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The DOM node to parse for configuration values, passed to the Widget's HTML_PARSER definition<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>strings</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.HashMap</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Collection of strings used to label elements of the Widget's UI.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.HashMap","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>suppressInputUpdate</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Whether or not the input field should be updated with selections.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>tabIndex</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>0</defaultValue>
        <description><![CDATA[Number (between -32767 to 32767) indicating the widget's 
position in the default tab flow.  The value is used to set the 
"tabIndex" attribute on the widget's bounding box.  Negative values allow
the widget to receive DOM focus programmatically (by calling the focus
method), while being removed from the default tab flow.  A value of 
null removes the "tabIndex" attribute from the widget's bounding box.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0"}-->]]></description>
      </attribute>
      <attribute>
        <name>typeAhead</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[If <a href="AutoComplete.html#config_autoHighlight">autoHighlight</a> is enabled, whether or not the 
input field should be automatically updated with the first result as the user types, 
automatically selecting the portion of the text the user has not typed yet.<!--{"event":true,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>typeAheadDelay</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>0.2</defaultValue>
        <description><![CDATA[If <a href="AutoComplete.html#config_typeAhead">typeAhead</a> is true, number of seconds 
to delay before updating the input. In order to prevent certain race conditions, this value must
always be greater than the <a href="AutoComplete.html#config_queryDelay">queryDelay</a>.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0.2"}-->]]></description>
      </attribute>
      <attribute>
        <name>uniqueName</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The unique ID of the input element.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>useARIA</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[Boolean indicating if use of the WAI-ARIA Roles and States should be
enabled for the Widget.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>visible</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[Boolean indicating weather or not the Widget is visible.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>width</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[String with units, or number, representing the width of the Widget. If a number is provided,
the default unit, defined by the Widgets DEF_UNIT, property is used.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
    </attributes>
    <events>
      <event>
        <name>alwaysShowContainerChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'alwaysShowContainer' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>applyLocalFilterChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'applyLocalFilter' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>autoHighlightChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'autoHighlight' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>boundingBoxChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'boundingBox' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>buttonChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'button' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>containerCollapse</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Handles the containerCollapse event. Fired when the container is hidden.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>containerExpand</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Handles the containerExpand event. Fired when the container is shown.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>containerPopulate</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Handles the containerPopulate event. Fired when the container is populated.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>contentBoxChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'contentBox' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>cssClassChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'cssClass' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>dataError</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Handles the dataError event. Fired when there is an error accessing the data.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>dataRequest</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Handles the dataRequest event. Fired when ever a query is sent to the data source.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>dataReturn</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Handles the dataReturn event. Fired when data successfully comes back from the data request.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>dataSourceChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'dataSource' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>dataSourceTypeChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'dataSourceType' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>delimCharChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'delimChar' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>destroy</name>
        <type>java.lang.Object</type>
        <description><![CDATA[<p>
Lifecycle event for the destroy phase, 
fired prior to destruction. Invoking the preventDefault 
method on the event object provided to subscribers will 
prevent destruction from proceeding.
</p>
<p>
Subscribers to the "after" moment of this event, will be notified
after destruction is complete (and as a result cannot prevent
destruction).
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>destroyedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'destroyed' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>disabledChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'disabled' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>focusedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'focused' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>forceSelectionChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'forceSelection' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>heightChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'height' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>hideClassChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'hideClass' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>idChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'id' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>init</name>
        <type>java.lang.Object</type>
        <description><![CDATA[<p>
Lifecycle event for the init phase, fired prior to initialization. 
Invoking the preventDefault() method on the event object provided 
to subscribers will prevent initialization from occuring.
</p>
<p>
Subscribers to the "after" momemt of this event, will be notified
after initialization of the object is complete (and therefore
cannot prevent initialization).
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>initializedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'initialized' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>inputChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'input' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>itemArrowFrom</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Handles the itemArrowFrom event. Fired when the user navigates via the keyboard away from
a selected item.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>itemArrowTo</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Handles the itemArrowTo event. Fired when the user navigates via the keyboard to a selected item.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>itemMouseOut</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Handles the itemMouseOut event. Fired when the user mouses away from an item.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>itemMouseOver</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Handles the itemMouseOver event. Fired when the user mouses over an item.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>itemSelect</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Handles the itemSelect event. Fired when an item in the list is selected.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>matchKeyChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'matchKey' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>maxResultsDisplayedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'maxResultsDisplayed' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>minQueryLengthChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'minQueryLength' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>queryDelayChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'queryDelay' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>queryIntervalChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'queryInterval' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>queryMatchCaseChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'queryMatchCase' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>queryMatchContainsChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'queryMatchContains' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>queryQuestionMarkChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'queryQuestionMark' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>renderChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'render' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>renderedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'rendered' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>schemaChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'schema' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>schemaTypeChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'schemaType' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>selectionEnforce</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Handles the selectionEnforce event. Fired if <a href="Autocomplete.html#config_forceSelection">forceSelection</a>
is enabled and the users input element has been cleared because it did not match one of the results.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>srcNodeChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'srcNode' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>stringsChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'strings' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>suppressInputUpdateChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'suppressInputUpdate' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>tabIndexChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'tabIndex' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>textboxBlur</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Handles the textboxBlur event. Fired when the user leaves the input element.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>textboxChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Handles the textboxChange event. Fired when the value in the input element is changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>textboxFocus</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Handles the textboxFocus event. Fired when user moves focus to the input element.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>textboxKey</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Handles the textboxKey event. Fired when the input element receives key input.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>typeAhead</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Handles the typeAhead event. Fired when the input element has been pre-filled by the type-ahead feature.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>typeAheadChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'typeAhead' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>typeAheadDelayChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'typeAheadDelay' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>uniqueNameChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'uniqueName' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>unmatchedItemSelect</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Handles the unmatchedItemSelect event. Fired when a user selects something that does
not match any of the displayed results.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>useARIAChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'useARIA' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>visibleChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'visible' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>widget:contentUpdate</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Notification event, which widget implementations can fire, when
they change the content of the widget. This event has no default
behavior and cannot be prevented, so the "on" or "after"
moments are effectively equivalent (with on listeners being invoked before 
after listeners).<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>widget:render</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Lifecycle event for the render phase, fired prior to rendering the UI 
for the widget (prior to invoking the widget's renderer method).
<p>
Subscribers to the "on" moment of this event, will be notified 
before the widget is rendered.
</p>
<p>
Subscribers to the "after" moment of this event, will be notified
after rendering is complete.
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>widthChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'width' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
    </events>
  </component>
  <component name="ButtonItem" module="aui-button-item" package="alloy" bodyContent="false" alloyComponent="true">
    <attributes>
      <attribute>
        <name>activeState</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Whether to track the active state of the button.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>boundingBox</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The outermost DOM node for the Widget, used for sizing and positioning 
of a Widget as well as a containing element for any decorator elements used 
for skinning.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>classNames</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.HashMap</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[An object map of the CSS class names to use for the different interaction states.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.HashMap","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>contentBox</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[A DOM node that is a direct descendant of a Widget's bounding box that 
houses its content.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>cssClass</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[CSS class to be automatically added to the <code>boundingBox</code>.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>defaultState</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[Whether to apply the default interaction state to the button<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>depth</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>-1</defaultValue>
        <description><![CDATA[Number representing the depth of this Widget relative to 
the root Widget in the object heirarchy.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"-1"}-->]]></description>
      </attribute>
      <attribute>
        <name>destroyed</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this object
has been through the destroy lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>disabled</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Boolean indicating if the Widget should be disabled. The disabled implementation
is left to the specific classes extending widget.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>focused</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Boolean indicating if the Widget, or one of its descendants, 
has focus.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>handler</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[An event callback to handle when a user interacts with the button.
This can either be a function that will be attached on click, or
an object map that accepts the following keys:
<code>{fn: // The function to execute
context: // The context to execute the function in
type: // The type of event to listen for (defaults to "click")
}</code><!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>height</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[String with units, or number, representing the height of the Widget. If a number is provided,
the default unit, defined by the Widgets DEF_UNIT, property is used.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>hideClass</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue>aui-helper-hidden</defaultValue>
        <description><![CDATA[css class added to hide the <code>boundingBox</code> when
<a href="Component.html#config_visible">visible</a> is set to
<code>false</code>.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false,"defaultValue":"aui-helper-hidden"}-->]]></description>
      </attribute>
      <attribute>
        <name>hoverState</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[Whether to track the hover interaction state of the button.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>icon</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The icon to use inside of the button. Possible values are:<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>iconNode</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[DOM Node to display the icon of the ButtonItem. If not
specified try to query using HTML_PARSER an element inside
boundingBox which matches <code>aui-button-icon</code>.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>id</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>index</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>0</defaultValue>
        <description><![CDATA[Number representing the Widget's ordinal position in its 
parent Widget.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0"}-->]]></description>
      </attribute>
      <attribute>
        <name>initialized</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this object
has been through the init lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>label</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Text to use inside of the button.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>labelNode</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[DOM Node to display the text of the ButtonItem. If not
specified try to query using HTML_PARSER an element inside
boundingBox which matches <code>aui-button-label</code>.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>parent</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Retrieves the parent of the Widget in the object hierarchy.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>render</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[If <code>true</code> the render phase will be autimatically invoked
preventing the <code>.render()</code> manual call.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>rendered</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this Widget
has been through the render lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>root</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Returns the root Widget in the object hierarchy.  If the
ROOT_TYPE property is set, the search for the root Widget will be 
constrained to parent Widgets of the specified type.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>selected</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>0</defaultValue>
        <description><![CDATA[Number indicating if the Widget is selected.  Possible 
values are:
<dl>
<dt>0</dt> <dd>(Default) Not selected</dd>
<dt>1</dt> <dd>Fully selected</dd>
<dt>2</dt> <dd>Partially selected</dd>
</dl><!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0"}-->]]></description>
      </attribute>
      <attribute>
        <name>srcNode</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The DOM node to parse for configuration values, passed to the Widget's HTML_PARSER definition<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>strings</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.HashMap</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Collection of strings used to label elements of the Widget's UI.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.HashMap","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>tabIndex</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>0</defaultValue>
        <description><![CDATA[Number (between -32767 to 32767) indicating the widget's 
position in the default tab flow.  The value is used to set the 
"tabIndex" attribute on the widget's bounding box.  Negative values allow
the widget to receive DOM focus programmatically (by calling the focus
method), while being removed from the default tab flow.  A value of 
null removes the "tabIndex" attribute from the widget's bounding box.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0"}-->]]></description>
      </attribute>
      <attribute>
        <name>title</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Text to use as the title attribute of the button.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>type</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue>button</defaultValue>
        <description><![CDATA[Button type.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false,"defaultValue":"button"}-->]]></description>
      </attribute>
      <attribute>
        <name>useARIA</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[Boolean indicating if use of the WAI-ARIA Roles and States should be
enabled for the Widget.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>visible</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[Boolean indicating weather or not the Widget is visible.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>width</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[String with units, or number, representing the width of the Widget. If a number is provided,
the default unit, defined by the Widgets DEF_UNIT, property is used.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
    </attributes>
    <events>
      <event>
        <name>activeStateChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'activeState' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>boundingBoxChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'boundingBox' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>classNamesChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'classNames' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>contentBoxChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'contentBox' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>cssClassChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'cssClass' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>defaultStateChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'defaultState' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>depthChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'depth' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>destroy</name>
        <type>java.lang.Object</type>
        <description><![CDATA[<p>
Lifecycle event for the destroy phase, 
fired prior to destruction. Invoking the preventDefault 
method on the event object provided to subscribers will 
prevent destruction from proceeding.
</p>
<p>
Subscribers to the "after" moment of this event, will be notified
after destruction is complete (and as a result cannot prevent
destruction).
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>destroyedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'destroyed' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>disabledChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'disabled' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>focusedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'focused' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>handlerChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'handler' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>heightChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'height' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>hideClassChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'hideClass' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>hoverStateChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'hoverState' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>iconChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'icon' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>iconNodeChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'iconNode' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>idChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'id' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>indexChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'index' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>init</name>
        <type>java.lang.Object</type>
        <description><![CDATA[<p>
Lifecycle event for the init phase, fired prior to initialization. 
Invoking the preventDefault() method on the event object provided 
to subscribers will prevent initialization from occuring.
</p>
<p>
Subscribers to the "after" momemt of this event, will be notified
after initialization of the object is complete (and therefore
cannot prevent initialization).
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>initializedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'initialized' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>labelChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'label' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>labelNodeChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'labelNode' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>parentChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'parent' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>renderChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'render' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>renderedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'rendered' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>rootChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'root' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>selectedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'selected' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>srcNodeChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'srcNode' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>stringsChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'strings' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>tabIndexChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'tabIndex' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>titleChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'title' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>typeChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'type' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>useARIAChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'useARIA' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>visibleChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'visible' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>widget:contentUpdate</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Notification event, which widget implementations can fire, when
they change the content of the widget. This event has no default
behavior and cannot be prevented, so the "on" or "after"
moments are effectively equivalent (with on listeners being invoked before 
after listeners).<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>widget:render</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Lifecycle event for the render phase, fired prior to rendering the UI 
for the widget (prior to invoking the widget's renderer method).
<p>
Subscribers to the "on" moment of this event, will be notified 
before the widget is rendered.
</p>
<p>
Subscribers to the "after" moment of this event, will be notified
after rendering is complete.
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>widthChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'width' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
    </events>
  </component>
  <component name="Calendar" module="aui-calendar" package="alloy" bodyContent="false" alloyComponent="true">
    <attributes>
      <attribute>
        <name>allowNone</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[Wheather displays the "none" link on the Calendar footer.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>blankDays</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[... If not
specified try to query using HTML_PARSER an element inside
contentBox which matches <code>aui-calendar-day-blank</code>.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>boundingBox</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The outermost DOM node for the Widget, used for sizing and positioning 
of a Widget as well as a containing element for any decorator elements used 
for skinning.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>contentBox</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[A DOM node that is a direct descendant of a Widget's bounding box that 
houses its content.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>currentDay</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>0</defaultValue>
        <description><![CDATA[Current day number.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0"}-->]]></description>
      </attribute>
      <attribute>
        <name>currentMonth</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>0</defaultValue>
        <description><![CDATA[Current month number.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0"}-->]]></description>
      </attribute>
      <attribute>
        <name>currentYear</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>0</defaultValue>
        <description><![CDATA[Current year number.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0"}-->]]></description>
      </attribute>
      <attribute>
        <name>customRenderer</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.HashMap</outputType>
        <defaultValue>{}</defaultValue>
        <description><![CDATA[An object of the form {rules:Object, filterFunction:Function},
providing  set of rules and a custom rendering function for 
customizing specific calendar cells.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.HashMap","required":false,"defaultValue":"{}"}-->]]></description>
      </attribute>
      <attribute>
        <name>date</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The date corresponding to the current calendar view. Always
normalized to the first of the month that contains the date
at assignment time. Used as the first date visible in the
calendar.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>dateFormat</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue>%m/%d/%Y</defaultValue>
        <description><![CDATA[The default date format string which can be overriden for
localization support. The format must be valid according to
<a href="DataType.Date.html">A.DataType.Date.format</a>.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false,"defaultValue":"%m/%d/%Y"}-->]]></description>
      </attribute>
      <attribute>
        <name>dates</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.ArrayList</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Dates which the calendar will show as selected by default.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.ArrayList","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>destroyed</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this object
has been through the destroy lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>disabled</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Boolean indicating if the Widget should be disabled. The disabled implementation
is left to the specific classes extending widget.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>disabledDatesRule</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The name of the rule which all disabled dates should match.
Either disabledDatesRule or enabledDatesRule should be specified,
or neither, but not both.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>enabledDatesRule</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The name of the rule which all enabled dates should match.
Either disabledDatesRule or enabledDatesRule should be specified,
or neither, but not both.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>firstDayOfWeek</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>0</defaultValue>
        <description><![CDATA[First day of the week: Sunday is 0, Monday is 1.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0"}-->]]></description>
      </attribute>
      <attribute>
        <name>focused</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Boolean indicating if the Widget, or one of its descendants, 
has focus.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>headerContentNode</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[... If not
specified try to query using HTML_PARSER an element inside
contentBox which matches <code>aui-calendar-hd</code>.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>headerRenderer</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Custom header renderer for the calendar.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>headerTitleNode</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[... If not
specified try to query using HTML_PARSER an element inside
contentBox which matches <code>aui-calendar-title</code>.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>height</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[String with units, or number, representing the height of the Widget. If a number is provided,
the default unit, defined by the Widgets DEF_UNIT, property is used.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>iconNextNode</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[... If not
specified try to query using HTML_PARSER an element inside
contentBox which matches <code>aui-calendar-prev</code>.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>iconPrevNode</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[... If not
specified try to query using HTML_PARSER an element inside
contentBox which matches <code>aui-calendar-prev</code>.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>id</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>initialized</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this object
has been through the init lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>maxDate</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Maximum allowable date. Values supported by the Date
constructor are supported.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>maximumDate</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The maximum date that can be displayed by the calendar. The calendar will not
allow dates later than this one to be set, and will reset any later date to
this date. Should be `null` if no maximum date is needed.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>minDate</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Minimum allowable date. Values supported by the Date
constructor are supported.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>minimumDate</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The minimum date that can be displayed by the calendar. The calendar will not
allow dates earlier than this one to be set, and will reset any earlier date to
this date. Should be `null` if no minimum date is needed.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>monthDays</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[... If not
specified try to query using HTML_PARSER an element inside
contentBox which matches <code>aui-calendar-day</code>.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>monthDaysNode</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[... If not
specified try to query using HTML_PARSER an element inside
contentBox which matches <code>aui-calendar-monthdays</code>.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>noneLinkNode</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[DOM node reference to be the "none" link of the Calendar. If not
specified try to query using HTML_PARSER an element inside
contentBox which matches <code>aui-calendar-title</code>.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>paddingDaysEnd</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[NodeList containing all the DOM elements for
each blank day. If not specified try to query using HTML_PARSER
an element inside contentBox which matches
<code>aui-calendar-day-blank</code>.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>paddingDaysStart</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[NodeList containing all the DOM elements for
each blank day. If not specified try to query using HTML_PARSER
an element inside contentBox which matches
<code>aui-calendar-day-blank</code>.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>render</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Whether or not to render the widget automatically after init, and optionally, to which parent node.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>rendered</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this Widget
has been through the render lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>selectMultipleDates</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Wether accepts to select multiple dates.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>selectedDates</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.ArrayList</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[A read-only attribute providing a list of currently selected dates.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.ArrayList","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>selectionMode</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue>single</defaultValue>
        <description><![CDATA[A setting specifying the type of selection the calendar allows.
Possible values include:
<ul>
<li>`single`</li> - One date at a time
<li>`multiple-sticky</li> - Multiple dates, selected one at a time (the dates "stick")
<li>`multiple`</li> - Multiple dates, selected with Ctrl/Meta keys for additional single
dates, and Shift key for date ranges.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false,"defaultValue":"single"}-->]]></description>
      </attribute>
      <attribute>
        <name>setValue</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[If true set the selected date with the correct
<a href="Calendar.html#config_dateFormat">dateFormat</a> to the
value of the input field which is hosting the Calendar.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>showNextMonth</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[A setting specifying whether to shows days from the next
month in the visible month's grid, if there are empty
cells available at the end.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>showOtherMonth</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[Wheather displays the days for the other months.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>showPrevMonth</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[A setting specifying whether to shows days from the previous
month in the visible month's grid, if there are empty preceding
cells available.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>showToday</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[Wheather displays the "today" link on the Calendar footer.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>srcNode</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The DOM node to parse for configuration values, passed to the Widget's HTML_PARSER definition<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>strings</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.HashMap</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Strings and properties derived from the internationalization packages
for the calendar.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.HashMap","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>tabIndex</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>0</defaultValue>
        <description><![CDATA[Number (between -32767 to 32767) indicating the widget's 
position in the default tab flow.  The value is used to set the 
"tabIndex" attribute on the widget's bounding box.  Negative values allow
the widget to receive DOM focus programmatically (by calling the focus
method), while being removed from the default tab flow.  A value of 
null removes the "tabIndex" attribute from the widget's bounding box.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0"}-->]]></description>
      </attribute>
      <attribute>
        <name>todayLinkNode</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[DOM node reference to be the "today" link of the Calendar. If not
specified try to query using HTML_PARSER an element inside
contentBox which matches <code>aui-calendar-title</code>.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>visible</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[Boolean indicating weather or not the Widget is visible.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>weekDays</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[... If not
specified try to query using HTML_PARSER an element inside
contentBox which matches <code>aui-calendar-week</code>.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>weekDaysNode</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[... If not
specified try to query using HTML_PARSER an element inside
contentBox which matches <code>aui-calendar-weekdays</code>.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>width</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[String with units, or number, representing the width of the Widget. If a number is provided,
the default unit, defined by the Widgets DEF_UNIT, property is used.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
    </attributes>
    <events>
      <event>
        <name>allowNoneChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'allowNone' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>blankDaysChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'blankDays' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>boundingBoxChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'boundingBox' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>contentBoxChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'contentBox' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>currentDayChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'currentDay' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>currentMonthChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'currentMonth' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>currentYearChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'currentYear' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>customRendererChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'customRenderer' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>dateChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'date' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>dateFormatChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'dateFormat' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>datesChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'dates' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>destroy</name>
        <type>java.lang.Object</type>
        <description><![CDATA[<p>
Lifecycle event for the destroy phase, 
fired prior to destruction. Invoking the preventDefault 
method on the event object provided to subscribers will 
prevent destruction from proceeding.
</p>
<p>
Subscribers to the "after" moment of this event, will be notified
after destruction is complete (and as a result cannot prevent
destruction).
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>destroyedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'destroyed' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>disabledChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'disabled' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>disabledDatesRuleChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'disabledDatesRule' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>enabledDatesRuleChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'enabledDatesRule' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>firstDayOfWeekChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'firstDayOfWeek' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>focusedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'focused' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>headerContentNodeChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'headerContentNode' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>headerRendererChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'headerRenderer' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>headerTitleNodeChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'headerTitleNode' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>heightChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'height' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>iconNextNodeChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'iconNextNode' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>iconPrevNodeChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'iconPrevNode' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>idChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'id' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>init</name>
        <type>java.lang.Object</type>
        <description><![CDATA[<p>
Lifecycle event for the init phase, fired prior to initialization. 
Invoking the preventDefault() method on the event object provided 
to subscribers will prevent initialization from occuring.
</p>
<p>
Subscribers to the "after" momemt of this event, will be notified
after initialization of the object is complete (and therefore
cannot prevent initialization).
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>initializedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'initialized' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>maxDateChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'maxDate' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>maximumDateChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'maximumDate' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>minDateChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'minDate' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>minimumDateChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'minimumDate' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>monthDaysChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'monthDays' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>monthDaysNodeChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'monthDaysNode' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>noneLinkNodeChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'noneLinkNode' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>paddingDaysEndChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'paddingDaysEnd' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>paddingDaysStartChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'paddingDaysStart' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>renderChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'render' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>renderedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'rendered' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>selectMultipleDatesChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'selectMultipleDates' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>selectedDatesChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'selectedDates' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>selectionModeChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'selectionMode' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>setValueChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'setValue' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>showNextMonthChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'showNextMonth' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>showOtherMonthChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'showOtherMonth' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>showPrevMonthChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'showPrevMonth' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>showTodayChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'showToday' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>srcNodeChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'srcNode' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>stringsChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'strings' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>tabIndexChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'tabIndex' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>todayLinkNodeChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'todayLinkNode' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>visibleChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'visible' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>weekDaysChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'weekDays' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>weekDaysNodeChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'weekDaysNode' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>widget:contentUpdate</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Notification event, which widget implementations can fire, when
they change the content of the widget. This event has no default
behavior and cannot be prevented, so the "on" or "after"
moments are effectively equivalent (with on listeners being invoked before 
after listeners).<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>widget:render</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Lifecycle event for the render phase, fired prior to rendering the UI 
for the widget (prior to invoking the widget's renderer method).
<p>
Subscribers to the "on" moment of this event, will be notified 
before the widget is rendered.
</p>
<p>
Subscribers to the "after" moment of this event, will be notified
after rendering is complete.
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>widthChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'width' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
    </events>
  </component>
  <component name="CharCounter" module="aui-char-counter" package="alloy" bodyContent="false" alloyComponent="true">
    <attributes>
      <attribute>
        <name>counter</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Node or Selector to display the information of the counter.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>destroyed</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this object
has been through the destroy lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>initialized</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this object
has been through the init lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>input</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Node or Selector for the input field. Required.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>maxLength</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>2147483647</defaultValue>
        <description><![CDATA[Max number of characters the <a
href="CharCounter.html#config_input">input</a> can have.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"2147483647"}-->]]></description>
      </attribute>
    </attributes>
    <events>
      <event>
        <name>counterChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'counter' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>destroy</name>
        <type>java.lang.Object</type>
        <description><![CDATA[<p>
Lifecycle event for the destroy phase, 
fired prior to destruction. Invoking the preventDefault 
method on the event object provided to subscribers will 
prevent destruction from proceeding.
</p>
<p>
Subscribers to the "after" moment of this event, will be notified
after destruction is complete (and as a result cannot prevent
destruction).
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>destroyedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'destroyed' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>init</name>
        <type>java.lang.Object</type>
        <description><![CDATA[<p>
Lifecycle event for the init phase, fired prior to initialization. 
Invoking the preventDefault() method on the event object provided 
to subscribers will prevent initialization from occuring.
</p>
<p>
Subscribers to the "after" momemt of this event, will be notified
after initialization of the object is complete (and therefore
cannot prevent initialization).
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>initializedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'initialized' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>inputChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'input' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>maxLengthChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'maxLength' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
    </events>
  </component>
  <component name="ColorPicker" module="aui-color-picker" package="alloy" bodyContent="false" alloyComponent="true">
    <attributes>
      <attribute>
        <name>align</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.HashMap</outputType>
        <defaultValue>{ node: null, points: [ TL, BL ] }</defaultValue>
        <description><![CDATA[Inherited from <a href="Overlay.html#config_align">Overlay</a>.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.HashMap","required":false,"defaultValue":"{ node: null, points: [ TL, BL ] }"}-->]]></description>
      </attribute>
      <attribute>
        <name>alignOn</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.ArrayList</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[An array of objects corresponding to the nodes and events that will sync the alignment of the widget.
The implementer can supply an array of objects, with each object having the following properties:
eventName: (string, required): The eventName to listen to.
node: (Y.Node, optional): The Y.Node that will fire the event (defaults to the boundingBox of the widget)
By default, this attribute consists of two objects which will cause the widget to re-align to the node that it is aligned to:
(1) Scrolling the window, and (2) resizing the window.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.ArrayList","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>bodyContent</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The content to be added to the body section. This will replace any existing content
in the body. If you want to append, or insert new content, use the <a href="#method_setStdModContent">setStdModContent</a> method.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>boundingBox</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The outermost DOM node for the Widget, used for sizing and positioning 
of a Widget as well as a containing element for any decorator elements used 
for skinning.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>cancellableHide</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[Cancel auto hide delay if the user interact with the Overlay
(focus, click, mouseover)<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>centered</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[A convenience attribute, which can be used as a shortcut for the align attribute.
If set to true, the Widget is centered in the viewport. If set to a node reference or valid selector string,
the Widget will be centered within the node. If set the false, no center positioning is applied.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>constrain</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The node to constrain the widget's bounding box to, when setting xy. Can also be
set to true, to constrain to the viewport.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>contentBox</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[A DOM node that is a direct descendant of a Widget's bounding box that 
houses its content.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>cssClass</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[CSS class to be automatically added to the <code>boundingBox</code>.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>currentNode</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[OverlayContext allow multiple elements to be the
<a href="OverlayContext.html#config_trigger">trigger</a>, the
currentNode stores the current active one.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>destroyed</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this object
has been through the destroy lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>disabled</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Boolean indicating if the Widget should be disabled. The disabled implementation
is left to the specific classes extending widget.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>fillHeight</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The section (WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER) which should be resized to fill the height of the standard module, when a 
height is set on the Widget. If a height is not set on the widget, then all sections are sized based on 
their content.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>focused</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Boolean indicating if the Widget, or one of its descendants, 
has focus.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>footerContent</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The content to be added to the footer section. This will replace any existing content
in the footer. If you want to append, or insert new content, use the <a href="#method_setStdModContent">setStdModContent</a> method.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>headerContent</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The content to be added to the header section. This will replace any existing content
in the header. If you want to append, or insert new content, use the <a href="#method_setStdModContent">setStdModContent</a> method.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>height</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[String with units, or number, representing the height of the Widget. If a number is provided,
the default unit, defined by the Widgets DEF_UNIT, property is used.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>hideClass</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue>aui-helper-hidden</defaultValue>
        <description><![CDATA[css class added to hide the <code>boundingBox</code> when
<a href="Component.html#config_visible">visible</a> is set to
<code>false</code>.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false,"defaultValue":"aui-helper-hidden"}-->]]></description>
      </attribute>
      <attribute>
        <name>hideDelay</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>0</defaultValue>
        <description><![CDATA[Number of milliseconds after the hide method is invoked to hide the
OverlayContext.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0"}-->]]></description>
      </attribute>
      <attribute>
        <name>hideOn</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue>mouseout</defaultValue>
        <description><![CDATA[The event which is responsible to hide the OverlayContext.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false,"defaultValue":"mouseout"}-->]]></description>
      </attribute>
      <attribute>
        <name>hideOnDocumentClick</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[If true the instance is registered on the
<a href="OverlayContextManager.html">OverlayContextManager</a> static
class and will be hide when the user click on document.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>id</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>initialized</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this object
has been through the init lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>preventOverlap</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[If set to true, and WidgetPositionAlign is also added to the Widget, 
constrained positioning will attempt to prevent the widget's bounding box from overlapping 
the element to which it has been aligned, by flipping the orientation of the alignment
for corner based alignments<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>render</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[If <code>true</code> the render phase will be autimatically invoked
preventing the <code>.render()</code> manual call.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>rendered</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this Widget
has been through the render lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>shim</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Boolean flag to indicate whether or not a shim should be added to the Widgets
boundingBox, to protect it from select box bleedthrough.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>showDelay</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>0</defaultValue>
        <description><![CDATA[Number of milliseconds after the show method is invoked to show the
OverlayContext.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0"}-->]]></description>
      </attribute>
      <attribute>
        <name>showOn</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue>mouseover</defaultValue>
        <description><![CDATA[The event which is responsible to show the OverlayContext.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false,"defaultValue":"mouseover"}-->]]></description>
      </attribute>
      <attribute>
        <name>srcNode</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The DOM node to parse for configuration values, passed to the Widget's HTML_PARSER definition<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>strings</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.HashMap</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Collection of strings used to label elements of the Widget's UI.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.HashMap","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>tabIndex</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>0</defaultValue>
        <description><![CDATA[Number (between -32767 to 32767) indicating the widget's 
position in the default tab flow.  The value is used to set the 
"tabIndex" attribute on the widget's bounding box.  Negative values allow
the widget to receive DOM focus programmatically (by calling the focus
method), while being removed from the default tab flow.  A value of 
null removes the "tabIndex" attribute from the widget's bounding box.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0"}-->]]></description>
      </attribute>
      <attribute>
        <name>trigger</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Node, NodeList or Selector which will be used as trigger elements
to show or hide the OverlayContext.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>useARIA</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[True if Overlay should use ARIA plugin<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>visible</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[If true the OverlayContext is visible by default after the render phase.
Inherited from <a href="Overlay.html">Overlay</a>.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>width</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[String with units, or number, representing the width of the Widget. If a number is provided,
the default unit, defined by the Widgets DEF_UNIT, property is used.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>x</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>0</defaultValue>
        <description><![CDATA[Page X co-ordinate for the widget. This attribute acts as a facade for the 
xy attribute. Changes in position can be monitored by listening for xyChange events.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0"}-->]]></description>
      </attribute>
      <attribute>
        <name>xy</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.ArrayList</outputType>
        <defaultValue>[0,0]</defaultValue>
        <description><![CDATA[Page XY co-ordinate pair for the widget.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.ArrayList","required":false,"defaultValue":"[0,0]"}-->]]></description>
      </attribute>
      <attribute>
        <name>y</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>0</defaultValue>
        <description><![CDATA[Page Y co-ordinate for the widget. This attribute acts as a facade for the 
xy attribute. Changes in position can be monitored by listening for xyChange events.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0"}-->]]></description>
      </attribute>
      <attribute>
        <name>zIndex</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>0</defaultValue>
        <description><![CDATA[The z-index to apply to the Widgets boundingBox. Non-numerical values for 
zIndex will be converted to 0<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0"}-->]]></description>
      </attribute>
    </attributes>
    <events>
      <event>
        <name>alignChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'align' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>alignOnChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'alignOn' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>bodyContentChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'bodyContent' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>boundingBoxChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'boundingBox' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>cancellableHideChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'cancellableHide' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>centeredChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'centered' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>constrainChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'constrain' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>contentBoxChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'contentBox' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>cssClassChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'cssClass' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>currentNodeChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'currentNode' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>destroy</name>
        <type>java.lang.Object</type>
        <description><![CDATA[<p>
Lifecycle event for the destroy phase, 
fired prior to destruction. Invoking the preventDefault 
method on the event object provided to subscribers will 
prevent destruction from proceeding.
</p>
<p>
Subscribers to the "after" moment of this event, will be notified
after destruction is complete (and as a result cannot prevent
destruction).
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>destroyedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'destroyed' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>disabledChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'disabled' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>fillHeightChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'fillHeight' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>focusedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'focused' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>footerContentChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'footerContent' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>headerContentChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'headerContent' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>heightChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'height' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>hideClassChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'hideClass' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>hideDelayChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'hideDelay' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>hideOnChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'hideOn' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>hideOnDocumentClickChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'hideOnDocumentClick' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>idChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'id' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>init</name>
        <type>java.lang.Object</type>
        <description><![CDATA[<p>
Lifecycle event for the init phase, fired prior to initialization. 
Invoking the preventDefault() method on the event object provided 
to subscribers will prevent initialization from occuring.
</p>
<p>
Subscribers to the "after" momemt of this event, will be notified
after initialization of the object is complete (and therefore
cannot prevent initialization).
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>initializedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'initialized' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>preventOverlapChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'preventOverlap' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>renderChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'render' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>renderedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'rendered' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>shimChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'shim' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>showDelayChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'showDelay' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>showOnChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'showOn' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>srcNodeChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'srcNode' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>stringsChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'strings' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>tabIndexChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'tabIndex' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>triggerChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'trigger' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>useARIAChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'useARIA' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>visibleChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'visible' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>widget:contentUpdate</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Notification event, which widget implementations can fire, when
they change the content of the widget. This event has no default
behavior and cannot be prevented, so the "on" or "after"
moments are effectively equivalent (with on listeners being invoked before 
after listeners).<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>widget:render</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Lifecycle event for the render phase, fired prior to rendering the UI 
for the widget (prior to invoking the widget's renderer method).
<p>
Subscribers to the "on" moment of this event, will be notified 
before the widget is rendered.
</p>
<p>
Subscribers to the "after" moment of this event, will be notified
after rendering is complete.
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>widthChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'width' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>xChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'x' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>xyChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'xy' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>yChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'y' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>zIndexChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'zIndex' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
    </events>
  </component>
  <component name="DatePickerSelect" module="aui-calendar" package="alloy" bodyContent="false" alloyComponent="true">
    <attributes>
      <attribute>
        <name>appendOrder</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.ArrayList</outputType>
        <defaultValue>[ 'm', 'd', 'y' ]</defaultValue>
        <description><![CDATA[The order the selects elements are appended to the
<a href="DatePickerSelect.html#config_srcNode">srcNode</a>.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.ArrayList","required":false,"defaultValue":"[ 'm', 'd', 'y' ]"}-->]]></description>
      </attribute>
      <attribute>
        <name>boundingBox</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The outermost DOM node for the Widget, used for sizing and positioning 
of a Widget as well as a containing element for any decorator elements used 
for skinning.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>buttonNode</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[DOM Node to display the button of the DatePickerSelect. If not
specified try to query using HTML_PARSER an element inside
contentBox which matches <code>aui-buttonitem</code>.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>calendar</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.HashMap</outputType>
        <defaultValue>{}</defaultValue>
        <description><![CDATA[<a href="Calendar.html">Calendar</a> configuration Object.</a><!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.HashMap","required":false,"defaultValue":"{}"}-->]]></description>
      </attribute>
      <attribute>
        <name>contentBox</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[A DOM node that is a direct descendant of a Widget's bounding box that 
houses its content.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>cssClass</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[CSS class to be automatically added to the <code>boundingBox</code>.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>dayNode</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[DOM Node to display the day of the DatePickerSelect. If not
specified try to query using HTML_PARSER an element inside
contentBox which matches <code>aui-datepicker-year</code>.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>dayNodeName</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue>day</defaultValue>
        <description><![CDATA[Name attribute used on the
<a href="DatePickerSelect.html#config_dayNode">dayNode</a>.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false,"defaultValue":"day"}-->]]></description>
      </attribute>
      <attribute>
        <name>destroyed</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this object
has been through the destroy lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>disabled</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Boolean indicating if the Widget should be disabled. The disabled implementation
is left to the specific classes extending widget.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>focused</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Boolean indicating if the Widget, or one of its descendants, 
has focus.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>formatter</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Function to format the array of the selected dates before set the
value of the input.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>height</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[String with units, or number, representing the height of the Widget. If a number is provided,
the default unit, defined by the Widgets DEF_UNIT, property is used.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>hideClass</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue>aui-helper-hidden</defaultValue>
        <description><![CDATA[css class added to hide the <code>boundingBox</code> when
<a href="Component.html#config_visible">visible</a> is set to
<code>false</code>.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false,"defaultValue":"aui-helper-hidden"}-->]]></description>
      </attribute>
      <attribute>
        <name>id</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>initialized</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this object
has been through the init lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>monthNode</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[DOM Node to display the month of the DatePickerSelect. If not
specified try to query using HTML_PARSER an element inside
contentBox which matches <code>aui-datepicker-year</code>.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>monthNodeName</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue>month</defaultValue>
        <description><![CDATA[Name attribute used on the
<a href="DatePickerSelect.html#config_monthNode">monthNode</a>.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false,"defaultValue":"month"}-->]]></description>
      </attribute>
      <attribute>
        <name>nullableDay</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[If true the select element for the day will be nullable<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>nullableMonth</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[If true the select element for the month will be nullable<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>nullableYear</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[If true the select element for the year will be nullable<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>populateDay</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[If true the select element for the days will be automatic
populated.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>populateMonth</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[If true the select element for the month will be automatic
populated.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>populateYear</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[If true the select element for the year will be automatic
populated.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>render</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[If <code>true</code> the render phase will be autimatically invoked
preventing the <code>.render()</code> manual call.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>rendered</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this Widget
has been through the render lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>selectWrapperNode</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[DOM Node to display the selects of the DatePickerSelect. If not
specified try to query using HTML_PARSER an element inside
contentBox which matches <code>aui-datepicker-select-wrapper</code>.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>setValue</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[If true set the selected date with the correct
<a href="Calendar.html#config_dateFormat">dateFormat</a> to the
value of the input field which is hosting the Calendar.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>srcNode</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The DOM node to parse for configuration values, passed to the Widget's HTML_PARSER definition<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>stack</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[If true is able to do stacking with another overlays.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>strings</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.HashMap</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Collection of strings used to label elements of the Widget's UI.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.HashMap","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>tabIndex</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>0</defaultValue>
        <description><![CDATA[Number (between -32767 to 32767) indicating the widget's 
position in the default tab flow.  The value is used to set the 
"tabIndex" attribute on the widget's bounding box.  Negative values allow
the widget to receive DOM focus programmatically (by calling the focus
method), while being removed from the default tab flow.  A value of 
null removes the "tabIndex" attribute from the widget's bounding box.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0"}-->]]></description>
      </attribute>
      <attribute>
        <name>trigger</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Trigger element to open the calendar. Inherited from
<a href="OverlayContext.html#config_trigger">OverlayContext</a>.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>useARIA</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[Boolean indicating if use of the WAI-ARIA Roles and States should be
enabled for the Widget.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>visible</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[Boolean indicating weather or not the Widget is visible.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>width</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[String with units, or number, representing the width of the Widget. If a number is provided,
the default unit, defined by the Widgets DEF_UNIT, property is used.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>yearNode</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[DOM Node to display the year of the DatePickerSelect. If not
specified try to query using HTML_PARSER an element inside
contentBox which matches <code>aui-datepicker-year</code>.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>yearNodeName</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue>year</defaultValue>
        <description><![CDATA[Name attribute used on the
<a href="DatePickerSelect.html#config_yearNode">yearNode</a>.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false,"defaultValue":"year"}-->]]></description>
      </attribute>
      <attribute>
        <name>yearRange</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.ArrayList</outputType>
        <defaultValue>[ year - 10, year + 10 ]</defaultValue>
        <description><![CDATA[Year range to be displayed on the year select element. By default
it displays from -10 to +10 years from the current year.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.ArrayList","required":false,"defaultValue":"[ year - 10, year + 10 ]"}-->]]></description>
      </attribute>
    </attributes>
    <events>
      <event>
        <name>appendOrderChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'appendOrder' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>boundingBoxChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'boundingBox' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>buttonNodeChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'buttonNode' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>calendarChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'calendar' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>contentBoxChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'contentBox' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>cssClassChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'cssClass' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>dayNodeChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'dayNode' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>dayNodeNameChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'dayNodeName' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>destroy</name>
        <type>java.lang.Object</type>
        <description><![CDATA[<p>
Lifecycle event for the destroy phase, 
fired prior to destruction. Invoking the preventDefault 
method on the event object provided to subscribers will 
prevent destruction from proceeding.
</p>
<p>
Subscribers to the "after" moment of this event, will be notified
after destruction is complete (and as a result cannot prevent
destruction).
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>destroyedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'destroyed' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>disabledChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'disabled' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>focusedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'focused' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>formatterChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'formatter' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>heightChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'height' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>hideClassChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'hideClass' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>idChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'id' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>init</name>
        <type>java.lang.Object</type>
        <description><![CDATA[<p>
Lifecycle event for the init phase, fired prior to initialization. 
Invoking the preventDefault() method on the event object provided 
to subscribers will prevent initialization from occuring.
</p>
<p>
Subscribers to the "after" momemt of this event, will be notified
after initialization of the object is complete (and therefore
cannot prevent initialization).
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>initializedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'initialized' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>monthNodeChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'monthNode' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>monthNodeNameChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'monthNodeName' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>nullableDayChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'nullableDay' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>nullableMonthChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'nullableMonth' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>nullableYearChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'nullableYear' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>populateDayChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'populateDay' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>populateMonthChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'populateMonth' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>populateYearChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'populateYear' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>renderChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'render' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>renderedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'rendered' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>selectWrapperNodeChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'selectWrapperNode' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>setValueChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'setValue' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>srcNodeChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'srcNode' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>stackChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'stack' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>stringsChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'strings' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>tabIndexChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'tabIndex' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>triggerChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'trigger' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>useARIAChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'useARIA' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>visibleChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'visible' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>widget:contentUpdate</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Notification event, which widget implementations can fire, when
they change the content of the widget. This event has no default
behavior and cannot be prevented, so the "on" or "after"
moments are effectively equivalent (with on listeners being invoked before 
after listeners).<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>widget:render</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Lifecycle event for the render phase, fired prior to rendering the UI 
for the widget (prior to invoking the widget's renderer method).
<p>
Subscribers to the "on" moment of this event, will be notified 
before the widget is rendered.
</p>
<p>
Subscribers to the "after" moment of this event, will be notified
after rendering is complete.
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>widthChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'width' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>yearNodeChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'yearNode' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>yearNodeNameChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'yearNodeName' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>yearRangeChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'yearRange' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
    </events>
  </component>
  <component name="Dialog" module="aui-dialog" package="alloy" bodyContent="false" alloyComponent="true">
    <attributes>
      <attribute>
        <name>align</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.HashMap</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.HashMap","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>alignOn</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.ArrayList</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[An array of objects corresponding to the nodes and events that will sync the alignment of the widget.
The implementer can supply an array of objects, with each object having the following properties:
eventName: (string, required): The eventName to listen to.
node: (Y.Node, optional): The Y.Node that will fire the event (defaults to the boundingBox of the widget)
By default, this attribute consists of two objects which will cause the widget to re-align to the node that it is aligned to:
(1) Scrolling the window, and (2) resizing the window.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.ArrayList","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>bodyContent</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[See <a href="WidgetStdMod.html#config_bodyContent">WidgetStdMod bodyContent</a>.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>boundingBox</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The outermost DOM node for the Widget, used for sizing and positioning 
of a Widget as well as a containing element for any decorator elements used 
for skinning.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>buttons</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.ArrayList</outputType>
        <defaultValue>[]</defaultValue>
        <description><![CDATA[<p>Array of object literals, each containing a set of properties
defining a button to be appended into the Dialog's footer. Each
button object in the buttons array can have two properties:</p>
<dl>
<dt>text:</dt>
<dd>
The text that will display on the face of the button. The text can include
HTML, as long as it is compliant with HTML Button specifications.
</dd>
<dt>handler:</dt>
<dd>
A reference to a function that should fire when the button is clicked.
(In this case scope of this function is always its Dialog instance.)
</dd>
</dl><!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.ArrayList","required":false,"defaultValue":"[]"}-->]]></description>
      </attribute>
      <attribute>
        <name>centered</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[A convenience attribute, which can be used as a shortcut for the align attribute.
If set to true, the Widget is centered in the viewport. If set to a node reference or valid selector string,
the Widget will be centered within the node. If set the false, no center positioning is applied.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>close</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[If <code>true</code> the close icon will be displayed on the
Dialog header.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>collapsed</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Whether the panel is displayed collapsed.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>collapsible</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Whether the panel is able to be collapsed.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>constrain</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The node to constrain the widget's bounding box to, when setting xy. Can also be
set to true, to constrain to the viewport.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>constrain2view</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.HashMap</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Will attempt to constrain the dialog to the boundaries of the
viewport region.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.HashMap","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>contentBox</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[A DOM node that is a direct descendant of a Widget's bounding box that 
houses its content.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>destroyOnClose</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Invoke the <a href="Dialog.html#method_destroy">destroy</a>
method when the dialog is closed (i.e., remove the Dialog
<code>boundingBox</code> from the body, purge events etc).<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>destroyed</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this object
has been through the destroy lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>disabled</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Boolean indicating if the Widget should be disabled. The disabled implementation
is left to the specific classes extending widget.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>dragConfig</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.HashMap</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Drag configuration.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.HashMap","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>dragInstance</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Stores the Drag instance for the <code>A.DD.Drag</code> used by
this Dialog.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>draggable</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[Boolean specifying if the Panel should be draggable.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>fillHeight</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The section (WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER) which should be resized to fill the height of the standard module, when a 
height is set on the Widget. If a height is not set on the widget, then all sections are sized based on 
their content.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>focused</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Boolean indicating if the Widget, or one of its descendants, 
has focus.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>footerContent</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The content to be added to the footer section. This will replace any existing content
in the footer. If you want to append, or insert new content, use the <a href="#method_setStdModContent">setStdModContent</a> method.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>headerContent</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The content to be added to the header section. This will replace any existing content
in the header. If you want to append, or insert new content, use the <a href="#method_setStdModContent">setStdModContent</a> method.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>height</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[String with units, or number, representing the height of the Widget. If a number is provided,
the default unit, defined by the Widgets DEF_UNIT, property is used.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>icons</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.ArrayList</outputType>
        <defaultValue>[]</defaultValue>
        <description><![CDATA[<p>Array of <a href="ButtonItem.html">ButtonItem</a> configuration objects to be displayed as icons
on the Panel title.</p>
Example:
<pre><code>icons: [ { icon: 'close', id: 'close' } ]</code></pre>
For more information how to use this option see
<a href="ButtonItem.html">ButtonItem</a>.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.ArrayList","required":false,"defaultValue":"[]"}-->]]></description>
      </attribute>
      <attribute>
        <name>id</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>initialized</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this object
has been through the init lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>modal</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[True if the Panel should be displayed in a modal fashion,
automatically creating a transparent mask over the document that
will not be removed until the Dialog is dismissed. Uses
<a href="OverlayMask.html">OverlayMask</a>.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>preventOverlap</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[If set to true, and WidgetPositionAlign is also added to the Widget, 
constrained positioning will attempt to prevent the widget's bounding box from overlapping 
the element to which it has been aligned, by flipping the orientation of the alignment
for corner based alignments<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>render</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Whether or not to render the widget automatically after init, and optionally, to which parent node.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>rendered</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this Widget
has been through the render lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>resizable</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[Boolean specifying if the Panel should be resizable.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>resizableConfig</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.HashMap</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Resize configuration.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.HashMap","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>resizableInstance</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Stores the Resize instance for the <code>A.Resize</code> used by
this Dialog.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>shim</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Boolean flag to indicate whether or not a shim should be added to the Widgets
boundingBox, to protect it from select box bleedthrough.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>srcNode</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The DOM node to parse for configuration values, passed to the Widget's HTML_PARSER definition<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>stack</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[If <code>true</code> give stacking habilities to the Dialog.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>strings</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.HashMap</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Collection of strings used to label elements of the Dialog's UI.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.HashMap","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>tabIndex</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>0</defaultValue>
        <description><![CDATA[Number (between -32767 to 32767) indicating the widget's 
position in the default tab flow.  The value is used to set the 
"tabIndex" attribute on the widget's bounding box.  Negative values allow
the widget to receive DOM focus programmatically (by calling the focus
method), while being removed from the default tab flow.  A value of 
null removes the "tabIndex" attribute from the widget's bounding box.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0"}-->]]></description>
      </attribute>
      <attribute>
        <name>title</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The title to be displayed on the Panel.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>useARIA</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[True if Panel should use ARIA plugin<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>visible</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[Boolean indicating weather or not the Widget is visible.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>width</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[String with units, or number, representing the width of the Widget. If a number is provided,
the default unit, defined by the Widgets DEF_UNIT, property is used.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>x</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>0</defaultValue>
        <description><![CDATA[Page X co-ordinate for the widget. This attribute acts as a facade for the 
xy attribute. Changes in position can be monitored by listening for xyChange events.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0"}-->]]></description>
      </attribute>
      <attribute>
        <name>xy</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.ArrayList</outputType>
        <defaultValue>[0,0]</defaultValue>
        <description><![CDATA[Page XY co-ordinate pair for the widget.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.ArrayList","required":false,"defaultValue":"[0,0]"}-->]]></description>
      </attribute>
      <attribute>
        <name>y</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>0</defaultValue>
        <description><![CDATA[Page Y co-ordinate for the widget. This attribute acts as a facade for the 
xy attribute. Changes in position can be monitored by listening for xyChange events.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0"}-->]]></description>
      </attribute>
      <attribute>
        <name>zIndex</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>0</defaultValue>
        <description><![CDATA[The z-index to apply to the Widgets boundingBox. Non-numerical values for 
zIndex will be converted to 0<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0"}-->]]></description>
      </attribute>
    </attributes>
    <events>
      <event>
        <name>alignChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'align' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>alignOnChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'alignOn' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>bodyContentChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'bodyContent' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>boundingBoxChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'boundingBox' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>buttonsChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'buttons' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>centeredChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'centered' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>closeChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'close' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>collapsedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'collapsed' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>collapsibleChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'collapsible' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>constrain2viewChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'constrain2view' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>constrainChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'constrain' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>contentBoxChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'contentBox' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>destroy</name>
        <type>java.lang.Object</type>
        <description><![CDATA[<p>
Lifecycle event for the destroy phase, 
fired prior to destruction. Invoking the preventDefault 
method on the event object provided to subscribers will 
prevent destruction from proceeding.
</p>
<p>
Subscribers to the "after" moment of this event, will be notified
after destruction is complete (and as a result cannot prevent
destruction).
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>destroyOnCloseChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'destroyOnClose' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>destroyedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'destroyed' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>disabledChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'disabled' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>dragConfigChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'dragConfig' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>dragInstanceChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'dragInstance' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>draggableChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'draggable' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>fillHeightChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'fillHeight' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>focusedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'focused' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>footerContentChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'footerContent' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>headerContentChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'headerContent' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>heightChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'height' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>iconsChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'icons' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>idChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'id' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>init</name>
        <type>java.lang.Object</type>
        <description><![CDATA[<p>
Lifecycle event for the init phase, fired prior to initialization. 
Invoking the preventDefault() method on the event object provided 
to subscribers will prevent initialization from occuring.
</p>
<p>
Subscribers to the "after" momemt of this event, will be notified
after initialization of the object is complete (and therefore
cannot prevent initialization).
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>initializedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'initialized' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>modalChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'modal' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>preventOverlapChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'preventOverlap' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>renderChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'render' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>renderedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'rendered' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>resizableChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'resizable' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>resizableConfigChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'resizableConfig' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>resizableInstanceChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'resizableInstance' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>shimChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'shim' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>srcNodeChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'srcNode' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>stackChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'stack' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>stringsChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'strings' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>tabIndexChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'tabIndex' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>titleChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'title' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>useARIAChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'useARIA' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>visibleChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'visible' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>widget:contentUpdate</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Notification event, which widget implementations can fire, when
they change the content of the widget. This event has no default
behavior and cannot be prevented, so the "on" or "after"
moments are effectively equivalent (with on listeners being invoked before 
after listeners).<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>widget:render</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Lifecycle event for the render phase, fired prior to rendering the UI 
for the widget (prior to invoking the widget's renderer method).
<p>
Subscribers to the "on" moment of this event, will be notified 
before the widget is rendered.
</p>
<p>
Subscribers to the "after" moment of this event, will be notified
after rendering is complete.
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>widthChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'width' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>xChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'x' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>xyChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'xy' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>yChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'y' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>zIndexChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'zIndex' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
    </events>
  </component>
  <component name="Editable" module="aui-editable" package="alloy" bodyContent="false" alloyComponent="true">
    <attributes>
      <attribute>
        <name>boundingBox</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The outermost DOM node for the Widget, used for sizing and positioning 
of a Widget as well as a containing element for any decorator elements used 
for skinning.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>cancelButton</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[<a href="ButtonItem.html">ButtonItem</a> constructor Object for the
cancelButton.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>contentBox</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[A DOM node that is a direct descendant of a Widget's bounding box that 
houses its content.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>contentText</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Content text.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>cssClass</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[CSS class to be automatically added to the <code>boundingBox</code>.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>destroyed</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this object
has been through the destroy lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>disabled</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Boolean indicating if the Widget should be disabled. The disabled implementation
is left to the specific classes extending widget.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>eventType</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue>click</defaultValue>
        <description><![CDATA[Event type to initialize the editable.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false,"defaultValue":"click"}-->]]></description>
      </attribute>
      <attribute>
        <name>focused</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Boolean indicating if the Widget, or one of its descendants, 
has focus.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>formatInput</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Function to format the input text displayed on the input.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>formatOutput</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Function to format the output text displayed on the input.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>height</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[String with units, or number, representing the height of the Widget. If a number is provided,
the default unit, defined by the Widgets DEF_UNIT, property is used.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>hideClass</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue>aui-helper-hidden</defaultValue>
        <description><![CDATA[css class added to hide the <code>boundingBox</code> when
<a href="Component.html#config_visible">visible</a> is set to
<code>false</code>.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false,"defaultValue":"aui-helper-hidden"}-->]]></description>
      </attribute>
      <attribute>
        <name>icons</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.ArrayList</outputType>
        <defaultValue>[]</defaultValue>
        <description><![CDATA[Array with icons for the <a href="Toolbar.html">Toolbar</a>.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.ArrayList","required":false,"defaultValue":"[]"}-->]]></description>
      </attribute>
      <attribute>
        <name>id</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>initialized</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this object
has been through the init lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>inputType</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue>text</defaultValue>
        <description><![CDATA[Type of the input used to edit the <a
href="Editable.html#config_node">node</a>.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false,"defaultValue":"text"}-->]]></description>
      </attribute>
      <attribute>
        <name>node</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Node to setup the editable.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>render</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[If <code>true</code> the render phase will be autimatically invoked
preventing the <code>.render()</code> manual call.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>renderTo</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Node to render the editable.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>rendered</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this Widget
has been through the render lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>saveButton</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[<a href="ButtonItem.html">ButtonItem</a> constructor Object for the
saveButton.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>srcNode</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The DOM node to parse for configuration values, passed to the Widget's HTML_PARSER definition<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>strings</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.HashMap</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Collection of strings used to label elements of the Widget's UI.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.HashMap","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>tabIndex</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>0</defaultValue>
        <description><![CDATA[Number (between -32767 to 32767) indicating the widget's 
position in the default tab flow.  The value is used to set the 
"tabIndex" attribute on the widget's bounding box.  Negative values allow
the widget to receive DOM focus programmatically (by calling the focus
method), while being removed from the default tab flow.  A value of 
null removes the "tabIndex" attribute from the widget's bounding box.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0"}-->]]></description>
      </attribute>
      <attribute>
        <name>useARIA</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[Boolean indicating if use of the WAI-ARIA Roles and States should be
enabled for the Widget.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>visible</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[Boolean indicating weather or not the Widget is visible.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>width</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[String with units, or number, representing the width of the Widget. If a number is provided,
the default unit, defined by the Widgets DEF_UNIT, property is used.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
    </attributes>
    <events>
      <event>
        <name>boundingBoxChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'boundingBox' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>cancel</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Handles the cancel event.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>cancelButtonChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'cancelButton' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>contentBoxChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'contentBox' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>contentTextChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'contentText' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>cssClassChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'cssClass' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>destroy</name>
        <type>java.lang.Object</type>
        <description><![CDATA[<p>
Lifecycle event for the destroy phase, 
fired prior to destruction. Invoking the preventDefault 
method on the event object provided to subscribers will 
prevent destruction from proceeding.
</p>
<p>
Subscribers to the "after" moment of this event, will be notified
after destruction is complete (and as a result cannot prevent
destruction).
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>destroyedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'destroyed' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>disabledChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'disabled' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>eventTypeChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'eventType' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>focusedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'focused' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>formatInputChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'formatInput' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>formatOutputChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'formatOutput' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>heightChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'height' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>hideClassChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'hideClass' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>iconsChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'icons' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>idChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'id' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>init</name>
        <type>java.lang.Object</type>
        <description><![CDATA[<p>
Lifecycle event for the init phase, fired prior to initialization. 
Invoking the preventDefault() method on the event object provided 
to subscribers will prevent initialization from occuring.
</p>
<p>
Subscribers to the "after" momemt of this event, will be notified
after initialization of the object is complete (and therefore
cannot prevent initialization).
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>initializedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'initialized' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>inputTypeChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'inputType' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>nodeChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'node' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>renderChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'render' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>renderToChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'renderTo' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>renderedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'rendered' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>save</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Handles the save event.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>saveButtonChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'saveButton' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>srcNodeChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'srcNode' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>startEditing</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Handles the startEditing event.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>stopEditing</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Handles the stopEditing event.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>stringsChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'strings' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>tabIndexChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'tabIndex' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>useARIAChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'useARIA' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>visibleChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'visible' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>widget:contentUpdate</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Notification event, which widget implementations can fire, when
they change the content of the widget. This event has no default
behavior and cannot be prevented, so the "on" or "after"
moments are effectively equivalent (with on listeners being invoked before 
after listeners).<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>widget:render</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Lifecycle event for the render phase, fired prior to rendering the UI 
for the widget (prior to invoking the widget's renderer method).
<p>
Subscribers to the "on" moment of this event, will be notified 
before the widget is rendered.
</p>
<p>
Subscribers to the "after" moment of this event, will be notified
after rendering is complete.
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>widthChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'width' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
    </events>
  </component>
  <component name="IORequest" module="aui-io" package="alloy" bodyContent="false" alloyComponent="true">
    <attributes>
      <attribute>
        <name>active</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Whether the transaction is active or not.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>arguments</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.HashMap</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[See <a href="http://developer.yahoo.com/yui/3/io/#configuration">IO
Configuration</a>.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.HashMap","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>autoLoad</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[If <code>true</code> invoke the
<a href="IORequest.html#method_start">start</a> method automatically,
initializing the IO transaction.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>cache</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[If <code>false</code> the current timestamp will be appended to the
url, avoiding the url to be cached.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>cfg</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Object containing all the
<a href="io.html#configattributes">IO Configuration Attributes</a>.
This Object is passed to the <code>A.io</code> internally.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>context</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.HashMap</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[See <a href="http://developer.yahoo.com/yui/3/io/#configuration">IO
Configuration</a>.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.HashMap","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>data</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.HashMap</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[See <a href="http://developer.yahoo.com/yui/3/io/#configuration">IO
Configuration</a>.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.HashMap","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>dataType</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The type of the request (i.e., could be xml, json, javascript, text).<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>destroyed</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this object
has been through the destroy lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>form</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.HashMap</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[See <a href="http://developer.yahoo.com/yui/3/io/#configuration">IO
Configuration</a>.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.HashMap","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>headers</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.HashMap</outputType>
        <defaultValue>{}</defaultValue>
        <description><![CDATA[Set the correct ACCEPT header based on the dataType.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.HashMap","required":false,"defaultValue":"{}"}-->]]></description>
      </attribute>
      <attribute>
        <name>host</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The plugin's host object.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>initialized</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this object
has been through the init lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>method</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[See <a href="http://developer.yahoo.com/yui/3/io/#configuration">IO
Configuration</a>.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>responseData</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[This is a normalized attribute for the response data. It's useful
to retrieve the correct type for the
<a href="IORequest.html#config_dataType">dataType</a> (i.e., in json
requests the <code>responseData</code>) is a JSONObject.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>selector</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[A selector to be used to query against the response of the
request. Only works if the response is XML or HTML.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>sync</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[See <a href="http://developer.yahoo.com/yui/3/io/#configuration">IO
Configuration</a>.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>timeout</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>0</defaultValue>
        <description><![CDATA[See <a href="http://developer.yahoo.com/yui/3/io/#configuration">IO
Configuration</a>.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0"}-->]]></description>
      </attribute>
      <attribute>
        <name>transaction</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.HashMap</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Stores the IO Object of the current transaction.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.HashMap","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>uri</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[URI to be requested using AJAX.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>xdr</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.HashMap</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[See <a href="http://developer.yahoo.com/yui/3/io/#configuration">IO
Configuration</a>.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.HashMap","required":false}-->]]></description>
      </attribute>
    </attributes>
    <events>
      <event>
        <name>activeChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'active' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>argumentsChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'arguments' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>autoLoadChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'autoLoad' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>cacheChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'cache' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>cfgChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'cfg' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>contextChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'context' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>dataChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'data' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>dataTypeChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'dataType' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>destroy</name>
        <type>java.lang.Object</type>
        <description><![CDATA[<p>
Lifecycle event for the destroy phase, 
fired prior to destruction. Invoking the preventDefault 
method on the event object provided to subscribers will 
prevent destruction from proceeding.
</p>
<p>
Subscribers to the "after" moment of this event, will be notified
after destruction is complete (and as a result cannot prevent
destruction).
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>destroyedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'destroyed' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>formChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'form' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>headersChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'headers' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>hostChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'host' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>init</name>
        <type>java.lang.Object</type>
        <description><![CDATA[<p>
Lifecycle event for the init phase, fired prior to initialization. 
Invoking the preventDefault() method on the event object provided 
to subscribers will prevent initialization from occuring.
</p>
<p>
Subscribers to the "after" momemt of this event, will be notified
after initialization of the object is complete (and therefore
cannot prevent initialization).
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>initializedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'initialized' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>methodChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'method' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>responseDataChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'responseData' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>selectorChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'selector' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>syncChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'sync' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>timeoutChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'timeout' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>transactionChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'transaction' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>uriChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'uri' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>xdrChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'xdr' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
    </events>
  </component>
  <component name="ImageGallery" module="aui-image-viewer" package="alloy" bodyContent="false" alloyComponent="true">
    <attributes>
      <attribute>
        <name>align</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.HashMap</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.HashMap","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>alignOn</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.ArrayList</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[An array of objects corresponding to the nodes and events that will sync the alignment of the widget.
The implementer can supply an array of objects, with each object having the following properties:
eventName: (string, required): The eventName to listen to.
node: (Y.Node, optional): The Y.Node that will fire the event (defaults to the boundingBox of the widget)
By default, this attribute consists of two objects which will cause the widget to re-align to the node that it is aligned to:
(1) Scrolling the window, and (2) resizing the window.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.ArrayList","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>anim</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[If <code>true</code> the navigation is animated.<!--{"event":true,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>arrowLeftEl</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The element to be used as arrow left.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>arrowRightEl</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The element to be used as arrow right.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>autoPlay</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[If <code>true</code> the slide show will be played when the
ImageGallery is displayed.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>bodyContent</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The content to be added to the body section. This will replace any existing content
in the body. If you want to append, or insert new content, use the <a href="#method_setStdModContent">setStdModContent</a> method.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>boundingBox</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The outermost DOM node for the Widget, used for sizing and positioning 
of a Widget as well as a containing element for any decorator elements used 
for skinning.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>caption</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The caption of the displayed image.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>captionEl</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The element to be used as caption.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>captionFromTitle</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[If <code>true</code> the <a
href="ImageViewer.html#config_caption">caption</a> will be pulled
from the title DOM attribute.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>centered</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[If <code>true</code> the Overlay with the image will be positioned
on the center of the viewport.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>closeEl</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The element to be used as close.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>constrain</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The node to constrain the widget's bounding box to, when setting xy. Can also be
set to true, to constrain to the viewport.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>contentBox</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[A DOM node that is a direct descendant of a Widget's bounding box that 
houses its content.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>cssClass</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[CSS class to be automatically added to the <code>boundingBox</code>.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>currentIndex</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>0</defaultValue>
        <description><![CDATA[Index of the current image.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0"}-->]]></description>
      </attribute>
      <attribute>
        <name>delay</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>7000</defaultValue>
        <description><![CDATA[Delay in milliseconds to change to the next image.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"7000"}-->]]></description>
      </attribute>
      <attribute>
        <name>destroyed</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this object
has been through the destroy lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>disabled</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Boolean indicating if the Widget should be disabled. The disabled implementation
is left to the specific classes extending widget.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>fillHeight</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The section (WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER) which should be resized to fill the height of the standard module, when a 
height is set on the Widget. If a height is not set on the widget, then all sections are sized based on 
their content.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>focused</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Boolean indicating if the Widget, or one of its descendants, 
has focus.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>footerContent</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The content to be added to the footer section. This will replace any existing content
in the footer. If you want to append, or insert new content, use the <a href="#method_setStdModContent">setStdModContent</a> method.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>headerContent</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The content to be added to the header section. This will replace any existing content
in the header. If you want to append, or insert new content, use the <a href="#method_setStdModContent">setStdModContent</a> method.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>height</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[String with units, or number, representing the height of the Widget. If a number is provided,
the default unit, defined by the Widgets DEF_UNIT, property is used.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>hideClass</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue>aui-helper-hidden</defaultValue>
        <description><![CDATA[css class added to hide the <code>boundingBox</code> when
<a href="Component.html#config_visible">visible</a> is set to
<code>false</code>.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false,"defaultValue":"aui-helper-hidden"}-->]]></description>
      </attribute>
      <attribute>
        <name>id</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>image</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Image node element used to load the images.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>imageAnim</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.HashMap</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Configuration attributes passed to the <a href="Anim.html">Anim</a>
class.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.HashMap","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>infoEl</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The element to be used as info.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>infoTemplate</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue>Image {current} of {total}</defaultValue>
        <description><![CDATA[String template used to display the information.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false,"defaultValue":"Image {current} of {total}"}-->]]></description>
      </attribute>
      <attribute>
        <name>initialized</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this object
has been through the init lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>links</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Selector or NodeList containing the links where the ImageViewer
extracts the information to generate the thumbnails.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>loader</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[HTML element to house the <code>img</code> which is being loaded.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>loading</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Whether the image is during a loading state.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>loadingEl</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The element to be used as loading.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>maxHeight</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>2147483647</defaultValue>
        <description><![CDATA[The maximum height of the element<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"2147483647"}-->]]></description>
      </attribute>
      <attribute>
        <name>maxWidth</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>2147483647</defaultValue>
        <description><![CDATA[The maximum width of the element<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"2147483647"}-->]]></description>
      </attribute>
      <attribute>
        <name>modal</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue>{ opacity: .8, background: '#000' }</defaultValue>
        <description><![CDATA[Displays the modal <a href="OverlayMask.html">OverlayMask</a> on
the viewport. Set to <code>false</code> to disable.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false,"defaultValue":"{ opacity: .8, background: '#000' }"}-->]]></description>
      </attribute>
      <attribute>
        <name>paginator</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.HashMap</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[<a href="Paginator.html">Paginator</a> configuration Object. The
<code>Paginator</code> handles the thumbnails control.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.HashMap","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>paginatorEl</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Element which contains the <a href="Paginator.html">Paginator</a>
with the thumbnails.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>paginatorInstance</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Stores the <a href="Paginator.html">Paginator</a> instance.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>paused</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[If <code>true</code> the slide show is paused.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>pausedLabel</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Label to display when the slide show is paused.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>playing</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[If <code>true</code> the slide show is playing.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>playingLabel</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue>(Playing)</defaultValue>
        <description><![CDATA[Label to display when the slide show is playing.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false,"defaultValue":"(Playing)"}-->]]></description>
      </attribute>
      <attribute>
        <name>preloadAllImages</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Preload all images grabbed from the <a
href="ImageViewer.html#config_links">links</a> attribute.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>preventOverlap</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[If set to true, and WidgetPositionAlign is also added to the Widget, 
constrained positioning will attempt to prevent the widget's bounding box from overlapping 
the element to which it has been aligned, by flipping the orientation of the alignment
for corner based alignments<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>render</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[If <code>true</code> the render phase will be autimatically invoked
preventing the <code>.render()</code> manual call.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>rendered</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this Widget
has been through the render lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>repeat</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[Restart the navigation when reach the last element.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>shim</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Boolean flag to indicate whether or not a shim should be added to the Widgets
boundingBox, to protect it from select box bleedthrough.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>showArrows</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[Show the arrow controls.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>showClose</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[Show close icon control.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>showPlayer</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[Show the player controls (i.e., pause and show buttons).<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>srcNode</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The DOM node to parse for configuration values, passed to the Widget's HTML_PARSER definition<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>strings</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.HashMap</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Collection of strings used to label elements of the Widget's UI.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.HashMap","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>tabIndex</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>0</defaultValue>
        <description><![CDATA[Number (between -32767 to 32767) indicating the widget's 
position in the default tab flow.  The value is used to set the 
"tabIndex" attribute on the widget's bounding box.  Negative values allow
the widget to receive DOM focus programmatically (by calling the focus
method), while being removed from the default tab flow.  A value of 
null removes the "tabIndex" attribute from the widget's bounding box.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0"}-->]]></description>
      </attribute>
      <attribute>
        <name>toolbar</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[<a href="Toolbar.html">Toolbar</a> with a play, and pause buttons.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>totalLinks</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[Helper attribute to get the <code>size</code> of the <a
href="ImageViewer.html#config_links">links</a> NodeList.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>useARIA</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[Boolean indicating if use of the WAI-ARIA Roles and States should be
enabled for the Widget.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>useOriginalImage</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[If <code>true</code> will use the original image as thumbnails.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>visible</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[Boolean indicating weather or not the Widget is visible.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>width</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[String with units, or number, representing the width of the Widget. If a number is provided,
the default unit, defined by the Widgets DEF_UNIT, property is used.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>x</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>0</defaultValue>
        <description><![CDATA[Page X co-ordinate for the widget. This attribute acts as a facade for the 
xy attribute. Changes in position can be monitored by listening for xyChange events.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0"}-->]]></description>
      </attribute>
      <attribute>
        <name>xy</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.ArrayList</outputType>
        <defaultValue>[0,0]</defaultValue>
        <description><![CDATA[Page XY co-ordinate pair for the widget.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.ArrayList","required":false,"defaultValue":"[0,0]"}-->]]></description>
      </attribute>
      <attribute>
        <name>y</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>0</defaultValue>
        <description><![CDATA[Page Y co-ordinate for the widget. This attribute acts as a facade for the 
xy attribute. Changes in position can be monitored by listening for xyChange events.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0"}-->]]></description>
      </attribute>
      <attribute>
        <name>zIndex</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>0</defaultValue>
        <description><![CDATA[The z-index to apply to the Widgets boundingBox. Non-numerical values for 
zIndex will be converted to 0<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0"}-->]]></description>
      </attribute>
    </attributes>
    <events>
      <event>
        <name>alignChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'align' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>alignOnChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'alignOn' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>anim</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Handles the anim event. Fired when the image anim ends.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>animChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'anim' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>arrowLeftElChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'arrowLeftEl' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>arrowRightElChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'arrowRightEl' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>autoPlayChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'autoPlay' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>bodyContentChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'bodyContent' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>boundingBoxChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'boundingBox' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>captionChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'caption' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>captionElChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'captionEl' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>captionFromTitleChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'captionFromTitle' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>centeredChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'centered' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>closeElChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'closeEl' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>constrainChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'constrain' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>contentBoxChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'contentBox' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>cssClassChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'cssClass' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>currentIndexChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'currentIndex' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>delayChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'delay' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>destroy</name>
        <type>java.lang.Object</type>
        <description><![CDATA[<p>
Lifecycle event for the destroy phase, 
fired prior to destruction. Invoking the preventDefault 
method on the event object provided to subscribers will 
prevent destruction from proceeding.
</p>
<p>
Subscribers to the "after" moment of this event, will be notified
after destruction is complete (and as a result cannot prevent
destruction).
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>destroyedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'destroyed' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>disabledChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'disabled' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>fillHeightChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'fillHeight' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>focusedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'focused' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>footerContentChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'footerContent' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>headerContentChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'headerContent' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>heightChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'height' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>hideClassChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'hideClass' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>idChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'id' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>imageAnimChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'imageAnim' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>imageChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'image' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>infoElChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'infoEl' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>infoTemplateChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'infoTemplate' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>init</name>
        <type>java.lang.Object</type>
        <description><![CDATA[<p>
Lifecycle event for the init phase, fired prior to initialization. 
Invoking the preventDefault() method on the event object provided 
to subscribers will prevent initialization from occuring.
</p>
<p>
Subscribers to the "after" momemt of this event, will be notified
after initialization of the object is complete (and therefore
cannot prevent initialization).
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>initializedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'initialized' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>linksChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'links' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>load</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Handles the load event. Fired when a image is laoded.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>loaderChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'loader' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>loadingChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'loading' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>loadingElChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'loadingEl' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>maxHeightChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'maxHeight' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>maxWidthChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'maxWidth' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>modalChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'modal' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>paginatorChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'paginator' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>paginatorElChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'paginatorEl' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>paginatorInstanceChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'paginatorInstance' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>pausedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'paused' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>pausedLabelChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'pausedLabel' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>playingChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'playing' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>playingLabelChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'playingLabel' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>preloadAllImagesChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'preloadAllImages' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>preventOverlapChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'preventOverlap' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>renderChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'render' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>renderedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'rendered' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>repeatChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'repeat' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>request</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Handles the request event. Fired when a image is requested.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>shimChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'shim' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>showArrowsChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'showArrows' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>showCloseChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'showClose' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>showPlayerChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'showPlayer' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>srcNodeChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'srcNode' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>stringsChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'strings' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>tabIndexChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'tabIndex' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>toolbarChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'toolbar' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>totalLinksChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'totalLinks' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>useARIAChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'useARIA' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>useOriginalImageChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'useOriginalImage' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>visibleChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'visible' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>widget:contentUpdate</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Notification event, which widget implementations can fire, when
they change the content of the widget. This event has no default
behavior and cannot be prevented, so the "on" or "after"
moments are effectively equivalent (with on listeners being invoked before 
after listeners).<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>widget:render</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Lifecycle event for the render phase, fired prior to rendering the UI 
for the widget (prior to invoking the widget's renderer method).
<p>
Subscribers to the "on" moment of this event, will be notified 
before the widget is rendered.
</p>
<p>
Subscribers to the "after" moment of this event, will be notified
after rendering is complete.
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>widthChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'width' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>xChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'x' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>xyChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'xy' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>yChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'y' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>zIndexChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'zIndex' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
    </events>
  </component>
  <component name="ImageViewer" module="aui-image-viewer" package="alloy" bodyContent="false" alloyComponent="true">
    <attributes>
      <attribute>
        <name>align</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.HashMap</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.HashMap","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>alignOn</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.ArrayList</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[An array of objects corresponding to the nodes and events that will sync the alignment of the widget.
The implementer can supply an array of objects, with each object having the following properties:
eventName: (string, required): The eventName to listen to.
node: (Y.Node, optional): The Y.Node that will fire the event (defaults to the boundingBox of the widget)
By default, this attribute consists of two objects which will cause the widget to re-align to the node that it is aligned to:
(1) Scrolling the window, and (2) resizing the window.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.ArrayList","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>anim</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[If <code>true</code> the navigation is animated.<!--{"event":true,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>arrowLeftEl</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The element to be used as arrow left.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>arrowRightEl</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The element to be used as arrow right.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>bodyContent</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The content to be added to the body section. This will replace any existing content
in the body. If you want to append, or insert new content, use the <a href="#method_setStdModContent">setStdModContent</a> method.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>boundingBox</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The outermost DOM node for the Widget, used for sizing and positioning 
of a Widget as well as a containing element for any decorator elements used 
for skinning.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>caption</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The caption of the displayed image.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>captionEl</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The element to be used as caption.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>captionFromTitle</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[If <code>true</code> the <a
href="ImageViewer.html#config_caption">caption</a> will be pulled
from the title DOM attribute.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>centered</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[If <code>true</code> the Overlay with the image will be positioned
on the center of the viewport.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>closeEl</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The element to be used as close.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>constrain</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The node to constrain the widget's bounding box to, when setting xy. Can also be
set to true, to constrain to the viewport.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>contentBox</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[A DOM node that is a direct descendant of a Widget's bounding box that 
houses its content.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>cssClass</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[CSS class to be automatically added to the <code>boundingBox</code>.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>currentIndex</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>0</defaultValue>
        <description><![CDATA[Index of the current image.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0"}-->]]></description>
      </attribute>
      <attribute>
        <name>destroyed</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this object
has been through the destroy lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>disabled</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Boolean indicating if the Widget should be disabled. The disabled implementation
is left to the specific classes extending widget.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>fillHeight</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The section (WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER) which should be resized to fill the height of the standard module, when a 
height is set on the Widget. If a height is not set on the widget, then all sections are sized based on 
their content.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>focused</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Boolean indicating if the Widget, or one of its descendants, 
has focus.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>footerContent</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The content to be added to the footer section. This will replace any existing content
in the footer. If you want to append, or insert new content, use the <a href="#method_setStdModContent">setStdModContent</a> method.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>headerContent</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The content to be added to the header section. This will replace any existing content
in the header. If you want to append, or insert new content, use the <a href="#method_setStdModContent">setStdModContent</a> method.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>height</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[String with units, or number, representing the height of the Widget. If a number is provided,
the default unit, defined by the Widgets DEF_UNIT, property is used.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>hideClass</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue>aui-helper-hidden</defaultValue>
        <description><![CDATA[css class added to hide the <code>boundingBox</code> when
<a href="Component.html#config_visible">visible</a> is set to
<code>false</code>.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false,"defaultValue":"aui-helper-hidden"}-->]]></description>
      </attribute>
      <attribute>
        <name>id</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>image</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Image node element used to load the images.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>imageAnim</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.HashMap</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Configuration attributes passed to the <a href="Anim.html">Anim</a>
class.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.HashMap","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>infoEl</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The element to be used as info.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>infoTemplate</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue>Image {current} of {total}</defaultValue>
        <description><![CDATA[String template used to display the information.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false,"defaultValue":"Image {current} of {total}"}-->]]></description>
      </attribute>
      <attribute>
        <name>initialized</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this object
has been through the init lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>links</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Selector or NodeList containing the links where the ImageViewer
extracts the information to generate the thumbnails.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>loader</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[HTML element to house the <code>img</code> which is being loaded.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>loading</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Whether the image is during a loading state.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>loadingEl</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The element to be used as loading.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>maxHeight</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>2147483647</defaultValue>
        <description><![CDATA[The maximum height of the element<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"2147483647"}-->]]></description>
      </attribute>
      <attribute>
        <name>maxWidth</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>2147483647</defaultValue>
        <description><![CDATA[The maximum width of the element<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"2147483647"}-->]]></description>
      </attribute>
      <attribute>
        <name>modal</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue>{ opacity: .8, background: '#000' }</defaultValue>
        <description><![CDATA[Displays the modal <a href="OverlayMask.html">OverlayMask</a> on
the viewport. Set to <code>false</code> to disable.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false,"defaultValue":"{ opacity: .8, background: '#000' }"}-->]]></description>
      </attribute>
      <attribute>
        <name>preloadAllImages</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Preload all images grabbed from the <a
href="ImageViewer.html#config_links">links</a> attribute.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>preventOverlap</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[If set to true, and WidgetPositionAlign is also added to the Widget, 
constrained positioning will attempt to prevent the widget's bounding box from overlapping 
the element to which it has been aligned, by flipping the orientation of the alignment
for corner based alignments<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>render</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[If <code>true</code> the render phase will be autimatically invoked
preventing the <code>.render()</code> manual call.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>rendered</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this Widget
has been through the render lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>shim</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Boolean flag to indicate whether or not a shim should be added to the Widgets
boundingBox, to protect it from select box bleedthrough.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>showArrows</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[Show the arrow controls.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>showClose</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[Show close icon control.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>srcNode</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The DOM node to parse for configuration values, passed to the Widget's HTML_PARSER definition<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>strings</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.HashMap</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Collection of strings used to label elements of the Widget's UI.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.HashMap","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>tabIndex</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>0</defaultValue>
        <description><![CDATA[Number (between -32767 to 32767) indicating the widget's 
position in the default tab flow.  The value is used to set the 
"tabIndex" attribute on the widget's bounding box.  Negative values allow
the widget to receive DOM focus programmatically (by calling the focus
method), while being removed from the default tab flow.  A value of 
null removes the "tabIndex" attribute from the widget's bounding box.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0"}-->]]></description>
      </attribute>
      <attribute>
        <name>totalLinks</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[Helper attribute to get the <code>size</code> of the <a
href="ImageViewer.html#config_links">links</a> NodeList.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>useARIA</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[Boolean indicating if use of the WAI-ARIA Roles and States should be
enabled for the Widget.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>visible</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[Boolean indicating weather or not the Widget is visible.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>width</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[String with units, or number, representing the width of the Widget. If a number is provided,
the default unit, defined by the Widgets DEF_UNIT, property is used.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>x</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>0</defaultValue>
        <description><![CDATA[Page X co-ordinate for the widget. This attribute acts as a facade for the 
xy attribute. Changes in position can be monitored by listening for xyChange events.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0"}-->]]></description>
      </attribute>
      <attribute>
        <name>xy</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.ArrayList</outputType>
        <defaultValue>[0,0]</defaultValue>
        <description><![CDATA[Page XY co-ordinate pair for the widget.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.ArrayList","required":false,"defaultValue":"[0,0]"}-->]]></description>
      </attribute>
      <attribute>
        <name>y</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>0</defaultValue>
        <description><![CDATA[Page Y co-ordinate for the widget. This attribute acts as a facade for the 
xy attribute. Changes in position can be monitored by listening for xyChange events.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0"}-->]]></description>
      </attribute>
      <attribute>
        <name>zIndex</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>0</defaultValue>
        <description><![CDATA[The z-index to apply to the Widgets boundingBox. Non-numerical values for 
zIndex will be converted to 0<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0"}-->]]></description>
      </attribute>
    </attributes>
    <events>
      <event>
        <name>alignChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'align' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>alignOnChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'alignOn' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>anim</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Handles the anim event. Fired when the image anim ends.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>animChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'anim' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>arrowLeftElChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'arrowLeftEl' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>arrowRightElChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'arrowRightEl' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>bodyContentChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'bodyContent' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>boundingBoxChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'boundingBox' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>captionChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'caption' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>captionElChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'captionEl' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>captionFromTitleChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'captionFromTitle' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>centeredChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'centered' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>closeElChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'closeEl' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>constrainChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'constrain' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>contentBoxChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'contentBox' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>cssClassChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'cssClass' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>currentIndexChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'currentIndex' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>destroy</name>
        <type>java.lang.Object</type>
        <description><![CDATA[<p>
Lifecycle event for the destroy phase, 
fired prior to destruction. Invoking the preventDefault 
method on the event object provided to subscribers will 
prevent destruction from proceeding.
</p>
<p>
Subscribers to the "after" moment of this event, will be notified
after destruction is complete (and as a result cannot prevent
destruction).
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>destroyedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'destroyed' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>disabledChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'disabled' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>fillHeightChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'fillHeight' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>focusedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'focused' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>footerContentChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'footerContent' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>headerContentChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'headerContent' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>heightChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'height' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>hideClassChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'hideClass' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>idChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'id' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>imageAnimChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'imageAnim' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>imageChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'image' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>infoElChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'infoEl' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>infoTemplateChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'infoTemplate' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>init</name>
        <type>java.lang.Object</type>
        <description><![CDATA[<p>
Lifecycle event for the init phase, fired prior to initialization. 
Invoking the preventDefault() method on the event object provided 
to subscribers will prevent initialization from occuring.
</p>
<p>
Subscribers to the "after" momemt of this event, will be notified
after initialization of the object is complete (and therefore
cannot prevent initialization).
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>initializedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'initialized' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>linksChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'links' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>load</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Handles the load event. Fired when a image is laoded.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>loaderChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'loader' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>loadingChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'loading' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>loadingElChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'loadingEl' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>maxHeightChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'maxHeight' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>maxWidthChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'maxWidth' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>modalChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'modal' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>preloadAllImagesChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'preloadAllImages' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>preventOverlapChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'preventOverlap' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>renderChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'render' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>renderedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'rendered' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>request</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Handles the request event. Fired when a image is requested.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>shimChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'shim' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>showArrowsChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'showArrows' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>showCloseChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'showClose' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>srcNodeChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'srcNode' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>stringsChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'strings' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>tabIndexChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'tabIndex' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>totalLinksChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'totalLinks' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>useARIAChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'useARIA' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>visibleChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'visible' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>widget:contentUpdate</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Notification event, which widget implementations can fire, when
they change the content of the widget. This event has no default
behavior and cannot be prevented, so the "on" or "after"
moments are effectively equivalent (with on listeners being invoked before 
after listeners).<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>widget:render</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Lifecycle event for the render phase, fired prior to rendering the UI 
for the widget (prior to invoking the widget's renderer method).
<p>
Subscribers to the "on" moment of this event, will be notified 
before the widget is rendered.
</p>
<p>
Subscribers to the "after" moment of this event, will be notified
after rendering is complete.
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>widthChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'width' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>xChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'x' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>xyChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'xy' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>yChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'y' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>zIndexChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'zIndex' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
    </events>
  </component>
  <component name="LiveSearch" module="aui-live-search" package="alloy" bodyContent="false" alloyComponent="true">
    <attributes>
      <attribute>
        <name>data</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[<p>Function to extract the content from the node for the indexing. The
default uses the <code>node.html()</code>. In case if you need to
index the id of the nodes, here goes one example:</p>
Example indexing the id of the node instead of the HTML:
<pre><code>function(node) {
return node.attr('id');
}
</code></pre><!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>delay</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>250</defaultValue>
        <description><![CDATA[Number of milliseconds the filter will be applied to the node list
after the user stop typing.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"250"}-->]]></description>
      </attribute>
      <attribute>
        <name>destroyed</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this object
has been through the destroy lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>hide</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Function to be executed to hide the node when the data of that node
not matches with the filter.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>index</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.ArrayList</outputType>
        <defaultValue>[]</defaultValue>
        <description><![CDATA[Index for the nodes content.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.ArrayList","required":false,"defaultValue":"[]"}-->]]></description>
      </attribute>
      <attribute>
        <name>initialized</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this object
has been through the init lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>input</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The <code>value</code> of this input node is used to filter the
results.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>matchRegex</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue>(.)*</defaultValue>
        <description><![CDATA[The input <code>value</code> need to matches with this RegExp to be
accept as a filter (i.e., in order to accept only digits you
could use /\d+/g).<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false,"defaultValue":"(.)*"}-->]]></description>
      </attribute>
      <attribute>
        <name>nodes</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Nodes to be indexed for the filtering.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>searchValue</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The text value to search for<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>show</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Function to be executed to show the node when the data of that node
matches with the filter.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
    </attributes>
    <events>
      <event>
        <name>dataChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'data' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>delayChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'delay' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>destroy</name>
        <type>java.lang.Object</type>
        <description><![CDATA[<p>
Lifecycle event for the destroy phase, 
fired prior to destruction. Invoking the preventDefault 
method on the event object provided to subscribers will 
prevent destruction from proceeding.
</p>
<p>
Subscribers to the "after" moment of this event, will be notified
after destruction is complete (and as a result cannot prevent
destruction).
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>destroyedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'destroyed' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>hideChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'hide' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>indexChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'index' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>init</name>
        <type>java.lang.Object</type>
        <description><![CDATA[<p>
Lifecycle event for the init phase, fired prior to initialization. 
Invoking the preventDefault() method on the event object provided 
to subscribers will prevent initialization from occuring.
</p>
<p>
Subscribers to the "after" momemt of this event, will be notified
after initialization of the object is complete (and therefore
cannot prevent initialization).
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>initializedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'initialized' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>inputChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'input' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>matchRegexChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'matchRegex' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>nodesChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'nodes' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>searchValueChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'searchValue' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>showChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'show' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
    </events>
  </component>
  <component name="LoadingMask" module="aui-loading-mask" package="alloy" bodyContent="false" alloyComponent="true">
    <attributes>
      <attribute>
        <name>destroyed</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this object
has been through the destroy lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>host</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The plugin's host object.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>initialized</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this object
has been through the init lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>messageEl</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Node element to display the message.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>strings</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.HashMap</outputType>
        <defaultValue>{ loading: 'Loading&amp;hellip;' }</defaultValue>
        <description><![CDATA[Strings used on the LoadingMask. See
<a href="Widget.html#method_strings">strings</a>.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.HashMap","required":false,"defaultValue":"{ loading: 'Loading&hellip;' }"}-->]]></description>
      </attribute>
      <attribute>
        <name>target</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Node where the mask will be positioned and re-dimensioned.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
    </attributes>
    <events>
      <event>
        <name>destroy</name>
        <type>java.lang.Object</type>
        <description><![CDATA[<p>
Lifecycle event for the destroy phase, 
fired prior to destruction. Invoking the preventDefault 
method on the event object provided to subscribers will 
prevent destruction from proceeding.
</p>
<p>
Subscribers to the "after" moment of this event, will be notified
after destruction is complete (and as a result cannot prevent
destruction).
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>destroyedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'destroyed' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>hostChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'host' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>init</name>
        <type>java.lang.Object</type>
        <description><![CDATA[<p>
Lifecycle event for the init phase, fired prior to initialization. 
Invoking the preventDefault() method on the event object provided 
to subscribers will prevent initialization from occuring.
</p>
<p>
Subscribers to the "after" momemt of this event, will be notified
after initialization of the object is complete (and therefore
cannot prevent initialization).
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>initializedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'initialized' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>messageElChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'messageEl' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>stringsChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'strings' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>targetChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'target' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
    </events>
  </component>
  <component name="NestedList" module="aui-nested-list" package="alloy" bodyContent="false" alloyComponent="true">
    <attributes>
      <attribute>
        <name>destroyed</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this object
has been through the destroy lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>initialized</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this object
has been through the init lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
    </attributes>
    <events>
      <event>
        <name>destroy</name>
        <type>java.lang.Object</type>
        <description><![CDATA[<p>
Lifecycle event for the destroy phase, 
fired prior to destruction. Invoking the preventDefault 
method on the event object provided to subscribers will 
prevent destruction from proceeding.
</p>
<p>
Subscribers to the "after" moment of this event, will be notified
after destruction is complete (and as a result cannot prevent
destruction).
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>destroyedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'destroyed' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>init</name>
        <type>java.lang.Object</type>
        <description><![CDATA[<p>
Lifecycle event for the init phase, fired prior to initialization. 
Invoking the preventDefault() method on the event object provided 
to subscribers will prevent initialization from occuring.
</p>
<p>
Subscribers to the "after" momemt of this event, will be notified
after initialization of the object is complete (and therefore
cannot prevent initialization).
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>initializedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'initialized' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
    </events>
  </component>
  <component name="OverlayBase" module="aui-overlay" package="alloy" bodyContent="false" alloyComponent="true">
    <attributes>
      <attribute>
        <name>align</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.HashMap</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.HashMap","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>alignOn</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.ArrayList</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[An array of objects corresponding to the nodes and events that will sync the alignment of the widget.
The implementer can supply an array of objects, with each object having the following properties:
eventName: (string, required): The eventName to listen to.
node: (Y.Node, optional): The Y.Node that will fire the event (defaults to the boundingBox of the widget)
By default, this attribute consists of two objects which will cause the widget to re-align to the node that it is aligned to:
(1) Scrolling the window, and (2) resizing the window.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.ArrayList","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>bodyContent</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The content to be added to the body section. This will replace any existing content
in the body. If you want to append, or insert new content, use the <a href="#method_setStdModContent">setStdModContent</a> method.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>boundingBox</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The outermost DOM node for the Widget, used for sizing and positioning 
of a Widget as well as a containing element for any decorator elements used 
for skinning.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>centered</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[A convenience attribute, which can be used as a shortcut for the align attribute.
If set to true, the Widget is centered in the viewport. If set to a node reference or valid selector string,
the Widget will be centered within the node. If set the false, no center positioning is applied.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>constrain</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The node to constrain the widget's bounding box to, when setting xy. Can also be
set to true, to constrain to the viewport.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>contentBox</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[A DOM node that is a direct descendant of a Widget's bounding box that 
houses its content.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>cssClass</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[CSS class to be automatically added to the <code>boundingBox</code>.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>destroyed</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this object
has been through the destroy lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>disabled</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Boolean indicating if the Widget should be disabled. The disabled implementation
is left to the specific classes extending widget.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>fillHeight</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The section (WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER) which should be resized to fill the height of the standard module, when a 
height is set on the Widget. If a height is not set on the widget, then all sections are sized based on 
their content.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>focused</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Boolean indicating if the Widget, or one of its descendants, 
has focus.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>footerContent</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The content to be added to the footer section. This will replace any existing content
in the footer. If you want to append, or insert new content, use the <a href="#method_setStdModContent">setStdModContent</a> method.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>headerContent</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The content to be added to the header section. This will replace any existing content
in the header. If you want to append, or insert new content, use the <a href="#method_setStdModContent">setStdModContent</a> method.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>height</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[String with units, or number, representing the height of the Widget. If a number is provided,
the default unit, defined by the Widgets DEF_UNIT, property is used.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>hideClass</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue>aui-helper-hidden</defaultValue>
        <description><![CDATA[css class added to hide the <code>boundingBox</code> when
<a href="Component.html#config_visible">visible</a> is set to
<code>false</code>.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false,"defaultValue":"aui-helper-hidden"}-->]]></description>
      </attribute>
      <attribute>
        <name>id</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>initialized</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this object
has been through the init lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>preventOverlap</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[If set to true, and WidgetPositionAlign is also added to the Widget, 
constrained positioning will attempt to prevent the widget's bounding box from overlapping 
the element to which it has been aligned, by flipping the orientation of the alignment
for corner based alignments<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>render</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[If <code>true</code> the render phase will be autimatically invoked
preventing the <code>.render()</code> manual call.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>rendered</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this Widget
has been through the render lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>shim</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Boolean flag to indicate whether or not a shim should be added to the Widgets
boundingBox, to protect it from select box bleedthrough.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>srcNode</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The DOM node to parse for configuration values, passed to the Widget's HTML_PARSER definition<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>strings</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.HashMap</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Collection of strings used to label elements of the Widget's UI.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.HashMap","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>tabIndex</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>0</defaultValue>
        <description><![CDATA[Number (between -32767 to 32767) indicating the widget's 
position in the default tab flow.  The value is used to set the 
"tabIndex" attribute on the widget's bounding box.  Negative values allow
the widget to receive DOM focus programmatically (by calling the focus
method), while being removed from the default tab flow.  A value of 
null removes the "tabIndex" attribute from the widget's bounding box.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0"}-->]]></description>
      </attribute>
      <attribute>
        <name>useARIA</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[Boolean indicating if use of the WAI-ARIA Roles and States should be
enabled for the Widget.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>visible</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[Boolean indicating weather or not the Widget is visible.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>width</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[String with units, or number, representing the width of the Widget. If a number is provided,
the default unit, defined by the Widgets DEF_UNIT, property is used.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>x</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>0</defaultValue>
        <description><![CDATA[Page X co-ordinate for the widget. This attribute acts as a facade for the 
xy attribute. Changes in position can be monitored by listening for xyChange events.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0"}-->]]></description>
      </attribute>
      <attribute>
        <name>xy</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.ArrayList</outputType>
        <defaultValue>[0,0]</defaultValue>
        <description><![CDATA[Page XY co-ordinate pair for the widget.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.ArrayList","required":false,"defaultValue":"[0,0]"}-->]]></description>
      </attribute>
      <attribute>
        <name>y</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>0</defaultValue>
        <description><![CDATA[Page Y co-ordinate for the widget. This attribute acts as a facade for the 
xy attribute. Changes in position can be monitored by listening for xyChange events.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0"}-->]]></description>
      </attribute>
      <attribute>
        <name>zIndex</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>0</defaultValue>
        <description><![CDATA[The z-index to apply to the Widgets boundingBox. Non-numerical values for 
zIndex will be converted to 0<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0"}-->]]></description>
      </attribute>
    </attributes>
    <events>
      <event>
        <name>alignChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'align' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>alignOnChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'alignOn' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>bodyContentChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'bodyContent' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>boundingBoxChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'boundingBox' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>centeredChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'centered' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>constrainChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'constrain' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>contentBoxChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'contentBox' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>cssClassChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'cssClass' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>destroy</name>
        <type>java.lang.Object</type>
        <description><![CDATA[<p>
Lifecycle event for the destroy phase, 
fired prior to destruction. Invoking the preventDefault 
method on the event object provided to subscribers will 
prevent destruction from proceeding.
</p>
<p>
Subscribers to the "after" moment of this event, will be notified
after destruction is complete (and as a result cannot prevent
destruction).
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>destroyedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'destroyed' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>disabledChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'disabled' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>fillHeightChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'fillHeight' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>focusedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'focused' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>footerContentChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'footerContent' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>headerContentChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'headerContent' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>heightChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'height' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>hideClassChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'hideClass' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>idChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'id' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>init</name>
        <type>java.lang.Object</type>
        <description><![CDATA[<p>
Lifecycle event for the init phase, fired prior to initialization. 
Invoking the preventDefault() method on the event object provided 
to subscribers will prevent initialization from occuring.
</p>
<p>
Subscribers to the "after" momemt of this event, will be notified
after initialization of the object is complete (and therefore
cannot prevent initialization).
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>initializedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'initialized' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>preventOverlapChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'preventOverlap' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>renderChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'render' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>renderedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'rendered' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>shimChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'shim' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>srcNodeChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'srcNode' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>stringsChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'strings' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>tabIndexChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'tabIndex' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>useARIAChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'useARIA' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>visibleChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'visible' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>widget:contentUpdate</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Notification event, which widget implementations can fire, when
they change the content of the widget. This event has no default
behavior and cannot be prevented, so the "on" or "after"
moments are effectively equivalent (with on listeners being invoked before 
after listeners).<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>widget:render</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Lifecycle event for the render phase, fired prior to rendering the UI 
for the widget (prior to invoking the widget's renderer method).
<p>
Subscribers to the "on" moment of this event, will be notified 
before the widget is rendered.
</p>
<p>
Subscribers to the "after" moment of this event, will be notified
after rendering is complete.
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>widthChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'width' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>xChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'x' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>xyChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'xy' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>yChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'y' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>zIndexChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'zIndex' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
    </events>
  </component>
  <component name="OverlayContext" module="aui-overlay" package="alloy" bodyContent="false" alloyComponent="true">
    <attributes>
      <attribute>
        <name>align</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.HashMap</outputType>
        <defaultValue>{ node: null, points: [ TL, BL ] }</defaultValue>
        <description><![CDATA[Inherited from <a href="Overlay.html#config_align">Overlay</a>.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.HashMap","required":false,"defaultValue":"{ node: null, points: [ TL, BL ] }"}-->]]></description>
      </attribute>
      <attribute>
        <name>alignOn</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.ArrayList</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[An array of objects corresponding to the nodes and events that will sync the alignment of the widget.
The implementer can supply an array of objects, with each object having the following properties:
eventName: (string, required): The eventName to listen to.
node: (Y.Node, optional): The Y.Node that will fire the event (defaults to the boundingBox of the widget)
By default, this attribute consists of two objects which will cause the widget to re-align to the node that it is aligned to:
(1) Scrolling the window, and (2) resizing the window.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.ArrayList","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>bodyContent</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The content to be added to the body section. This will replace any existing content
in the body. If you want to append, or insert new content, use the <a href="#method_setStdModContent">setStdModContent</a> method.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>boundingBox</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The outermost DOM node for the Widget, used for sizing and positioning 
of a Widget as well as a containing element for any decorator elements used 
for skinning.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>cancellableHide</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[Cancel auto hide delay if the user interact with the Overlay
(focus, click, mouseover)<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>centered</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[A convenience attribute, which can be used as a shortcut for the align attribute.
If set to true, the Widget is centered in the viewport. If set to a node reference or valid selector string,
the Widget will be centered within the node. If set the false, no center positioning is applied.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>constrain</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The node to constrain the widget's bounding box to, when setting xy. Can also be
set to true, to constrain to the viewport.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>contentBox</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[A DOM node that is a direct descendant of a Widget's bounding box that 
houses its content.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>cssClass</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[CSS class to be automatically added to the <code>boundingBox</code>.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>currentNode</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[OverlayContext allow multiple elements to be the
<a href="OverlayContext.html#config_trigger">trigger</a>, the
currentNode stores the current active one.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>destroyed</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this object
has been through the destroy lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>disabled</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Boolean indicating if the Widget should be disabled. The disabled implementation
is left to the specific classes extending widget.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>fillHeight</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The section (WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER) which should be resized to fill the height of the standard module, when a 
height is set on the Widget. If a height is not set on the widget, then all sections are sized based on 
their content.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>focused</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Boolean indicating if the Widget, or one of its descendants, 
has focus.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>footerContent</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The content to be added to the footer section. This will replace any existing content
in the footer. If you want to append, or insert new content, use the <a href="#method_setStdModContent">setStdModContent</a> method.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>headerContent</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The content to be added to the header section. This will replace any existing content
in the header. If you want to append, or insert new content, use the <a href="#method_setStdModContent">setStdModContent</a> method.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>height</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[String with units, or number, representing the height of the Widget. If a number is provided,
the default unit, defined by the Widgets DEF_UNIT, property is used.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>hideClass</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue>aui-helper-hidden</defaultValue>
        <description><![CDATA[css class added to hide the <code>boundingBox</code> when
<a href="Component.html#config_visible">visible</a> is set to
<code>false</code>.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false,"defaultValue":"aui-helper-hidden"}-->]]></description>
      </attribute>
      <attribute>
        <name>hideDelay</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>0</defaultValue>
        <description><![CDATA[Number of milliseconds after the hide method is invoked to hide the
OverlayContext.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0"}-->]]></description>
      </attribute>
      <attribute>
        <name>hideOn</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue>mouseout</defaultValue>
        <description><![CDATA[The event which is responsible to hide the OverlayContext.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false,"defaultValue":"mouseout"}-->]]></description>
      </attribute>
      <attribute>
        <name>hideOnDocumentClick</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[If true the instance is registered on the
<a href="OverlayContextManager.html">OverlayContextManager</a> static
class and will be hide when the user click on document.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>id</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>initialized</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this object
has been through the init lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>preventOverlap</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[If set to true, and WidgetPositionAlign is also added to the Widget, 
constrained positioning will attempt to prevent the widget's bounding box from overlapping 
the element to which it has been aligned, by flipping the orientation of the alignment
for corner based alignments<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>render</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[If <code>true</code> the render phase will be autimatically invoked
preventing the <code>.render()</code> manual call.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>rendered</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this Widget
has been through the render lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>shim</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Boolean flag to indicate whether or not a shim should be added to the Widgets
boundingBox, to protect it from select box bleedthrough.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>showDelay</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>0</defaultValue>
        <description><![CDATA[Number of milliseconds after the show method is invoked to show the
OverlayContext.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0"}-->]]></description>
      </attribute>
      <attribute>
        <name>showOn</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue>mouseover</defaultValue>
        <description><![CDATA[The event which is responsible to show the OverlayContext.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false,"defaultValue":"mouseover"}-->]]></description>
      </attribute>
      <attribute>
        <name>srcNode</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The DOM node to parse for configuration values, passed to the Widget's HTML_PARSER definition<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>strings</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.HashMap</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Collection of strings used to label elements of the Widget's UI.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.HashMap","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>tabIndex</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>0</defaultValue>
        <description><![CDATA[Number (between -32767 to 32767) indicating the widget's 
position in the default tab flow.  The value is used to set the 
"tabIndex" attribute on the widget's bounding box.  Negative values allow
the widget to receive DOM focus programmatically (by calling the focus
method), while being removed from the default tab flow.  A value of 
null removes the "tabIndex" attribute from the widget's bounding box.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0"}-->]]></description>
      </attribute>
      <attribute>
        <name>trigger</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Node, NodeList or Selector which will be used as trigger elements
to show or hide the OverlayContext.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>useARIA</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[True if Overlay should use ARIA plugin<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>visible</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[If true the OverlayContext is visible by default after the render phase.
Inherited from <a href="Overlay.html">Overlay</a>.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>width</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[String with units, or number, representing the width of the Widget. If a number is provided,
the default unit, defined by the Widgets DEF_UNIT, property is used.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>x</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>0</defaultValue>
        <description><![CDATA[Page X co-ordinate for the widget. This attribute acts as a facade for the 
xy attribute. Changes in position can be monitored by listening for xyChange events.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0"}-->]]></description>
      </attribute>
      <attribute>
        <name>xy</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.ArrayList</outputType>
        <defaultValue>[0,0]</defaultValue>
        <description><![CDATA[Page XY co-ordinate pair for the widget.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.ArrayList","required":false,"defaultValue":"[0,0]"}-->]]></description>
      </attribute>
      <attribute>
        <name>y</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>0</defaultValue>
        <description><![CDATA[Page Y co-ordinate for the widget. This attribute acts as a facade for the 
xy attribute. Changes in position can be monitored by listening for xyChange events.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0"}-->]]></description>
      </attribute>
      <attribute>
        <name>zIndex</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>0</defaultValue>
        <description><![CDATA[The z-index to apply to the Widgets boundingBox. Non-numerical values for 
zIndex will be converted to 0<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0"}-->]]></description>
      </attribute>
    </attributes>
    <events>
      <event>
        <name>alignChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'align' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>alignOnChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'alignOn' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>bodyContentChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'bodyContent' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>boundingBoxChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'boundingBox' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>cancellableHideChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'cancellableHide' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>centeredChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'centered' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>constrainChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'constrain' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>contentBoxChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'contentBox' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>cssClassChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'cssClass' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>currentNodeChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'currentNode' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>destroy</name>
        <type>java.lang.Object</type>
        <description><![CDATA[<p>
Lifecycle event for the destroy phase, 
fired prior to destruction. Invoking the preventDefault 
method on the event object provided to subscribers will 
prevent destruction from proceeding.
</p>
<p>
Subscribers to the "after" moment of this event, will be notified
after destruction is complete (and as a result cannot prevent
destruction).
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>destroyedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'destroyed' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>disabledChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'disabled' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>fillHeightChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'fillHeight' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>focusedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'focused' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>footerContentChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'footerContent' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>headerContentChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'headerContent' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>heightChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'height' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>hideClassChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'hideClass' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>hideDelayChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'hideDelay' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>hideOnChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'hideOn' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>hideOnDocumentClickChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'hideOnDocumentClick' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>idChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'id' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>init</name>
        <type>java.lang.Object</type>
        <description><![CDATA[<p>
Lifecycle event for the init phase, fired prior to initialization. 
Invoking the preventDefault() method on the event object provided 
to subscribers will prevent initialization from occuring.
</p>
<p>
Subscribers to the "after" momemt of this event, will be notified
after initialization of the object is complete (and therefore
cannot prevent initialization).
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>initializedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'initialized' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>preventOverlapChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'preventOverlap' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>renderChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'render' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>renderedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'rendered' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>shimChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'shim' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>showDelayChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'showDelay' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>showOnChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'showOn' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>srcNodeChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'srcNode' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>stringsChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'strings' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>tabIndexChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'tabIndex' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>triggerChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'trigger' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>useARIAChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'useARIA' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>visibleChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'visible' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>widget:contentUpdate</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Notification event, which widget implementations can fire, when
they change the content of the widget. This event has no default
behavior and cannot be prevented, so the "on" or "after"
moments are effectively equivalent (with on listeners being invoked before 
after listeners).<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>widget:render</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Lifecycle event for the render phase, fired prior to rendering the UI 
for the widget (prior to invoking the widget's renderer method).
<p>
Subscribers to the "on" moment of this event, will be notified 
before the widget is rendered.
</p>
<p>
Subscribers to the "after" moment of this event, will be notified
after rendering is complete.
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>widthChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'width' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>xChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'x' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>xyChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'xy' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>yChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'y' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>zIndexChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'zIndex' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
    </events>
  </component>
  <component name="OverlayContextPanel" module="aui-overlay" package="alloy" bodyContent="false" alloyComponent="true">
    <attributes>
      <attribute>
        <name>align</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.HashMap</outputType>
        <defaultValue>{ node: null, points: [ TL, BL ] }</defaultValue>
        <description><![CDATA[Inherited from <a href="Overlay.html#config_align">Overlay</a>.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.HashMap","required":false,"defaultValue":"{ node: null, points: [ TL, BL ] }"}-->]]></description>
      </attribute>
      <attribute>
        <name>alignOn</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.ArrayList</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[An array of objects corresponding to the nodes and events that will sync the alignment of the widget.
The implementer can supply an array of objects, with each object having the following properties:
eventName: (string, required): The eventName to listen to.
node: (Y.Node, optional): The Y.Node that will fire the event (defaults to the boundingBox of the widget)
By default, this attribute consists of two objects which will cause the widget to re-align to the node that it is aligned to:
(1) Scrolling the window, and (2) resizing the window.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.ArrayList","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>anim</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.HashMap</outputType>
        <defaultValue>{ show: false }</defaultValue>
        <description><![CDATA[Enable or disable the animation for hide and show. Used as the
<a href="Anim.html">Anim</a> configuration attributes.
<pre><code>anim: {
show: {
duration: .9
},
hide: {
duration: .2
}
}
</code></pre><!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.HashMap","required":false,"defaultValue":"{ show: false }"}-->]]></description>
      </attribute>
      <attribute>
        <name>arrow</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Position where the arrow will be placed. See
<a href="OverlayContextPanel.html#config_showArrow">showArrow</a>. If it's
not set, it will get the value set on the
<a href="OverlayContext.html#config_align">align</a> point. Here is a
list of valid arrows 'bc', 'bl', 'br', 'cc', 'lb', 'lc', 'lt', 'rb',
'rc', 'rl'.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>bodyContent</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The content to be added to the body section. This will replace any existing content
in the body. If you want to append, or insert new content, use the <a href="#method_setStdModContent">setStdModContent</a> method.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>boundingBox</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The outermost DOM node for the Widget, used for sizing and positioning 
of a Widget as well as a containing element for any decorator elements used 
for skinning.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>cancellableHide</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[Cancel auto hide delay if the user interact with the Overlay
(focus, click, mouseover)<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>centered</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[A convenience attribute, which can be used as a shortcut for the align attribute.
If set to true, the Widget is centered in the viewport. If set to a node reference or valid selector string,
the Widget will be centered within the node. If set the false, no center positioning is applied.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>constrain</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The node to constrain the widget's bounding box to, when setting xy. Can also be
set to true, to constrain to the viewport.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>contentBox</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[A DOM node that is a direct descendant of a Widget's bounding box that 
houses its content.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>cssClass</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[CSS class to be automatically added to the <code>boundingBox</code>.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>currentNode</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[OverlayContext allow multiple elements to be the
<a href="OverlayContext.html#config_trigger">trigger</a>, the
currentNode stores the current active one.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>destroyed</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this object
has been through the destroy lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>disabled</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Boolean indicating if the Widget should be disabled. The disabled implementation
is left to the specific classes extending widget.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>fillHeight</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The section (WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER) which should be resized to fill the height of the standard module, when a 
height is set on the Widget. If a height is not set on the widget, then all sections are sized based on 
their content.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>focused</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Boolean indicating if the Widget, or one of its descendants, 
has focus.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>footerContent</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The content to be added to the footer section. This will replace any existing content
in the footer. If you want to append, or insert new content, use the <a href="#method_setStdModContent">setStdModContent</a> method.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>headerContent</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The content to be added to the header section. This will replace any existing content
in the header. If you want to append, or insert new content, use the <a href="#method_setStdModContent">setStdModContent</a> method.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>height</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[String with units, or number, representing the height of the Widget. If a number is provided,
the default unit, defined by the Widgets DEF_UNIT, property is used.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>hideClass</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue>aui-helper-hidden</defaultValue>
        <description><![CDATA[css class added to hide the <code>boundingBox</code> when
<a href="Component.html#config_visible">visible</a> is set to
<code>false</code>.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false,"defaultValue":"aui-helper-hidden"}-->]]></description>
      </attribute>
      <attribute>
        <name>hideDelay</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>0</defaultValue>
        <description><![CDATA[Number of milliseconds after the hide method is invoked to hide the
OverlayContext.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0"}-->]]></description>
      </attribute>
      <attribute>
        <name>hideOn</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue>click</defaultValue>
        <description><![CDATA[See <a href="OverlayContext.html#config_hideOn">hideOn</a>.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false,"defaultValue":"click"}-->]]></description>
      </attribute>
      <attribute>
        <name>hideOnDocumentClick</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[If true the instance is registered on the
<a href="OverlayContextManager.html">OverlayContextManager</a> static
class and will be hide when the user click on document.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>id</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>initialized</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this object
has been through the init lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>preventOverlap</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[If set to true, and WidgetPositionAlign is also added to the Widget, 
constrained positioning will attempt to prevent the widget's bounding box from overlapping 
the element to which it has been aligned, by flipping the orientation of the alignment
for corner based alignments<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>render</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[If <code>true</code> the render phase will be autimatically invoked
preventing the <code>.render()</code> manual call.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>rendered</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this Widget
has been through the render lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>shim</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Boolean flag to indicate whether or not a shim should be added to the Widgets
boundingBox, to protect it from select box bleedthrough.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>showArrow</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[If true the OverlayContextPanel will show an arrow positioned on the
<a href="OverlayContextPanel.html#config_arrow">arrow</a> point.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>showDelay</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>0</defaultValue>
        <description><![CDATA[Number of milliseconds after the show method is invoked to show the
OverlayContext.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0"}-->]]></description>
      </attribute>
      <attribute>
        <name>showOn</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue>click</defaultValue>
        <description><![CDATA[See <a href="OverlayContext.html#config_showOn">showOn</a>.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false,"defaultValue":"click"}-->]]></description>
      </attribute>
      <attribute>
        <name>srcNode</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The DOM node to parse for configuration values, passed to the Widget's HTML_PARSER definition<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>stack</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[Gives stacking habilities to the OverlayContextPanel.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>strings</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.HashMap</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Collection of strings used to label elements of the Widget's UI.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.HashMap","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>tabIndex</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>0</defaultValue>
        <description><![CDATA[Number (between -32767 to 32767) indicating the widget's 
position in the default tab flow.  The value is used to set the 
"tabIndex" attribute on the widget's bounding box.  Negative values allow
the widget to receive DOM focus programmatically (by calling the focus
method), while being removed from the default tab flow.  A value of 
null removes the "tabIndex" attribute from the widget's bounding box.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0"}-->]]></description>
      </attribute>
      <attribute>
        <name>trigger</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Node, NodeList or Selector which will be used as trigger elements
to show or hide the OverlayContext.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>useARIA</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[True if Overlay should use ARIA plugin<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>visible</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[If true the OverlayContext is visible by default after the render phase.
Inherited from <a href="Overlay.html">Overlay</a>.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>width</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[String with units, or number, representing the width of the Widget. If a number is provided,
the default unit, defined by the Widgets DEF_UNIT, property is used.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>x</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>0</defaultValue>
        <description><![CDATA[Page X co-ordinate for the widget. This attribute acts as a facade for the 
xy attribute. Changes in position can be monitored by listening for xyChange events.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0"}-->]]></description>
      </attribute>
      <attribute>
        <name>xy</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.ArrayList</outputType>
        <defaultValue>[0,0]</defaultValue>
        <description><![CDATA[Page XY co-ordinate pair for the widget.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.ArrayList","required":false,"defaultValue":"[0,0]"}-->]]></description>
      </attribute>
      <attribute>
        <name>y</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>0</defaultValue>
        <description><![CDATA[Page Y co-ordinate for the widget. This attribute acts as a facade for the 
xy attribute. Changes in position can be monitored by listening for xyChange events.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0"}-->]]></description>
      </attribute>
      <attribute>
        <name>zIndex</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>0</defaultValue>
        <description><![CDATA[The z-index to apply to the Widgets boundingBox. Non-numerical values for 
zIndex will be converted to 0<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0"}-->]]></description>
      </attribute>
    </attributes>
    <events>
      <event>
        <name>alignChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'align' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>alignOnChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'alignOn' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>animChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'anim' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>arrowChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'arrow' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>bodyContentChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'bodyContent' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>boundingBoxChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'boundingBox' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>cancellableHideChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'cancellableHide' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>centeredChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'centered' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>constrainChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'constrain' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>contentBoxChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'contentBox' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>cssClassChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'cssClass' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>currentNodeChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'currentNode' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>destroy</name>
        <type>java.lang.Object</type>
        <description><![CDATA[<p>
Lifecycle event for the destroy phase, 
fired prior to destruction. Invoking the preventDefault 
method on the event object provided to subscribers will 
prevent destruction from proceeding.
</p>
<p>
Subscribers to the "after" moment of this event, will be notified
after destruction is complete (and as a result cannot prevent
destruction).
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>destroyedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'destroyed' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>disabledChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'disabled' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>fillHeightChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'fillHeight' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>focusedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'focused' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>footerContentChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'footerContent' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>headerContentChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'headerContent' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>heightChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'height' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>hideClassChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'hideClass' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>hideDelayChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'hideDelay' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>hideOnChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'hideOn' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>hideOnDocumentClickChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'hideOnDocumentClick' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>idChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'id' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>init</name>
        <type>java.lang.Object</type>
        <description><![CDATA[<p>
Lifecycle event for the init phase, fired prior to initialization. 
Invoking the preventDefault() method on the event object provided 
to subscribers will prevent initialization from occuring.
</p>
<p>
Subscribers to the "after" momemt of this event, will be notified
after initialization of the object is complete (and therefore
cannot prevent initialization).
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>initializedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'initialized' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>preventOverlapChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'preventOverlap' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>renderChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'render' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>renderedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'rendered' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>shimChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'shim' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>showArrowChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'showArrow' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>showDelayChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'showDelay' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>showOnChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'showOn' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>srcNodeChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'srcNode' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>stackChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'stack' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>stringsChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'strings' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>tabIndexChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'tabIndex' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>triggerChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'trigger' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>useARIAChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'useARIA' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>visibleChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'visible' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>widget:contentUpdate</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Notification event, which widget implementations can fire, when
they change the content of the widget. This event has no default
behavior and cannot be prevented, so the "on" or "after"
moments are effectively equivalent (with on listeners being invoked before 
after listeners).<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>widget:render</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Lifecycle event for the render phase, fired prior to rendering the UI 
for the widget (prior to invoking the widget's renderer method).
<p>
Subscribers to the "on" moment of this event, will be notified 
before the widget is rendered.
</p>
<p>
Subscribers to the "after" moment of this event, will be notified
after rendering is complete.
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>widthChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'width' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>xChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'x' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>xyChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'xy' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>yChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'y' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>zIndexChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'zIndex' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
    </events>
  </component>
  <component name="OverlayMask" module="aui-overlay" package="alloy" bodyContent="false" alloyComponent="true">
    <attributes>
      <attribute>
        <name>align</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.HashMap</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.HashMap","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>alignOn</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.ArrayList</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[An array of objects corresponding to the nodes and events that will sync the alignment of the widget.
The implementer can supply an array of objects, with each object having the following properties:
eventName: (string, required): The eventName to listen to.
node: (Y.Node, optional): The Y.Node that will fire the event (defaults to the boundingBox of the widget)
By default, this attribute consists of two objects which will cause the widget to re-align to the node that it is aligned to:
(1) Scrolling the window, and (2) resizing the window.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.ArrayList","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>alignPoints</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.ArrayList</outputType>
        <defaultValue>[ 'tl', 'tl' ]</defaultValue>
        <description><![CDATA[Points to align the <a href="Overlay.html">Overlay</a> used as
mask.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.ArrayList","required":false,"defaultValue":"[ 'tl', 'tl' ]"}-->]]></description>
      </attribute>
      <attribute>
        <name>background</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Background color of the mask.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>bodyContent</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The content to be added to the body section. This will replace any existing content
in the body. If you want to append, or insert new content, use the <a href="#method_setStdModContent">setStdModContent</a> method.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>boundingBox</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The outermost DOM node for the Widget, used for sizing and positioning 
of a Widget as well as a containing element for any decorator elements used 
for skinning.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>centered</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[A convenience attribute, which can be used as a shortcut for the align attribute.
If set to true, the Widget is centered in the viewport. If set to a node reference or valid selector string,
the Widget will be centered within the node. If set the false, no center positioning is applied.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>constrain</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The node to constrain the widget's bounding box to, when setting xy. Can also be
set to true, to constrain to the viewport.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>contentBox</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[A DOM node that is a direct descendant of a Widget's bounding box that 
houses its content.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>cssClass</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[CSS class to be automatically added to the <code>boundingBox</code>.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>destroyed</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this object
has been through the destroy lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>disabled</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Boolean indicating if the Widget should be disabled. The disabled implementation
is left to the specific classes extending widget.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>fillHeight</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The section (WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER) which should be resized to fill the height of the standard module, when a 
height is set on the Widget. If a height is not set on the widget, then all sections are sized based on 
their content.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>focused</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Boolean indicating if the Widget, or one of its descendants, 
has focus.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>footerContent</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The content to be added to the footer section. This will replace any existing content
in the footer. If you want to append, or insert new content, use the <a href="#method_setStdModContent">setStdModContent</a> method.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>headerContent</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The content to be added to the header section. This will replace any existing content
in the header. If you want to append, or insert new content, use the <a href="#method_setStdModContent">setStdModContent</a> method.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>height</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[String with units, or number, representing the height of the Widget. If a number is provided,
the default unit, defined by the Widgets DEF_UNIT, property is used.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>hideClass</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue>aui-helper-hidden</defaultValue>
        <description><![CDATA[css class added to hide the <code>boundingBox</code> when
<a href="Component.html#config_visible">visible</a> is set to
<code>false</code>.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false,"defaultValue":"aui-helper-hidden"}-->]]></description>
      </attribute>
      <attribute>
        <name>id</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>initialized</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this object
has been through the init lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>opacity</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>0.5</defaultValue>
        <description><![CDATA[CSS opacity of the mask.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0.5"}-->]]></description>
      </attribute>
      <attribute>
        <name>preventOverlap</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[If set to true, and WidgetPositionAlign is also added to the Widget, 
constrained positioning will attempt to prevent the widget's bounding box from overlapping 
the element to which it has been aligned, by flipping the orientation of the alignment
for corner based alignments<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>render</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[If <code>true</code> the render phase will be autimatically invoked
preventing the <code>.render()</code> manual call.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>rendered</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this Widget
has been through the render lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>shim</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Use shim option.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>srcNode</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The DOM node to parse for configuration values, passed to the Widget's HTML_PARSER definition<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>strings</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.HashMap</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Collection of strings used to label elements of the Widget's UI.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.HashMap","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>tabIndex</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>0</defaultValue>
        <description><![CDATA[Number (between -32767 to 32767) indicating the widget's 
position in the default tab flow.  The value is used to set the 
"tabIndex" attribute on the widget's bounding box.  Negative values allow
the widget to receive DOM focus programmatically (by calling the focus
method), while being removed from the default tab flow.  A value of 
null removes the "tabIndex" attribute from the widget's bounding box.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0"}-->]]></description>
      </attribute>
      <attribute>
        <name>target</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue>document</defaultValue>
        <description><![CDATA[Node where the mask will be positioned and re-dimensioned. The
default is the document, which means that if not specified the mask
takes the full screen.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false,"defaultValue":"document"}-->]]></description>
      </attribute>
      <attribute>
        <name>useARIA</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[Boolean indicating if use of the WAI-ARIA Roles and States should be
enabled for the Widget.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>visible</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[If true the Overlay is visible by default after the render phase.
Inherited from <a href="Overlay.html">Overlay</a>.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>width</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[String with units, or number, representing the width of the Widget. If a number is provided,
the default unit, defined by the Widgets DEF_UNIT, property is used.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>x</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>0</defaultValue>
        <description><![CDATA[Page X co-ordinate for the widget. This attribute acts as a facade for the 
xy attribute. Changes in position can be monitored by listening for xyChange events.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0"}-->]]></description>
      </attribute>
      <attribute>
        <name>xy</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.ArrayList</outputType>
        <defaultValue>[0,0]</defaultValue>
        <description><![CDATA[Page XY co-ordinate pair for the widget.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.ArrayList","required":false,"defaultValue":"[0,0]"}-->]]></description>
      </attribute>
      <attribute>
        <name>y</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>0</defaultValue>
        <description><![CDATA[Page Y co-ordinate for the widget. This attribute acts as a facade for the 
xy attribute. Changes in position can be monitored by listening for xyChange events.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0"}-->]]></description>
      </attribute>
      <attribute>
        <name>zIndex</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>1000</defaultValue>
        <description><![CDATA[zIndex of the OverlayMask.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"1000"}-->]]></description>
      </attribute>
    </attributes>
    <events>
      <event>
        <name>alignChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'align' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>alignOnChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'alignOn' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>alignPointsChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'alignPoints' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>backgroundChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'background' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>bodyContentChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'bodyContent' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>boundingBoxChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'boundingBox' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>centeredChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'centered' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>constrainChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'constrain' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>contentBoxChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'contentBox' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>cssClassChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'cssClass' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>destroy</name>
        <type>java.lang.Object</type>
        <description><![CDATA[<p>
Lifecycle event for the destroy phase, 
fired prior to destruction. Invoking the preventDefault 
method on the event object provided to subscribers will 
prevent destruction from proceeding.
</p>
<p>
Subscribers to the "after" moment of this event, will be notified
after destruction is complete (and as a result cannot prevent
destruction).
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>destroyedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'destroyed' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>disabledChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'disabled' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>fillHeightChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'fillHeight' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>focusedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'focused' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>footerContentChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'footerContent' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>headerContentChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'headerContent' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>heightChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'height' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>hideClassChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'hideClass' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>idChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'id' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>init</name>
        <type>java.lang.Object</type>
        <description><![CDATA[<p>
Lifecycle event for the init phase, fired prior to initialization. 
Invoking the preventDefault() method on the event object provided 
to subscribers will prevent initialization from occuring.
</p>
<p>
Subscribers to the "after" momemt of this event, will be notified
after initialization of the object is complete (and therefore
cannot prevent initialization).
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>initializedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'initialized' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>opacityChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'opacity' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>preventOverlapChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'preventOverlap' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>renderChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'render' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>renderedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'rendered' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>shimChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'shim' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>srcNodeChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'srcNode' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>stringsChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'strings' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>tabIndexChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'tabIndex' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>targetChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'target' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>useARIAChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'useARIA' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>visibleChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'visible' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>widget:contentUpdate</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Notification event, which widget implementations can fire, when
they change the content of the widget. This event has no default
behavior and cannot be prevented, so the "on" or "after"
moments are effectively equivalent (with on listeners being invoked before 
after listeners).<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>widget:render</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Lifecycle event for the render phase, fired prior to rendering the UI 
for the widget (prior to invoking the widget's renderer method).
<p>
Subscribers to the "on" moment of this event, will be notified 
before the widget is rendered.
</p>
<p>
Subscribers to the "after" moment of this event, will be notified
after rendering is complete.
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>widthChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'width' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>xChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'x' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>xyChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'xy' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>yChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'y' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>zIndexChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'zIndex' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
    </events>
  </component>
  <component name="Paginator" module="aui-paginator" package="alloy" bodyContent="false" alloyComponent="true">
    <attributes>
      <attribute>
        <name>alwaysVisible</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[If true the Paginator will be always visible, even when the number
of pages is 0. To hide the paginator controls automatically when
there is no pages to display use <code>false</code>.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>containers</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The Paginator controls UI could be displayed in more than one
container (i.e., in the header and footer of a list). Pass a
<a href="NodeList.html">NodeList</a> or a selector to grab the
containers.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>destroyed</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this object
has been through the destroy lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>firstPageLink</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The <a href="Node.html">Node</a> or template to be used as the
first link element.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>firstPageLinkLabel</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue>first</defaultValue>
        <description><![CDATA[The label used as content of the
<a href="Paginator.html#config_firstPageLink">firstPageLink</a> element.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false,"defaultValue":"first"}-->]]></description>
      </attribute>
      <attribute>
        <name>initialized</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this object
has been through the init lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>lastPageLink</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The <a href="Node.html">Node</a> or template to be used as the
last link element.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>lastPageLinkLabel</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue>last</defaultValue>
        <description><![CDATA[The label used as content of the
<a href="Paginator.html#config_lastPageLink">lastPageLink</a> element.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false,"defaultValue":"last"}-->]]></description>
      </attribute>
      <attribute>
        <name>maxPageLinks</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>10</defaultValue>
        <description><![CDATA[The max number of page links to be displayed. If lower than the
total number of pages they are still navigable using next and prev
links.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"10"}-->]]></description>
      </attribute>
      <attribute>
        <name>nextPageLink</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The <a href="Node.html">Node</a> or template to be used as the
next link element.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>nextPageLinkLabel</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue>next &amp;gt;</defaultValue>
        <description><![CDATA[The label used as content of the
<a href="Paginator.html#config_nextPageLink">nextPageLink</a> element.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false,"defaultValue":"next &gt;"}-->]]></description>
      </attribute>
      <attribute>
        <name>page</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>1</defaultValue>
        <description><![CDATA[Page to display on initial paint.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"1"}-->]]></description>
      </attribute>
      <attribute>
        <name>pageContainerTemplate</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[HTML Template for the page links container.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>pageLinkContent</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[<p>Function which set the content of the each page element. The passed
function receive as arguments the reference for the page element
node, the page number and the index of the page element.</p>
Example:
<pre><code>function(pageEl, pageNumber, index) {
pageEl.html(pageNumber);
}</code></pre><!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>pageLinkTemplate</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[HTML Template for the link elements.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>pageReportEl</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Node element to display the page report (i.e., (1 of 100)).<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>pageReportLabelTemplate</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue>({page} of {totalPages})</defaultValue>
        <description><![CDATA[Template for the
<a href="Paginator.html#config_pageReportEl">pageReportEl</a> content.
Note the placeholders for the page {page} and the total pages
{totalPages}.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false,"defaultValue":"({page} of {totalPages})"}-->]]></description>
      </attribute>
      <attribute>
        <name>prevPageLink</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The <a href="Node.html">Node</a> or template to be used as the
prev link element.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>prevPageLinkLabel</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue>&amp;lt; prev</defaultValue>
        <description><![CDATA[The label used as content of the
<a href="Paginator.html#config_prevPageLink">prevPageLink</a> element.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false,"defaultValue":"&lt; prev"}-->]]></description>
      </attribute>
      <attribute>
        <name>rowsPerPage</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>1</defaultValue>
        <description><![CDATA[Number of records constituting a "page".<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"1"}-->]]></description>
      </attribute>
      <attribute>
        <name>rowsPerPageEl</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Node element to display the
<a href="Paginator.html#config_rowsPerPage">rowsPerPage</a>.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>rowsPerPageOptions</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.ArrayList</outputType>
        <defaultValue>[]</defaultValue>
        <description><![CDATA[Array to be displayed on the generated HTML Select element with the
<a href="Paginator.html#config_rowsPerPage">rowsPerPage</a>
information. (i.e., [1,3,5,7], will display these values on the
select)<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.ArrayList","required":false,"defaultValue":"[]"}-->]]></description>
      </attribute>
      <attribute>
        <name>state</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.HashMap</outputType>
        <defaultValue>{}</defaultValue>
        <description><![CDATA[Generates information to the <code>changeRequest</code> event. See
<a href="Paginator.html#method_changeRequest">changeRequest</a>.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.HashMap","required":false,"defaultValue":"{}"}-->]]></description>
      </attribute>
      <attribute>
        <name>template</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue>{FirstPageLink} {PrevPageLink} {PageLinks} {NextPageLink} {LastPageLink} {CurrentPageReport} {Total} {RowsPerPageSelect}</defaultValue>
        <description><![CDATA[Template used to render controls. The string will be used as
innerHTML on all specified container nodes. Bracketed keys (e.g.
{pageLinks}) in the string will be replaced with an instance of the
so named ui component.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false,"defaultValue":"{FirstPageLink} {PrevPageLink} {PageLinks} {NextPageLink} {LastPageLink} {CurrentPageReport} {Total} {RowsPerPageSelect}"}-->]]></description>
      </attribute>
      <attribute>
        <name>total</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>0</defaultValue>
        <description><![CDATA[Total number of records to paginate through.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0"}-->]]></description>
      </attribute>
      <attribute>
        <name>totalEl</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Node element to display the total information.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>totalLabel</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue>(Total {total})</defaultValue>
        <description><![CDATA[The label markup to the total information.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false,"defaultValue":"(Total {total})"}-->]]></description>
      </attribute>
      <attribute>
        <name>totalPages</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>0</defaultValue>
        <description><![CDATA[Number of pages. Calculated based on the
<a href="Paginator.html#config_total">total</a> divided by the
<a href="Paginator.html#config_rowsPerPage">rowsPerPage</a>.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0"}-->]]></description>
      </attribute>
    </attributes>
    <events>
      <event>
        <name>alwaysVisibleChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'alwaysVisible' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>containersChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'containers' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>destroy</name>
        <type>java.lang.Object</type>
        <description><![CDATA[<p>
Lifecycle event for the destroy phase, 
fired prior to destruction. Invoking the preventDefault 
method on the event object provided to subscribers will 
prevent destruction from proceeding.
</p>
<p>
Subscribers to the "after" moment of this event, will be notified
after destruction is complete (and as a result cannot prevent
destruction).
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>destroyedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'destroyed' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>firstPageLinkChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'firstPageLink' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>firstPageLinkLabelChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'firstPageLinkLabel' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>init</name>
        <type>java.lang.Object</type>
        <description><![CDATA[<p>
Lifecycle event for the init phase, fired prior to initialization. 
Invoking the preventDefault() method on the event object provided 
to subscribers will prevent initialization from occuring.
</p>
<p>
Subscribers to the "after" momemt of this event, will be notified
after initialization of the object is complete (and therefore
cannot prevent initialization).
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>initializedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'initialized' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>lastPageLinkChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'lastPageLink' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>lastPageLinkLabelChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'lastPageLinkLabel' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>maxPageLinksChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'maxPageLinks' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>nextPageLinkChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'nextPageLink' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>nextPageLinkLabelChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'nextPageLinkLabel' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>pageChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'page' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>pageContainerTemplateChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'pageContainerTemplate' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>pageLinkContentChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'pageLinkContent' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>pageLinkTemplateChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'pageLinkTemplate' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>pageReportElChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'pageReportEl' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>pageReportLabelTemplateChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'pageReportLabelTemplate' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>prevPageLinkChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'prevPageLink' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>prevPageLinkLabelChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'prevPageLinkLabel' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>rowsPerPageChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'rowsPerPage' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>rowsPerPageElChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'rowsPerPageEl' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>rowsPerPageOptionsChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'rowsPerPageOptions' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>stateChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'state' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>templateChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'template' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>totalChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'total' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>totalElChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'totalEl' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>totalLabelChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'totalLabel' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>totalPagesChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'totalPages' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
    </events>
  </component>
  <component name="Panel" module="aui-panel" package="alloy" bodyContent="false" alloyComponent="true">
    <attributes>
      <attribute>
        <name>bodyContent</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The content to be added to the body section. This will replace any existing content
in the body. If you want to append, or insert new content, use the <a href="#method_setStdModContent">setStdModContent</a> method.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>boundingBox</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The outermost DOM node for the Widget, used for sizing and positioning 
of a Widget as well as a containing element for any decorator elements used 
for skinning.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>collapsed</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Whether the panel is displayed collapsed.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>collapsible</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Whether the panel is able to be collapsed.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>contentBox</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[A DOM node that is a direct descendant of a Widget's bounding box that 
houses its content.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>destroyed</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this object
has been through the destroy lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>disabled</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Boolean indicating if the Widget should be disabled. The disabled implementation
is left to the specific classes extending widget.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>fillHeight</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The section (WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER) which should be resized to fill the height of the standard module, when a 
height is set on the Widget. If a height is not set on the widget, then all sections are sized based on 
their content.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>focused</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Boolean indicating if the Widget, or one of its descendants, 
has focus.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>footerContent</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The content to be added to the footer section. This will replace any existing content
in the footer. If you want to append, or insert new content, use the <a href="#method_setStdModContent">setStdModContent</a> method.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>headerContent</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The content to be added to the header section. This will replace any existing content
in the header. If you want to append, or insert new content, use the <a href="#method_setStdModContent">setStdModContent</a> method.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>height</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[String with units, or number, representing the height of the Widget. If a number is provided,
the default unit, defined by the Widgets DEF_UNIT, property is used.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>icons</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.ArrayList</outputType>
        <defaultValue>[]</defaultValue>
        <description><![CDATA[<p>Array of <a href="ButtonItem.html">ButtonItem</a> configuration objects to be displayed as icons
on the Panel title.</p>
Example:
<pre><code>icons: [ { icon: 'close', id: 'close' } ]</code></pre>
For more information how to use this option see
<a href="ButtonItem.html">ButtonItem</a>.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.ArrayList","required":false,"defaultValue":"[]"}-->]]></description>
      </attribute>
      <attribute>
        <name>id</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>initialized</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this object
has been through the init lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>render</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Whether or not to render the widget automatically after init, and optionally, to which parent node.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>rendered</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this Widget
has been through the render lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>srcNode</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The DOM node to parse for configuration values, passed to the Widget's HTML_PARSER definition<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>strings</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.HashMap</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Collection of strings used to label elements of the Panel's UI.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.HashMap","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>tabIndex</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>0</defaultValue>
        <description><![CDATA[Number (between -32767 to 32767) indicating the widget's 
position in the default tab flow.  The value is used to set the 
"tabIndex" attribute on the widget's bounding box.  Negative values allow
the widget to receive DOM focus programmatically (by calling the focus
method), while being removed from the default tab flow.  A value of 
null removes the "tabIndex" attribute from the widget's bounding box.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0"}-->]]></description>
      </attribute>
      <attribute>
        <name>title</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The title to be displayed on the Panel.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>useARIA</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[True if Panel should use ARIA plugin<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>visible</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[Boolean indicating weather or not the Widget is visible.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>width</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[String with units, or number, representing the width of the Widget. If a number is provided,
the default unit, defined by the Widgets DEF_UNIT, property is used.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
    </attributes>
    <events>
      <event>
        <name>bodyContentChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'bodyContent' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>boundingBoxChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'boundingBox' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>collapsedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'collapsed' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>collapsibleChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'collapsible' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>contentBoxChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'contentBox' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>destroy</name>
        <type>java.lang.Object</type>
        <description><![CDATA[<p>
Lifecycle event for the destroy phase, 
fired prior to destruction. Invoking the preventDefault 
method on the event object provided to subscribers will 
prevent destruction from proceeding.
</p>
<p>
Subscribers to the "after" moment of this event, will be notified
after destruction is complete (and as a result cannot prevent
destruction).
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>destroyedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'destroyed' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>disabledChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'disabled' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>fillHeightChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'fillHeight' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>focusedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'focused' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>footerContentChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'footerContent' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>headerContentChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'headerContent' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>heightChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'height' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>iconsChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'icons' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>idChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'id' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>init</name>
        <type>java.lang.Object</type>
        <description><![CDATA[<p>
Lifecycle event for the init phase, fired prior to initialization. 
Invoking the preventDefault() method on the event object provided 
to subscribers will prevent initialization from occuring.
</p>
<p>
Subscribers to the "after" momemt of this event, will be notified
after initialization of the object is complete (and therefore
cannot prevent initialization).
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>initializedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'initialized' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>renderChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'render' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>renderedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'rendered' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>srcNodeChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'srcNode' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>stringsChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'strings' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>tabIndexChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'tabIndex' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>titleChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'title' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>useARIAChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'useARIA' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>visibleChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'visible' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>widget:contentUpdate</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Notification event, which widget implementations can fire, when
they change the content of the widget. This event has no default
behavior and cannot be prevented, so the "on" or "after"
moments are effectively equivalent (with on listeners being invoked before 
after listeners).<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>widget:render</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Lifecycle event for the render phase, fired prior to rendering the UI 
for the widget (prior to invoking the widget's renderer method).
<p>
Subscribers to the "on" moment of this event, will be notified 
before the widget is rendered.
</p>
<p>
Subscribers to the "after" moment of this event, will be notified
after rendering is complete.
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>widthChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'width' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
    </events>
  </component>
  <component name="ParseContent" module="aui-parse-content" package="alloy" bodyContent="false" alloyComponent="true">
    <attributes>
      <attribute>
        <name>destroyed</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this object
has been through the destroy lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>host</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The plugin's host object.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>initialized</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this object
has been through the init lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
    </attributes>
    <events>
      <event>
        <name>destroy</name>
        <type>java.lang.Object</type>
        <description><![CDATA[<p>
Lifecycle event for the destroy phase, 
fired prior to destruction. Invoking the preventDefault 
method on the event object provided to subscribers will 
prevent destruction from proceeding.
</p>
<p>
Subscribers to the "after" moment of this event, will be notified
after destruction is complete (and as a result cannot prevent
destruction).
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>destroyedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'destroyed' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>hostChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'host' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>init</name>
        <type>java.lang.Object</type>
        <description><![CDATA[<p>
Lifecycle event for the init phase, fired prior to initialization. 
Invoking the preventDefault() method on the event object provided 
to subscribers will prevent initialization from occuring.
</p>
<p>
Subscribers to the "after" momemt of this event, will be notified
after initialization of the object is complete (and therefore
cannot prevent initialization).
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>initializedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'initialized' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
    </events>
  </component>
  <component name="PortalLayout" module="aui-portal-layout" package="alloy" bodyContent="false" alloyComponent="true">
    <attributes>
      <attribute>
        <name>destroyed</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this object
has been through the destroy lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>initialized</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this object
has been through the init lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
    </attributes>
    <events>
      <event>
        <name>destroy</name>
        <type>java.lang.Object</type>
        <description><![CDATA[<p>
Lifecycle event for the destroy phase, 
fired prior to destruction. Invoking the preventDefault 
method on the event object provided to subscribers will 
prevent destruction from proceeding.
</p>
<p>
Subscribers to the "after" moment of this event, will be notified
after destruction is complete (and as a result cannot prevent
destruction).
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>destroyedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'destroyed' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>init</name>
        <type>java.lang.Object</type>
        <description><![CDATA[<p>
Lifecycle event for the init phase, fired prior to initialization. 
Invoking the preventDefault() method on the event object provided 
to subscribers will prevent initialization from occuring.
</p>
<p>
Subscribers to the "after" momemt of this event, will be notified
after initialization of the object is complete (and therefore
cannot prevent initialization).
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>initializedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'initialized' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
    </events>
  </component>
  <component name="ProgressBar" module="aui-progressbar" package="alloy" bodyContent="false" alloyComponent="true">
    <attributes>
      <attribute>
        <name>boundingBox</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The outermost DOM node for the Widget, used for sizing and positioning 
of a Widget as well as a containing element for any decorator elements used 
for skinning.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>contentBox</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[A DOM node that is a direct descendant of a Widget's bounding box that 
houses its content.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>cssClass</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[CSS class to be automatically added to the <code>boundingBox</code>.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>destroyed</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this object
has been through the destroy lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>disabled</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Boolean indicating if the Widget should be disabled. The disabled implementation
is left to the specific classes extending widget.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>focused</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Boolean indicating if the Widget, or one of its descendants, 
has focus.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>height</name>
        <inputType>int</inputType>
        <outputType>int</outputType>
        <defaultValue>25</defaultValue>
        <description><![CDATA[Display height of the progressbar.<!--{"event":false,"inputType":"int","outputType":"int","required":false,"defaultValue":"25"}-->]]></description>
      </attribute>
      <attribute>
        <name>hideClass</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue>aui-helper-hidden</defaultValue>
        <description><![CDATA[css class added to hide the <code>boundingBox</code> when
<a href="Component.html#config_visible">visible</a> is set to
<code>false</code>.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false,"defaultValue":"aui-helper-hidden"}-->]]></description>
      </attribute>
      <attribute>
        <name>id</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>initialized</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this object
has been through the init lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>label</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Display label of the progressbar. If not specified try to query
using HTML_PARSER an element inside contentBox which matches
<code>aui-progressbar-text</code> and get its innerHTML to be
used as label.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>max</name>
        <inputType>int</inputType>
        <outputType>int</outputType>
        <defaultValue>100</defaultValue>
        <description><![CDATA[Represents the top value for the bar. The bar will be fully
extended when reaching this value. Values higher than this will
be ignored.<!--{"event":false,"inputType":"int","outputType":"int","required":false,"defaultValue":"100"}-->]]></description>
      </attribute>
      <attribute>
        <name>min</name>
        <inputType>int</inputType>
        <outputType>int</outputType>
        <defaultValue>0</defaultValue>
        <description><![CDATA[Represents the lowest value for the bar. The bar will be
totally collapsed when reaching this value. Values lower than
this will be ignored.<!--{"event":false,"inputType":"int","outputType":"int","required":false,"defaultValue":"0"}-->]]></description>
      </attribute>
      <attribute>
        <name>orientation</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue>horizontal</defaultValue>
        <description><![CDATA[Display orientation of the progressbar (i.e. vertical or
horizontal).<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false,"defaultValue":"horizontal"}-->]]></description>
      </attribute>
      <attribute>
        <name>ratio</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>0</defaultValue>
        <description><![CDATA[Calculate the ratio based on <code>max</code> and
<code>min</code> values.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0"}-->]]></description>
      </attribute>
      <attribute>
        <name>render</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[If <code>true</code> the render phase will be autimatically invoked
preventing the <code>.render()</code> manual call.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>rendered</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this Widget
has been through the render lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>srcNode</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The DOM node to parse for configuration values, passed to the Widget's HTML_PARSER definition<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>statusNode</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[DOM Node to display the satus bar of the progressbar. If not
specified try to query using HTML_PARSER an element inside
contentBox which matches <code>aui-progressbar-status</code>.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>step</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>0</defaultValue>
        <description><![CDATA[Calculate the progressbar step based on <code>ratio</code>
value.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0"}-->]]></description>
      </attribute>
      <attribute>
        <name>strings</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.HashMap</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Collection of strings used to label elements of the Widget's UI.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.HashMap","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>tabIndex</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>0</defaultValue>
        <description><![CDATA[Number (between -32767 to 32767) indicating the widget's 
position in the default tab flow.  The value is used to set the 
"tabIndex" attribute on the widget's bounding box.  Negative values allow
the widget to receive DOM focus programmatically (by calling the focus
method), while being removed from the default tab flow.  A value of 
null removes the "tabIndex" attribute from the widget's bounding box.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0"}-->]]></description>
      </attribute>
      <attribute>
        <name>textNode</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[DOM Node to display the text of the progressbar. If not
specified try to query using HTML_PARSER an element inside
contentBox which matches <code>aui-progressbar-text</code>.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>useARIA</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[Boolean indicating if use of the WAI-ARIA Roles and States should be
enabled for the Widget.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>value</name>
        <inputType>int</inputType>
        <outputType>int</outputType>
        <defaultValue>0</defaultValue>
        <description><![CDATA[The value for the bar. Valid values are in between the minValue
and maxValue attributes.<!--{"event":false,"inputType":"int","outputType":"int","required":false,"defaultValue":"0"}-->]]></description>
      </attribute>
      <attribute>
        <name>visible</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[Boolean indicating weather or not the Widget is visible.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>width</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[String with units, or number, representing the width of the Widget. If a number is provided,
the default unit, defined by the Widgets DEF_UNIT, property is used.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
    </attributes>
    <events>
      <event>
        <name>boundingBoxChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'boundingBox' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>contentBoxChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'contentBox' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>cssClassChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'cssClass' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>destroy</name>
        <type>java.lang.Object</type>
        <description><![CDATA[<p>
Lifecycle event for the destroy phase, 
fired prior to destruction. Invoking the preventDefault 
method on the event object provided to subscribers will 
prevent destruction from proceeding.
</p>
<p>
Subscribers to the "after" moment of this event, will be notified
after destruction is complete (and as a result cannot prevent
destruction).
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>destroyedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'destroyed' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>disabledChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'disabled' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>focusedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'focused' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>heightChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'height' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>hideClassChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'hideClass' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>idChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'id' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>init</name>
        <type>java.lang.Object</type>
        <description><![CDATA[<p>
Lifecycle event for the init phase, fired prior to initialization. 
Invoking the preventDefault() method on the event object provided 
to subscribers will prevent initialization from occuring.
</p>
<p>
Subscribers to the "after" momemt of this event, will be notified
after initialization of the object is complete (and therefore
cannot prevent initialization).
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>initializedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'initialized' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>labelChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'label' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>maxChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'max' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>minChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'min' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>orientationChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'orientation' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>ratioChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'ratio' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>renderChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'render' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>renderedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'rendered' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>srcNodeChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'srcNode' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>statusNodeChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'statusNode' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>stepChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'step' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>stringsChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'strings' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>tabIndexChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'tabIndex' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>textNodeChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'textNode' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>useARIAChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'useARIA' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>valueChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'value' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>visibleChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'visible' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>widget:contentUpdate</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Notification event, which widget implementations can fire, when
they change the content of the widget. This event has no default
behavior and cannot be prevented, so the "on" or "after"
moments are effectively equivalent (with on listeners being invoked before 
after listeners).<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>widget:render</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Lifecycle event for the render phase, fired prior to rendering the UI 
for the widget (prior to invoking the widget's renderer method).
<p>
Subscribers to the "on" moment of this event, will be notified 
before the widget is rendered.
</p>
<p>
Subscribers to the "after" moment of this event, will be notified
after rendering is complete.
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>widthChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'width' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
    </events>
  </component>
  <component name="Rating" module="aui-rating" package="alloy" bodyContent="false" alloyComponent="true">
    <attributes>
      <attribute>
        <name>boundingBox</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The outermost DOM node for the Widget, used for sizing and positioning 
of a Widget as well as a containing element for any decorator elements used 
for skinning.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>canReset</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[If <code>true</code> could be reseted (i.e., have no values
selected).<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>contentBox</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[A DOM node that is a direct descendant of a Widget's bounding box that 
houses its content.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>cssClass</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[CSS class to be automatically added to the <code>boundingBox</code>.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>defaultSelected</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>0</defaultValue>
        <description><![CDATA[The number of selected starts when the Rating render.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0"}-->]]></description>
      </attribute>
      <attribute>
        <name>destroyed</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this object
has been through the destroy lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>disabled</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Whether the Rating is disabled or not. Disabled Ratings don't allow
hover or click, just display selected stars.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>elements</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[<a href="NodeList.html">NodeList</a> of elements used on the
Rating. Each element is one Star.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>focused</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Boolean indicating if the Widget, or one of its descendants, 
has focus.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>height</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[String with units, or number, representing the height of the Widget. If a number is provided,
the default unit, defined by the Widgets DEF_UNIT, property is used.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>hiddenInput</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Hidden input to handle the selected value. This hidden input
replace the radio elements and keep the same name.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>hideClass</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue>aui-helper-hidden</defaultValue>
        <description><![CDATA[css class added to hide the <code>boundingBox</code> when
<a href="Component.html#config_visible">visible</a> is set to
<code>false</code>.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false,"defaultValue":"aui-helper-hidden"}-->]]></description>
      </attribute>
      <attribute>
        <name>id</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>initialized</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this object
has been through the init lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>inputName</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Name of the <a
href="Rating.html#config_hiddenInput">hiddenInput</a> element. If
not specified will use the name of the replaced radio.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>label</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Label to be displayed with the Rating elements.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>labelNode</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[DOM Node to display the text of the StarRating. If not
specified try to query using HTML_PARSER an element inside
boundingBox which matches <code>aui-rating-label-element</code>.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>render</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[If <code>true</code> the render phase will be autimatically invoked
preventing the <code>.render()</code> manual call.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>rendered</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this Widget
has been through the render lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>selectedIndex</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>-1</defaultValue>
        <description><![CDATA[Stores the index of the selected element.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"-1"}-->]]></description>
      </attribute>
      <attribute>
        <name>showTitle</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[If <code>true</code> will extract the value of the
<code>title</code> attribute on the radio, and use it on the
generated Rating elements.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>size</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>5</defaultValue>
        <description><![CDATA[Number of Rating elements to be displayed.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"5"}-->]]></description>
      </attribute>
      <attribute>
        <name>srcNode</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The DOM node to parse for configuration values, passed to the Widget's HTML_PARSER definition<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>strings</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.HashMap</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Collection of strings used to label elements of the Widget's UI.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.HashMap","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>tabIndex</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>0</defaultValue>
        <description><![CDATA[Number (between -32767 to 32767) indicating the widget's 
position in the default tab flow.  The value is used to set the 
"tabIndex" attribute on the widget's bounding box.  Negative values allow
the widget to receive DOM focus programmatically (by calling the focus
method), while being removed from the default tab flow.  A value of 
null removes the "tabIndex" attribute from the widget's bounding box.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0"}-->]]></description>
      </attribute>
      <attribute>
        <name>title</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[If set, will be used when there is no DOM <code>title</code> on the
radio elements.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>useARIA</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[Boolean indicating if use of the WAI-ARIA Roles and States should be
enabled for the Widget.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>value</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Stores the value of the current selected Rating element.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>visible</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[Boolean indicating weather or not the Widget is visible.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>width</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[String with units, or number, representing the width of the Widget. If a number is provided,
the default unit, defined by the Widgets DEF_UNIT, property is used.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
    </attributes>
    <events>
      <event>
        <name>boundingBoxChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'boundingBox' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>canResetChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'canReset' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>contentBoxChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'contentBox' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>cssClassChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'cssClass' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>defaultSelectedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'defaultSelected' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>destroy</name>
        <type>java.lang.Object</type>
        <description><![CDATA[<p>
Lifecycle event for the destroy phase, 
fired prior to destruction. Invoking the preventDefault 
method on the event object provided to subscribers will 
prevent destruction from proceeding.
</p>
<p>
Subscribers to the "after" moment of this event, will be notified
after destruction is complete (and as a result cannot prevent
destruction).
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>destroyedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'destroyed' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>disabledChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'disabled' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>elementsChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'elements' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>focusedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'focused' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>heightChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'height' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>hiddenInputChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'hiddenInput' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>hideClassChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'hideClass' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>idChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'id' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>init</name>
        <type>java.lang.Object</type>
        <description><![CDATA[<p>
Lifecycle event for the init phase, fired prior to initialization. 
Invoking the preventDefault() method on the event object provided 
to subscribers will prevent initialization from occuring.
</p>
<p>
Subscribers to the "after" momemt of this event, will be notified
after initialization of the object is complete (and therefore
cannot prevent initialization).
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>initializedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'initialized' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>inputNameChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'inputName' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>itemClick</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Handles the itemClick event.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>itemOut</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Handles the itemOut event.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>itemSelect</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Handles the itemSelect event.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>labelChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'label' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>labelNodeChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'labelNode' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>renderChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'render' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>renderedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'rendered' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>selectedIndexChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'selectedIndex' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>showTitleChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'showTitle' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>sizeChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'size' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>srcNodeChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'srcNode' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>stringsChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'strings' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>tabIndexChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'tabIndex' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>titleChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'title' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>useARIAChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'useARIA' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>valueChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'value' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>visibleChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'visible' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>widget:contentUpdate</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Notification event, which widget implementations can fire, when
they change the content of the widget. This event has no default
behavior and cannot be prevented, so the "on" or "after"
moments are effectively equivalent (with on listeners being invoked before 
after listeners).<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>widget:render</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Lifecycle event for the render phase, fired prior to rendering the UI 
for the widget (prior to invoking the widget's renderer method).
<p>
Subscribers to the "on" moment of this event, will be notified 
before the widget is rendered.
</p>
<p>
Subscribers to the "after" moment of this event, will be notified
after rendering is complete.
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>widthChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'width' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
    </events>
  </component>
  <component name="Resize" module="aui-resize" package="alloy" bodyContent="false" alloyComponent="true">
    <attributes>
      <attribute>
        <name>activeHandle</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Stores the active handle during the resize.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>activeHandleEl</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Stores the active handle element during the resize.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>activeHandleNode</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Stores the active handle element during the resize.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>autoHide</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[False to ensure that the resize handles are always visible, true to
display them only when the user mouses over the resizable borders.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>constrain</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Will attempt to constrain the resize node to the boundaries. Arguments:<br>
'view': Contrain to Viewport<br>
'#selector_string': Constrain to this node<br>
'{Region Object}': An Object Literal containing a valid region (top, right, bottom, left) of page positions<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>defMinHeight</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>15</defaultValue>
        <description><![CDATA[The default minimum height of the element. Only used when
ResizeConstrained is not plugged.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"15"}-->]]></description>
      </attribute>
      <attribute>
        <name>defMinWidth</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>15</defaultValue>
        <description><![CDATA[The default minimum width of the element. Only used when
ResizeConstrained is not plugged.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"15"}-->]]></description>
      </attribute>
      <attribute>
        <name>destroyed</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this object
has been through the destroy lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>handles</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue>all</defaultValue>
        <description><![CDATA[The handles to use (any combination of): 't', 'b', 'r', 'l', 'bl',
'br', 'tl', 'tr'. Can use a shortcut of All.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false,"defaultValue":"all"}-->]]></description>
      </attribute>
      <attribute>
        <name>handlesWrapper</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Node to wrap the resize handles.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>initialized</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this object
has been through the init lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>maxHeight</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>2147483647</defaultValue>
        <description><![CDATA[The maximum height of the element<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"2147483647"}-->]]></description>
      </attribute>
      <attribute>
        <name>maxWidth</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>2147483647</defaultValue>
        <description><![CDATA[The maximum width of the element<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"2147483647"}-->]]></description>
      </attribute>
      <attribute>
        <name>minHeight</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>15</defaultValue>
        <description><![CDATA[The minimum height of the element<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"15"}-->]]></description>
      </attribute>
      <attribute>
        <name>minWidth</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>15</defaultValue>
        <description><![CDATA[The minimum width of the element<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"15"}-->]]></description>
      </attribute>
      <attribute>
        <name>node</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The selector or element to resize. Required.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>preserveRatio</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Maintain the element's ratio when resizing.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>proxy</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Resize a proxy element instead of the real element.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>proxyEl</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The Resize proxy element.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>resizing</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[True when the element is being Resized.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>tickX</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[The number of x ticks to span the resize to.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>tickY</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[The number of y ticks to span the resize to.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>wrap</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[True to wrap an element with a div if needed (required for textareas
and images, defaults to false) in favor of the handles config option.
The wrapper element type (default div) could be over-riden passing the
<code>wrapper</code> attribute.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>wrapTypes</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue>/canvas|textarea|input|select|button|img/i</defaultValue>
        <description><![CDATA[Elements that requires a wrapper by default. Normally are elements
which cannot have children elements.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false,"defaultValue":"/canvas|textarea|input|select|button|img/i"}-->]]></description>
      </attribute>
      <attribute>
        <name>wrapper</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue>div</defaultValue>
        <description><![CDATA[Element to wrap the <code>wrapTypes</code>. This element will house
the handles elements.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false,"defaultValue":"div"}-->]]></description>
      </attribute>
    </attributes>
    <events>
      <event>
        <name>activeHandleChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'activeHandle' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>activeHandleElChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'activeHandleEl' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>activeHandleNodeChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'activeHandleNode' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>autoHideChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'autoHide' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>constrainChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'constrain' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>defMinHeightChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'defMinHeight' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>defMinWidthChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'defMinWidth' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>destroy</name>
        <type>java.lang.Object</type>
        <description><![CDATA[<p>
Lifecycle event for the destroy phase, 
fired prior to destruction. Invoking the preventDefault 
method on the event object provided to subscribers will 
prevent destruction from proceeding.
</p>
<p>
Subscribers to the "after" moment of this event, will be notified
after destruction is complete (and as a result cannot prevent
destruction).
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>destroyedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'destroyed' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>handlesChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'handles' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>handlesWrapperChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'handlesWrapper' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>init</name>
        <type>java.lang.Object</type>
        <description><![CDATA[<p>
Lifecycle event for the init phase, fired prior to initialization. 
Invoking the preventDefault() method on the event object provided 
to subscribers will prevent initialization from occuring.
</p>
<p>
Subscribers to the "after" momemt of this event, will be notified
after initialization of the object is complete (and therefore
cannot prevent initialization).
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>initializedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'initialized' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>maxHeightChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'maxHeight' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>maxWidthChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'maxWidth' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>minHeightChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'minHeight' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>minWidthChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'minWidth' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>nodeChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'node' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>preserveRatioChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'preserveRatio' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>proxyChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'proxy' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>proxyElChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'proxyEl' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>resize:align</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Handles the resize align event.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>resize:end</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Handles the resize end event. Fired when a handle stop to be
dragged.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>resize:mouseUp</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Handles the resize mouseUp event. Fired when a mouseUp event happens on a
handle.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>resize:resize</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Handles the resize event. Fired on each pixel when the handle is
being dragged.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>resize:start</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Handles the resize start event. Fired when a handle starts to be
dragged.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>resizingChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'resizing' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>tickXChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'tickX' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>tickYChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'tickY' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>wrapChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'wrap' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>wrapTypesChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'wrapTypes' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>wrapperChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'wrapper' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
    </events>
  </component>
  <component name="Textboxlist" module="aui-textboxlist" package="alloy" bodyContent="false" alloyComponent="true">
    <attributes>
      <attribute>
        <name>alwaysShowContainer</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Always show the results container, instead of only showing when the 
user is requesting them.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>applyLocalFilter</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[If set to true, the <a href="AutoComplete.html#method_filterResults">filterResults</a> 
method will be run on the response from the data source.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>autoHighlight</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[Automatically highlight the first item in the list when the results are
made visible.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>boundingBox</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The outermost DOM node for the Widget, used for sizing and positioning 
of a Widget as well as a containing element for any decorator elements used 
for skinning.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>button</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[To use a button<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>contentBox</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[A DOM node that is a direct descendant of a Widget's bounding box that 
houses its content.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>cssClass</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[CSS class to be automatically added to the <code>boundingBox</code>.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>dataSource</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The data source that results will be read from. This can either be
an existing <a href="DataSource.html">DataSource</a> object, or it can be a
value that would be passed to <a href="DataSource.html">DataSource</a>.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>dataSourceType</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The type of the data source passed into <a href="AutoComplete.html#config_dataSource">dataSource</a>.
This can be used to explicitly declare what kind of <a href="DataSource.html">DataSource</a> object will
be created.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>delimChar</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The character used to indicate the beginning or ending of a new value. Most commonly used
is a ",".<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>destroyed</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this object
has been through the destroy lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>disabled</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Boolean indicating if the Widget should be disabled. The disabled implementation
is left to the specific classes extending widget.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>focused</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Boolean indicating if the Widget, or one of its descendants, 
has focus.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>forceSelection</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[If <a href="AutoComplete.html#config_typeAhead">typeAhead</a> is true, this
will clear a selection when the overlay closes unless a user explicitly selects an item.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>height</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[String with units, or number, representing the height of the Widget. If a number is provided,
the default unit, defined by the Widgets DEF_UNIT, property is used.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>hideClass</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue>aui-helper-hidden</defaultValue>
        <description><![CDATA[css class added to hide the <code>boundingBox</code> when
<a href="Component.html#config_visible">visible</a> is set to
<code>false</code>.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false,"defaultValue":"aui-helper-hidden"}-->]]></description>
      </attribute>
      <attribute>
        <name>id</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>initialized</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this object
has been through the init lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>input</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The input field which will recieve the users input.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>matchKey</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue>0</defaultValue>
        <description><![CDATA[The key or numeric index in the schema to match the result against.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false,"defaultValue":"0"}-->]]></description>
      </attribute>
      <attribute>
        <name>maxResultsDisplayed</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>10</defaultValue>
        <description><![CDATA[The maximum number of results to display.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"10"}-->]]></description>
      </attribute>
      <attribute>
        <name>minQueryLength</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>1</defaultValue>
        <description><![CDATA[The minimum number of characters required to query the data source.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"1"}-->]]></description>
      </attribute>
      <attribute>
        <name>queryDelay</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>0.2</defaultValue>
        <description><![CDATA[The amount of time in seconds to delay before submitting the query.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0.2"}-->]]></description>
      </attribute>
      <attribute>
        <name>queryInterval</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>0.5</defaultValue>
        <description><![CDATA[When IME usage is detected or interval detection is explicitly enabled,
AutoComplete will detect the input value at the given interval and send a
query if the value has changed.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0.5"}-->]]></description>
      </attribute>
      <attribute>
        <name>queryMatchCase</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[When <a href="AutoComplete.html#config_applyLocalFilter">applyLocalFilter</a> is true,
setting this to true will match only results with the same case.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>queryMatchContains</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[When <a href="AutoComplete.html#config_applyLocalFilter">applyLocalFilter</a> is true,
setting this to true will match results which contain the query anywhere in the text,
instead of just matching just items that start with the query.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>queryQuestionMark</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[For IO DataSources, AutoComplete will automatically insert a "?" between the server URI and 
the encoded query string. To prevent this behavior, you can
set this value to false. If you need to customize this even further, you
can override the <a href="AutoComplete.html#method_generateRequest">generateRequest</a> method.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>render</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[If <code>true</code> the render phase will be autimatically invoked
preventing the <code>.render()</code> manual call.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>rendered</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this Widget
has been through the render lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>schema</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.HashMap</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[A valid configuration object for any of <a href="module_datasource.html">DataSource</a> schema plugins.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.HashMap","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>schemaType</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue>array</defaultValue>
        <description><![CDATA[A valid type of <a href="module_datasource.html">DataSource</a> schema plugin, such as array, json, xml, etc.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false,"defaultValue":"array"}-->]]></description>
      </attribute>
      <attribute>
        <name>srcNode</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The DOM node to parse for configuration values, passed to the Widget's HTML_PARSER definition<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>strings</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.HashMap</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Collection of strings used to label elements of the Widget's UI.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.HashMap","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>suppressInputUpdate</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Whether or not the input field should be updated with selections.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>tabIndex</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>0</defaultValue>
        <description><![CDATA[Number (between -32767 to 32767) indicating the widget's 
position in the default tab flow.  The value is used to set the 
"tabIndex" attribute on the widget's bounding box.  Negative values allow
the widget to receive DOM focus programmatically (by calling the focus
method), while being removed from the default tab flow.  A value of 
null removes the "tabIndex" attribute from the widget's bounding box.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0"}-->]]></description>
      </attribute>
      <attribute>
        <name>typeAhead</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[If <a href="AutoComplete.html#config_autoHighlight">autoHighlight</a> is enabled, whether or not the 
input field should be automatically updated with the first result as the user types, 
automatically selecting the portion of the text the user has not typed yet.<!--{"event":true,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>typeAheadDelay</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>0.2</defaultValue>
        <description><![CDATA[If <a href="AutoComplete.html#config_typeAhead">typeAhead</a> is true, number of seconds 
to delay before updating the input. In order to prevent certain race conditions, this value must
always be greater than the <a href="AutoComplete.html#config_queryDelay">queryDelay</a>.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0.2"}-->]]></description>
      </attribute>
      <attribute>
        <name>uniqueName</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The unique ID of the input element.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>useARIA</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[Boolean indicating if use of the WAI-ARIA Roles and States should be
enabled for the Widget.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>visible</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[Boolean indicating weather or not the Widget is visible.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>width</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[String with units, or number, representing the width of the Widget. If a number is provided,
the default unit, defined by the Widgets DEF_UNIT, property is used.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
    </attributes>
    <events>
      <event>
        <name>alwaysShowContainerChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'alwaysShowContainer' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>applyLocalFilterChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'applyLocalFilter' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>autoHighlightChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'autoHighlight' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>boundingBoxChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'boundingBox' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>buttonChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'button' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>containerCollapse</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Handles the containerCollapse event. Fired when the container is hidden.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>containerExpand</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Handles the containerExpand event. Fired when the container is shown.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>containerPopulate</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Handles the containerPopulate event. Fired when the container is populated.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>contentBoxChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'contentBox' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>cssClassChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'cssClass' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>dataError</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Handles the dataError event. Fired when there is an error accessing the data.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>dataRequest</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Handles the dataRequest event. Fired when ever a query is sent to the data source.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>dataReturn</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Handles the dataReturn event. Fired when data successfully comes back from the data request.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>dataSourceChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'dataSource' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>dataSourceTypeChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'dataSourceType' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>delimCharChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'delimChar' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>destroy</name>
        <type>java.lang.Object</type>
        <description><![CDATA[<p>
Lifecycle event for the destroy phase, 
fired prior to destruction. Invoking the preventDefault 
method on the event object provided to subscribers will 
prevent destruction from proceeding.
</p>
<p>
Subscribers to the "after" moment of this event, will be notified
after destruction is complete (and as a result cannot prevent
destruction).
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>destroyedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'destroyed' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>disabledChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'disabled' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>focusedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'focused' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>forceSelectionChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'forceSelection' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>heightChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'height' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>hideClassChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'hideClass' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>idChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'id' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>init</name>
        <type>java.lang.Object</type>
        <description><![CDATA[<p>
Lifecycle event for the init phase, fired prior to initialization. 
Invoking the preventDefault() method on the event object provided 
to subscribers will prevent initialization from occuring.
</p>
<p>
Subscribers to the "after" momemt of this event, will be notified
after initialization of the object is complete (and therefore
cannot prevent initialization).
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>initializedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'initialized' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>inputChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'input' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>itemArrowFrom</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Handles the itemArrowFrom event. Fired when the user navigates via the keyboard away from
a selected item.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>itemArrowTo</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Handles the itemArrowTo event. Fired when the user navigates via the keyboard to a selected item.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>itemMouseOut</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Handles the itemMouseOut event. Fired when the user mouses away from an item.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>itemMouseOver</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Handles the itemMouseOver event. Fired when the user mouses over an item.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>itemSelect</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Handles the itemSelect event. Fired when an item in the list is selected.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>matchKeyChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'matchKey' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>maxResultsDisplayedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'maxResultsDisplayed' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>minQueryLengthChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'minQueryLength' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>queryDelayChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'queryDelay' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>queryIntervalChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'queryInterval' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>queryMatchCaseChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'queryMatchCase' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>queryMatchContainsChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'queryMatchContains' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>queryQuestionMarkChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'queryQuestionMark' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>renderChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'render' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>renderedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'rendered' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>schemaChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'schema' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>schemaTypeChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'schemaType' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>selectionEnforce</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Handles the selectionEnforce event. Fired if <a href="Autocomplete.html#config_forceSelection">forceSelection</a>
is enabled and the users input element has been cleared because it did not match one of the results.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>srcNodeChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'srcNode' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>stringsChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'strings' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>suppressInputUpdateChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'suppressInputUpdate' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>tabIndexChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'tabIndex' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>textboxBlur</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Handles the textboxBlur event. Fired when the user leaves the input element.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>textboxChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Handles the textboxChange event. Fired when the value in the input element is changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>textboxFocus</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Handles the textboxFocus event. Fired when user moves focus to the input element.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>textboxKey</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Handles the textboxKey event. Fired when the input element receives key input.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>typeAhead</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Handles the typeAhead event. Fired when the input element has been pre-filled by the type-ahead feature.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>typeAheadChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'typeAhead' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>typeAheadDelayChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'typeAheadDelay' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>uniqueNameChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'uniqueName' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>unmatchedItemSelect</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Handles the unmatchedItemSelect event. Fired when a user selects something that does
not match any of the displayed results.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>useARIAChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'useARIA' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>visibleChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'visible' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>widget:contentUpdate</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Notification event, which widget implementations can fire, when
they change the content of the widget. This event has no default
behavior and cannot be prevented, so the "on" or "after"
moments are effectively equivalent (with on listeners being invoked before 
after listeners).<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>widget:render</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Lifecycle event for the render phase, fired prior to rendering the UI 
for the widget (prior to invoking the widget's renderer method).
<p>
Subscribers to the "on" moment of this event, will be notified 
before the widget is rendered.
</p>
<p>
Subscribers to the "after" moment of this event, will be notified
after rendering is complete.
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>widthChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'width' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
    </events>
  </component>
  <component name="ThumbRating" module="aui-rating" package="alloy" bodyContent="false" alloyComponent="true">
    <attributes>
      <attribute>
        <name>boundingBox</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The outermost DOM node for the Widget, used for sizing and positioning 
of a Widget as well as a containing element for any decorator elements used 
for skinning.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>canReset</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[If <code>true</code> could be reseted (i.e., have no values
selected).<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>contentBox</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[A DOM node that is a direct descendant of a Widget's bounding box that 
houses its content.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>cssClass</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[CSS class to be automatically added to the <code>boundingBox</code>.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>defaultSelected</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>0</defaultValue>
        <description><![CDATA[The number of selected starts when the Rating render.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0"}-->]]></description>
      </attribute>
      <attribute>
        <name>destroyed</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this object
has been through the destroy lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>disabled</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Whether the Rating is disabled or not. Disabled Ratings don't allow
hover or click, just display selected stars.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>elements</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[<a href="NodeList.html">NodeList</a> of elements used on the
Rating. Each element is one Star.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>focused</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Boolean indicating if the Widget, or one of its descendants, 
has focus.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>height</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[String with units, or number, representing the height of the Widget. If a number is provided,
the default unit, defined by the Widgets DEF_UNIT, property is used.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>hiddenInput</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Hidden input to handle the selected value. This hidden input
replace the radio elements and keep the same name.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>hideClass</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue>aui-helper-hidden</defaultValue>
        <description><![CDATA[css class added to hide the <code>boundingBox</code> when
<a href="Component.html#config_visible">visible</a> is set to
<code>false</code>.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false,"defaultValue":"aui-helper-hidden"}-->]]></description>
      </attribute>
      <attribute>
        <name>id</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>initialized</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this object
has been through the init lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>inputName</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Name of the <a
href="Rating.html#config_hiddenInput">hiddenInput</a> element. If
not specified will use the name of the replaced radio.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>label</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Label to be displayed with the Rating elements.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>labelNode</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[DOM Node to display the text of the StarRating. If not
specified try to query using HTML_PARSER an element inside
boundingBox which matches <code>aui-rating-label-element</code>.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>render</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[If <code>true</code> the render phase will be autimatically invoked
preventing the <code>.render()</code> manual call.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>rendered</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this Widget
has been through the render lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>selectedIndex</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>-1</defaultValue>
        <description><![CDATA[Stores the index of the selected element.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"-1"}-->]]></description>
      </attribute>
      <attribute>
        <name>showTitle</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[If <code>true</code> will extract the value of the
<code>title</code> attribute on the radio, and use it on the
generated Rating elements.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>size</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>2</defaultValue>
        <description><![CDATA[The size on ThumbRating is always 2 (i.e., thumb up and thumb down).<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"2"}-->]]></description>
      </attribute>
      <attribute>
        <name>srcNode</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The DOM node to parse for configuration values, passed to the Widget's HTML_PARSER definition<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>strings</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.HashMap</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Collection of strings used to label elements of the Widget's UI.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.HashMap","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>tabIndex</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>0</defaultValue>
        <description><![CDATA[Number (between -32767 to 32767) indicating the widget's 
position in the default tab flow.  The value is used to set the 
"tabIndex" attribute on the widget's bounding box.  Negative values allow
the widget to receive DOM focus programmatically (by calling the focus
method), while being removed from the default tab flow.  A value of 
null removes the "tabIndex" attribute from the widget's bounding box.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0"}-->]]></description>
      </attribute>
      <attribute>
        <name>title</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[If set, will be used when there is no DOM <code>title</code> on the
radio elements.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>useARIA</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[Boolean indicating if use of the WAI-ARIA Roles and States should be
enabled for the Widget.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>value</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Stores the value of the current selected Rating element.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>visible</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[Boolean indicating weather or not the Widget is visible.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>width</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[String with units, or number, representing the width of the Widget. If a number is provided,
the default unit, defined by the Widgets DEF_UNIT, property is used.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
    </attributes>
    <events>
      <event>
        <name>boundingBoxChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'boundingBox' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>canResetChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'canReset' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>contentBoxChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'contentBox' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>cssClassChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'cssClass' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>defaultSelectedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'defaultSelected' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>destroy</name>
        <type>java.lang.Object</type>
        <description><![CDATA[<p>
Lifecycle event for the destroy phase, 
fired prior to destruction. Invoking the preventDefault 
method on the event object provided to subscribers will 
prevent destruction from proceeding.
</p>
<p>
Subscribers to the "after" moment of this event, will be notified
after destruction is complete (and as a result cannot prevent
destruction).
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>destroyedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'destroyed' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>disabledChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'disabled' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>elementsChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'elements' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>focusedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'focused' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>heightChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'height' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>hiddenInputChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'hiddenInput' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>hideClassChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'hideClass' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>idChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'id' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>init</name>
        <type>java.lang.Object</type>
        <description><![CDATA[<p>
Lifecycle event for the init phase, fired prior to initialization. 
Invoking the preventDefault() method on the event object provided 
to subscribers will prevent initialization from occuring.
</p>
<p>
Subscribers to the "after" momemt of this event, will be notified
after initialization of the object is complete (and therefore
cannot prevent initialization).
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>initializedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'initialized' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>inputNameChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'inputName' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>itemClick</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Handles the itemClick event.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>itemOut</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Handles the itemOut event.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>itemSelect</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Handles the itemSelect event.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>labelChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'label' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>labelNodeChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'labelNode' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>renderChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'render' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>renderedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'rendered' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>selectedIndexChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'selectedIndex' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>showTitleChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'showTitle' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>sizeChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'size' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>srcNodeChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'srcNode' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>stringsChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'strings' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>tabIndexChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'tabIndex' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>titleChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'title' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>useARIAChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'useARIA' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>valueChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'value' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>visibleChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'visible' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>widget:contentUpdate</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Notification event, which widget implementations can fire, when
they change the content of the widget. This event has no default
behavior and cannot be prevented, so the "on" or "after"
moments are effectively equivalent (with on listeners being invoked before 
after listeners).<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>widget:render</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Lifecycle event for the render phase, fired prior to rendering the UI 
for the widget (prior to invoking the widget's renderer method).
<p>
Subscribers to the "on" moment of this event, will be notified 
before the widget is rendered.
</p>
<p>
Subscribers to the "after" moment of this event, will be notified
after rendering is complete.
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>widthChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'width' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
    </events>
  </component>
  <component name="Toolbar" module="aui-toolbar" package="alloy" bodyContent="false" alloyComponent="true">
    <attributes>
      <attribute>
        <name>activeDescendant</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Returns the Widget's currently focused descendant Widget.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>activeState</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Receives an interaction state of active when the user clicks on it.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>boundingBox</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The outermost DOM node for the Widget, used for sizing and positioning 
of a Widget as well as a containing element for any decorator elements used 
for skinning.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>children</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.ArrayList</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Receives the toolbar items.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.ArrayList","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>contentBox</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[A DOM node that is a direct descendant of a Widget's bounding box that 
houses its content.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>cssClass</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[CSS class to be automatically added to the <code>boundingBox</code>.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>defaultChildType</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue>ButtonItem</defaultValue>
        <description><![CDATA[The default type of child widget to render into the Element<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false,"defaultValue":"ButtonItem"}-->]]></description>
      </attribute>
      <attribute>
        <name>defaultState</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Receives a default interaction state.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>destroyed</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this object
has been through the destroy lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>disabled</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Boolean indicating if the Widget should be disabled. The disabled implementation
is left to the specific classes extending widget.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>focused</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Boolean indicating if the Widget, or one of its descendants, 
has focus.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>height</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[String with units, or number, representing the height of the Widget. If a number is provided,
the default unit, defined by the Widgets DEF_UNIT, property is used.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>hideClass</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue>aui-helper-hidden</defaultValue>
        <description><![CDATA[css class added to hide the <code>boundingBox</code> when
<a href="Component.html#config_visible">visible</a> is set to
<code>false</code>.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false,"defaultValue":"aui-helper-hidden"}-->]]></description>
      </attribute>
      <attribute>
        <name>hoverState</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Receives an interaction state of hover during the
<code>mouseover</code> event.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>id</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>initialized</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this object
has been through the init lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>multiple</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Boolean indicating if multiple children can be selected at 
once.  Whether or not multiple selection is enabled is always delegated
to the value of the <code>multiple</code> attribute of the root widget
in the object hierarchy.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>orientation</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue>horizontal</defaultValue>
        <description><![CDATA[Representing the orientation of the progress bar. Could be
<code>horizontal</code> or <code>vertical</code>.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false,"defaultValue":"horizontal"}-->]]></description>
      </attribute>
      <attribute>
        <name>render</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[If <code>true</code> the render phase will be autimatically invoked
preventing the <code>.render()</code> manual call.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>rendered</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this Widget
has been through the render lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>selection</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Returns the currently selected child Widget.  If the 
<code>mulitple</code> attribte is set to <code>true</code> will 
return an Y.ArrayList instance containing the currently selected 
children.  If no children are selected, will return null.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>srcNode</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The DOM node to parse for configuration values, passed to the Widget's HTML_PARSER definition<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>strings</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.HashMap</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Collection of strings used to label elements of the Widget's UI.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.HashMap","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>tabIndex</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>0</defaultValue>
        <description><![CDATA[Number (between -32767 to 32767) indicating the widget's 
position in the default tab flow.  The value is used to set the 
"tabIndex" attribute on the widget's bounding box.  Negative values allow
the widget to receive DOM focus programmatically (by calling the focus
method), while being removed from the default tab flow.  A value of 
null removes the "tabIndex" attribute from the widget's bounding box.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0"}-->]]></description>
      </attribute>
      <attribute>
        <name>useARIA</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[Boolean indicating if use of the WAI-ARIA Roles and States should be
enabled for the Widget.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>visible</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[Boolean indicating weather or not the Widget is visible.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>width</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[String with units, or number, representing the width of the Widget. If a number is provided,
the default unit, defined by the Widgets DEF_UNIT, property is used.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
    </attributes>
    <events>
      <event>
        <name>activeDescendantChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'activeDescendant' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>activeStateChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'activeState' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>addChild</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when a Widget is add as a child.  The event object will have a 
'child' property that returns a reference to the child Widget, as well 
as an 'index' property that returns a reference to the index specified 
when the add() method was called.
<p>
Subscribers to the "on" moment of this event, will be notified 
before a child is added.
</p>
<p>
Subscribers to the "after" moment of this event, will be notified
after a child is added.
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>boundingBoxChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'boundingBox' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>childrenChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'children' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>contentBoxChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'contentBox' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>cssClassChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'cssClass' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>defaultChildTypeChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'defaultChildType' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>defaultStateChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'defaultState' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>destroy</name>
        <type>java.lang.Object</type>
        <description><![CDATA[<p>
Lifecycle event for the destroy phase, 
fired prior to destruction. Invoking the preventDefault 
method on the event object provided to subscribers will 
prevent destruction from proceeding.
</p>
<p>
Subscribers to the "after" moment of this event, will be notified
after destruction is complete (and as a result cannot prevent
destruction).
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>destroyedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'destroyed' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>disabledChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'disabled' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>focusedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'focused' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>heightChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'height' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>hideClassChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'hideClass' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>hoverStateChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'hoverState' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>idChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'id' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>init</name>
        <type>java.lang.Object</type>
        <description><![CDATA[<p>
Lifecycle event for the init phase, fired prior to initialization. 
Invoking the preventDefault() method on the event object provided 
to subscribers will prevent initialization from occuring.
</p>
<p>
Subscribers to the "after" momemt of this event, will be notified
after initialization of the object is complete (and therefore
cannot prevent initialization).
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>initializedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'initialized' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>multipleChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'multiple' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>orientationChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'orientation' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>removeChild</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when a child Widget is removed.  The event object will have a 
'child' property that returns a reference to the child Widget, as well 
as an 'index' property that returns a reference child's ordinal position.
<p>
Subscribers to the "on" moment of this event, will be notified 
before a child is removed.
</p>
<p>
Subscribers to the "after" moment of this event, will be notified
after a child is removed.
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>renderChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'render' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>renderedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'rendered' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>selectionChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'selection' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>srcNodeChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'srcNode' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>stringsChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'strings' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>tabIndexChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'tabIndex' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>useARIAChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'useARIA' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>visibleChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'visible' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>widget:contentUpdate</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Notification event, which widget implementations can fire, when
they change the content of the widget. This event has no default
behavior and cannot be prevented, so the "on" or "after"
moments are effectively equivalent (with on listeners being invoked before 
after listeners).<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>widget:render</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Lifecycle event for the render phase, fired prior to rendering the UI 
for the widget (prior to invoking the widget's renderer method).
<p>
Subscribers to the "on" moment of this event, will be notified 
before the widget is rendered.
</p>
<p>
Subscribers to the "after" moment of this event, will be notified
after rendering is complete.
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>widthChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'width' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
    </events>
  </component>
  <component name="Tooltip" module="aui-tooltip" package="alloy" bodyContent="false" alloyComponent="true">
    <attributes>
      <attribute>
        <name>align</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.HashMap</outputType>
        <defaultValue>{ node: null, points: [ BL, TR ] }</defaultValue>
        <description><![CDATA[See <a href="Overlay.html#config_align">OverlayContextPanel align</a>.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.HashMap","required":false,"defaultValue":"{ node: null, points: [ BL, TR ] }"}-->]]></description>
      </attribute>
      <attribute>
        <name>alignOn</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.ArrayList</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[An array of objects corresponding to the nodes and events that will sync the alignment of the widget.
The implementer can supply an array of objects, with each object having the following properties:
eventName: (string, required): The eventName to listen to.
node: (Y.Node, optional): The Y.Node that will fire the event (defaults to the boundingBox of the widget)
By default, this attribute consists of two objects which will cause the widget to re-align to the node that it is aligned to:
(1) Scrolling the window, and (2) resizing the window.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.ArrayList","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>anim</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.HashMap</outputType>
        <defaultValue>{ show: false }</defaultValue>
        <description><![CDATA[See <a href="OverlayContextPanel.html#config_anim">OverlayContextPanel anim</a>.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.HashMap","required":false,"defaultValue":"{ show: false }"}-->]]></description>
      </attribute>
      <attribute>
        <name>arrow</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Position where the arrow will be placed. See
<a href="OverlayContextPanel.html#config_showArrow">showArrow</a>. If it's
not set, it will get the value set on the
<a href="OverlayContext.html#config_align">align</a> point. Here is a
list of valid arrows 'bc', 'bl', 'br', 'cc', 'lb', 'lc', 'lt', 'rb',
'rc', 'rl'.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>bodyContent</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The content to be added to the body section. This will replace any existing content
in the body. If you want to append, or insert new content, use the <a href="#method_setStdModContent">setStdModContent</a> method.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>boundingBox</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The outermost DOM node for the Widget, used for sizing and positioning 
of a Widget as well as a containing element for any decorator elements used 
for skinning.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>cancellableHide</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[Cancel auto hide delay if the user interact with the Overlay
(focus, click, mouseover)<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>centered</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[A convenience attribute, which can be used as a shortcut for the align attribute.
If set to true, the Widget is centered in the viewport. If set to a node reference or valid selector string,
the Widget will be centered within the node. If set the false, no center positioning is applied.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>constrain</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The node to constrain the widget's bounding box to, when setting xy. Can also be
set to true, to constrain to the viewport.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>contentBox</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[A DOM node that is a direct descendant of a Widget's bounding box that 
houses its content.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>cssClass</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[CSS class to be automatically added to the <code>boundingBox</code>.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>currentNode</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[OverlayContext allow multiple elements to be the
<a href="OverlayContext.html#config_trigger">trigger</a>, the
currentNode stores the current active one.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>destroyed</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this object
has been through the destroy lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>disabled</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Boolean indicating if the Widget should be disabled. The disabled implementation
is left to the specific classes extending widget.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>fillHeight</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The section (WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER) which should be resized to fill the height of the standard module, when a 
height is set on the Widget. If a height is not set on the widget, then all sections are sized based on 
their content.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>focused</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Boolean indicating if the Widget, or one of its descendants, 
has focus.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>footerContent</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The content to be added to the footer section. This will replace any existing content
in the footer. If you want to append, or insert new content, use the <a href="#method_setStdModContent">setStdModContent</a> method.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>headerContent</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The content to be added to the header section. This will replace any existing content
in the header. If you want to append, or insert new content, use the <a href="#method_setStdModContent">setStdModContent</a> method.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>height</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[String with units, or number, representing the height of the Widget. If a number is provided,
the default unit, defined by the Widgets DEF_UNIT, property is used.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>hideClass</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue>aui-helper-hidden</defaultValue>
        <description><![CDATA[css class added to hide the <code>boundingBox</code> when
<a href="Component.html#config_visible">visible</a> is set to
<code>false</code>.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false,"defaultValue":"aui-helper-hidden"}-->]]></description>
      </attribute>
      <attribute>
        <name>hideDelay</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>500</defaultValue>
        <description><![CDATA[See <a href="OverlayContext.html#config_hideDelay">OverlayContext hideDelay</a>.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"500"}-->]]></description>
      </attribute>
      <attribute>
        <name>hideOn</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue>mouseout</defaultValue>
        <description><![CDATA[See <a href="OverlayContext.html#config_showOn">OverlayContext showOn</a>.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false,"defaultValue":"mouseout"}-->]]></description>
      </attribute>
      <attribute>
        <name>hideOnDocumentClick</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[If true the instance is registered on the
<a href="OverlayContextManager.html">OverlayContextManager</a> static
class and will be hide when the user click on document.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>id</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>initialized</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this object
has been through the init lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>preventOverlap</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[If set to true, and WidgetPositionAlign is also added to the Widget, 
constrained positioning will attempt to prevent the widget's bounding box from overlapping 
the element to which it has been aligned, by flipping the orientation of the alignment
for corner based alignments<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>render</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[If <code>true</code> the render phase will be autimatically invoked
preventing the <code>.render()</code> manual call.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>rendered</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this Widget
has been through the render lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>shim</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Boolean flag to indicate whether or not a shim should be added to the Widgets
boundingBox, to protect it from select box bleedthrough.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>showArrow</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[If true the OverlayContextPanel will show an arrow positioned on the
<a href="OverlayContextPanel.html#config_arrow">arrow</a> point.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>showDelay</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>0</defaultValue>
        <description><![CDATA[Number of milliseconds after the show method is invoked to show the
OverlayContext.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0"}-->]]></description>
      </attribute>
      <attribute>
        <name>showOn</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue>mouseover</defaultValue>
        <description><![CDATA[See <a href="OverlayContext.html#config_showOn">OverlayContext showOn</a>.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false,"defaultValue":"mouseover"}-->]]></description>
      </attribute>
      <attribute>
        <name>srcNode</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[The DOM node to parse for configuration values, passed to the Widget's HTML_PARSER definition<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>stack</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[Gives stacking habilities to the OverlayContextPanel.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>strings</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.HashMap</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Collection of strings used to label elements of the Widget's UI.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.HashMap","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>tabIndex</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>0</defaultValue>
        <description><![CDATA[Number (between -32767 to 32767) indicating the widget's 
position in the default tab flow.  The value is used to set the 
"tabIndex" attribute on the widget's bounding box.  Negative values allow
the widget to receive DOM focus programmatically (by calling the focus
method), while being removed from the default tab flow.  A value of 
null removes the "tabIndex" attribute from the widget's bounding box.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0"}-->]]></description>
      </attribute>
      <attribute>
        <name>title</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Use the content of the <code>title</code> attribute as the Tooltip
content.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>trigger</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Node, NodeList or Selector which will be used as trigger elements
to show or hide the OverlayContext.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>useARIA</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[True if Overlay should use ARIA plugin<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>visible</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[If true the OverlayContext is visible by default after the render phase.
Inherited from <a href="Overlay.html">Overlay</a>.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>width</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[String with units, or number, representing the width of the Widget. If a number is provided,
the default unit, defined by the Widgets DEF_UNIT, property is used.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>x</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>0</defaultValue>
        <description><![CDATA[Page X co-ordinate for the widget. This attribute acts as a facade for the 
xy attribute. Changes in position can be monitored by listening for xyChange events.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0"}-->]]></description>
      </attribute>
      <attribute>
        <name>xy</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.ArrayList</outputType>
        <defaultValue>[0,0]</defaultValue>
        <description><![CDATA[Page XY co-ordinate pair for the widget.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.ArrayList","required":false,"defaultValue":"[0,0]"}-->]]></description>
      </attribute>
      <attribute>
        <name>y</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>0</defaultValue>
        <description><![CDATA[Page Y co-ordinate for the widget. This attribute acts as a facade for the 
xy attribute. Changes in position can be monitored by listening for xyChange events.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0"}-->]]></description>
      </attribute>
      <attribute>
        <name>zIndex</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>0</defaultValue>
        <description><![CDATA[The z-index to apply to the Widgets boundingBox. Non-numerical values for 
zIndex will be converted to 0<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0"}-->]]></description>
      </attribute>
    </attributes>
    <events>
      <event>
        <name>alignChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'align' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>alignOnChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'alignOn' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>animChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'anim' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>arrowChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'arrow' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>bodyContentChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'bodyContent' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>boundingBoxChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'boundingBox' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>cancellableHideChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'cancellableHide' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>centeredChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'centered' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>constrainChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'constrain' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>contentBoxChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'contentBox' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>cssClassChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'cssClass' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>currentNodeChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'currentNode' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>destroy</name>
        <type>java.lang.Object</type>
        <description><![CDATA[<p>
Lifecycle event for the destroy phase, 
fired prior to destruction. Invoking the preventDefault 
method on the event object provided to subscribers will 
prevent destruction from proceeding.
</p>
<p>
Subscribers to the "after" moment of this event, will be notified
after destruction is complete (and as a result cannot prevent
destruction).
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>destroyedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'destroyed' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>disabledChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'disabled' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>fillHeightChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'fillHeight' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>focusedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'focused' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>footerContentChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'footerContent' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>headerContentChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'headerContent' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>heightChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'height' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>hideClassChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'hideClass' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>hideDelayChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'hideDelay' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>hideOnChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'hideOn' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>hideOnDocumentClickChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'hideOnDocumentClick' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>idChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'id' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>init</name>
        <type>java.lang.Object</type>
        <description><![CDATA[<p>
Lifecycle event for the init phase, fired prior to initialization. 
Invoking the preventDefault() method on the event object provided 
to subscribers will prevent initialization from occuring.
</p>
<p>
Subscribers to the "after" momemt of this event, will be notified
after initialization of the object is complete (and therefore
cannot prevent initialization).
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>initializedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'initialized' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>preventOverlapChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'preventOverlap' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>renderChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'render' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>renderedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'rendered' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>shimChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'shim' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>showArrowChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'showArrow' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>showDelayChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'showDelay' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>showOnChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'showOn' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>srcNodeChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'srcNode' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>stackChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'stack' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>stringsChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'strings' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>tabIndexChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'tabIndex' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>titleChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'title' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>triggerChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'trigger' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>useARIAChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'useARIA' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>visibleChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'visible' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>widget:contentUpdate</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Notification event, which widget implementations can fire, when
they change the content of the widget. This event has no default
behavior and cannot be prevented, so the "on" or "after"
moments are effectively equivalent (with on listeners being invoked before 
after listeners).<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>widget:render</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Lifecycle event for the render phase, fired prior to rendering the UI 
for the widget (prior to invoking the widget's renderer method).
<p>
Subscribers to the "on" moment of this event, will be notified 
before the widget is rendered.
</p>
<p>
Subscribers to the "after" moment of this event, will be notified
after rendering is complete.
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>widthChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'width' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>xChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'x' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>xyChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'xy' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>yChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'y' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>zIndexChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'zIndex' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
    </events>
  </component>
  <component name="TreeNodeTask" module="aui-tree" package="alloy" bodyContent="false" alloyComponent="true">
    <attributes>
      <attribute>
        <name>alwaysShowHitArea</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[Always show the hitarea icon.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>cache</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[Whether the current TreeNode should cache the loaded content or not.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>checkContainerEl</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Container element for the checkbox.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>checkEl</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Checkbox element.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>checkName</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue>tree-node-check</defaultValue>
        <description><![CDATA[Name of the checkbox element used on the current TreeNode.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false,"defaultValue":"tree-node-check"}-->]]></description>
      </attribute>
      <attribute>
        <name>checked</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Whether the TreeNode is checked or not.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>children</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.ArrayList</outputType>
        <defaultValue>[]</defaultValue>
        <description><![CDATA[Array of children (i.e. could be a JSON metadata object or a TreeNode instance).<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.ArrayList","required":false,"defaultValue":"[]"}-->]]></description>
      </attribute>
      <attribute>
        <name>container</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Container to nest children nodes. If has cntainer it's not a leaf.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>destroyed</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this object
has been through the destroy lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>draggable</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[If true the TreeNode is draggable.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>expanded</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Whether the TreeNode is expanded by default.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>hitAreaEl</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Hitarea element.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>iconEl</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Icon element.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>id</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Id of the TreeNode.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>index</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.HashMap</outputType>
        <defaultValue>{}</defaultValue>
        <description><![CDATA[Index the nodes.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.HashMap","required":false,"defaultValue":"{}"}-->]]></description>
      </attribute>
      <attribute>
        <name>initialized</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this object
has been through the init lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>io</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.HashMap</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[IO options for the current TreeNode load the children.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.HashMap","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>label</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Label of the TreeNode.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>labelEl</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Label element to house the <code>label</code> attribute.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>leaf</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>true</defaultValue>
        <description><![CDATA[Whether the TreeNode could have children or not (i.e. if any
children is present the TreeNode is a leaf).<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
      </attribute>
      <attribute>
        <name>loaded</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Whether the current TreeNode has loaded the content.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>loading</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Whether the current TreeNode IO transaction is loading.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>nextSibling</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Next sibling of the current TreeNode.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>ownerTree</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[TreeView which contains the current TreeNode.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>parentNode</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Parent node of the current TreeNode.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>prevSibling</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Previous sibling of the current TreeNode.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
    </attributes>
    <events>
      <event>
        <name>alwaysShowHitAreaChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'alwaysShowHitArea' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>cacheChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'cache' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>checkContainerElChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'checkContainerEl' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>checkElChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'checkEl' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>checkNameChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'checkName' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>checkedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'checked' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>childrenChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'children' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>containerChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'container' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>destroy</name>
        <type>java.lang.Object</type>
        <description><![CDATA[<p>
Lifecycle event for the destroy phase, 
fired prior to destruction. Invoking the preventDefault 
method on the event object provided to subscribers will 
prevent destruction from proceeding.
</p>
<p>
Subscribers to the "after" moment of this event, will be notified
after destruction is complete (and as a result cannot prevent
destruction).
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>destroyedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'destroyed' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>draggableChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'draggable' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>expandedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'expanded' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>hitAreaElChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'hitAreaEl' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>iconElChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'iconEl' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>idChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'id' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>indexChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'index' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>init</name>
        <type>java.lang.Object</type>
        <description><![CDATA[<p>
Lifecycle event for the init phase, fired prior to initialization. 
Invoking the preventDefault() method on the event object provided 
to subscribers will prevent initialization from occuring.
</p>
<p>
Subscribers to the "after" momemt of this event, will be notified
after initialization of the object is complete (and therefore
cannot prevent initialization).
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>initializedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'initialized' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>ioChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'io' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>labelChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'label' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>labelElChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'labelEl' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>leafChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'leaf' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>loadedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'loaded' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>loadingChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'loading' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>nextSiblingChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'nextSibling' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>ownerTreeChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'ownerTree' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>parentNodeChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'parentNode' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>prevSiblingChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'prevSibling' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
    </events>
  </component>
  <component name="TreeView" module="aui-tree" package="alloy" bodyContent="false" alloyComponent="true">
    <attributes>
      <attribute>
        <name>children</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.ArrayList</outputType>
        <defaultValue>[]</defaultValue>
        <description><![CDATA[Array of children (i.e. could be a JSON metadata object or a TreeNode instance).<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.ArrayList","required":false,"defaultValue":"[]"}-->]]></description>
      </attribute>
      <attribute>
        <name>container</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Container to nest children nodes. If has cntainer it's not a leaf.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>destroyed</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this object
has been through the destroy lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>index</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.HashMap</outputType>
        <defaultValue>{}</defaultValue>
        <description><![CDATA[Index the nodes.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.HashMap","required":false,"defaultValue":"{}"}-->]]></description>
      </attribute>
      <attribute>
        <name>initialized</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this object
has been through the init lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>io</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.HashMap</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[IO metadata for loading the children using ajax.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.HashMap","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>lastSelected</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Last selected TreeNode.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>type</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue>file</defaultValue>
        <description><![CDATA[Type of the treeview (i.e. could be 'file' or 'normal').<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false,"defaultValue":"file"}-->]]></description>
      </attribute>
    </attributes>
    <events>
      <event>
        <name>childrenChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'children' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>containerChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'container' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>destroy</name>
        <type>java.lang.Object</type>
        <description><![CDATA[<p>
Lifecycle event for the destroy phase, 
fired prior to destruction. Invoking the preventDefault 
method on the event object provided to subscribers will 
prevent destruction from proceeding.
</p>
<p>
Subscribers to the "after" moment of this event, will be notified
after destruction is complete (and as a result cannot prevent
destruction).
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>destroyedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'destroyed' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>indexChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'index' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>init</name>
        <type>java.lang.Object</type>
        <description><![CDATA[<p>
Lifecycle event for the init phase, fired prior to initialization. 
Invoking the preventDefault() method on the event object provided 
to subscribers will prevent initialization from occuring.
</p>
<p>
Subscribers to the "after" momemt of this event, will be notified
after initialization of the object is complete (and therefore
cannot prevent initialization).
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>initializedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'initialized' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>ioChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'io' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>lastSelectedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'lastSelected' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>typeChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'type' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
    </events>
  </component>
  <component name="TreeViewDD" module="aui-tree" package="alloy" bodyContent="false" alloyComponent="true">
    <attributes>
      <attribute>
        <name>checkContainerEl</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Container element for the checkbox.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>checkEl</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Checkbox element.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>checkName</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue>tree-node-check</defaultValue>
        <description><![CDATA[Name of the checkbox element used on the current TreeNode.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false,"defaultValue":"tree-node-check"}-->]]></description>
      </attribute>
      <attribute>
        <name>checked</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Whether the TreeNode is checked or not.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>children</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.ArrayList</outputType>
        <defaultValue>[]</defaultValue>
        <description><![CDATA[Array of children (i.e. could be a JSON metadata object or a TreeNode instance).<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.ArrayList","required":false,"defaultValue":"[]"}-->]]></description>
      </attribute>
      <attribute>
        <name>container</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Container to nest children nodes. If has cntainer it's not a leaf.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>destroyed</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this object
has been through the destroy lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>dropAction</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Drop action (i.e. could be 'append', 'below' or 'above').<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>helper</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Dragdrop helper element.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>index</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.HashMap</outputType>
        <defaultValue>{}</defaultValue>
        <description><![CDATA[Index the nodes.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.HashMap","required":false,"defaultValue":"{}"}-->]]></description>
      </attribute>
      <attribute>
        <name>initialized</name>
        <inputType>boolean</inputType>
        <outputType>boolean</outputType>
        <defaultValue>false</defaultValue>
        <description><![CDATA[Flag indicating whether or not this object
has been through the init lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
      </attribute>
      <attribute>
        <name>io</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.util.HashMap</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[IO metadata for loading the children using ajax.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.HashMap","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>lastSelected</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Last selected TreeNode.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>lastY</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>0</defaultValue>
        <description><![CDATA[Last Y.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0"}-->]]></description>
      </attribute>
      <attribute>
        <name>nodeContent</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Object</outputType>
        <defaultValue></defaultValue>
        <description><![CDATA[Reference for the current drop node.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </attribute>
      <attribute>
        <name>scrollDelay</name>
        <inputType>java.lang.Object</inputType>
        <outputType>java.lang.Number</outputType>
        <defaultValue>100</defaultValue>
        <description><![CDATA[Delay of the scroll while dragging the TreeNodes.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"100"}-->]]></description>
      </attribute>
      <attribute>
        <name>type</name>
        <inputType>java.lang.String</inputType>
        <outputType>java.lang.String</outputType>
        <defaultValue>file</defaultValue>
        <description><![CDATA[Type of the treeview (i.e. could be 'file' or 'normal').<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false,"defaultValue":"file"}-->]]></description>
      </attribute>
    </attributes>
    <events>
      <event>
        <name>checkContainerElChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'checkContainerEl' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>checkElChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'checkEl' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>checkNameChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'checkName' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>checkedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'checked' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>childrenChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'children' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>containerChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'container' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>destroy</name>
        <type>java.lang.Object</type>
        <description><![CDATA[<p>
Lifecycle event for the destroy phase, 
fired prior to destruction. Invoking the preventDefault 
method on the event object provided to subscribers will 
prevent destruction from proceeding.
</p>
<p>
Subscribers to the "after" moment of this event, will be notified
after destruction is complete (and as a result cannot prevent
destruction).
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>destroyedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'destroyed' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>dropActionChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'dropAction' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>helperChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'helper' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>indexChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'index' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>init</name>
        <type>java.lang.Object</type>
        <description><![CDATA[<p>
Lifecycle event for the init phase, fired prior to initialization. 
Invoking the preventDefault() method on the event object provided 
to subscribers will prevent initialization from occuring.
</p>
<p>
Subscribers to the "after" momemt of this event, will be notified
after initialization of the object is complete (and therefore
cannot prevent initialization).
</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>initializedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'initialized' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>ioChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'io' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>lastSelectedChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'lastSelected' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>lastYChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'lastY' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>nodeContentChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'nodeContent' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>scrollDelayChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'scrollDelay' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
      <event>
        <name>typeChange</name>
        <type>java.lang.Object</type>
        <description><![CDATA[Fires when the value for the configuration attribute 'type' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
      </event>
    </events>
  </component>
</taglibs>
