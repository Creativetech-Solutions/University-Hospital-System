{"majorversion": 3, "filemap": {"io-queue.js": {"classlist": [], "name": "io-queue.js", "module": "io-base"}, "yui-rls-min.js": {"classlist": [], "name": "yui-rls-min.js", "module": "yui"}, "aui-resize-constrain-debug.js": {"classlist": [], "name": "aui-resize-constrain-debug.js", "module": "aui-resize"}, "resize-base-debug.js": {"classlist": ["Resize"], "name": "resize-base-debug.js", "module": "resize"}, "dom-create-min.js": {"classlist": [], "name": "dom-create-min.js", "module": "dom"}, "selection-debug.js": {"classlist": ["Selection"], "name": "selection-debug.js", "module": "editor"}, "autocomplete-highlighters-debug.js": {"classlist": ["AutoCompleteHighlighters"], "name": "autocomplete-highlighters-debug.js", "module": "autocomplete"}, "datatype-date-format_ru-RU.js": {"classlist": [], "name": "datatype-date-format_ru-RU.js", "module": "datatype"}, "widget-child.js": {"classlist": ["WidgetChild"], "name": "widget-child.js", "module": "widget-child"}, "scrollview-base-debug.js": {"classlist": ["ScrollView"], "name": "scrollview-base-debug.js", "module": "scrollview-base"}, "aui-form-builder-debug.js": {"classlist": [], "name": "aui-form-builder-debug.js", "module": "aui-event"}, "resize-base-min.js": {"classlist": [], "name": "resize-base-min.js", "module": "resize"}, "aui-tpl-snippets-base-min.js": {"name": "aui-tpl-snippets-base-min.js", "classlist": [], "module": "aui-tooltip", "guessedname": "e", "guessedtype": "function", "method": "e"}, "aui-datatable-edit-min.js": {"name": "aui-datatable-edit-min.js", "classlist": [], "module": "aui-component", "guessedname": "ad", "guessedtype": "function", "method": "ad"}, "event-touch-min.js": {"classlist": [], "name": "event-touch-min.js", "module": "event-touch"}, "aui-form-builder-field-min.js": {"name": "aui-form-builder-field-min.js", "classlist": [], "module": "aui-event", "guessedname": "cd", "guessedtype": "function", "method": "cd"}, "aui-editor-base.js": {"classlist": [], "name": "aui-editor-base.js", "module": "aui-editable"}, "cache-plugin-min.js": {"classlist": [], "name": "cache-plugin-min.js", "module": "cache"}, "base-base.js": {"classlist": ["Base"], "name": "base-base.js", "module": "base"}, "console-filters-min.js": {"classlist": [], "name": "console-filters-min.js", "module": "console-filters"}, "loader-min.js": {"classlist": [], "name": "loader-min.js", "module": "loader"}, "datatype-xml-format.js": {"classlist": ["DataType.XML"], "name": "datatype-xml-format.js", "module": "datatype"}, "aui-drawing-fonts.js": {"classlist": [], "name": "aui-drawing-fonts.js", "module": "aui-dialog"}, "datatype-date-format_th.js": {"classlist": [], "name": "datatype-date-format_th.js", "module": "datatype"}, "dd-ddm-base.js": {"classlist": ["DD.DDM"], "name": "dd-ddm-base.js", "module": "dd"}, "widget-stack.js": {"classlist": ["WidgetStack"], "name": "widget-stack.js", "module": "widget-stack"}, "aui-calendar-base-min.js": {"name": "aui-calendar-base-min.js", "classlist": [], "module": "aui-calendar", "guessedname": "x", "guessedtype": "function", "method": "x"}, "features-debug.js": {"classlist": [], "name": "features-debug.js", "module": "editor"}, "text-accentfold.js": {"classlist": ["Text.AccentFold"], "name": "text-accentfold.js", "module": "text"}, "aui-diagram-builder-impl-debug.js": {"classlist": [], "name": "aui-diagram-builder-impl-debug.js", "module": "aui-delayed-task"}, "aui-sortable.js": {"classlist": [], "name": "aui-sortable.js", "module": "aui-resize"}, "aui-media-viewer-plugin-debug.js": {"classlist": [], "name": "aui-media-viewer-plugin-debug.js", "module": "'aui-media-gallery-plugin"}, "datatype-date-format_ca.js": {"classlist": [], "name": "datatype-date-format_ca.js", "module": "datatype"}, "pluginhost-config-min.js": {"classlist": [], "name": "pluginhost-config-min.js", "module": "pluginhost"}, "swfdetect.js": {"classlist": [], "name": "swfdetect.js", "module": "swfdetect"}, "aui-ace-editor-mode-perl.js": {"classlist": [], "name": "aui-ace-editor-mode-perl.js", "module": "yui"}, "datatype-number-parse-min.js": {"classlist": [], "name": "datatype-number-parse-min.js", "module": "datatype"}, "aui-editor-base-min.js": {"name": "aui-editor-base-min.js", "classlist": [], "module": "aui-editable", "guessedname": "c", "guessedtype": "function", "method": "c"}, "attribute-complex.js": {"classlist": [], "name": "attribute-complex.js", "module": "attribute"}, "aui-editor-bbcode-plugin-min.js": {"name": "aui-editor-bbcode-plugin-min.js", "classlist": [], "module": "aui-editable", "guessedname": "e", "guessedtype": "function", "method": "e"}, "autocomplete-sources.js": {"classlist": [], "name": "autocomplete-sources.js", "module": "autocomplete"}, "aui-media-gallery-plugin-debug.js": {"classlist": [], "name": "aui-media-gallery-plugin-debug.js", "module": "aui-media-viewer-plugin"}, "aui-drawing-base.js": {"classlist": [], "name": "aui-drawing-base.js", "module": "aui-dialog"}, "aui-tabs-menu-plugin-min.js": {"name": "aui-tabs-menu-plugin-min.js", "classlist": [], "module": "aui-resize", "guessedname": "f", "guessedtype": "function", "method": "f"}, "aui-debounce-min.js": {"name": "aui-debounce-min.js", "classlist": [], "module": "aui-calendar", "guessedname": "h", "guessedtype": "function", "method": "h"}, "get-debug.js": {"classlist": ["Get"], "name": "get-debug.js", "module": "yui"}, "dom-size-debug.js": {"classlist": [], "name": "dom-size-debug.js", "module": "dom"}, "aui-scheduler-base.js": {"classlist": [], "name": "aui-scheduler-base.js", "module": "aui-resize"}, "slider-base-min.js": {"classlist": [], "name": "slider-base-min.js", "module": "slider"}, "createlink-base-min.js": {"classlist": [], "name": "createlink-base-min.js", "module": "editor"}, "io-xdr.js": {"classlist": [], "name": "io-xdr.js", "module": "io-base"}, "test-min.js": {"classlist": [], "name": "test-min.js", "module": "test"}, "aui-chart.js": {"classlist": [], "name": "aui-chart.js", "module": "aui-char-counter"}, "aui-overlay-context-panel-debug.js": {"classlist": ["OverlayContextPanel", "OverlayContextPanelManager"], "name": "aui-overlay-context-panel-debug.js", "module": "aui-overlay"}, "stylesheet-debug.js": {"classlist": ["StyleSheet"], "name": "stylesheet-debug.js", "module": "stylesheet"}, "async-queue-debug.js": {"classlist": ["AsyncQueue"], "name": "async-queue-debug.js", "module": "async-queue"}, "tabview-plugin.js": {"classlist": [], "name": "tabview-plugin.js", "module": "tabview"}, "event-custom-complex.js": {"classlist": ["EventFacade"], "name": "event-custom-complex.js", "module": "event-custom"}, "aui-drawing-safari-min.js": {"name": "aui-drawing-safari-min.js", "classlist": [], "module": "aui-dialog", "guessedname": "safari", "guessedtype": "function", "method": "safari"}, "dial-min.js": {"classlist": [], "name": "dial-min.js", "module": "dial"}, "aui-dialog-iframe.js": {"classlist": [], "name": "aui-dialog-iframe.js", "module": "aui-dialog"}, "aui-form-textarea-min.js": {"name": "aui-form-textarea-min.js", "classlist": [], "module": "aui-event", "guessedname": "e", "guessedtype": "function", "method": "e"}, "dd-ddm-debug.js": {"classlist": [], "name": "dd-ddm-debug.js", "module": "dd"}, "aui-tree-node.js": {"classlist": ["TreeNode", "TreeNodeIO", "TreeNodeCheck", "TreeNodeTask", "TreeNodeRadio"], "name": "aui-tree-node.js", "module": "aui-tree"}, "aui-ace-editor-mode-coffee-min.js": {"name": "aui-ace-editor-mode-coffee-min.js", "classlist": [], "module": "yui", "guessedname": "data", "guessedtype": "function", "method": "data"}, "queue-promote-debug.js": {"classlist": [], "name": "queue-promote-debug.js", "module": "queue-promote"}, "aui-media-viewer-plugin.js": {"classlist": [], "name": "aui-media-viewer-plugin.js", "module": "aui-media-viewer-plugin"}, "datatype-date-format_de.js": {"classlist": [], "name": "datatype-date-format_de.js", "module": "datatype"}, "dataschema-base-debug.js": {"classlist": ["DataSchema.Base"], "name": "dataschema-base-debug.js", "module": "dataschema"}, "resize-proxy-debug.js": {"classlist": ["Plugin.ResizeProxy"], "name": "resize-proxy-debug.js", "module": "resize"}, "aui-ace-editor-mode-scala-min.js": {"name": "aui-ace-editor-mode-scala-min.js", "classlist": [], "module": "yui", "guessedname": "i", "guessedtype": "function", "method": "i"}, "aui-datepicker-select.js": {"classlist": ["DatePickerSelect"], "name": "aui-datepicker-select.js", "module": "aui-calendar"}, "aui-form-builder-field.js": {"classlist": [], "name": "aui-form-builder-field.js", "module": "aui-event"}, "datatype-date-math-debug.js": {"classlist": [], "name": "datatype-date-math-debug.js", "module": "datatype"}, "aui-task-manager.js": {"classlist": [], "name": "aui-task-manager.js", "module": "aui-resize"}, "aui-media-gallery-plugin-min.js": {"name": "aui-media-gallery-plugin-min.js", "classlist": [], "module": "'aui-media-gallery-plugin", "guessedname": "d", "guessedtype": "function", "method": "d"}, "aui-node-html5-print.js": {"classlist": [], "name": "aui-node-html5-print.js", "module": "aui-node"}, "anim-xy.js": {"classlist": [], "name": "anim-xy.js", "module": "anim"}, "io-xdr-debug.js": {"classlist": [], "name": "io-xdr-debug.js", "module": "io-base"}, "aui-paginator-debug.js": {"classlist": ["Paginator"], "name": "aui-paginator-debug.js", "module": "aui-paginator"}, "recordset-filter.js": {"classlist": ["RecordsetFilter"], "name": "recordset-filter.js", "module": "recordset"}, "datatype-date-format_en-US.js": {"classlist": [], "name": "datatype-date-format_en-US.js", "module": "datatype"}, "scrollview-base-ie-debug.js": {"classlist": [], "name": "scrollview-base-ie-debug.js", "module": "scrollview-base-ie"}, "slider-value-range-debug.js": {"classlist": ["SliderValueRange"], "name": "slider-value-range-debug.js", "module": "slider"}, "array-invoke-debug.js": {"classlist": [], "name": "array-invoke-debug.js", "module": "collection"}, "loader-yui3.js": {"classlist": [], "name": "loader-yui3.js", "module": "loader"}, "aui-editor-toolbar-plugin-debug.js": {"classlist": [], "name": "aui-editor-toolbar-plugin-debug.js", "module": "aui-editable"}, "aui-autocomplete.js": {"classlist": ["AutoComplete"], "name": "aui-autocomplete.js", "module": "aui-autocomplete"}, "calendar-base_en.js": {"classlist": [], "name": "calendar-base_en.js", "module": "calendar"}, "selector-css2-debug.js": {"classlist": [], "name": "selector-css2-debug.js", "module": "dom"}, "widget-autohide.js": {"classlist": ["WidgetAutohide"], "name": "widget-autohide.js", "module": "widget-autohide"}, "event-valuechange.js": {"classlist": ["ValueChange"], "name": "event-valuechange.js", "module": "event-valuechange"}, "aui-input-text-control-debug.js": {"classlist": [], "name": "aui-input-text-control-debug.js", "module": "aui-component"}, "base-pluginhost-debug.js": {"classlist": [], "name": "base-pluginhost-debug.js", "module": "base"}, "aui-arraysort.js": {"classlist": [], "name": "aui-arraysort.js", "module": "yui"}, "node-pluginhost.js": {"classlist": [], "name": "node-pluginhost.js", "module": "node"}, "slider-base.js": {"classlist": ["SliderBase"], "name": "slider-base.js", "module": "slider"}, "widget-stdmod-debug.js": {"classlist": ["WidgetStdMod"], "name": "widget-stdmod-debug.js", "module": "widget-stdmod"}, "aui-event-base-debug.js": {"classlist": [], "name": "aui-event-base-debug.js", "module": "aui-event"}, "aui-overlay.js": {"classlist": ["OverlayBase", "OverlayContext", "OverlayContextManager", "OverlayContextPanel", "OverlayContextPanelManager", "OverlayManager", "OverlayMask"], "name": "aui-overlay.js", "module": "aui-overlay"}, "datatype-date-format_en-CA.js": {"classlist": [], "name": "datatype-date-format_en-CA.js", "module": "datatype"}, "simpleyui-debug.js": {"classlist": ["YUI", "config", "Lang", "Array", "Queue", "Object", "UA", "Get", "Intl", "DOM", "Selector", "Do", "Do.Method", "Do.AlterArgs", "Do.AlterReturn", "Do.Halt", "Do.Prevent", "Do.Error", "CustomEvent", "Subscriber", "EventHandle", "EventTarget", "EventFacade", "Node", "NodeList"], "name": "simpleyui-debug.js", "module": "yui"}, "loader-yui3-debug.js": {"classlist": [], "name": "loader-yui3-debug.js", "module": "loader"}, "tabview-min.js": {"classlist": [], "name": "tabview-min.js", "module": "tabview"}, "aui-state-interaction-debug.js": {"classlist": [], "name": "aui-state-interaction-debug.js", "module": "aui-resize"}, "datatype-number-format-debug.js": {"classlist": ["DataType.Number"], "name": "datatype-number-format-debug.js", "module": "datatype"}, "aui-ace-editor-mode-perl-debug.js": {"classlist": [], "name": "aui-ace-editor-mode-perl-debug.js", "module": "yui"}, "resize.js": {"classlist": ["Plugin.Resize", "Plugin.ResizeProxy", "Plugin.ResizeConstrained"], "name": "resize.js", "module": "resize"}, "aui-datatable-debug.js": {"classlist": ["CellEditorSupport", "BaseCellEditor", "BaseOptionsCellEditor", "TextCellEditor", "TextAreaCellEditor", "DropDownCellEditor", "CheckboxCellEditor", "RadioCellEditor", "DateCellEditor"], "name": "aui-datatable-debug.js", "module": "aui-component"}, "datatype-xml-parse-debug.js": {"classlist": [], "name": "datatype-xml-parse-debug.js", "module": "datatype"}, "range-slider-debug.js": {"classlist": ["Slider"], "name": "range-slider-debug.js", "module": "slider"}, "graphics-svg-default-debug.js": {"classlist": [], "name": "graphics-svg-default-debug.js", "module": "graphics"}, "node-core.js": {"classlist": ["Node", "NodeList"], "name": "node-core.js", "module": "node"}, "autocomplete-sources-min.js": {"classlist": [], "name": "autocomplete-sources-min.js", "module": "autocomplete"}, "aui-drawing-debug.js": {"classlist": [], "name": "aui-drawing-debug.js", "module": "aui-dialog"}, "aui-dialog-debug.js": {"classlist": ["Dialog", "DialogManager", "DialogMask"], "name": "aui-dialog-debug.js", "module": "aui-dialog"}, "aui-diagram-builder-connector.js": {"classlist": [], "name": "aui-diagram-builder-connector.js", "module": "aui-delayed-task"}, "aui-scheduler-base-debug.js": {"classlist": [], "name": "aui-scheduler-base-debug.js", "module": "aui-resize"}, "aui-datatype.js": {"classlist": ["DataType.Boolean", "DataType.String", "A.DataType.DateMath"], "name": "aui-datatype.js", "module": "aui-datatype"}, "dom-style-ie.js": {"classlist": [], "name": "dom-style-ie.js", "module": "dom"}, "dump.js": {"classlist": [], "name": "dump.js", "module": "dump"}, "slider-value-range.js": {"classlist": ["SliderValueRange"], "name": "slider-value-range.js", "module": "slider"}, "graphics-canvas-min.js": {"classlist": [], "name": "graphics-canvas-min.js", "module": "graphics"}, "history-base.js": {"classlist": ["HistoryBase"], "name": "history-base.js", "module": "history"}, "aui-event-base.js": {"classlist": [], "name": "aui-event-base.js", "module": "aui-event"}, "aui-selector.js": {"classlist": [], "name": "aui-selector.js", "module": "aui-resize"}, "datatype-date-format_fr-FR.js": {"classlist": [], "name": "datatype-date-format_fr-FR.js", "module": "datatype"}, "autocomplete-plugin-min.js": {"classlist": [], "name": "autocomplete-plugin-min.js", "module": "autocomplete"}, "autocomplete-filters.js": {"classlist": ["AutoCompleteFilters"], "name": "autocomplete-filters.js", "module": "autocomplete"}, "aui-tabs-base-debug.js": {"classlist": [], "name": "aui-tabs-base-debug.js", "module": "aui-resize"}, "editor-tab-debug.js": {"classlist": ["Plugin.EditorTab"], "name": "editor-tab-debug.js", "module": "editor"}, "aui-event-debug.js": {"classlist": ["AUI~event~input"], "name": "aui-event-debug.js", "module": "aui-event"}, "datasource-arrayschema.js": {"classlist": ["DataSourceArraySchema"], "name": "datasource-arrayschema.js", "module": "datasource"}, "datasource-xmlschema.js": {"classlist": ["DataSourceXMLSchema"], "name": "datasource-xmlschema.js", "module": "datasource"}, "loader-yui3-min.js": {"classlist": [], "name": "loader-yui3-min.js", "module": "loader"}, "aui-datatable-edit.js": {"classlist": ["CellEditorSupport", "BaseCellEditor", "BaseOptionsCellEditor", "TextCellEditor", "TextAreaCellEditor", "DropDownCellEditor", "CheckboxCellEditor", "RadioCellEditor", "DateCellEditor"], "name": "aui-datatable-edit.js", "module": "aui-component"}, "aui-rating-min.js": {"name": "aui-rating-min.js", "classlist": [], "module": "aui-rating", "guessedname": "s", "guessedtype": "function", "method": "s"}, "aui-form-builder.js": {"classlist": [], "name": "aui-form-builder.js", "module": "aui-event"}, "async-queue.js": {"classlist": ["AsyncQueue"], "name": "async-queue.js", "module": "async-queue"}, "aui-text-unicode.js": {"classlist": [], "name": "aui-text-unicode.js", "module": "aui-text"}, "rls-debug.js": {"classlist": ["rls"], "name": "rls-debug.js", "module": "yui"}, "aui-ace-editor-mode-scad.js": {"classlist": [], "name": "aui-ace-editor-mode-scad.js", "module": "yui"}, "aui-node-debug.js": {"classlist": ["A.Node", "A.NodeList", "A.HTML5"], "name": "aui-node-debug.js", "module": "aui-node"}, "datasource-get-debug.js": {"classlist": ["DataSource.Get"], "name": "datasource-get-debug.js", "module": "datasource"}, "intl.js": {"classlist": ["Intl"], "name": "intl.js", "module": "intl"}, "text-data-accentfold-debug.js": {"classlist": [], "name": "text-data-accentfold-debug.js", "module": "text"}, "aui-form-validator-debug.js": {"classlist": [], "name": "aui-form-validator-debug.js", "module": "aui-event"}, "editor-lists-min.js": {"classlist": [], "name": "editor-lists-min.js", "module": "editor"}, "aui-data-browser.js": {"classlist": [], "name": "aui-data-browser.js", "module": "aui-component"}, "resize-plugin-min.js": {"classlist": [], "name": "resize-plugin-min.js", "module": "resize"}, "aui-image-viewer-gallery-debug.js": {"classlist": ["ImageGallery"], "name": "aui-image-viewer-gallery-debug.js", "module": "aui-media-viewer-plugin"}, "pluginhost-base.js": {"classlist": ["Plugin.Host"], "name": "pluginhost-base.js", "module": "pluginhost-base"}, "aui-base-core.js": {"classlist": [], "name": "aui-base-core.js", "module": "aui-autocomplete"}, "node-screen.js": {"classlist": [], "name": "node-screen.js", "module": "node"}, "aui-ace-editor-mode-textile.js": {"classlist": [], "name": "aui-ace-editor-mode-textile.js", "module": "yui"}, "attribute-base-debug.js": {"classlist": ["State", "Attribute"], "name": "attribute-base-debug.js", "module": "attribute"}, "scrollview-list-debug.js": {"classlist": ["Plugin.ScrollViewScrollbars"], "name": "scrollview-list-debug.js", "module": "scrollview-scrollbars"}, "autocomplete-base-debug.js": {"classlist": ["AutoCompleteBase"], "name": "autocomplete-base-debug.js", "module": "autocomplete"}, "dial-debug.js": {"classlist": ["Dial"], "name": "dial-debug.js", "module": "dial"}, "anim-curve.js": {"classlist": [], "name": "anim-curve.js", "module": "anim"}, "aui-event-input.js": {"classlist": ["AUI~event~input"], "name": "aui-event-input.js", "module": "aui-event"}, "autocomplete-highlighters-accentfold-min.js": {"classlist": [], "name": "autocomplete-highlighters-accentfold-min.js", "module": "autocomplete"}, "aui-editor.js": {"classlist": [], "name": "aui-editor.js", "module": "aui-editable"}, "profiler.js": {"classlist": ["Profiler"], "name": "profiler.js", "module": "profiler"}, "yui-rls-debug.js": {"classlist": ["YUI", "config", "Lang", "Array", "Queue", "Object", "UA", "Get", "Intl", "rls"], "name": "yui-rls-debug.js", "module": "yui"}, "recordset-indexer-min.js": {"classlist": [], "name": "recordset-indexer-min.js", "module": "recordset"}, "widget-anim-min.js": {"classlist": [], "name": "widget-anim-min.js", "module": "widget-anim"}, "aui-node-base.js": {"classlist": ["A.Node", "A.NodeList"], "name": "aui-node-base.js", "module": "aui-node"}, "datatype-date-format_id.js": {"classlist": [], "name": "datatype-date-format_id.js", "module": "datatype"}, "aui-datatable.js": {"classlist": ["CellEditorSupport", "BaseCellEditor", "BaseOptionsCellEditor", "TextCellEditor", "TextAreaCellEditor", "DropDownCellEditor", "CheckboxCellEditor", "RadioCellEditor", "DateCellEditor"], "name": "aui-datatable.js", "module": "aui-component"}, "aui-tpl-snippets-select-min.js": {"name": "aui-tpl-snippets-select-min.js", "classlist": [], "module": "aui-tooltip", "guessedname": "class", "guessedtype": "function", "method": "class"}, "aui-datepicker-select-debug.js": {"classlist": ["DatePickerSelect"], "name": "aui-datepicker-select-debug.js", "module": "aui-calendar"}, "aui-tpl-snippets-select-debug.js": {"classlist": [], "name": "aui-tpl-snippets-select-debug.js", "module": "aui-tooltip"}, "datatype-date-format_en-NZ.js": {"classlist": [], "name": "datatype-date-format_en-NZ.js", "module": "datatype"}, "aui-form-builder-field-debug.js": {"classlist": [], "name": "aui-form-builder-field-debug.js", "module": "aui-event"}, "anim-easing.js": {"classlist": ["Easing"], "name": "anim-easing.js", "module": "anim"}, "aui-sortable-min.js": {"name": "aui-sortable-min.js", "classlist": [], "module": "aui-resize", "guessedname": "f", "guessedtype": "function", "method": "f"}, "aui-ace-editor-mode-scala-debug.js": {"classlist": [], "name": "aui-ace-editor-mode-scala-debug.js", "module": "yui"}, "aui-resize-base.js": {"classlist": ["Resize"], "name": "aui-resize-base.js", "module": "aui-resize"}, "aui-resize-constrain-min.js": {"name": "aui-resize-constrain-min.js", "classlist": [], "module": "aui-resize", "guessedname": "i", "guessedtype": "function", "method": "i"}, "recordset-base-min.js": {"classlist": [], "name": "recordset-base-min.js", "module": "recordset"}, "aui-parse-content-min.js": {"name": "aui-parse-content-min.js", "classlist": [], "module": "aui-parse-content", "guessedname": "k", "guessedtype": "function", "method": "k"}, "node-pluginhost-min.js": {"classlist": [], "name": "node-pluginhost-min.js", "module": "node"}, "io-upload-iframe.js": {"classlist": [], "name": "io-upload-iframe.js", "module": "io-base"}, "event-custom-complex-debug.js": {"classlist": ["EventFacade"], "name": "event-custom-complex-debug.js", "module": "event-custom"}, "aui-loading-mask-min.js": {"name": "aui-loading-mask-min.js", "classlist": [], "module": "aui-loading-mask", "guessedname": "g", "guessedtype": "function", "method": "g"}, "model-min.js": {"classlist": [], "name": "model-min.js", "module": "loader"}, "aui-datepicker-base-min.js": {"name": "aui-datepicker-base-min.js", "classlist": [], "module": "aui-calendar", "guessedname": "f", "guessedtype": "function", "method": "f"}, "widget-position-debug.js": {"classlist": ["WidgetPosition"], "name": "widget-position-debug.js", "module": "widget-position"}, "aui-arraysort-debug.js": {"classlist": [], "name": "aui-arraysort-debug.js", "module": "yui"}, "transition-timer.js": {"classlist": [], "name": "transition-timer.js", "module": "transition"}, "aui-swf.js": {"classlist": [], "name": "aui-swf.js", "module": "aui-resize"}, "aui-progressbar.js": {"classlist": ["ProgressBar"], "name": "aui-progressbar.js", "module": "aui-progressbar"}, "dom-size.js": {"classlist": [], "name": "dom-size.js", "module": "dom"}, "anim-node-plugin-min.js": {"classlist": [], "name": "anim-node-plugin-min.js", "module": "anim"}, "datatable-scroll-min.js": {"classlist": [], "name": "datatable-scroll-min.js", "module": "datatable"}, "aui-carousel-debug.js": {"classlist": [], "name": "aui-carousel-debug.js", "module": "aui-calendar"}, "aui-portal-layout-min.js": {"name": "aui-portal-layout-min.js", "classlist": [], "module": "aui-portal-layout", "guessedname": "ap", "guessedtype": "function", "method": "ap"}, "aui-tpl-snippets-input.js": {"classlist": [], "name": "aui-tpl-snippets-input.js", "module": "aui-tooltip"}, "node-focusmanager-debug.js": {"classlist": ["plugin.NodeFocusManager"], "name": "node-focusmanager-debug.js", "module": "node-focusmanager"}, "recordset-filter-min.js": {"classlist": [], "name": "recordset-filter-min.js", "module": "recordset"}, "imageloader-debug.js": {"classlist": ["ImgLoadGroup", "ImgLoadImgObj"], "name": "imageloader-debug.js", "module": "imageloader"}, "aui-color.js": {"classlist": [], "name": "aui-color.js", "module": "aui-char-counter"}, "aui-editor-menu-plugin-min.js": {"name": "aui-editor-menu-plugin-min.js", "classlist": [], "module": "aui-editable", "guessedname": "k", "guessedtype": "function", "method": "k"}, "event-base-ie-debug.js": {"classlist": [], "name": "event-base-ie-debug.js", "module": "event"}, "aui-tpl-snippets-debug.js": {"classlist": [], "name": "aui-tpl-snippets-debug.js", "module": "aui-tooltip"}, "aui-rating-debug.js": {"classlist": ["Rating", "ThumbRating"], "name": "aui-rating-debug.js", "module": "aui-rating"}, "event-move.js": {"classlist": [], "name": "event-move.js", "module": "event-gestures"}, "yui-later.js": {"classlist": [], "name": "yui-later.js", "module": "yui"}, "aui-datatable-edit-debug.js": {"classlist": ["CellEditorSupport", "BaseCellEditor", "BaseOptionsCellEditor", "TextCellEditor", "TextAreaCellEditor", "DropDownCellEditor", "CheckboxCellEditor", "RadioCellEditor", "DateCellEditor"], "name": "aui-datatable-edit-debug.js", "module": "aui-component"}, "sortable-scroll.js": {"classlist": ["Plugin.SortScroll"], "name": "sortable-scroll.js", "module": "sortable"}, "exec-command-min.js": {"classlist": [], "name": "exec-command-min.js", "module": "editor"}, "aui-datasource-control.js": {"classlist": [], "name": "aui-datasource-control.js", "module": "aui-component"}, "json-stringify.js": {"classlist": [], "name": "json-stringify.js", "module": "json"}, "view.js": {"classlist": ["View"], "name": "view.js", "module": "uploader"}, "aui-resize-base-debug.js": {"classlist": ["Resize"], "name": "aui-resize-base-debug.js", "module": "aui-resize"}, "scrollview-min.js": {"classlist": [], "name": "scrollview-min.js", "module": "scrollview"}, "recordset-sort-min.js": {"classlist": [], "name": "recordset-sort-min.js", "module": "recordset"}, "widget-uievents-min.js": {"classlist": [], "name": "widget-uievents-min.js", "module": "widget"}, "aui-tabs-debug.js": {"classlist": [], "name": "aui-tabs-debug.js", "module": "aui-resize"}, "aui-ace-editor-mode-css-min.js": {"name": "aui-ace-editor-mode-css-min.js", "classlist": [], "module": "yui", "guessedname": "next", "guessedtype": "function", "method": "next"}, "event-key-min.js": {"classlist": [], "name": "event-key-min.js", "module": "event"}, "aui-image-viewer-base.js": {"classlist": ["ImageViewer", "ImageViewerMask"], "name": "aui-image-viewer-base.js", "module": "aui-image-viewer"}, "widget-position-align.js": {"classlist": ["WidgetPositionAlign"], "name": "widget-position-align.js", "module": "widget-position-align"}, "dd-drag.js": {"classlist": ["DD.Drag"], "name": "dd-drag.js", "module": "dd"}, "calendarnavigator-min.js": {"classlist": [], "name": "calendarnavigator-min.js", "module": "calendarnavigator"}, "io-queue-debug.js": {"classlist": [], "name": "io-queue-debug.js", "module": "io-base"}, "cache-offline.js": {"classlist": ["CacheOffline"], "name": "cache-offline.js", "module": "cache"}, "aui-tpl-snippets-base.js": {"classlist": [], "name": "aui-tpl-snippets-base.js", "module": "aui-tooltip"}, "dd-drop-debug.js": {"classlist": ["DD.Drop"], "name": "dd-drop-debug.js", "module": "dd"}, "overlay-min.js": {"classlist": [], "name": "overlay-min.js", "module": "overlay"}, "jsonp-debug.js": {"classlist": ["JSONPRequest"], "name": "jsonp-debug.js", "module": "jsonp"}, "aui-debounce-debug.js": {"classlist": [], "name": "aui-debounce-debug.js", "module": "aui-calendar"}, "simpleyui.js": {"classlist": ["YUI", "config", "Lang", "Array", "Queue", "Object", "UA", "Get", "Intl", "DOM", "Selector", "Do", "Do.Method", "Do.AlterArgs", "Do.AlterReturn", "Do.Halt", "Do.Prevent", "Do.Error", "CustomEvent", "Subscriber", "EventHandle", "EventTarget", "EventFacade", "Node", "NodeList"], "name": "simpleyui.js", "module": "dump"}, "datatype-xml-format-min.js": {"classlist": [], "name": "datatype-xml-format-min.js", "module": "datatype"}, "dataschema-array-min.js": {"classlist": [], "name": "dataschema-array-min.js", "module": "dataschema"}, "aui-drawing-safari.js": {"classlist": [], "name": "aui-drawing-safari.js", "module": "aui-dialog"}, "loader-base.js": {"classlist": ["Loader"], "name": "loader-base.js", "module": "loader"}, "aui-viewport-min.js": {"name": "aui-viewport-min.js", "classlist": [], "module": "aui-tree", "guessedname": "c", "guessedtype": "function", "method": "c"}, "anim-base-debug.js": {"classlist": ["Anim"], "name": "anim-base-debug.js", "module": "anim"}, "aui-resize.js": {"classlist": ["Resize"], "name": "aui-resize.js", "module": "aui-resize"}, "cache-offline-min.js": {"classlist": [], "name": "cache-offline-min.js", "module": "cache"}, "yui-rls.js": {"classlist": ["YUI", "config", "Lang", "Array", "Queue", "Object", "UA", "Get", "Intl", "rls"], "name": "yui-rls.js", "module": "yui"}, "editor-bidi.js": {"classlist": ["Plugin.EditorBidi"], "name": "editor-bidi.js", "module": "editor"}, "datatype-date-format_zh-Hant-TW.js": {"classlist": [], "name": "datatype-date-format_zh-Hant-TW.js", "module": "datatype"}, "history-html5-min.js": {"classlist": [], "name": "history-html5-min.js", "module": "history"}, "yui-throttle-min.js": {"classlist": [], "name": "yui-throttle-min.js", "module": "yui"}, "aui-tooltip.js": {"classlist": ["Tooltip"], "name": "aui-tooltip.js", "module": "aui-tooltip"}, "createlink-base.js": {"classlist": ["Plugin.CreateLinkBase"], "name": "createlink-base.js", "module": "editor"}, "dd-drop-plugin-min.js": {"classlist": [], "name": "dd-drop-plugin-min.js", "module": "dd"}, "widget-buttons-min.js": {"classlist": [], "name": "widget-buttons-min.js", "module": "widget-buttons"}, "aui-io.js": {"classlist": ["IORequest", "A.io", "A.Plugin.IO"], "name": "aui-io.js", "module": "aui-io"}, "charts.js": {"classlist": ["Renderer", "LeftAxisLayout", "RightAxisLayout", "BottomAxisLayout", "TopAxisLayout", "Axis", "AxisType", "NumericAxis", "StackedAxis", "TimeAxis", "CategoryAxis", "CurveUtil", "StackingUtil", "Lines", "Fills", "Plots", "Histogram", "CartesianSeries", "MarkerSeries", "LineSeries", "SplineSeries", "AreaSplineSeries", "StackedSplineSeries", "StackedMarkerSeries", "ColumnSeries", "BarSeries", "AreaSeries", "StackedAreaSplineSeries", "ComboSeries", "StackedComboSeries", "ComboSplineSeries", "StackedComboSplineSeries", "StackedLineSeries", "StackedAreaSeries", "StackedColumnSeries", "StackedBarSeries", "PieSeries", "Gridlines", "Graph", "ChartBase", "CartesianChart", "PieChart", "Chart"], "name": "charts.js", "module": "charts"}, "aui-nested-list-debug.js": {"classlist": ["NestedList"], "name": "aui-nested-list-debug.js", "module": "aui-nested-list"}, "aui-toolbar-min.js": {"name": "aui-toolbar-min.js", "classlist": [], "module": "aui-toolbar", "guessedname": "e", "guessedtype": "function", "method": "e"}, "aui-portal-layout.js": {"classlist": ["PortalLayout"], "name": "aui-portal-layout.js", "module": "aui-portal-layout"}, "aui-datepicker-base-debug.js": {"classlist": ["DatepickerManager"], "name": "aui-datepicker-base-debug.js", "module": "aui-calendar"}, "array-invoke-min.js": {"classlist": [], "name": "array-invoke-min.js", "module": "collection"}, "scrollview-base-min.js": {"classlist": [], "name": "scrollview-base-min.js", "module": "scrollview-base"}, "yql.js": {"classlist": ["YQLRequest", "YQL"], "name": "yql.js", "module": "yql"}, "event-key-debug.js": {"classlist": [], "name": "event-key-debug.js", "module": "event"}, "graphics-svg-default.js": {"classlist": [], "name": "graphics-svg-default.js", "module": "graphics"}, "aui-image-viewer-base-debug.js": {"classlist": ["ImageViewer", "ImageViewerMask"], "name": "aui-image-viewer-base-debug.js", "module": "aui-image-viewer"}, "datatype-date-format_es-BO.js": {"classlist": [], "name": "datatype-date-format_es-BO.js", "module": "datatype"}, "dataschema-xml-debug.js": {"classlist": ["DataSchema.XML"], "name": "dataschema-xml-debug.js", "module": "dataschema"}, "datatype-date-parse.js": {"classlist": [], "name": "datatype-date-parse.js", "module": "datatype"}, "datatype-date-format_it-IT.js": {"classlist": [], "name": "datatype-date-format_it-IT.js", "module": "datatype"}, "aui-ace-editor-min.js": {"name": "aui-ace-editor-min.js", "classlist": [], "module": "yui", "guessedname": "a", "guessedtype": "function", "method": "a"}, "datatable-scroll.js": {"classlist": ["DataTableScroll"], "name": "datatable-scroll.js", "module": "datatable"}, "scrollview-list-min.js": {"classlist": [], "name": "scrollview-list-min.js", "module": "scrollview-scrollbars"}, "node-event-html5-min.js": {"classlist": [], "name": "node-event-html5-min.js", "module": "node"}, "aui-overlay-context-min.js": {"name": "aui-overlay-context-min.js", "classlist": [], "module": "aui-overlay", "guessedname": "g", "guessedtype": "function", "method": "g"}, "aui-ace-editor-mode-clojure.js": {"classlist": [], "name": "aui-ace-editor-mode-clojure.js", "module": "yui"}, "aui-base-lang-min.js": {"name": "aui-base-lang-min.js", "classlist": [], "module": "aui-autocomplete", "guessedname": "j", "guessedtype": "function", "method": "j"}, "frame-min.js": {"classlist": [], "name": "frame-min.js", "module": "editor"}, "aui-tabs-base.js": {"classlist": [], "name": "aui-tabs-base.js", "module": "aui-resize"}, "graphics-canvas-default.js": {"classlist": [], "name": "graphics-canvas-default.js", "module": "graphics"}, "widget-modality.js": {"classlist": ["WidgetModality"], "name": "widget-modality.js", "module": "widget-modality"}, "aui-datatable-events-min.js": {"name": "aui-datatable-events-min.js", "classlist": [], "module": "aui-component", "guessedname": "R", "guessedtype": "function", "method": "R"}, "dd-drop-plugin.js": {"classlist": ["Plugin.Drop"], "name": "dd-drop-plugin.js", "module": "dd"}, "pluginhost-config-debug.js": {"classlist": [], "name": "pluginhost-config-debug.js", "module": "pluginhost"}, "pluginhost-config.js": {"classlist": [], "name": "pluginhost-config.js", "module": "pluginhost"}, "aui-resize-iframe-debug.js": {"classlist": [], "name": "aui-resize-iframe-debug.js", "module": "aui-resize"}, "datasource-jsonschema.js": {"classlist": ["DataSourceJSONSchema"], "name": "datasource-jsonschema.js", "module": "datasource"}, "widget-position-align-debug.js": {"classlist": ["WidgetPositionAlign"], "name": "widget-position-align-debug.js", "module": "widget-position-align"}, "datatype-date-format_nl.js": {"classlist": [], "name": "datatype-date-format_nl.js", "module": "datatype"}, "aui-image-viewer-base-min.js": {"name": "aui-image-viewer-base-min.js", "classlist": [], "module": "aui-image-viewer", "guessedname": "ak", "guessedtype": "function", "method": "ak"}, "editor.js": {"classlist": ["Frame", "Selection", "Plugin.ExecCommand", "Plugin.EditorTab", "Plugin.CreateLinkBase", "EditorBase", "Plugin.EditorLists", "Plugin.EditorBidi", "Plugin.EditorPara", "Plugin.EditorBR"], "name": "editor.js", "module": "editor"}, "datatype-date-format_es-PE.js": {"classlist": [], "name": "datatype-date-format_es-PE.js", "module": "datatype"}, "aui-diagram-builder-base-min.js": {"name": "aui-diagram-builder-base-min.js", "classlist": [], "module": "aui-delayed-task", "guessedname": "X", "guessedtype": "function", "method": "X"}, "dom-class-debug.js": {"classlist": [], "name": "dom-class-debug.js", "module": "dom"}, "event-delegate-min.js": {"classlist": [], "name": "event-delegate-min.js", "module": "event"}, "aui-editor-creole-plugin-debug.js": {"classlist": [], "name": "aui-editor-creole-plugin-debug.js", "module": "aui-editable"}, "graphics.js": {"classlist": ["Matrix", "AttributeLite", "BaseGraphic", "Drawing", "Shape", "Circle", "Ellipse", "Rect", "Path", "Graphic"], "name": "graphics.js", "module": "graphics"}, "shim-plugin-debug.js": {"classlist": ["Plugin.Shim"], "name": "shim-plugin-debug.js", "module": "shim-plugin"}, "event-mouseenter.js": {"classlist": [], "name": "event-mouseenter.js", "module": "event"}, "aui-tpl-snippets-textarea-debug.js": {"classlist": [], "name": "aui-tpl-snippets-textarea-debug.js", "module": "aui-tooltip"}, "text-accentfold-debug.js": {"classlist": ["Text.AccentFold"], "name": "text-accentfold-debug.js", "module": "text"}, "text-accentfold-min.js": {"classlist": [], "name": "text-accentfold-min.js", "module": "text"}, "selector.js": {"classlist": [], "name": "selector.js", "module": "editor"}, "aui-editor-bbcode-plugin.js": {"classlist": [], "name": "aui-editor-bbcode-plugin.js", "module": "aui-editable"}, "yui-throttle.js": {"classlist": [], "name": "yui-throttle.js", "module": "yui"}, "base-base-debug.js": {"classlist": ["Base"], "name": "base-base-debug.js", "module": "base"}, "aui-tree-view.js": {"classlist": ["TreeView", "TreeViewDD"], "name": "aui-tree-view.js", "module": "aui-tree"}, "dd-scroll.js": {"classlist": ["DD.Scroll", "Plugin.DDWindowScroll", "Plugin.DDNodeScroll"], "name": "dd-scroll.js", "module": "dd"}, "event-simulate.js": {"classlist": [], "name": "event-simulate.js", "module": "event-simulate"}, "graphics-canvas.js": {"classlist": ["CanvasDrawing", "CanvasShape", "CanvasPath", "CanvasRect", "CanvasEllipse", "CanvasCircle", "CanvasPieSlice", "CanvasGraphic"], "name": "graphics-canvas.js", "module": "graphics"}, "aui-datatable-selection-debug.js": {"classlist": [], "name": "aui-datatable-selection-debug.js", "module": "aui-component"}, "querystring-stringify-simple-min.js": {"classlist": [], "name": "querystring-stringify-simple-min.js", "module": "querystring"}, "event-mouseenter-debug.js": {"classlist": [], "name": "event-mouseenter-debug.js", "module": "event"}, "aui-ace-editor-mode-textile-min.js": {"name": "aui-ace-editor-mode-textile-min.js", "classlist": [], "module": "yui", "guessedname": "skinnable", "guessedtype": "function", "method": "skinnable"}, "dd-gestures-debug.js": {"classlist": [], "name": "dd-gestures-debug.js", "module": "dd"}, "aui-text.js": {"classlist": [], "name": "aui-text.js", "module": "aui-text"}, "controller-debug.js": {"classlist": ["Controller"], "name": "controller-debug.js", "module": "app"}, "aui-form-base.js": {"classlist": [], "name": "aui-form-base.js", "module": "aui-event"}, "autocomplete-base-min.js": {"classlist": [], "name": "autocomplete-base-min.js", "module": "autocomplete"}, "swf-debug.js": {"classlist": ["SWF"], "name": "swf-debug.js", "module": "swf"}, "graphics-svg-min.js": {"classlist": [], "name": "graphics-svg-min.js", "module": "graphics"}, "async-queue-min.js": {"classlist": [], "name": "async-queue-min.js", "module": "async-queue"}, "console-debug.js": {"classlist": ["Console"], "name": "console-debug.js", "module": "console"}, "datatype-date-format_pl.js": {"classlist": [], "name": "datatype-date-format_pl.js", "module": "datatype"}, "anim-easing-debug.js": {"classlist": ["Easing"], "name": "anim-easing-debug.js", "module": "anim"}, "createlink-base-debug.js": {"classlist": ["Plugin.CreateLinkBase"], "name": "createlink-base-debug.js", "module": "editor"}, "aui-property-list-min.js": {"name": "aui-property-list-min.js", "classlist": [], "module": "aui-progressbar", "guessedname": "j", "guessedtype": "function", "method": "j"}, "aui-overlay-context-panel-min.js": {"name": "aui-overlay-context-panel-min.js", "classlist": [], "module": "aui-overlay", "guessedname": "h", "guessedtype": "function", "method": "h"}, "escape-min.js": {"classlist": [], "name": "escape-min.js", "module": "escape"}, "datatype-date-format_fi-FI.js": {"classlist": [], "name": "datatype-date-format_fi-FI.js", "module": "datatype"}, "slider-value-range-min.js": {"classlist": [], "name": "slider-value-range-min.js", "module": "slider"}, "text-wordbreak-debug.js": {"classlist": ["Text.WordBreak"], "name": "text-wordbreak-debug.js", "module": "text"}, "aui-tabs-base-min.js": {"name": "aui-tabs-base-min.js", "classlist": [], "module": "aui-resize", "guessedname": "g", "guessedtype": "function", "method": "g"}, "node-deprecated-min.js": {"classlist": [], "name": "node-deprecated-min.js", "module": "node"}, "aui-diagram-builder-base-debug.js": {"classlist": [], "name": "aui-diagram-builder-base-debug.js", "module": "aui-delayed-task"}, "yql-debug.js": {"classlist": ["YQLRequest", "YQL"], "name": "yql-debug.js", "module": "yql"}, "aui-resize-iframe.js": {"classlist": [], "name": "aui-resize-iframe.js", "module": "aui-resize"}, "aui-drawing-vml-debug.js": {"classlist": [], "name": "aui-drawing-vml-debug.js", "module": "aui-dialog"}, "selector-css3-min.js": {"classlist": [], "name": "selector-css3-min.js", "module": "dom"}, "widget-anim-debug.js": {"classlist": ["Plugin.WidgetAnim"], "name": "widget-anim-debug.js", "module": "widget-anim"}, "aui-delayed-task-debug.js": {"classlist": ["DelayedTask"], "name": "aui-delayed-task-debug.js", "module": "aui-delayed-task"}, "aui-drawing-base-min.js": {"name": "aui-drawing-base-min.js", "classlist": [], "module": "aui-dialog", "guessedname": "Q", "guessedtype": "function", "method": "Q"}, "datasource-xmlschema-min.js": {"classlist": [], "name": "datasource-xmlschema-min.js", "module": "datasource"}, "event-move-debug.js": {"classlist": [], "name": "event-move-debug.js", "module": "event-gestures"}, "yui-later-debug.js": {"classlist": [], "name": "yui-later-debug.js", "module": "yui"}, "datatype-date-format_ja.js": {"classlist": [], "name": "datatype-date-format_ja.js", "module": "datatype"}, "dom-style-ie-debug.js": {"classlist": [], "name": "dom-style-ie-debug.js", "module": "dom"}, "node-style-debug.js": {"classlist": [], "name": "node-style-debug.js", "module": "node"}, "graphics-svg-default-min.js": {"classlist": [], "name": "graphics-svg-default-min.js", "module": "graphics"}, "datatable-base.js": {"classlist": ["Column", "Columnset", "DataTable.Base"], "name": "datatable-base.js", "module": "datatable"}, "anim-curve-debug.js": {"classlist": [], "name": "anim-curve-debug.js", "module": "anim"}, "base-build-debug.js": {"classlist": [], "name": "base-build-debug.js", "module": "base"}, "aui-overlay-manager-debug.js": {"classlist": ["OverlayManager"], "name": "aui-overlay-manager-debug.js", "module": "aui-overlay"}, "editor-base-min.js": {"classlist": [], "name": "editor-base-min.js", "module": "editor"}, "aui-template.js": {"classlist": [], "name": "aui-template.js", "module": "aui-resize"}, "dom-style.js": {"classlist": [], "name": "dom-style.js", "module": "dom"}, "queue-promote-min.js": {"classlist": [], "name": "queue-promote-min.js", "module": "queue-promote"}, "aui-calendar-debug.js": {"classlist": ["Calendar"], "name": "aui-calendar-debug.js", "module": "aui-calendar"}, "attribute-complex-debug.js": {"classlist": [], "name": "attribute-complex-debug.js", "module": "attribute"}, "widget-stdmod.js": {"classlist": ["WidgetStdMod"], "name": "widget-stdmod.js", "module": "widget-stdmod"}, "datatype-date-format.js": {"classlist": [], "name": "datatype-date-format.js", "module": "datatype"}, "event-custom-base-min.js": {"classlist": [], "name": "event-custom-base-min.js", "module": "event-custom"}, "scrollview-paginator-debug.js": {"classlist": ["Plugin.ScrollViewPaginator"], "name": "scrollview-paginator-debug.js", "module": "scrollview-paginator"}, "event-resize.js": {"classlist": [], "name": "event-resize.js", "module": "event"}, "aui-progressbar-min.js": {"name": "aui-progressbar-min.js", "classlist": [], "module": "aui-progressbar", "guessedname": "g", "guessedtype": "function", "method": "g"}, "autocomplete-base.js": {"classlist": ["AutoCompleteBase"], "name": "autocomplete-base.js", "module": "autocomplete"}, "aui-carousel.js": {"classlist": [], "name": "aui-carousel.js", "module": "aui-calendar"}, "aui-form-base-debug.js": {"classlist": [], "name": "aui-form-base-debug.js", "module": "aui-event"}, "datatype-date-format_ar-JO.js": {"classlist": [], "name": "datatype-date-format_ar-JO.js", "module": "datatype"}, "autocomplete-list-keys.js": {"classlist": [], "name": "autocomplete-list-keys.js", "module": "autocomplete"}, "event-synthetic-debug.js": {"classlist": ["SyntheticEvent.Notifier", "SynthRegistry", "SyntheticEvent"], "name": "event-synthetic-debug.js", "module": "event-simulate"}, "anim-node-plugin.js": {"classlist": ["Plugin.NodeFX"], "name": "anim-node-plugin.js", "module": "anim"}, "datatype-date-format_ru.js": {"classlist": [], "name": "datatype-date-format_ru.js", "module": "datatype"}, "querystring-parse-debug.js": {"classlist": ["QueryString"], "name": "querystring-parse-debug.js", "module": "querystring"}, "aui-editor-creole-parser-debug.js": {"classlist": [], "name": "aui-editor-creole-parser-debug.js", "module": "aui-editable"}, "aui-toolbar-debug.js": {"classlist": ["Toolbar"], "name": "aui-toolbar-debug.js", "module": "aui-toolbar"}, "node-menunav-min.js": {"classlist": [], "name": "node-menunav-min.js", "module": "node-menunav"}, "dom-create-debug.js": {"classlist": [], "name": "dom-create-debug.js", "module": "dom"}, "aui-text-data-unicode.js": {"classlist": [], "name": "aui-text-data-unicode.js", "module": "aui-text"}, "dump-debug.js": {"classlist": [], "name": "dump-debug.js", "module": "dump"}, "aui-datatable-base.js": {"classlist": [], "name": "aui-datatable-base.js", "module": "aui-component"}, "aui-overlay-manager.js": {"classlist": ["OverlayManager"], "name": "aui-overlay-manager.js", "module": "aui-overlay"}, "widget-parent-min.js": {"classlist": [], "name": "widget-parent-min.js", "module": "widget-parent"}, "dataschema-array-debug.js": {"classlist": ["DataSchema.Array"], "name": "dataschema-array-debug.js", "module": "dataschema"}, "highlight-accentfold.js": {"classlist": ["Highlight"], "name": "highlight-accentfold.js", "module": "highlight"}, "editor-br.js": {"classlist": ["Plugin.EditorBR"], "name": "editor-br.js", "module": "editor"}, "history-hash-ie-min.js": {"classlist": [], "name": "history-hash-ie-min.js", "module": "history"}, "node-event-simulate-debug.js": {"classlist": [], "name": "node-event-simulate-debug.js", "module": "node"}, "yui-base-min.js": {"classlist": [], "name": "yui-base-min.js", "module": "yui"}, "aui-ace-editor-keybinding-vim-min.js": {"name": "aui-ace-editor-keybinding-vim-min.js", "classlist": [], "module": "yui", "guessedname": "keymapping", "guessedtype": "function", "method": "keymapping"}, "dom-class-min.js": {"classlist": [], "name": "dom-class-min.js", "module": "dom"}, "dataschema-xml.js": {"classlist": ["DataSchema.XML"], "name": "dataschema-xml.js", "module": "dataschema"}, "datasource-local-min.js": {"classlist": [], "name": "datasource-local-min.js", "module": "datasource"}, "aui-media-viewer-plugin-min.js": {"name": "aui-media-viewer-plugin-min.js", "classlist": [], "module": "aui-media-viewer-plugin", "guessedname": "g", "guessedtype": "function", "method": "g"}, "aui-char-counter-min.js": {"name": "aui-char-counter-min.js", "classlist": [], "module": "aui-char-counter", "guessedname": "i", "guessedtype": "function", "method": "i"}, "datatable-sort-debug.js": {"classlist": ["DataTableSort"], "name": "datatable-sort-debug.js", "module": "datatable"}, "widget-htmlparser-debug.js": {"classlist": [], "name": "widget-htmlparser-debug.js", "module": "widget"}, "datatype-date-format_ca-ES.js": {"classlist": [], "name": "datatype-date-format_ca-ES.js", "module": "datatype"}, "aui-resize-debug.js": {"classlist": ["Resize"], "name": "aui-resize-debug.js", "module": "aui-resize"}, "aui-text-data-unicode-min.js": {"name": "aui-text-data-unicode-min.js", "classlist": [], "module": "aui-text", "guessedname": "Unicode", "guessedtype": "function", "method": "Unicode"}, "autocomplete-filters-debug.js": {"classlist": ["AutoCompleteFilters"], "name": "autocomplete-filters-debug.js", "module": "autocomplete"}, "scrollview-base.js": {"classlist": ["ScrollView"], "name": "scrollview-base.js", "module": "scrollview-base"}, "recordset-filter-debug.js": {"classlist": ["RecordsetFilter"], "name": "recordset-filter-debug.js", "module": "recordset"}, "aui-drawing-vml-min.js": {"name": "aui-drawing-vml-min.js", "classlist": [], "module": "aui-dialog", "guessedname": "W", "guessedtype": "function", "method": "W"}, "datatype-date-format_es-CO.js": {"classlist": [], "name": "datatype-date-format_es-CO.js", "module": "datatype"}, "aui-carousel-min.js": {"name": "aui-carousel-min.js", "classlist": [], "module": "aui-calendar", "guessedname": "e", "guessedtype": "function", "method": "e"}, "event-simulate-min.js": {"classlist": [], "name": "event-simulate-min.js", "module": "event-simulate"}, "shim-plugin-min.js": {"classlist": [], "name": "shim-plugin-min.js", "module": "shim-plugin"}, "node-debug.js": {"classlist": [], "name": "node-debug.js", "module": "node"}, "arraylist.js": {"classlist": ["ArrayList"], "name": "arraylist.js", "module": "collection"}, "aui-classnamemanager-debug.js": {"classlist": [], "name": "aui-classnamemanager-debug.js", "module": "aui-char-counter"}, "autocomplete-list-min.js": {"classlist": [], "name": "autocomplete-list-min.js", "module": "autocomplete"}, "aui-datasource-control-min.js": {"name": "aui-datasource-control-min.js", "classlist": [], "module": "aui-component", "guessedname": "g", "guessedtype": "function", "method": "g"}, "aui-resize-constrain.js": {"classlist": [], "name": "aui-resize-constrain.js", "module": "aui-resize"}, "aui-form-builder-base-min.js": {"name": "aui-form-builder-base-min.js", "classlist": [], "module": "aui-event", "guessedname": "bk", "guessedtype": "function", "method": "bk"}, "aui-tpl-snippets-input-debug.js": {"classlist": [], "name": "aui-tpl-snippets-input-debug.js", "module": "aui-tooltip"}, "datatype-date-format_hi-IN.js": {"classlist": [], "name": "datatype-date-format_hi-IN.js", "module": "datatype"}, "aui-progressbar-debug.js": {"classlist": ["ProgressBar"], "name": "aui-progressbar-debug.js", "module": "aui-progressbar"}, "resize-plugin-debug.js": {"classlist": ["Plugin.Resize"], "name": "resize-plugin-debug.js", "module": "resize"}, "aui-diagram-builder-impl.js": {"classlist": [], "name": "aui-diagram-builder-impl.js", "module": "aui-delayed-task"}, "dd-drop-plugin-debug.js": {"classlist": ["Plugin.Drop"], "name": "dd-drop-plugin-debug.js", "module": "dd"}, "datatype-date-format_zh-Hant.js": {"classlist": [], "name": "datatype-date-format_zh-Hant.js", "module": "datatype"}, "aui-rating.js": {"classlist": ["Rating", "ThumbRating"], "name": "aui-rating.js", "module": "aui-rating"}, "aui-drawing-drag.js": {"classlist": [], "name": "aui-drawing-drag.js", "module": "aui-dialog"}, "aui-ace-editor-mode-groovy-min.js": {"name": "aui-ace-editor-mode-groovy-min.js", "classlist": [], "module": "yui", "guessedname": "i", "guessedtype": "function", "method": "i"}, "transition-native.js": {"classlist": ["Transition"], "name": "transition-native.js", "module": "transition"}, "resize-base.js": {"classlist": ["Resize"], "name": "resize-base.js", "module": "resize"}, "aui-component.js": {"classlist": ["Component"], "name": "aui-component.js", "module": "aui-component"}, "aui-live-search-min.js": {"name": "aui-live-search-min.js", "classlist": [], "module": "aui-live-search", "guessedname": "h", "guessedtype": "function", "method": "h"}, "aui-panel-debug.js": {"classlist": ["Panel"], "name": "aui-panel-debug.js", "module": "aui-panel"}, "dataschema-text-min.js": {"classlist": [], "name": "dataschema-text-min.js", "module": "dataschema"}, "dom-class.js": {"classlist": [], "name": "dom-class.js", "module": "dom"}, "aui-parse-content.js": {"classlist": ["ParseContent"], "name": "aui-parse-content.js", "module": "aui-parse-content"}, "queue-promote.js": {"classlist": [], "name": "queue-promote.js", "module": "queue-promote"}, "aui-color-picker-grid-plugin-min.js": {"name": "aui-color-picker-grid-plugin-min.js", "classlist": [], "module": "aui-color-picker", "guessedname": "f", "guessedtype": "function", "method": "f"}, "align-plugin-min.js": {"classlist": [], "name": "align-plugin-min.js", "module": "align-plugin"}, "aui-drawing-base-debug.js": {"classlist": [], "name": "aui-drawing-base-debug.js", "module": "aui-dialog"}, "aui-loading-mask.js": {"classlist": ["LoadingMask"], "name": "aui-loading-mask.js", "module": "aui-loading-mask"}, "event-delegate-debug.js": {"classlist": [], "name": "event-delegate-debug.js", "module": "event"}, "aui-drawing.js": {"classlist": [], "name": "aui-drawing.js", "module": "aui-dialog"}, "aui-color-util-min.js": {"name": "aui-color-util-min.js", "classlist": [], "module": "aui-color-picker", "guessedname": "h", "guessedtype": "function", "method": "h"}, "aui-aria.js": {"classlist": [], "name": "aui-aria.js", "module": "yui"}, "cache-base-min.js": {"classlist": [], "name": "cache-base-min.js", "module": "cache"}, "aui-editor-tools-plugin-debug.js": {"classlist": [], "name": "aui-editor-tools-plugin-debug.js", "module": "aui-editable"}, "node-deprecated-debug.js": {"classlist": [], "name": "node-deprecated-debug.js", "module": "node"}, "datatype-date-format_es-CL.js": {"classlist": [], "name": "datatype-date-format_es-CL.js", "module": "datatype"}, "aui-panel.js": {"classlist": ["Panel"], "name": "aui-panel.js", "module": "aui-panel"}, "widget-child-min.js": {"classlist": [], "name": "widget-child-min.js", "module": "widget-child"}, "aui-form-builder-base.js": {"classlist": [], "name": "aui-form-builder-base.js", "module": "aui-event"}, "aui-editor-menu-plugin-debug.js": {"classlist": [], "name": "aui-editor-menu-plugin-debug.js", "module": "aui-editable"}, "datatype-date-format_es-VE.js": {"classlist": [], "name": "datatype-date-format_es-VE.js", "module": "datatype"}, "datatype-date-format_es-ES.js": {"classlist": [], "name": "datatype-date-format_es-ES.js", "module": "datatype"}, "classnamemanager.js": {"classlist": ["ClassNameManager"], "name": "classnamemanager.js", "module": "classnamemanager"}, "aui-button-item-min.js": {"name": "aui-button-item-min.js", "classlist": [], "module": "aui-button-item", "guessedname": "h", "guessedtype": "function", "method": "h"}, "aui-data-set-debug.js": {"classlist": [], "name": "aui-data-set-debug.js", "module": "aui-component"}, "event-hover-debug.js": {"classlist": [], "name": "event-hover-debug.js", "module": "event"}, "event-valuechange-debug.js": {"classlist": ["ValueChange"], "name": "event-valuechange-debug.js", "module": "event-valuechange"}, "aui-portal-layout-debug.js": {"classlist": ["PortalLayout"], "name": "aui-portal-layout-debug.js", "module": "aui-portal-layout"}, "aui-form-field-debug.js": {"classlist": [], "name": "aui-form-field-debug.js", "module": "aui-event"}, "aui-swf-min.js": {"name": "aui-swf-min.js", "classlist": [], "module": "aui-resize", "guessedname": "b", "guessedtype": "function", "method": "b"}, "event-base-min.js": {"classlist": [], "name": "event-base-min.js", "module": "event"}, "event-hover-min.js": {"classlist": [], "name": "event-hover-min.js", "module": "event"}, "model-list-debug.js": {"classlist": ["ModelList"], "name": "model-list-debug.js", "module": "loader"}, "datasource-local.js": {"classlist": ["DataSource.Local"], "name": "datasource-local.js", "module": "datasource"}, "recordset-sort.js": {"classlist": ["RecordsetSort"], "name": "recordset-sort.js", "module": "recordset"}, "aui-base.js": {"classlist": [], "name": "aui-base.js", "module": "aui-autocomplete"}, "autocomplete-filters-min.js": {"classlist": [], "name": "autocomplete-filters-min.js", "module": "autocomplete"}, "event-base.js": {"classlist": ["DOMEventFacade", "Event"], "name": "event-base.js", "module": "event"}, "aui-textboxlist.js": {"classlist": ["Textboxlist"], "name": "aui-textboxlist.js", "module": "aui-textboxlist"}, "arraylist-filter-debug.js": {"classlist": [], "name": "arraylist-filter-debug.js", "module": "collection"}, "aui-overlay-context-debug.js": {"classlist": ["OverlayContext", "OverlayContextManager"], "name": "aui-overlay-context-debug.js", "module": "aui-overlay"}, "tabview-debug.js": {"classlist": ["TabView", "Tab"], "name": "tabview-debug.js", "module": "tabview"}, "aui-ace-editor-mode-ruby-min.js": {"name": "aui-ace-editor-mode-ruby-min.js", "classlist": [], "module": "yui", "guessedname": "requires", "guessedtype": "function", "method": "requires"}, "console-filters.js": {"classlist": ["Plugin.ConsoleFilters"], "name": "console-filters.js", "module": "console-filters"}, "plugin-debug.js": {"classlist": ["Plugin.Base"], "name": "plugin-debug.js", "module": "plugin"}, "datatype-date-format_ms-MY.js": {"classlist": [], "name": "datatype-date-format_ms-MY.js", "module": "datatype"}, "anim-color-min.js": {"classlist": [], "name": "anim-color-min.js", "module": "anim"}, "aui-textboxlist-debug.js": {"classlist": ["Textboxlist"], "name": "aui-textboxlist-debug.js", "module": "aui-textboxlist"}, "aui-datatable-selection.js": {"classlist": [], "name": "aui-datatable-selection.js", "module": "aui-component"}, "datatype-date-format_pt.js": {"classlist": [], "name": "datatype-date-format_pt.js", "module": "datatype"}, "aui-overlay-min.js": {"name": "aui-overlay-min.js", "classlist": [], "module": "aui-overlay", "guessedname": "OverlayBase", "guessedtype": "function", "method": "OverlayBase"}, "aui-tpl-snippets-checkbox-debug.js": {"classlist": [], "name": "aui-tpl-snippets-checkbox-debug.js", "module": "aui-tooltip"}, "resize-min.js": {"classlist": [], "name": "resize-min.js", "module": "resize"}, "dd-ddm-base-debug.js": {"classlist": ["DD.DDM"], "name": "dd-ddm-base-debug.js", "module": "dd"}, "event-focus.js": {"classlist": [], "name": "event-focus.js", "module": "event"}, "dom-create.js": {"classlist": [], "name": "dom-create.js", "module": "dom"}, "querystring-stringify-simple-debug.js": {"classlist": [], "name": "querystring-stringify-simple-debug.js", "module": "querystring"}, "selector-native-min.js": {"classlist": [], "name": "selector-native-min.js", "module": "dom"}, "event-mousewheel-min.js": {"classlist": [], "name": "event-mousewheel-min.js", "module": "event"}, "aui-messaging.js": {"classlist": [], "name": "aui-messaging.js", "module": "aui-loading-mask"}, "datatype-date-format_id-ID.js": {"classlist": [], "name": "datatype-date-format_id-ID.js", "module": "datatype"}, "datatype-date-format_nb.js": {"classlist": [], "name": "datatype-date-format_nb.js", "module": "datatype"}, "tabview-base.js": {"classlist": [], "name": "tabview-base.js", "module": "tabview"}, "aui-data-browser-debug.js": {"classlist": [], "name": "aui-data-browser-debug.js", "module": "aui-component"}, "clickable-rail.js": {"classlist": ["ClickableRail"], "name": "clickable-rail.js", "module": "slider"}, "aui-tree.js": {"classlist": ["TreeData", "TreeNode", "TreeNodeIO", "TreeNodeCheck", "TreeNodeTask", "TreeNodeRadio", "TreeView", "TreeViewDD"], "name": "aui-tree.js", "module": "aui-tree"}, "aui-form-validator-min.js": {"name": "aui-form-validator-min.js", "classlist": [], "module": "aui-event", "guessedname": "l", "guessedtype": "function", "method": "l"}, "loader-rollup.js": {"classlist": [], "name": "loader-rollup.js", "module": "loader"}, "datatype-date-format_vi-VN.js": {"classlist": [], "name": "datatype-date-format_vi-VN.js", "module": "datatype"}, "node-core-min.js": {"classlist": [], "name": "node-core-min.js", "module": "node"}, "aui-paginator-min.js": {"name": "aui-paginator-min.js", "classlist": [], "module": "aui-paginator", "guessedname": "W", "guessedtype": "function", "method": "W"}, "aui-color-picker-base.js": {"classlist": ["ColorPicker"], "name": "aui-color-picker-base.js", "module": "aui-color-picker"}, "datatable-sort-min.js": {"classlist": [], "name": "datatable-sort-min.js", "module": "datatable"}, "transition-native-debug.js": {"classlist": ["Transition"], "name": "transition-native-debug.js", "module": "transition"}, "history-hash-debug.js": {"classlist": ["HistoryHash"], "name": "history-hash-debug.js", "module": "history"}, "aui-overlay-debug.js": {"classlist": ["OverlayBase", "OverlayContext", "OverlayContextManager", "OverlayContextPanel", "OverlayContextPanelManager", "OverlayManager", "OverlayMask"], "name": "aui-overlay-debug.js", "module": "aui-overlay"}, "dd-constrain-debug.js": {"classlist": ["Plugin.DDConstrained"], "name": "dd-constrain-debug.js", "module": "dd"}, "dd-ddm.js": {"classlist": [], "name": "dd-ddm.js", "module": "dd"}, "datatable-sort_en.js": {"classlist": [], "name": "datatable-sort_en.js", "module": "datatable"}, "aui-task-manager-min.js": {"name": "aui-task-manager-min.js", "classlist": [], "module": "aui-resize", "guessedname": "e", "guessedtype": "function", "method": "e"}, "aui-diagram-builder-debug.js": {"classlist": [], "name": "aui-diagram-builder-debug.js", "module": "aui-delayed-task"}, "history-html5.js": {"classlist": ["HistoryHTML5"], "name": "history-html5.js", "module": "history"}, "aui-drawing-drag-debug.js": {"classlist": [], "name": "aui-drawing-drag-debug.js", "module": "aui-dialog"}, "range-slider-min.js": {"classlist": [], "name": "range-slider-min.js", "module": "slider"}, "aui-tree-min.js": {"name": "aui-tree-min.js", "classlist": [], "module": "aui-tree", "guessedname": "h", "guessedtype": "function", "method": "h"}, "graphics-canvas-default-debug.js": {"classlist": [], "name": "graphics-canvas-default-debug.js", "module": "graphics"}, "aui-color-picker.js": {"classlist": ["ColorPicker"], "name": "aui-color-picker.js", "module": "aui-color-picker"}, "aui-ace-editor-mode-scss-debug.js": {"classlist": [], "name": "aui-ace-editor-mode-scss-debug.js", "module": "yui"}, "text-data-wordbreak-debug.js": {"classlist": [], "name": "text-data-wordbreak-debug.js", "module": "text"}, "aui-editor-toolbar-plugin-min.js": {"name": "aui-editor-toolbar-plugin-min.js", "classlist": [], "module": "aui-editable", "guessedname": "aj", "guessedtype": "function", "method": "aj"}, "attribute-base-min.js": {"classlist": [], "name": "attribute-base-min.js", "module": "attribute"}, "widget-base-ie-debug.js": {"classlist": [], "name": "widget-base-ie-debug.js", "module": "widget-base-ie"}, "substitute-min.js": {"classlist": [], "name": "substitute-min.js", "module": "substitute"}, "aui-scheduler-calendar-debug.js": {"classlist": [], "name": "aui-scheduler-calendar-debug.js", "module": "aui-resize"}, "datatype-date-format_en-JO.js": {"classlist": [], "name": "datatype-date-format_en-JO.js", "module": "datatype"}, "text-wordbreak.js": {"classlist": ["Text.WordBreak"], "name": "text-wordbreak.js", "module": "text"}, "datatype-number-format-min.js": {"classlist": [], "name": "datatype-number-format-min.js", "module": "datatype"}, "recordset-indexer.js": {"classlist": ["RecordsetIndexer"], "name": "recordset-indexer.js", "module": "recordset"}, "aui-base-lang.js": {"classlist": [], "name": "aui-base-lang.js", "module": "aui-autocomplete"}, "calendarnavigator-debug.js": {"classlist": ["Plugin.CalendarNavigator"], "name": "calendarnavigator-debug.js", "module": "calendarnavigator"}, "datatype-xml-parse-min.js": {"classlist": [], "name": "datatype-xml-parse-min.js", "module": "datatype"}, "widget-locale-debug.js": {"classlist": [], "name": "widget-locale-debug.js", "module": "widget-locale"}, "widget-modality-debug.js": {"classlist": ["WidgetModality"], "name": "widget-modality-debug.js", "module": "widget-modality"}, "aui-io-min.js": {"name": "aui-io-min.js", "classlist": [], "module": "aui-io", "guessedname": "f", "guessedtype": "function", "method": "f"}, "scrollview-scrollbars.js": {"classlist": ["Plugin.ScrollViewScrollbars"], "name": "scrollview-scrollbars.js", "module": "scrollview-scrollbars"}, "aui-overlay-mask-debug.js": {"classlist": ["OverlayMask"], "name": "aui-overlay-mask-debug.js", "module": "aui-overlay"}, "calendar-base.js": {"classlist": ["CalendarBase"], "name": "calendar-base.js", "module": "calendar"}, "array-extras.js": {"classlist": [], "name": "array-extras.js", "module": "collection"}, "json-parse-debug.js": {"classlist": ["JSON"], "name": "json-parse-debug.js", "module": "json"}, "highlight-base-debug.js": {"classlist": ["Highlight"], "name": "highlight-base-debug.js", "module": "highlight"}, "node-base-debug.js": {"classlist": [], "name": "node-base-debug.js", "module": "node"}, "event-synthetic-min.js": {"classlist": [], "name": "event-synthetic-min.js", "module": "event-simulate"}, "aui-drawing-animate.js": {"classlist": [], "name": "aui-drawing-animate.js", "module": "aui-dialog"}, "editor-base.js": {"classlist": ["EditorBase"], "name": "editor-base.js", "module": "editor"}, "substitute-debug.js": {"classlist": ["YUI~substitute"], "name": "substitute-debug.js", "module": "substitute"}, "event-resize-debug.js": {"classlist": [], "name": "event-resize-debug.js", "module": "event"}, "widget-base-min.js": {"classlist": [], "name": "widget-base-min.js", "module": "widget"}, "datatable-base-min.js": {"classlist": [], "name": "datatable-base-min.js", "module": "datatable"}, "dd-delegate-debug.js": {"classlist": ["DD.Delegate"], "name": "dd-delegate-debug.js", "module": "dd"}, "aui-tooltip-min.js": {"name": "aui-tooltip-min.js", "classlist": [], "module": "aui-tooltip", "guessedname": "n", "guessedtype": "function", "method": "n"}, "aui-ace-editor-mode-python-min.js": {"name": "aui-ace-editor-mode-python-min.js", "classlist": [], "module": "yui", "guessedname": "skinnable", "guessedtype": "function", "method": "skinnable"}, "loader-debug.js": {"classlist": ["Loader"], "name": "loader-debug.js", "module": "loader"}, "sortable-scroll-min.js": {"classlist": [], "name": "sortable-scroll-min.js", "module": "sortable"}, "datasource-arrayschema-debug.js": {"classlist": ["DataSourceArraySchema"], "name": "datasource-arrayschema-debug.js", "module": "datasource"}, "cookie-debug.js": {"classlist": ["Cookie"], "name": "cookie-debug.js", "module": "cookie"}, "datatype-date-format_es.js": {"classlist": [], "name": "datatype-date-format_es.js", "module": "datatype"}, "arraysort.js": {"classlist": ["ArraySort"], "name": "arraysort.js", "module": "arraysort"}, "aui-image-viewer-gallery.js": {"classlist": ["ImageGallery"], "name": "aui-image-viewer-gallery.js", "module": "aui-image-viewer"}, "dd-ddm-drop-debug.js": {"classlist": [], "name": "dd-ddm-drop-debug.js", "module": "dd"}, "datatype-date-format-min.js": {"classlist": ["DataType.Date.Locale"], "name": "datatype-date-format-min.js", "module": "datatype"}, "dom-style-min.js": {"classlist": [], "name": "dom-style-min.js", "module": "dom"}, "event-synthetic.js": {"classlist": ["SyntheticEvent.Notifier", "SynthRegistry", "SyntheticEvent"], "name": "event-synthetic.js", "module": "event-simulate"}, "aui-drawing-animate-min.js": {"name": "aui-drawing-animate-min.js", "classlist": [], "module": "aui-dialog", "guessedname": "e", "guessedtype": "function", "method": "e"}, "aui-tpl-snippets.js": {"classlist": [], "name": "aui-tpl-snippets.js", "module": "aui-tooltip"}, "aui-drawing-safari-debug.js": {"classlist": [], "name": "aui-drawing-safari-debug.js", "module": "aui-dialog"}, "aui-form-select.js": {"classlist": [], "name": "aui-form-select.js", "module": "aui-event"}, "anim-curve-min.js": {"classlist": [], "name": "anim-curve-min.js", "module": "anim"}, "aui-simple-anim.js": {"classlist": [], "name": "aui-simple-anim.js", "module": "aui-resize"}, "dd-ddm-drop-min.js": {"classlist": [], "name": "dd-ddm-drop-min.js", "module": "dd"}, "json-stringify-debug.js": {"classlist": [], "name": "json-stringify-debug.js", "module": "json"}, "aui-delayed-task-min.js": {"name": "aui-delayed-task-min.js", "classlist": [], "module": "aui-delayed-task", "guessedname": "b", "guessedtype": "function", "method": "b"}, "dial.js": {"classlist": [], "name": "dial.js", "module": "dial"}, "graphics-debug.js": {"classlist": ["Matrix", "AttributeLite", "BaseGraphic", "Drawing", "Shape", "Circle", "Ellipse", "Rect", "Path", "Graphic"], "name": "graphics-debug.js", "module": "graphics"}, "datatype-number-parse-debug.js": {"classlist": [], "name": "datatype-number-parse-debug.js", "module": "datatype"}, "datatype-number-format.js": {"classlist": ["DataType.Number"], "name": "datatype-number-format.js", "module": "datatype"}, "arraylist-filter.js": {"classlist": [], "name": "arraylist-filter.js", "module": "collection"}, "model-list.js": {"classlist": ["ModelList"], "name": "model-list.js", "module": "loader"}, "aui-tree-view-debug.js": {"classlist": ["TreeView", "TreeViewDD"], "name": "aui-tree-view-debug.js", "module": "aui-tree"}, "datatype-xml-parse.js": {"classlist": [], "name": "datatype-xml-parse.js", "module": "datatype"}, "aui-drawing-svg.js": {"classlist": [], "name": "aui-drawing-svg.js", "module": "aui-dialog"}, "uploader.js": {"classlist": ["Uploader"], "name": "uploader.js", "module": "uploader"}, "dom-core-debug.js": {"classlist": ["DOM"], "name": "dom-core-debug.js", "module": "dom"}, "aui-scheduler-event-debug.js": {"classlist": [], "name": "aui-scheduler-event-debug.js", "module": "aui-resize"}, "aui-ace-editor-keybinding-vim-debug.js": {"classlist": [], "name": "aui-ace-editor-keybinding-vim-debug.js", "module": "yui"}, "node-focusmanager.js": {"classlist": ["plugin.NodeFocusManager"], "name": "node-focusmanager.js", "module": "node-focusmanager"}, "array-extras-min.js": {"classlist": [], "name": "array-extras-min.js", "module": "collection"}, "yql-min.js": {"classlist": [], "name": "yql-min.js", "module": "yql"}, "classnamemanager-min.js": {"classlist": [], "name": "classnamemanager-min.js", "module": "classnamemanager"}, "aui-node-min.js": {"name": "aui-node-min.js", "classlist": [], "module": "aui-node", "guessedname": "U", "guessedtype": "function", "method": "U"}, "json-parse-min.js": {"classlist": [], "name": "json-parse-min.js", "module": "json"}, "widget-parent.js": {"classlist": ["WidgetParent"], "name": "widget-parent.js", "module": "widget-parent"}, "dom-debug.js": {"classlist": ["Selector"], "name": "dom-debug.js", "module": "dom"}, "widget-position-align-min.js": {"classlist": [], "name": "widget-position-align-min.js", "module": "widget-position-align"}, "aui-drawing-svg-min.js": {"name": "aui-drawing-svg-min.js", "classlist": [], "module": "aui-dialog", "guessedname": "h", "guessedtype": "function", "method": "h"}, "attribute-base.js": {"classlist": ["State", "Attribute"], "name": "attribute-base.js", "module": "attribute"}, "aui-form.js": {"classlist": [], "name": "aui-form.js", "module": "aui-event"}, "aui-loading-mask-debug.js": {"classlist": ["LoadingMask"], "name": "aui-loading-mask-debug.js", "module": "aui-loading-mask"}, "calendar.js": {"classlist": [], "name": "calendar.js", "module": "calendar"}, "base-pluginhost-min.js": {"classlist": [], "name": "base-pluginhost-min.js", "module": "base"}, "resize-constrain-min.js": {"classlist": [], "name": "resize-constrain-min.js", "module": "resize"}, "graphics-vml-default-min.js": {"classlist": [], "name": "graphics-vml-default-min.js", "module": "graphics"}, "dd-proxy-min.js": {"classlist": [], "name": "dd-proxy-min.js", "module": "dd"}, "text-data-accentfold-min.js": {"classlist": [], "name": "text-data-accentfold-min.js", "module": "text"}, "event-flick-debug.js": {"classlist": [], "name": "event-flick-debug.js", "module": "event-gestures"}, "highlight-base.js": {"classlist": ["Highlight"], "name": "highlight-base.js", "module": "highlight"}, "datatype-date-format_en-IN.js": {"classlist": [], "name": "datatype-date-format_en-IN.js", "module": "datatype"}, "aui-io-debug.js": {"classlist": ["IORequest", "A.io", "A.Plugin.IO"], "name": "aui-io-debug.js", "module": "aui-io"}, "aui-tree-data.js": {"classlist": ["TreeData"], "name": "aui-tree-data.js", "module": "aui-tree"}, "highlight-base-min.js": {"classlist": [], "name": "highlight-base-min.js", "module": "highlight"}, "aui-form-combobox.js": {"classlist": [], "name": "aui-form-combobox.js", "module": "aui-event"}, "calendar-base-debug.js": {"classlist": ["CalendarBase"], "name": "calendar-base-debug.js", "module": "calendar"}, "widget-autohide-min.js": {"classlist": [], "name": "widget-autohide-min.js", "module": "widget-autohide"}, "event-custom-base.js": {"classlist": ["Do", "Do.Method", "Do.AlterArgs", "Do.AlterReturn", "Do.Halt", "Do.Prevent", "Do.Error", "CustomEvent", "Subscriber", "EventHandle", "EventTarget"], "name": "event-custom-base.js", "module": "event-custom"}, "aui-overlay-context.js": {"classlist": ["OverlayContext", "OverlayContextManager"], "name": "aui-overlay-context.js", "module": "aui-overlay"}, "rls-min.js": {"classlist": [], "name": "rls-min.js", "module": "yui"}, "dataschema-json.js": {"classlist": ["DataSchema.JSON"], "name": "dataschema-json.js", "module": "dataschema"}, "widget-modality-min.js": {"classlist": [], "name": "widget-modality-min.js", "module": "widget-modality"}, "aui-datepicker.js": {"classlist": ["DatepickerManager", "DatePickerSelect"], "name": "aui-datepicker.js", "module": "aui-calendar"}, "aui-chart-min.js": {"name": "aui-chart-min.js", "classlist": [], "module": "aui-char-counter", "guessedname": "g", "guessedtype": "function", "method": "g"}, "datasource-textschema-debug.js": {"classlist": ["DataSourceTextSchema"], "name": "datasource-textschema-debug.js", "module": "datasource"}, "aui-datatype-debug.js": {"classlist": ["DataType.Boolean", "DataType.String", "A.DataType.DateMath"], "name": "aui-datatype-debug.js", "module": "aui-datatype"}, "aui-ace-editor-mode-scad-min.js": {"name": "aui-ace-editor-mode-scad-min.js", "classlist": [], "module": "yui", "guessedname": "i", "guessedtype": "function", "method": "i"}, "dom-size-min.js": {"classlist": [], "name": "dom-size-min.js", "module": "dom"}, "frame-debug.js": {"classlist": ["Frame"], "name": "frame-debug.js", "module": "editor"}, "resize-plugin.js": {"classlist": ["Plugin.Resize"], "name": "resize-plugin.js", "module": "resize"}, "autocomplete-list.js": {"classlist": [], "name": "autocomplete-list.js", "module": "autocomplete"}, "datatype-date-format_sv-SE.js": {"classlist": [], "name": "datatype-date-format_sv-SE.js", "module": "datatype"}, "aui-form-combobox-min.js": {"name": "aui-form-combobox-min.js", "classlist": [], "module": "aui-event", "guessedname": "e", "guessedtype": "function", "method": "e"}, "base-build.js": {"classlist": [], "name": "base-build.js", "module": "base"}, "io-upload-iframe-debug.js": {"classlist": [], "name": "io-upload-iframe-debug.js", "module": "io-base"}, "io-upload-iframe-min.js": {"classlist": [], "name": "io-upload-iframe-min.js", "module": "io-base"}, "aui-data-set.js": {"classlist": [], "name": "aui-data-set.js", "module": "aui-component"}, "datasource-cache-debug.js": {"classlist": ["DataSourceCacheExtension", "DataSourceCache"], "name": "datasource-cache-debug.js", "module": "datasource"}, "aui-text-min.js": {"name": "aui-text-min.js", "classlist": [], "module": "aui-text", "guessedname": "Unicode", "guessedtype": "function", "method": "Unicode"}, "selector-css3-debug.js": {"classlist": [], "name": "selector-css3-debug.js", "module": "dom"}, "recordset-base.js": {"classlist": ["Record", "Recordset"], "name": "recordset-base.js", "module": "recordset"}, "anim-xy-debug.js": {"classlist": [], "name": "anim-xy-debug.js", "module": "anim"}, "aui-diagram-builder-base.js": {"classlist": [], "name": "aui-diagram-builder-base.js", "module": "aui-delayed-task"}, "autocomplete-filters-accentfold-min.js": {"classlist": [], "name": "autocomplete-filters-accentfold-min.js", "module": "autocomplete"}, "aui-drawing-animate-debug.js": {"classlist": [], "name": "aui-drawing-animate-debug.js", "module": "aui-dialog"}, "aui-sortable-debug.js": {"classlist": [], "name": "aui-sortable-debug.js", "module": "aui-resize"}, "aui-tree-data-min.js": {"name": "aui-tree-data-min.js", "classlist": [], "module": "aui-tree", "guessedname": "h", "guessedtype": "function", "method": "h"}, "stylesheet-min.js": {"classlist": [], "name": "stylesheet-min.js", "module": "stylesheet"}, "aui-delayed-task.js": {"classlist": ["DelayedTask"], "name": "aui-delayed-task.js", "module": "aui-delayed-task"}, "tabview-base-min.js": {"classlist": [], "name": "tabview-base-min.js", "module": "tabview"}, "dom-base-debug.js": {"classlist": [], "name": "dom-base-debug.js", "module": "dom"}, "aui-editor-min.js": {"name": "aui-editor-min.js", "classlist": [], "module": "aui-editable", "guessedname": "c", "guessedtype": "function", "method": "c"}, "autocomplete-highlighters.js": {"classlist": ["AutoCompleteHighlighters"], "name": "autocomplete-highlighters.js", "module": "autocomplete"}, "datatype-date-format_tr-TR.js": {"classlist": [], "name": "datatype-date-format_tr-TR.js", "module": "datatype"}, "querystring-stringify.js": {"classlist": [], "name": "querystring-stringify.js", "module": "querystring"}, "widget-skin-debug.js": {"classlist": [], "name": "widget-skin-debug.js", "module": "widget"}, "aui-ace-editor-worker-javascript.js": {"classlist": [], "name": "aui-ace-editor-worker-javascript.js", "module": "yui"}, "recordset-sort-debug.js": {"classlist": ["RecordsetSort"], "name": "recordset-sort-debug.js", "module": "recordset"}, "node-load-min.js": {"classlist": [], "name": "node-load-min.js", "module": "node"}, "dd-drop.js": {"classlist": ["DD.Drop"], "name": "dd-drop.js", "module": "dd"}, "datatype-date-format_ko-KR.js": {"classlist": [], "name": "datatype-date-format_ko-KR.js", "module": "datatype"}, "event-resize-min.js": {"classlist": [], "name": "event-resize-min.js", "module": "event"}, "aui-nested-list.js": {"classlist": ["NestedList"], "name": "aui-nested-list.js", "module": "aui-nested-list"}, "aui-node-base-min.js": {"name": "aui-node-base-min.js", "classlist": [], "module": "aui-node", "guessedname": "U", "guessedtype": "function", "method": "U"}, "datatype-date-math.js": {"classlist": [], "name": "datatype-date-math.js", "module": "datatype"}, "aui-dialog.js": {"classlist": ["Dialog", "DialogManager", "DialogMask"], "name": "aui-dialog.js", "module": "aui-dialog"}, "aui-video.js": {"classlist": [], "name": "aui-video.js", "module": "aui-tree"}, "widget-skin-min.js": {"classlist": [], "name": "widget-skin-min.js", "module": "widget"}, "aui-base-lang-debug.js": {"classlist": [], "name": "aui-base-lang-debug.js", "module": "aui-autocomplete"}, "uploader-min.js": {"classlist": [], "name": "uploader-min.js", "module": "uploader"}, "base-pluginhost.js": {"classlist": [], "name": "base-pluginhost.js", "module": "base"}, "arraylist-add.js": {"classlist": [], "name": "arraylist-add.js", "module": "collection"}, "dom-attrs-debug.js": {"classlist": [], "name": "dom-attrs-debug.js", "module": "dom"}, "widget-base.js": {"classlist": ["Widget"], "name": "widget-base.js", "module": "widget"}, "widget-child-debug.js": {"classlist": ["WidgetChild"], "name": "widget-child-debug.js", "module": "widget-child"}, "dom-min.js": {"classlist": [], "name": "dom-min.js", "module": "dom"}, "aui-component-debug.js": {"classlist": ["Component"], "name": "aui-component-debug.js", "module": "aui-component"}, "dom-attrs-min.js": {"classlist": [], "name": "dom-attrs-min.js", "module": "dom"}, "node-screen-debug.js": {"classlist": [], "name": "node-screen-debug.js", "module": "node"}, "aui-overlay-base.js": {"classlist": ["OverlayBase"], "name": "aui-overlay-base.js", "module": "aui-overlay"}, "widget-stack-debug.js": {"classlist": ["WidgetStack"], "name": "widget-stack-debug.js", "module": "widget-stack"}, "aui-editor-creole-parser-min.js": {"name": "aui-editor-creole-parser-min.js", "classlist": [], "module": "aui-editable", "guessedname": "b", "guessedtype": "function", "method": "b"}, "jsonp-url-debug.js": {"classlist": [], "name": "jsonp-url-debug.js", "module": "jsonp"}, "querystring-stringify-debug.js": {"classlist": [], "name": "querystring-stringify-debug.js", "module": "querystring"}, "intl-debug.js": {"classlist": ["Intl"], "name": "intl-debug.js", "module": "intl"}, "anim-min.js": {"classlist": [], "name": "anim-min.js", "module": "anim"}, "aui-messaging-min.js": {"name": "aui-messaging-min.js", "classlist": [], "module": "aui-loading-mask", "guessedname": "j", "guessedtype": "function", "method": "j"}, "calendar_en.js": {"classlist": [], "name": "calendar_en.js", "module": "calendar"}, "aui-datepicker-base.js": {"classlist": ["DatepickerManager"], "name": "aui-datepicker-base.js", "module": "aui-calendar"}, "history-base-min.js": {"classlist": [], "name": "history-base-min.js", "module": "history"}, "aui-base-min.js": {"name": "aui-base-min.js", "classlist": [], "module": "aui-autocomplete", "guessedname": "AUI_config", "guessedtype": "function", "method": "AUI_config"}, "datatable-datasource-min.js": {"classlist": [], "name": "datatable-datasource-min.js", "module": "datatable"}, "anim-scroll.js": {"classlist": [], "name": "anim-scroll.js", "module": "anim"}, "aui-node-html5-min.js": {"name": "aui-node-html5-min.js", "classlist": [], "module": "aui-node", "guessedname": "c", "guessedtype": "function", "method": "c"}, "aui.js": {"classlist": ["YUI", "config", "Lang", "Array", "Queue", "Object", "UA", "Get", "Intl"], "name": "aui.js", "module": "yui"}, "calendar-base_ru.js": {"classlist": [], "name": "calendar-base_ru.js", "module": "calendar"}, "escape-debug.js": {"classlist": ["Escape"], "name": "escape-debug.js", "module": "escape"}, "aui-media-gallery-plugin.js": {"classlist": [], "name": "aui-media-gallery-plugin.js", "module": "'aui-media-gallery-plugin"}, "datasource-get.js": {"classlist": ["DataSource.Get"], "name": "datasource-get.js", "module": "datasource"}, "aui-scroller-debug.js": {"classlist": [], "name": "aui-scroller-debug.js", "module": "aui-resize"}, "datatable-scroll-debug.js": {"classlist": ["DataTableScroll"], "name": "datatable-scroll-debug.js", "module": "datatable"}, "datatype-date-format_ro.js": {"classlist": [], "name": "datatype-date-format_ro.js", "module": "datatype"}, "aui-color-util-debug.js": {"classlist": [], "name": "aui-color-util-debug.js", "module": "aui-color-picker"}, "yui-core-debug.js": {"classlist": ["YUI", "config", "Lang", "Array", "Queue", "Object", "UA"], "name": "yui-core-debug.js", "module": "yui"}, "datatype-date-format_es-AR.js": {"classlist": [], "name": "datatype-date-format_es-AR.js", "module": "datatype"}, "cache-base.js": {"classlist": ["Cache"], "name": "cache-base.js", "module": "cache"}, "transition-native-min.js": {"classlist": [], "name": "transition-native-min.js", "module": "transition"}, "autocomplete-list-keys-debug.js": {"classlist": [], "name": "autocomplete-list-keys-debug.js", "module": "autocomplete"}, "widget-base-debug.js": {"classlist": ["Widget"], "name": "widget-base-debug.js", "module": "widget"}, "aui-ace-editor-mode-clojure-min.js": {"name": "aui-ace-editor-mode-clojure-min.js", "classlist": [], "module": "yui", "guessedname": "d", "guessedtype": "function", "method": "d"}, "editor-lists-debug.js": {"classlist": ["Plugin.EditorLists"], "name": "editor-lists-debug.js", "module": "editor"}, "aui-property-list-debug.js": {"classlist": [], "name": "aui-property-list-debug.js", "module": "aui-progressbar"}, "autocomplete-list-keys-min.js": {"classlist": [], "name": "autocomplete-list-keys-min.js", "module": "autocomplete"}, "event-touch-debug.js": {"classlist": [], "name": "event-touch-debug.js", "module": "event-touch"}, "aui-scroller.js": {"classlist": [], "name": "aui-scroller.js", "module": "aui-resize"}, "tabview-plugin-min.js": {"classlist": [], "name": "tabview-plugin-min.js", "module": "tabview"}, "datatype-date-format_hi.js": {"classlist": [], "name": "datatype-date-format_hi.js", "module": "datatype"}, "aui-ace-editor-cockpit-uncompressed-debug.js": {"classlist": [], "name": "aui-ace-editor-cockpit-uncompressed-debug.js", "module": "yui"}, "substitute.js": {"classlist": ["YUI~substitute"], "name": "substitute.js", "module": "substitute"}, "dom-deprecated-debug.js": {"classlist": [], "name": "dom-deprecated-debug.js", "module": "dom"}, "querystring-stringify-simple.js": {"classlist": [], "name": "querystring-stringify-simple.js", "module": "querystring"}, "dd.js": {"classlist": ["DD.DDM", "DD.Drag", "Plugin.DDProxy", "Plugin.DDConstrained", "DD.Scroll", "Plugin.DDWindowScroll", "Plugin.DDNodeScroll", "DD.Drop", "DD.Delegate"], "name": "dd.js", "module": "dd"}, "swf-min.js": {"classlist": [], "name": "swf-min.js", "module": "swf"}, "aui-io-request.js": {"classlist": ["IORequest", "A.io"], "name": "aui-io-request.js", "module": "aui-io"}, "autocomplete-highlighters-min.js": {"classlist": [], "name": "autocomplete-highlighters-min.js", "module": "autocomplete"}, "selection-min.js": {"classlist": [], "name": "selection-min.js", "module": "editor"}, "charts-min.js": {"classlist": [], "name": "charts-min.js", "module": "charts"}, "io-base.js": {"classlist": ["IO"], "name": "io-base.js", "module": "io-base"}, "editor-tab-min.js": {"classlist": [], "name": "editor-tab-min.js", "module": "editor"}, "graphics-svg-debug.js": {"classlist": ["SVGDrawing", "SVGShape", "SVGPath", "SVGRect", "SVGEllipse", "SVGCircle", "SVGPieSlice", "SVGGraphic"], "name": "graphics-svg-debug.js", "module": "graphics"}, "event-flick.js": {"classlist": [], "name": "event-flick.js", "module": "event-gestures"}, "datatable-sort.js": {"classlist": [], "name": "datatable-sort.js", "module": "datatable"}, "aui-ace-editor-keybinding-vim.js": {"classlist": [], "name": "aui-ace-editor-keybinding-vim.js", "module": "yui"}, "model-list-min.js": {"classlist": [], "name": "model-list-min.js", "module": "loader"}, "selector-css2.js": {"classlist": [], "name": "selector-css2.js", "module": "dom"}, "datasource-textschema.js": {"classlist": ["DataSourceTextSchema"], "name": "datasource-textschema.js", "module": "datasource"}, "datatype-date-format_nb-NO.js": {"classlist": [], "name": "datatype-date-format_nb-NO.js", "module": "datatype"}, "node-event-simulate-min.js": {"classlist": [], "name": "node-event-simulate-min.js", "module": "node"}, "widget-stdmod-min.js": {"classlist": [], "name": "widget-stdmod-min.js", "module": "widget-stdmod"}, "aui-calendar-base-debug.js": {"classlist": ["Calendar"], "name": "aui-calendar-base-debug.js", "module": "aui-calendar"}, "aui-editable-debug.js": {"classlist": ["Editable"], "name": "aui-editable-debug.js", "module": "aui-editable"}, "dd-drag-min.js": {"classlist": [], "name": "dd-drag-min.js", "module": "dd"}, "aui-color-picker-base-min.js": {"name": "aui-color-picker-base-min.js", "classlist": [], "module": "aui-color-picker", "guessedname": "f", "guessedtype": "function", "method": "f"}, "yui-base-debug.js": {"classlist": ["YUI", "config", "Lang", "Array", "Queue", "Object", "UA", "Get", "Intl"], "name": "yui-base-debug.js", "module": "yui"}, "aui-state-interaction-min.js": {"name": "aui-state-interaction-min.js", "classlist": [], "module": "aui-resize", "guessedname": "h", "guessedtype": "function", "method": "h"}, "event-outside-debug.js": {"classlist": [], "name": "event-outside-debug.js", "module": "event"}, "aui-base-debug.js": {"classlist": [], "name": "aui-base-debug.js", "module": "aui-autocomplete"}, "datatype-date-format_ro-RO.js": {"classlist": [], "name": "datatype-date-format_ro-RO.js", "module": "datatype"}, "aui-viewport.js": {"classlist": [], "name": "aui-viewport.js", "module": "aui-tree"}, "aui-calendar-min.js": {"name": "aui-calendar-min.js", "classlist": [], "module": "aui-calendar", "guessedname": "aq", "guessedtype": "function", "method": "aq"}, "aui-simple-anim-min.js": {"name": "aui-simple-anim-min.js", "classlist": [], "module": "aui-resize", "guessedname": "d", "guessedtype": "function", "method": "d"}, "dom-screen.js": {"classlist": [], "name": "dom-screen.js", "module": "dom"}, "aui-template-min.js": {"name": "aui-template-min.js", "classlist": [], "module": "aui-resize", "guessedname": "Lang", "guessedtype": "function", "method": "Lang"}, "aui-ace-editor-worker-javascript-debug.js": {"classlist": [], "name": "aui-ace-editor-worker-javascript-debug.js", "module": "yui"}, "node-menunav.js": {"classlist": ["plugin.NodeMenuNav"], "name": "node-menunav.js", "module": "node-menunav"}, "uploader-debug.js": {"classlist": ["Uploader"], "name": "uploader-debug.js", "module": "uploader"}, "console_en.js": {"classlist": [], "name": "console_en.js", "module": "console"}, "dd-proxy-debug.js": {"classlist": ["Plugin.DDProxy"], "name": "dd-proxy-debug.js", "module": "dd"}, "text-wordbreak-min.js": {"classlist": [], "name": "text-wordbreak-min.js", "module": "text"}, "scrollview-base-ie-min.js": {"classlist": [], "name": "scrollview-base-ie-min.js", "module": "scrollview-base-ie"}, "aui-scheduler-base-min.js": {"name": "aui-scheduler-base-min.js", "classlist": [], "module": "aui-resize", "guessedname": "W", "guessedtype": "function", "method": "W"}, "scrollview-paginator-min.js": {"classlist": [], "name": "scrollview-paginator-min.js", "module": "scrollview-paginator"}, "text-data-accentfold.js": {"classlist": [], "name": "text-data-accentfold.js", "module": "text"}, "dd-delegate.js": {"classlist": ["DD.Delegate"], "name": "dd-delegate.js", "module": "dd"}, "history-base-debug.js": {"classlist": ["HistoryBase"], "name": "history-base-debug.js", "module": "history"}, "aui-tpl-snippets-textarea.js": {"classlist": [], "name": "aui-tpl-snippets-textarea.js", "module": "aui-tooltip"}, "dd-drop-min.js": {"classlist": [], "name": "dd-drop-min.js", "module": "dd"}, "datatype-date-format_ms.js": {"classlist": [], "name": "datatype-date-format_ms.js", "module": "datatype"}, "arraylist-add-debug.js": {"classlist": [], "name": "arraylist-add-debug.js", "module": "collection"}, "editor-br-debug.js": {"classlist": ["Plugin.EditorBR"], "name": "editor-br-debug.js", "module": "editor"}, "aui-editor-menu-plugin.js": {"classlist": [], "name": "aui-editor-menu-plugin.js", "module": "aui-editable"}, "aui-drawing-vml.js": {"classlist": [], "name": "aui-drawing-vml.js", "module": "aui-dialog"}, "autocomplete-filters-accentfold-debug.js": {"classlist": ["AutoCompleteFilters"], "name": "autocomplete-filters-accentfold-debug.js", "module": "autocomplete"}, "aui-text-data-unicode-debug.js": {"classlist": [], "name": "aui-text-data-unicode-debug.js", "module": "aui-text"}, "controller.js": {"classlist": ["Controller"], "name": "controller.js", "module": "app"}, "aui-node-html5.js": {"classlist": ["A.HTML5"], "name": "aui-node-html5.js", "module": "aui-node"}, "aui-node.js": {"classlist": ["A.Node", "A.NodeList", "A.HTML5"], "name": "aui-node.js", "module": "aui-node"}, "querystring-parse-min.js": {"classlist": [], "name": "querystring-parse-min.js", "module": "querystring"}, "aui-ace-editor-mode-scad-debug.js": {"classlist": [], "name": "aui-ace-editor-mode-scad-debug.js", "module": "yui"}, "history-hash-min.js": {"classlist": [], "name": "history-hash-min.js", "module": "history"}, "aui-io-plugin-min.js": {"name": "aui-io-plugin-min.js", "classlist": [], "module": "aui-io", "guessedname": "n", "guessedtype": "function", "method": "n"}, "oop.js": {"classlist": [], "name": "oop.js", "module": "oop"}, "datatype-date-format_en-AU.js": {"classlist": [], "name": "datatype-date-format_en-AU.js", "module": "datatype"}, "widget-locale.js": {"classlist": [], "name": "widget-locale.js", "module": "widget-locale"}, "array-extras-debug.js": {"classlist": [], "name": "array-extras-debug.js", "module": "collection"}, "aui-editable.js": {"classlist": ["Editable"], "name": "aui-editable.js", "module": "aui-editable"}, "autocomplete-filters-accentfold.js": {"classlist": ["AutoCompleteFilters"], "name": "autocomplete-filters-accentfold.js", "module": "autocomplete"}, "datasource-get-min.js": {"classlist": [], "name": "datasource-get-min.js", "module": "datasource"}, "aui-data-set-min.js": {"name": "aui-data-set-min.js", "classlist": [], "module": "aui-component", "guessedname": "c", "guessedtype": "function", "method": "c"}, "event-key.js": {"classlist": [], "name": "event-key.js", "module": "event"}, "widget-htmlparser.js": {"classlist": [], "name": "widget-htmlparser.js", "module": "widget"}, "aui-ace-editor-worker-coffee.js": {"classlist": [], "name": "aui-ace-editor-worker-coffee.js", "module": "yui"}, "aui-drawing-fonts-min.js": {"name": "aui-drawing-fonts-min.js", "classlist": [], "module": "aui-dialog", "guessedname": "j", "guessedtype": "function", "method": "j"}, "aui-node-base-debug.js": {"classlist": ["A.Node", "A.NodeList"], "name": "aui-node-base-debug.js", "module": "aui-node"}, "aui-scheduler.js": {"classlist": [], "name": "aui-scheduler.js", "module": "aui-resize"}, "aui-form-textarea.js": {"classlist": [], "name": "aui-form-textarea.js", "module": "aui-event"}, "scrollview-debug.js": {"classlist": [], "name": "scrollview-debug.js", "module": "scrollview"}, "dd-gestures-min.js": {"classlist": [], "name": "dd-gestures-min.js", "module": "dd"}, "slider-base-debug.js": {"classlist": ["SliderBase"], "name": "slider-base-debug.js", "module": "slider"}, "json-stringify-min.js": {"classlist": [], "name": "json-stringify-min.js", "module": "json"}, "aui-io-plugin-debug.js": {"classlist": ["A.Plugin.IO"], "name": "aui-io-plugin-debug.js", "module": "aui-io"}, "aui-data-browser-min.js": {"name": "aui-data-browser-min.js", "classlist": [], "module": "aui-component", "guessedname": "R", "guessedtype": "function", "method": "R"}, "datasource-local-debug.js": {"classlist": ["DataSource.Local"], "name": "datasource-local-debug.js", "module": "datasource"}, "event-simulate-debug.js": {"classlist": [], "name": "event-simulate-debug.js", "module": "event-simulate"}, "plugin.js": {"classlist": ["Plugin.Base"], "name": "plugin.js", "module": "plugin"}, "aui-calendar-base.js": {"classlist": ["Calendar"], "name": "aui-calendar-base.js", "module": "aui-calendar"}, "plugin-min.js": {"classlist": [], "name": "plugin-min.js", "module": "plugin"}, "dd-constrain.js": {"classlist": ["Plugin.DDConstrained"], "name": "dd-constrain.js", "module": "dd"}, "aui-aria-debug.js": {"classlist": [], "name": "aui-aria-debug.js", "module": "yui"}, "aui-editor-creole-plugin.js": {"classlist": [], "name": "aui-editor-creole-plugin.js", "module": "aui-editable"}, "io-queue-min.js": {"classlist": [], "name": "io-queue-min.js", "module": "io-base"}, "dom-screen-min.js": {"classlist": [], "name": "dom-screen-min.js", "module": "dom"}, "transition-debug.js": {"classlist": ["Transition"], "name": "transition-debug.js", "module": "transition"}, "aui-property-list.js": {"classlist": [], "name": "aui-property-list.js", "module": "aui-progressbar"}, "features.js": {"classlist": [], "name": "features.js", "module": "editor"}, "aui-ace-editor-worker-coffee-min.js": {"name": "aui-ace-editor-worker-coffee-min.js", "classlist": [], "module": "yui", "guessedname": "m", "guessedtype": "function", "method": "m"}, "aui-ace-editor-mode-html-debug.js": {"classlist": [], "name": "aui-ace-editor-mode-html-debug.js", "module": "yui"}, "aui-io-plugin.js": {"classlist": ["A.Plugin.IO"], "name": "aui-io-plugin.js", "module": "aui-io"}, "event-focus-debug.js": {"classlist": [], "name": "event-focus-debug.js", "module": "event"}, "arraylist-filter-min.js": {"classlist": [], "name": "arraylist-filter-min.js", "module": "collection"}, "selector-css2-min.js": {"classlist": [], "name": "selector-css2-min.js", "module": "dom"}, "recordset-indexer-debug.js": {"classlist": ["RecordsetIndexer"], "name": "recordset-indexer-debug.js", "module": "recordset"}, "anim-debug.js": {"classlist": ["Anim", "Easing", "Plugin.NodeFX"], "name": "anim-debug.js", "module": "anim"}, "dd-scroll-min.js": {"classlist": [], "name": "dd-scroll-min.js", "module": "dd"}, "aui-datatable-events-debug.js": {"classlist": [], "name": "aui-datatable-events-debug.js", "module": "aui-component"}, "datatype-date-format_el-GR.js": {"classlist": [], "name": "datatype-date-format_el-GR.js", "module": "datatype"}, "clickable-rail-debug.js": {"classlist": ["ClickableRail"], "name": "clickable-rail-debug.js", "module": "slider"}, "scrollview-scrollbars-min.js": {"classlist": [], "name": "scrollview-scrollbars-min.js", "module": "scrollview-scrollbars"}, "dd-plugin-debug.js": {"classlist": ["Plugin.Drag"], "name": "dd-plugin-debug.js", "module": "dd"}, "aui-tabs-menu-plugin-debug.js": {"classlist": [], "name": "aui-tabs-menu-plugin-debug.js", "module": "aui-resize"}, "anim-base.js": {"classlist": ["Anim"], "name": "anim-base.js", "module": "anim"}, "resize-proxy.js": {"classlist": ["Plugin.ResizeProxy"], "name": "resize-proxy.js", "module": "resize"}, "graphics-min.js": {"classlist": [], "name": "graphics-min.js", "module": "graphics"}, "aui-datatable-base-min.js": {"name": "aui-datatable-base-min.js", "classlist": [], "module": "aui-component", "guessedname": "j", "guessedtype": "function", "method": "j"}, "aui-viewport-debug.js": {"classlist": [], "name": "aui-viewport-debug.js", "module": "aui-tree"}, "aui-datasource-control-debug.js": {"classlist": [], "name": "aui-datasource-control-debug.js", "module": "aui-component"}, "io-form.js": {"classlist": [], "name": "io-form.js", "module": "io-base"}, "aui-drawing-min.js": {"name": "aui-drawing-min.js", "classlist": [], "module": "aui-dialog", "guessedname": "Q", "guessedtype": "function", "method": "Q"}, "scrollview-paginator.js": {"classlist": ["Plugin.ScrollViewPaginator"], "name": "scrollview-paginator.js", "module": "scrollview-paginator"}, "dom-style-ie-min.js": {"classlist": [], "name": "dom-style-ie-min.js", "module": "dom"}, "frame.js": {"classlist": ["Frame"], "name": "frame.js", "module": "editor"}, "node-event-simulate.js": {"classlist": [], "name": "node-event-simulate.js", "module": "node"}, "datasource-polling-min.js": {"classlist": [], "name": "datasource-polling-min.js", "module": "datasource"}, "stylesheet.js": {"classlist": ["StyleSheet"], "name": "stylesheet.js", "module": "stylesheet"}, "yui.js": {"classlist": ["YUI", "config", "Lang", "Array", "Queue", "Object", "UA", "Get", "Intl", "Loader"], "name": "yui.js", "module": "loader"}, "view-debug.js": {"classlist": ["View"], "name": "view-debug.js", "module": "uploader"}, "aui-resize-base-min.js": {"name": "aui-resize-base-min.js", "classlist": [], "module": "aui-resize", "guessedname": "ac", "guessedtype": "function", "method": "ac"}, "intl-base-min.js": {"classlist": [], "name": "intl-base-min.js", "module": "intl"}, "cache-base-debug.js": {"classlist": ["Cache"], "name": "cache-base-debug.js", "module": "cache"}, "widget-anim.js": {"classlist": ["Plugin.WidgetAnim"], "name": "widget-anim.js", "module": "widget-anim"}, "yui-debug.js": {"classlist": ["YUI", "config", "Lang", "Array", "Queue", "Object", "UA", "Get", "Intl", "Loader"], "name": "yui-debug.js", "module": "yui"}, "dom-core-min.js": {"classlist": [], "name": "dom-core-min.js", "module": "dom"}, "event-flick-min.js": {"classlist": [], "name": "event-flick-min.js", "module": "event-gestures"}, "dom.js": {"classlist": ["Selector"], "name": "dom.js", "module": "dom"}, "datatype-date-format_en-SG.js": {"classlist": [], "name": "datatype-date-format_en-SG.js", "module": "datatype"}, "datatype-date-format_en-GB.js": {"classlist": [], "name": "datatype-date-format_en-GB.js", "module": "datatype"}, "io-xdr-min.js": {"classlist": [], "name": "io-xdr-min.js", "module": "io-base"}, "base-build-min.js": {"classlist": [], "name": "base-build-min.js", "module": "base"}, "aui-event-base-min.js": {"name": "aui-event-base-min.js", "classlist": [], "module": "aui-event", "guessedname": "c", "guessedtype": "function", "method": "c"}, "aui-selector-debug.js": {"classlist": [], "name": "aui-selector-debug.js", "module": "aui-resize"}, "loader-base-debug.js": {"classlist": ["Loader"], "name": "loader-base-debug.js", "module": "loader"}, "aui-node-html5-print-debug.js": {"classlist": [], "name": "aui-node-html5-print-debug.js", "module": "aui-node"}, "event-outside-min.js": {"classlist": [], "name": "event-outside-min.js", "module": "event"}, "widget-position-constrain-min.js": {"classlist": [], "name": "widget-position-constrain-min.js", "module": "widget-position-constrain"}, "node-event-html5-debug.js": {"classlist": [], "name": "node-event-html5-debug.js", "module": "node"}, "aui-tpl-snippets-min.js": {"name": "aui-tpl-snippets-min.js", "classlist": [], "module": "aui-tooltip", "guessedname": "e", "guessedtype": "function", "method": "e"}, "aui-form-field-min.js": {"name": "aui-form-field-min.js", "classlist": [], "module": "aui-event", "guessedname": "h", "guessedtype": "function", "method": "h"}, "aui-dialog-iframe-debug.js": {"classlist": [], "name": "aui-dialog-iframe-debug.js", "module": "aui-dialog"}, "dom-deprecated-min.js": {"classlist": [], "name": "dom-deprecated-min.js", "module": "dom"}, "aui-color-min.js": {"name": "aui-color-min.js", "classlist": [], "module": "aui-char-counter", "guessedname": "I", "guessedtype": "function", "method": "I"}, "aui-datasource-control-base-debug.js": {"classlist": [], "name": "aui-datasource-control-base-debug.js", "module": "aui-component"}, "aui-tooltip-debug.js": {"classlist": ["Tooltip"], "name": "aui-tooltip-debug.js", "module": "aui-tooltip"}, "widget-parent-debug.js": {"classlist": ["WidgetParent"], "name": "widget-parent-debug.js", "module": "widget-parent"}, "aui-tpl-snippets-select.js": {"classlist": [], "name": "aui-tpl-snippets-select.js", "module": "aui-tooltip"}, "dom-base.js": {"classlist": [], "name": "dom-base.js", "module": "dom"}, "dump-min.js": {"classlist": [], "name": "dump-min.js", "module": "dump"}, "resize-constrain.js": {"classlist": ["Plugin.ResizeConstrained"], "name": "resize-constrain.js", "module": "resize"}, "aui-editor-tools-plugin-min.js": {"name": "aui-editor-tools-plugin-min.js", "classlist": [], "module": "aui-editable", "guessedname": "e", "guessedtype": "function", "method": "e"}, "loader-rollup-debug.js": {"classlist": [], "name": "loader-rollup-debug.js", "module": "loader"}, "aui-editor-html-creole.js": {"classlist": [], "name": "aui-editor-html-creole.js", "module": "aui-editable"}, "dataschema-base.js": {"classlist": ["DataSchema.Base"], "name": "dataschema-base.js", "module": "dataschema"}, "selector-native-debug.js": {"classlist": ["Selector"], "name": "selector-native-debug.js", "module": "dom"}, "arraysort-min.js": {"classlist": [], "name": "arraysort-min.js", "module": "arraysort"}, "aui-ace-editor-keybinding-emacs-debug.js": {"classlist": [], "name": "aui-ace-editor-keybinding-emacs-debug.js", "module": "yui"}, "datatype-date-format_de-DE.js": {"classlist": [], "name": "datatype-date-format_de-DE.js", "module": "datatype"}, "sortable-debug.js": {"classlist": ["Sortable"], "name": "sortable-debug.js", "module": "sortable"}, "aui-form-textfield-debug.js": {"classlist": [], "name": "aui-form-textfield-debug.js", "module": "aui-event"}, "scrollview-base-ie.js": {"classlist": [], "name": "scrollview-base-ie.js", "module": "scrollview-base-ie"}, "datatype-date-format_fr-BE.js": {"classlist": [], "name": "datatype-date-format_fr-BE.js", "module": "datatype"}, "dataschema-json-debug.js": {"classlist": ["DataSchema.JSON"], "name": "dataschema-json-debug.js", "module": "dataschema"}, "editor-bidi-min.js": {"classlist": [], "name": "editor-bidi-min.js", "module": "editor"}, "loader.js": {"classlist": ["Loader"], "name": "loader.js", "module": "loader"}, "aui-ace-editor-worker-javascript-min.js": {"name": "aui-ace-editor-worker-javascript-min.js", "classlist": [], "module": "yui", "guessedname": "a", "guessedtype": "function", "method": "a"}, "aui-image-viewer-gallery-min.js": {"name": "aui-image-viewer-gallery-min.js", "classlist": [], "module": "aui-image-viewer", "guessedname": "m", "guessedtype": "function", "method": "m"}, "aui-drawing-drag-min.js": {"name": "aui-drawing-drag-min.js", "classlist": [], "module": "aui-dialog", "guessedname": "f", "guessedtype": "function", "method": "f"}, "history-hash.js": {"classlist": ["HistoryHash"], "name": "history-hash.js", "module": "history"}, "datatype-date-parse-debug.js": {"classlist": [], "name": "datatype-date-parse-debug.js", "module": "datatype"}, "aui-form-base-min.js": {"name": "aui-form-base-min.js", "classlist": [], "module": "aui-event", "guessedname": "i", "guessedtype": "function", "method": "i"}, "datasource-jsonschema-debug.js": {"classlist": ["DataSourceJSONSchema"], "name": "datasource-jsonschema-debug.js", "module": "datasource"}, "io-base-debug.js": {"classlist": ["IO"], "name": "io-base-debug.js", "module": "io-base"}, "aui-live-search.js": {"classlist": ["LiveSearch"], "name": "aui-live-search.js", "module": "aui-live-search"}, "datatype-date-format_en-IE.js": {"classlist": [], "name": "datatype-date-format_en-IE.js", "module": "datatype"}, "datasource-textschema-min.js": {"classlist": [], "name": "datasource-textschema-min.js", "module": "datasource"}, "aui-overlay-mask.js": {"classlist": ["OverlayMask"], "name": "aui-overlay-mask.js", "module": "aui-overlay"}, "features-min.js": {"classlist": [], "name": "features-min.js", "module": "editor"}, "rls.js": {"classlist": ["rls"], "name": "rls.js", "module": "yui"}, "graphics-canvas-debug.js": {"classlist": ["CanvasDrawing", "CanvasShape", "CanvasPath", "CanvasRect", "CanvasEllipse", "CanvasCircle", "CanvasPieSlice", "CanvasGraphic"], "name": "graphics-canvas-debug.js", "module": "graphics"}, "aui-component-min.js": {"name": "aui-component-min.js", "classlist": [], "module": "aui-component", "guessedname": "f", "guessedtype": "function", "method": "f"}, "yui-log-min.js": {"classlist": [], "name": "yui-log-min.js", "module": "yui"}, "aui-state-interaction.js": {"classlist": [], "name": "aui-state-interaction.js", "module": "aui-resize"}, "widget-position-constrain.js": {"classlist": ["WidgetPositionConstrain"], "name": "widget-position-constrain.js", "module": "widget-position-constrain"}, "aui-io-request-min.js": {"name": "aui-io-request-min.js", "classlist": [], "module": "aui-io", "guessedname": "f", "guessedtype": "function", "method": "f"}, "datatype-date-format-debug.js": {"classlist": ["DataType.Date", "DataType.Date.Locale"], "name": "datatype-date-format-debug.js", "module": "datatype"}, "model.js": {"classlist": ["Model"], "name": "model.js", "module": "loader"}, "console.js": {"classlist": [], "name": "console.js", "module": "console"}, "aui-base-core-min.js": {"name": "aui-base-core-min.js", "classlist": [], "module": "aui-autocomplete", "guessedname": "AUI_config", "guessedtype": "function", "method": "AUI_config"}, "aui-toolbar.js": {"classlist": ["Toolbar"], "name": "aui-toolbar.js", "module": "aui-toolbar"}, "node-flick.js": {"classlist": ["Plugin.Flick"], "name": "node-flick.js", "module": "node-flick"}, "yui-core-min.js": {"classlist": [], "name": "yui-core-min.js", "module": "yui"}, "datatype-date-format_nl-NL.js": {"classlist": [], "name": "datatype-date-format_nl-NL.js", "module": "datatype"}, "aui-overlay-context-panel.js": {"classlist": ["OverlayContextPanel", "OverlayContextPanelManager"], "name": "aui-overlay-context-panel.js", "module": "aui-overlay"}, "aui-swf-debug.js": {"classlist": [], "name": "aui-swf-debug.js", "module": "aui-resize"}, "pluginhost-base-debug.js": {"classlist": ["Plugin.Host"], "name": "pluginhost-base-debug.js", "module": "pluginhost"}, "get.js": {"classlist": ["Get"], "name": "get.js", "module": "yui"}, "datatype-date-format_sv.js": {"classlist": [], "name": "datatype-date-format_sv.js", "module": "datatype"}, "datatype-date-format_da-DK.js": {"classlist": [], "name": "datatype-date-format_da-DK.js", "module": "datatype"}, "aui-form-field.js": {"classlist": [], "name": "aui-form-field.js", "module": "aui-event"}, "editor-tab.js": {"classlist": ["Plugin.EditorTab"], "name": "editor-tab.js", "module": "editor"}, "dom-base-min.js": {"classlist": [], "name": "dom-base-min.js", "module": "dom"}, "aui-ace-editor-mode-groovy-debug.js": {"classlist": [], "name": "aui-ace-editor-mode-groovy-debug.js", "module": "yui"}, "aui-button-item.js": {"classlist": ["ButtonItem"], "name": "aui-button-item.js", "module": "aui-button-item"}, "text-data-wordbreak.js": {"classlist": [], "name": "text-data-wordbreak.js", "module": "text"}, "aui-event-input-min.js": {"name": "aui-event-input-min.js", "classlist": [], "module": "aui-event", "guessedname": "g", "guessedtype": "function", "method": "g"}, "aui-datepicker-select-min.js": {"name": "aui-datepicker-select-min.js", "classlist": [], "module": "aui-calendar", "guessedname": "ap", "guessedtype": "function", "method": "ap"}, "querystring-parse-simple.js": {"classlist": [], "name": "querystring-parse-simple.js", "module": "querystring"}, "aui-ace-editor-mode-scala.js": {"classlist": [], "name": "aui-ace-editor-mode-scala.js", "module": "yui"}, "calendar-base-min.js": {"classlist": [], "name": "calendar-base-min.js", "module": "calendar"}, "calendarnavigator.js": {"classlist": ["Plugin.CalendarNavigator"], "name": "calendarnavigator.js", "module": "calendarnavigator"}, "aui-image-viewer-debug.js": {"classlist": ["ImageViewer", "ImageViewerMask", "ImageGallery"], "name": "aui-image-viewer-debug.js", "module": "aui-image-viewer"}, "datasource-io.js": {"classlist": ["DataSource.IO"], "name": "datasource-io.js", "module": "datasource"}, "aui-diagram-builder-impl-min.js": {"name": "aui-diagram-builder-impl-min.js", "classlist": [], "module": "aui-delayed-task", "guessedname": "ap", "guessedtype": "function", "method": "ap"}, "datatype-date-math-min.js": {"classlist": [], "name": "datatype-date-math-min.js", "module": "datatype"}, "event-custom-complex-min.js": {"classlist": [], "name": "event-custom-complex-min.js", "module": "event-custom"}, "event-outside.js": {"classlist": [], "name": "event-outside.js", "module": "event"}, "aui-overlay-manager-min.js": {"name": "aui-overlay-manager-min.js", "classlist": [], "module": "aui-overlay", "guessedname": "i", "guessedtype": "function", "method": "i"}, "autocomplete-highlighters-accentfold.js": {"classlist": ["AutoCompleteHighlighters"], "name": "autocomplete-highlighters-accentfold.js", "module": "autocomplete"}, "sortable-min.js": {"classlist": [], "name": "sortable-min.js", "module": "sortable"}, "dd-min.js": {"classlist": [], "name": "dd-min.js", "module": "dd"}, "widget-base-ie-min.js": {"classlist": [], "name": "widget-base-ie-min.js", "module": "widget-base-ie"}, "node-focusmanager-min.js": {"classlist": [], "name": "node-focusmanager-min.js", "module": "node-focusmanager"}, "anim-easing-min.js": {"classlist": [], "name": "anim-easing-min.js", "module": "anim"}, "anim-scroll-debug.js": {"classlist": [], "name": "anim-scroll-debug.js", "module": "anim"}, "event-base-debug.js": {"classlist": ["DOMEventFacade", "Event"], "name": "event-base-debug.js", "module": "event"}, "datatable-datasource-debug.js": {"classlist": ["DataTableDataSource"], "name": "datatable-datasource-debug.js", "module": "datatable"}, "aui-tpl-snippets-input-min.js": {"name": "aui-tpl-snippets-input-min.js", "classlist": [], "module": "aui-tooltip", "guessedname": "requires", "guessedtype": "function", "method": "requires"}, "aui-video-debug.js": {"classlist": [], "name": "aui-video-debug.js", "module": "aui-tree"}, "datatype-xml-format-debug.js": {"classlist": ["DataType.XML"], "name": "datatype-xml-format-debug.js", "module": "datatype"}, "aui-overlay-mask-min.js": {"name": "aui-overlay-mask-min.js", "classlist": [], "module": "aui-overlay", "guessedname": "e", "guessedtype": "function", "method": "e"}, "datatable-datasource.js": {"classlist": ["DataTableDataSource"], "name": "datatable-datasource.js", "module": "datatable"}, "profiler-min.js": {"classlist": [], "name": "profiler-min.js", "module": "profiler"}, "aui-image-viewer-min.js": {"name": "aui-image-viewer-min.js", "classlist": [], "module": "aui-image-viewer", "guessedname": "ak", "guessedtype": "function", "method": "ak"}, "aui-classnamemanager-min.js": {"name": "aui-classnamemanager-min.js", "classlist": [], "module": "aui-char-counter", "guessedname": "d", "guessedtype": "function", "method": "d"}, "aui-color-picker-grid-plugin-debug.js": {"classlist": [], "name": "aui-color-picker-grid-plugin-debug.js", "module": "aui-color-picker"}, "aui-classnamemanager.js": {"classlist": [], "name": "aui-classnamemanager.js", "module": "aui-char-counter"}, "editor-para.js": {"classlist": ["Plugin.EditorPara"], "name": "editor-para.js", "module": "editor"}, "dataschema-xml-min.js": {"classlist": [], "name": "dataschema-xml-min.js", "module": "dataschema"}, "scrollview.js": {"classlist": [], "name": "scrollview.js", "module": "scrollview"}, "querystring-stringify-min.js": {"classlist": [], "name": "querystring-stringify-min.js", "module": "querystring"}, "yui-later-min.js": {"classlist": [], "name": "yui-later-min.js", "module": "yui"}, "event-move-min.js": {"classlist": [], "name": "event-move-min.js", "module": "event-gestures"}, "datatype-date-format_es-EC.js": {"classlist": [], "name": "datatype-date-format_es-EC.js", "module": "datatype"}, "arraylist-min.js": {"classlist": [], "name": "arraylist-min.js", "module": "collection"}, "aui-text-unicode-debug.js": {"classlist": [], "name": "aui-text-unicode-debug.js", "module": "aui-text"}, "resize-debug.js": {"classlist": ["Resize", "Plugin.ResizeProxy", "Plugin.ResizeConstrained"], "name": "resize-debug.js", "module": "resize"}, "panel.js": {"classlist": ["Panel"], "name": "panel.js", "module": "panel"}, "anim-base-min.js": {"classlist": [], "name": "anim-base-min.js", "module": "anim"}, "datatype-date-format_en-MY.js": {"classlist": [], "name": "datatype-date-format_en-MY.js", "module": "datatype"}, "event-focus-min.js": {"classlist": [], "name": "event-focus-min.js", "module": "event"}, "autocomplete-list_en.js": {"classlist": [], "name": "autocomplete-list_en.js", "module": "autocomplete"}, "aui-editor-toolbar-plugin.js": {"classlist": [], "name": "aui-editor-toolbar-plugin.js", "module": "aui-editable"}, "graphics-vml-min.js": {"classlist": [], "name": "graphics-vml-min.js", "module": "graphics"}, "aui-parse-content-debug.js": {"classlist": ["ParseContent"], "name": "aui-parse-content-debug.js", "module": "aui-parse-content"}, "aui-editor-creole-parser.js": {"classlist": [], "name": "aui-editor-creole-parser.js", "module": "aui-editable"}, "aui-resize-min.js": {"name": "aui-resize-min.js", "classlist": [], "module": "aui-resize", "guessedname": "ac", "guessedtype": "function", "method": "ac"}, "dom-attrs.js": {"classlist": [], "name": "dom-attrs.js", "module": "dom"}, "aui-datasource-control-base.js": {"classlist": [], "name": "aui-datasource-control-base.js", "module": "aui-component"}, "datatype-date-format_fr.js": {"classlist": [], "name": "datatype-date-format_fr.js", "module": "datatype"}, "widget-locale-min.js": {"classlist": [], "name": "widget-locale-min.js", "module": "widget-locale"}, "tabview-plugin-debug.js": {"classlist": [], "name": "tabview-plugin-debug.js", "module": "tabview"}, "aui-template-debug.js": {"classlist": [], "name": "aui-template-debug.js", "module": "aui-resize"}, "datatype-date-format_zh-Hans-CN.js": {"classlist": [], "name": "datatype-date-format_zh-Hans-CN.js", "module": "datatype"}, "node-core-debug.js": {"classlist": ["Node", "NodeList"], "name": "node-core-debug.js", "module": "node"}, "aui-char-counter-debug.js": {"classlist": ["CharCounter"], "name": "aui-char-counter-debug.js", "module": "aui-char-counter"}, "datasource-polling-debug.js": {"classlist": ["Pollable"], "name": "datasource-polling-debug.js", "module": "datasource"}, "aui-autocomplete-debug.js": {"classlist": ["AutoComplete"], "name": "aui-autocomplete-debug.js", "module": "aui-autocomplete"}, "console_es.js": {"classlist": [], "name": "console_es.js", "module": "console"}, "aui-scheduler-event.js": {"classlist": [], "name": "aui-scheduler-event.js", "module": "aui-resize"}, "intl-base-debug.js": {"classlist": ["Intl"], "name": "intl-base-debug.js", "module": "intl"}, "aui-form-builder-min.js": {"name": "aui-form-builder-min.js", "classlist": [], "module": "aui-event", "guessedname": "bk", "guessedtype": "function", "method": "bk"}, "json-parse.js": {"classlist": ["JSON"], "name": "json-parse.js", "module": "json"}, "aui-live-search-debug.js": {"classlist": ["LiveSearch"], "name": "aui-live-search-debug.js", "module": "aui-live-search"}, "node-load-debug.js": {"classlist": [], "name": "node-load-debug.js", "module": "node"}, "node-style.js": {"classlist": [], "name": "node-style.js", "module": "node"}, "dd-plugin.js": {"classlist": ["Plugin.Drag"], "name": "dd-plugin.js", "module": "dd"}, "resize-constrain-debug.js": {"classlist": ["Plugin.ResizeConstrained"], "name": "resize-constrain-debug.js", "module": "resize"}, "editor-br-min.js": {"classlist": [], "name": "editor-br-min.js", "module": "editor"}, "selector-native.js": {"classlist": ["Selector"], "name": "selector-native.js", "module": "dom"}, "node-event-delegate-min.js": {"classlist": [], "name": "node-event-delegate-min.js", "module": "node"}, "aui-scheduler-event-min.js": {"name": "aui-scheduler-event-min.js", "classlist": [], "module": "aui-resize", "guessedname": "am", "guessedtype": "function", "method": "am"}, "aui-simple-anim-debug.js": {"classlist": [], "name": "aui-simple-anim-debug.js", "module": "aui-resize"}, "aui-debounce.js": {"classlist": [], "name": "aui-debounce.js", "module": "aui-calendar"}, "attribute-complex-min.js": {"classlist": [], "name": "attribute-complex-min.js", "module": "attribute"}, "aui-tree-view-min.js": {"name": "aui-tree-view-min.js", "classlist": [], "module": "aui-tree", "guessedname": "q", "guessedtype": "function", "method": "q"}, "aui-arraysort-min.js": {"name": "aui-arraysort-min.js", "classlist": [], "module": "yui", "guessedname": "ASort", "guessedtype": "function", "method": "ASort"}, "aui-text-debug.js": {"classlist": [], "name": "aui-text-debug.js", "module": "aui-text"}, "aui-color-picker-grid-plugin.js": {"classlist": [], "name": "aui-color-picker-grid-plugin.js", "module": "aui-color-picker"}, "console-filters-debug.js": {"classlist": ["Plugin.ConsoleFilters"], "name": "console-filters-debug.js", "module": "console-filters"}, "datatype-date-format_th-TH.js": {"classlist": [], "name": "datatype-date-format_th-TH.js", "module": "datatype"}, "pluginhost-base-min.js": {"classlist": [], "name": "pluginhost-base-min.js", "module": "pluginhost-base"}, "aui-editor-bbcode-plugin-debug.js": {"classlist": [], "name": "aui-editor-bbcode-plugin-debug.js", "module": "aui-editable"}, "dd-constrain-min.js": {"classlist": [], "name": "dd-constrain-min.js", "module": "dd"}, "aui-form-builder-base-debug.js": {"classlist": [], "name": "aui-form-builder-base-debug.js", "module": "aui-event"}, "aui-form-textarea-debug.js": {"classlist": [], "name": "aui-form-textarea-debug.js", "module": "aui-event"}, "classnamemanager-debug.js": {"classlist": ["ClassNameManager"], "name": "classnamemanager-debug.js", "module": "classnamemanager"}, "aui-editor-debug.js": {"classlist": [], "name": "aui-editor-debug.js", "module": "aui-editable"}, "widget-uievents-debug.js": {"classlist": [], "name": "widget-uievents-debug.js", "module": "widget"}, "datasource-arrayschema-min.js": {"classlist": [], "name": "datasource-arrayschema-min.js", "module": "datasource"}, "aui-panel-min.js": {"name": "aui-panel-min.js", "classlist": [], "module": "aui-panel", "guessedname": "g", "guessedtype": "function", "method": "g"}, "intl-min.js": {"classlist": [], "name": "intl-min.js", "module": "intl"}, "node-screen-min.js": {"classlist": [], "name": "node-screen-min.js", "module": "node"}, "exec-command-debug.js": {"classlist": ["Plugin.ExecCommand"], "name": "exec-command-debug.js", "module": "editor"}, "imageloader.js": {"classlist": ["ImgLoadGroup", "ImgLoadImgObj"], "name": "imageloader.js", "module": "imageloader"}, "aui-datepicker-debug.js": {"classlist": ["DatepickerManager", "DatePickerSelect"], "name": "aui-datepicker-debug.js", "module": "aui-calendar"}, "aui-diagram-builder-connector-debug.js": {"classlist": [], "name": "aui-diagram-builder-connector-debug.js", "module": "aui-delayed-task"}, "yui-core.js": {"classlist": ["YUI", "config", "Lang", "Array", "Queue", "Object", "UA"], "name": "yui-core.js", "module": "yui"}, "loader-rollup-min.js": {"classlist": [], "name": "loader-rollup-min.js", "module": "loader"}, "datatype-date-format_es-PY.js": {"classlist": [], "name": "datatype-date-format_es-PY.js", "module": "datatype"}, "selector-css3.js": {"classlist": [], "name": "selector-css3.js", "module": "dom"}, "swfdetect-debug.js": {"classlist": [], "name": "swfdetect-debug.js", "module": "swfdetect"}, "aui-io-request-debug.js": {"classlist": ["IORequest", "A.io"], "name": "aui-io-request-debug.js", "module": "aui-io"}, "autocomplete-sources-debug.js": {"classlist": [], "name": "autocomplete-sources-debug.js", "module": "autocomplete"}, "dataschema-text.js": {"classlist": ["DataSchema.Text"], "name": "dataschema-text.js", "module": "dataschema"}, "dom-screen-debug.js": {"classlist": [], "name": "dom-screen-debug.js", "module": "dom"}, "aui-form-min.js": {"name": "aui-form-min.js", "classlist": [], "module": "aui-event", "guessedname": "i", "guessedtype": "function", "method": "i"}, "tabview-base-debug.js": {"classlist": [], "name": "tabview-base-debug.js", "module": "tabview"}, "aui-datatable-base-debug.js": {"classlist": [], "name": "aui-datatable-base-debug.js", "module": "aui-component"}, "dd-plugin-min.js": {"classlist": [], "name": "dd-plugin-min.js", "module": "dd"}, "node-style-min.js": {"classlist": [], "name": "node-style-min.js", "module": "node"}, "aui-ace-editor-mode-html-min.js": {"name": "aui-ace-editor-mode-html-min.js", "classlist": [], "module": "yui", "guessedname": "i", "guessedtype": "function", "method": "i"}, "history-html5-debug.js": {"classlist": ["HistoryHTML5"], "name": "history-html5-debug.js", "module": "history"}, "arraylist-add-min.js": {"classlist": [], "name": "arraylist-add-min.js", "module": "collection"}, "aui-ace-editor-mode-scss.js": {"classlist": [], "name": "aui-ace-editor-mode-scss.js", "module": "yui"}, "widget-position.js": {"classlist": ["WidgetPosition"], "name": "widget-position.js", "module": "widget-position"}, "aui-form-textfield.js": {"classlist": [], "name": "aui-form-textfield.js", "module": "aui-event"}, "aui-aria-min.js": {"name": "aui-aria-min.js", "classlist": [], "module": "yui", "guessedname": "e", "guessedtype": "function", "method": "e"}, "history-hash-ie-debug.js": {"classlist": [], "name": "history-hash-ie-debug.js", "module": "history"}, "dd-ddm-min.js": {"classlist": [], "name": "dd-ddm-min.js", "module": "dd"}, "widget-uievents.js": {"classlist": [], "name": "widget-uievents.js", "module": "widget"}, "highlight-accentfold-min.js": {"classlist": [], "name": "highlight-accentfold-min.js", "module": "highlight"}, "exec-command.js": {"classlist": ["Plugin.ExecCommand"], "name": "exec-command.js", "module": "editor"}, "aui-scheduler-debug.js": {"classlist": [], "name": "aui-scheduler-debug.js", "module": "aui-resize"}, "datasource-xmlschema-debug.js": {"classlist": ["DataSourceXMLSchema"], "name": "datasource-xmlschema-debug.js", "module": "datasource"}, "datatype-number-parse.js": {"classlist": [], "name": "datatype-number-parse.js", "module": "datatype"}, "aui-ace-editor-keybinding-emacs-min.js": {"name": "aui-ace-editor-keybinding-emacs-min.js", "classlist": [], "module": "yui", "guessedname": "keymapping", "guessedtype": "function", "method": "keymapping"}, "event-mouseenter-min.js": {"classlist": [], "name": "event-mouseenter-min.js", "module": "event"}, "datasource-io-debug.js": {"classlist": ["DataSource.IO"], "name": "datasource-io-debug.js", "module": "datasource"}, "intl-base.js": {"classlist": ["Intl"], "name": "intl-base.js", "module": "intl"}, "aui-task-manager-debug.js": {"classlist": [], "name": "aui-task-manager-debug.js", "module": "aui-resize"}, "console-min.js": {"classlist": [], "name": "console-min.js", "module": "console"}, "dd-gestures.js": {"classlist": [], "name": "dd-gestures.js", "module": "dd"}, "datatype-date-format_pl-PL.js": {"classlist": [], "name": "datatype-date-format_pl-PL.js", "module": "datatype"}, "aui-datatype-min.js": {"name": "aui-datatype-min.js", "classlist": [], "module": "aui-datatype", "guessedname": "k", "guessedtype": "function", "method": "k"}, "graphics-canvas-default-min.js": {"classlist": [], "name": "graphics-canvas-default-min.js", "module": "graphics"}, "event-hover.js": {"classlist": [], "name": "event-hover.js", "module": "event"}, "datatype-date-format_ja-JP.js": {"classlist": [], "name": "datatype-date-format_ja-JP.js", "module": "datatype"}, "anim-color.js": {"classlist": [], "name": "anim-color.js", "module": "anim"}, "get-min.js": {"classlist": [], "name": "get-min.js", "module": "yui"}, "datatype-date-format_es-UY.js": {"classlist": [], "name": "datatype-date-format_es-UY.js", "module": "datatype"}, "aui-tpl-snippets-checkbox.js": {"classlist": [], "name": "aui-tpl-snippets-checkbox.js", "module": "aui-tooltip"}, "datatype-date-format_pt-BR.js": {"classlist": [], "name": "datatype-date-format_pt-BR.js", "module": "datatype"}, "aui-editor-html-creole-min.js": {"name": "aui-editor-html-creole-min.js", "classlist": [], "module": "aui-editable", "guessedname": "j", "guessedtype": "function", "method": "j"}, "datasource-cache.js": {"classlist": ["DataSourceCacheExtension", "DataSourceCache"], "name": "datasource-cache.js", "module": "datasource"}, "aui-datatable-selection-min.js": {"name": "aui-datatable-selection-min.js", "classlist": [], "module": "aui-component", "guessedname": "j", "guessedtype": "function", "method": "j"}, "jsonp-min.js": {"classlist": [], "name": "jsonp-min.js", "module": "jsonp"}, "aui-text-unicode-min.js": {"name": "aui-text-unicode-min.js", "classlist": [], "module": "aui-text", "guessedname": "c", "guessedtype": "function", "method": "c"}, "aui-overlay-base-min.js": {"name": "aui-overlay-base-min.js", "classlist": [], "module": "aui-overlay", "guessedname": "OverlayBase", "guessedtype": "function", "method": "OverlayBase"}, "aui-diagram-builder-min.js": {"name": "aui-diagram-builder-min.js", "classlist": [], "module": "aui-delayed-task", "guessedname": "X", "guessedtype": "function", "method": "X"}, "datasource-polling.js": {"classlist": ["Pollable"], "name": "datasource-polling.js", "module": "datasource"}, "test.js": {"classlist": ["Test.Case", "Test.Wait", "Test.Suite", "Test.Runner", "Test.Assert", "Test.Assert.Error", "Test.Assert.ComparisonFailure", "Test.Assert.UnexpectedValue", "Test.Assert.ShouldFail", "Test.Assert.ShouldError", "Test.Assert.UnexpectedError", "Test.ArrayAssert", "Test.ObjectAssert", "Test.DateAssert", "Test.Format", "Test.Coverage.Format", "Test.Reporter", "Test.Mock", "Test.Mock.Value"], "name": "test.js", "module": "test"}, "selector-debug.js": {"classlist": [], "name": "selector-debug.js", "module": "editor"}, "datatype-date-format_es-US.js": {"classlist": [], "name": "datatype-date-format_es-US.js", "module": "datatype"}, "aui-overlay-base-debug.js": {"classlist": ["OverlayBase"], "name": "aui-overlay-base-debug.js", "module": "aui-overlay"}, "node-flick-min.js": {"classlist": [], "name": "node-flick-min.js", "module": "node-flick"}, "event-custom-base-debug.js": {"classlist": ["Do", "Do.Method", "Do.AlterArgs", "Do.AlterReturn", "Do.Halt", "Do.Prevent", "Do.Error", "CustomEvent", "Subscriber", "EventHandle", "EventTarget"], "name": "event-custom-base-debug.js", "module": "event-custom"}, "aui-color-debug.js": {"classlist": [], "name": "aui-color-debug.js", "module": "aui-char-counter"}, "simpleyui-min.js": {"classlist": [], "name": "simpleyui-min.js", "module": "dump"}, "imageloader-min.js": {"classlist": [], "name": "imageloader-min.js", "module": "imageloader"}, "aui-ace-editor.js": {"classlist": [], "name": "aui-ace-editor.js", "module": "yui"}, "overlay-debug.js": {"classlist": ["Overlay"], "name": "overlay-debug.js", "module": "overlay"}, "widget-skin.js": {"classlist": [], "name": "widget-skin.js", "module": "widget"}, "jsonp-url-min.js": {"classlist": [], "name": "jsonp-url-min.js", "module": "jsonp"}, "aui-event-min.js": {"name": "aui-event-min.js", "classlist": [], "module": "aui-event", "guessedname": "c", "guessedtype": "function", "method": "c"}, "aui-dialog-iframe-min.js": {"name": "aui-dialog-iframe-min.js", "classlist": [], "module": "aui-dialog", "guessedname": "i", "guessedtype": "function", "method": "i"}, "datasource-cache-min.js": {"classlist": [], "name": "datasource-cache-min.js", "module": "datasource"}, "model-debug.js": {"classlist": ["Model"], "name": "model-debug.js", "module": "loader"}, "event-mousewheel-debug.js": {"classlist": [], "name": "event-mousewheel-debug.js", "module": "event"}, "dom-deprecated.js": {"classlist": [], "name": "dom-deprecated.js", "module": "dom"}, "test-debug.js": {"classlist": ["Test.Case", "Test.Wait", "Test.Suite", "Test.Runner", "Test.Assert", "Test.Assert.Error", "Test.Assert.ComparisonFailure", "Test.Assert.UnexpectedValue", "Test.Assert.ShouldFail", "Test.Assert.ShouldError", "Test.Assert.UnexpectedError", "Test.ArrayAssert", "Test.ObjectAssert", "Test.DateAssert", "Test.Format", "Test.Coverage.Format", "Test.Reporter", "Test.Mock", "Test.Mock.Value"], "name": "test-debug.js", "module": "test"}, "event-mousewheel.js": {"classlist": [], "name": "event-mousewheel.js", "module": "event"}, "dd-debug.js": {"classlist": ["DD.DDM", "DD.Drag", "Plugin.DDProxy", "Plugin.DDConstrained", "DD.Scroll", "Plugin.DDWindowScroll", "Plugin.DDNodeScroll", "DD.Drop", "DD.Delegate"], "name": "dd-debug.js", "module": "dd"}, "aui-scroller-min.js": {"name": "aui-scroller-min.js", "classlist": [], "module": "aui-resize", "guessedname": "i", "guessedtype": "function", "method": "i"}, "aui-tabs.js": {"classlist": [], "name": "aui-tabs.js", "module": "aui-resize"}, "profiler-debug.js": {"classlist": ["Profiler"], "name": "profiler-debug.js", "module": "profiler"}, "aui-input-text-control.js": {"classlist": [], "name": "aui-input-text-control.js", "module": "aui-component"}, "loader-base-min.js": {"classlist": [], "name": "loader-base-min.js", "module": "loader"}, "dataschema-text-debug.js": {"classlist": ["DataSchema.Text"], "name": "dataschema-text-debug.js", "module": "dataschema"}, "datatype-date-format_en.js": {"classlist": [], "name": "datatype-date-format_en.js", "module": "datatype"}, "cache-plugin-debug.js": {"classlist": ["Plugin.Cache"], "name": "cache-plugin-debug.js", "module": "cache"}, "dd-proxy.js": {"classlist": ["Plugin.DDProxy"], "name": "dd-proxy.js", "module": "dd"}, "node-menunav-debug.js": {"classlist": ["plugin.NodeMenuNav"], "name": "node-menunav-debug.js", "module": "node-menunav"}, "datatype-date-format_vi.js": {"classlist": [], "name": "datatype-date-format_vi.js", "module": "datatype"}, "aui-input-text-control-min.js": {"name": "aui-input-text-control-min.js", "classlist": [], "module": "aui-component", "guessedname": "h", "guessedtype": "function", "method": "h"}, "widget-autohide-debug.js": {"classlist": ["WidgetAutohide"], "name": "widget-autohide-debug.js", "module": "widget-autohide"}, "graphics-vml-default.js": {"classlist": [], "name": "graphics-vml-default.js", "module": "graphics"}, "transition-timer-debug.js": {"classlist": [], "name": "transition-timer-debug.js", "module": "transition"}, "aui-scheduler-view.js": {"classlist": [], "name": "aui-scheduler-view.js", "module": "aui-resize"}, "aui-button-item-debug.js": {"classlist": ["ButtonItem"], "name": "aui-button-item-debug.js", "module": "aui-button-item"}, "dom-core.js": {"classlist": ["DOM"], "name": "dom-core.js", "module": "dom"}, "aui-form-debug.js": {"classlist": [], "name": "aui-form-debug.js", "module": "aui-event"}, "align-plugin.js": {"classlist": ["Plugin.Align"], "name": "align-plugin.js", "module": "align-plugin"}, "aui-drawing-fonts-debug.js": {"classlist": [], "name": "aui-drawing-fonts-debug.js", "module": "aui-dialog"}, "event-base-ie-min.js": {"classlist": [], "name": "event-base-ie-min.js", "module": "event"}, "aui-tree-debug.js": {"classlist": ["TreeData", "TreeNode", "TreeNodeIO", "TreeNodeCheck", "TreeNodeTask", "TreeNodeRadio", "TreeView", "TreeViewDD"], "name": "aui-tree-debug.js", "module": "aui-tree"}, "transition.js": {"classlist": ["Transition"], "name": "transition.js", "module": "transition"}, "aui-form-validator.js": {"classlist": [], "name": "aui-form-validator.js", "module": "aui-event"}, "jsonp.js": {"classlist": ["JSONPRequest"], "name": "jsonp.js", "module": "jsonp"}, "dd-ddm-base-min.js": {"classlist": [], "name": "dd-ddm-base-min.js", "module": "dd"}, "aui-paginator.js": {"classlist": ["Paginator"], "name": "aui-paginator.js", "module": "aui-paginator"}, "aui-dialog-min.js": {"name": "aui-dialog-min.js", "classlist": [], "module": "aui-dialog", "guessedname": "j", "guessedtype": "function", "method": "j"}, "node-flick-debug.js": {"classlist": ["Plugin.Flick"], "name": "node-flick-debug.js", "module": "node-flick"}, "anim.js": {"classlist": ["Anim", "Easing", "Plugin.NodeFX"], "name": "anim.js", "module": "anim"}, "event-delegate.js": {"classlist": [], "name": "event-delegate.js", "module": "event"}, "cache-offline-debug.js": {"classlist": ["CacheOffline"], "name": "cache-offline-debug.js", "module": "cache"}, "datatype-date-format_ar.js": {"classlist": [], "name": "datatype-date-format_ar.js", "module": "datatype"}, "dd-scroll-debug.js": {"classlist": ["DD.Scroll", "Plugin.DDWindowScroll", "Plugin.DDNodeScroll"], "name": "dd-scroll-debug.js", "module": "dd"}, "aui-ace-editor-mode-python.js": {"classlist": [], "name": "aui-ace-editor-mode-python.js", "module": "yui"}, "aui-selector-min.js": {"name": "aui-selector-min.js", "classlist": [], "module": "aui-resize", "guessedname": "f", "guessedtype": "function", "method": "f"}, "io-form-debug.js": {"classlist": [], "name": "io-form-debug.js", "module": "io-base"}, "querystring-parse-simple-min.js": {"classlist": [], "name": "querystring-parse-simple-min.js", "module": "querystring"}, "datasource-io-min.js": {"classlist": [], "name": "datasource-io-min.js", "module": "datasource"}, "aui-datasource-control-base-min.js": {"name": "aui-datasource-control-base-min.js", "classlist": [], "module": "aui-component", "guessedname": "g", "guessedtype": "function", "method": "g"}, "sortable-scroll-debug.js": {"classlist": ["Plugin.SortScroll"], "name": "sortable-scroll-debug.js", "module": "sortable"}, "transition-min.js": {"classlist": [], "name": "transition-min.js", "module": "transition"}, "datatype-date-format_ko.js": {"classlist": [], "name": "datatype-date-format_ko.js", "module": "datatype"}, "scrollview-list.js": {"classlist": ["Plugin.ScrollViewScrollbars"], "name": "scrollview-list.js", "module": "scrollview-scrollbars"}, "editor-bidi-debug.js": {"classlist": ["Plugin.EditorBidi"], "name": "editor-bidi-debug.js", "module": "editor"}, "view-min.js": {"classlist": [], "name": "view-min.js", "module": "uploader"}, "scrollview-scrollbars-debug.js": {"classlist": ["Plugin.ScrollViewScrollbars"], "name": "scrollview-scrollbars-debug.js", "module": "scrollview-scrollbars"}, "sortable.js": {"classlist": ["Sortable"], "name": "sortable.js", "module": "sortable"}, "node-event-delegate-debug.js": {"classlist": [], "name": "node-event-delegate-debug.js", "module": "node"}, "node-load.js": {"classlist": [], "name": "node-load.js", "module": "node"}, "clickable-rail-min.js": {"classlist": [], "name": "clickable-rail-min.js", "module": "slider"}, "aui-diagram-builder.js": {"classlist": [], "name": "aui-diagram-builder.js", "module": "aui-delayed-task"}, "event-touch.js": {"classlist": [], "name": "event-touch.js", "module": "event-touch"}, "aui-drawing-svg-debug.js": {"classlist": [], "name": "aui-drawing-svg-debug.js", "module": "aui-dialog"}, "aui-ace-editor-base-debug.js": {"classlist": [], "name": "aui-ace-editor-base-debug.js", "module": "yui"}, "aui-ace-editor-mode-groovy.js": {"classlist": [], "name": "aui-ace-editor-mode-groovy.js", "module": "yui"}, "editor-lists.js": {"classlist": ["Plugin.EditorLists"], "name": "editor-lists.js", "module": "editor"}, "dd-drag-debug.js": {"classlist": ["DD.Drag"], "name": "dd-drag-debug.js", "module": "dd"}, "cookie-min.js": {"classlist": [], "name": "cookie-min.js", "module": "cookie"}, "node-deprecated.js": {"classlist": [], "name": "node-deprecated.js", "module": "node"}, "aui-tree-node-min.js": {"name": "aui-tree-node-min.js", "classlist": [], "module": "aui-tree", "guessedname": "aa", "guessedtype": "function", "method": "aa"}, "jsonp-url.js": {"classlist": [], "name": "jsonp-url.js", "module": "jsonp"}, "aui-nested-list-min.js": {"name": "aui-nested-list-min.js", "classlist": [], "module": "aui-nested-list", "guessedname": "n", "guessedtype": "function", "method": "n"}, "autocomplete-highlighters-accentfold-debug.js": {"classlist": ["AutoCompleteHighlighters"], "name": "autocomplete-highlighters-accentfold-debug.js", "module": "autocomplete"}, "datatype-date-format_zh-Hant-HK.js": {"classlist": [], "name": "datatype-date-format_zh-Hant-HK.js", "module": "datatype"}, "aui-node-html5-print-min.js": {"name": "aui-node-html5-print-min.js", "classlist": [], "module": "aui-node", "guessedname": "f", "guessedtype": "function", "method": "f"}, "aui-ace-editor-mode-ruby.js": {"classlist": [], "name": "aui-ace-editor-mode-ruby.js", "module": "yui"}, "controller-min.js": {"classlist": [], "name": "controller-min.js", "module": "app"}, "event-valuechange-min.js": {"classlist": [], "name": "event-valuechange-min.js", "module": "event-valuechange"}, "aui-tpl-snippets-checkbox-min.js": {"name": "aui-tpl-snippets-checkbox-min.js", "classlist": [], "module": "aui-tooltip", "guessedname": "class", "guessedtype": "function", "method": "class"}, "dd-ddm-drop.js": {"classlist": [], "name": "dd-ddm-drop.js", "module": "dd"}, "shim-plugin.js": {"classlist": ["Plugin.Shim"], "name": "shim-plugin.js", "module": "shim-plugin"}, "align-plugin-debug.js": {"classlist": ["Plugin.Align"], "name": "align-plugin-debug.js", "module": "align-plugin"}, "recordset-base-debug.js": {"classlist": ["Record", "Recordset"], "name": "recordset-base-debug.js", "module": "recordset"}, "array-invoke.js": {"classlist": [], "name": "array-invoke.js", "module": "collection"}, "dial_es.js": {"classlist": [], "name": "dial_es.js", "module": "dial"}, "aui-datatable-events.js": {"classlist": [], "name": "aui-datatable-events.js", "module": "aui-component"}, "aui-messaging-debug.js": {"classlist": [], "name": "aui-messaging-debug.js", "module": "aui-loading-mask"}, "selector-min.js": {"classlist": [], "name": "selector-min.js", "module": "editor"}, "datasource-function-debug.js": {"classlist": ["DataSource.Function"], "name": "datasource-function-debug.js", "module": "datasource"}, "aui-color-util.js": {"classlist": [], "name": "aui-color-util.js", "module": "aui-color-picker"}, "base-base-min.js": {"classlist": [], "name": "base-base-min.js", "module": "base"}, "aui-color-picker-base-debug.js": {"classlist": ["ColorPicker"], "name": "aui-color-picker-base-debug.js", "module": "aui-color-picker"}, "yui-log-debug.js": {"classlist": [], "name": "yui-log-debug.js", "module": "yui"}, "anim-node-plugin-debug.js": {"classlist": ["Plugin.NodeFX"], "name": "anim-node-plugin-debug.js", "module": "anim"}, "aui-tree-data-debug.js": {"classlist": ["TreeData"], "name": "aui-tree-data-debug.js", "module": "aui-tree"}, "aui-color-picker-min.js": {"name": "aui-color-picker-min.js", "classlist": [], "module": "aui-color-picker", "guessedname": "f", "guessedtype": "function", "method": "f"}, "widget-htmlparser-min.js": {"classlist": [], "name": "widget-htmlparser-min.js", "module": "widget"}, "aui-ace-editor-keybinding-emacs.js": {"classlist": [], "name": "aui-ace-editor-keybinding-emacs.js", "module": "yui"}, "aui-resize-iframe-min.js": {"name": "aui-resize-iframe-min.js", "classlist": [], "module": "aui-resize", "guessedname": "g", "guessedtype": "function", "method": "g"}, "swf.js": {"classlist": ["SWF"], "name": "swf.js", "module": "swf"}, "io-base-min.js": {"classlist": [], "name": "io-base-min.js", "module": "io-base"}, "datasource-jsonschema-min.js": {"classlist": [], "name": "datasource-jsonschema-min.js", "module": "datasource"}, "aui-event-input-debug.js": {"classlist": ["AUI~event~input"], "name": "aui-event-input-debug.js", "module": "aui-event"}, "datatype-date-parse-min.js": {"classlist": [], "name": "datatype-date-parse-min.js", "module": "datatype"}, "aui-ace-editor-mode-coffee.js": {"classlist": [], "name": "aui-ace-editor-mode-coffee.js", "module": "yui"}, "aui-editable-min.js": {"name": "aui-editable-min.js", "classlist": [], "module": "aui-editable", "guessedname": "g", "guessedtype": "function", "method": "g"}, "resize-proxy-min.js": {"classlist": [], "name": "resize-proxy-min.js", "module": "resize"}, "panel-min.js": {"classlist": [], "name": "panel-min.js", "module": "panel"}, "oop-min.js": {"classlist": [], "name": "oop-min.js", "module": "oop"}, "dataschema-base-min.js": {"classlist": [], "name": "dataschema-base-min.js", "module": "dataschema"}, "aui-tabs-min.js": {"name": "aui-tabs-min.js", "classlist": [], "module": "aui-resize", "guessedname": "g", "guessedtype": "function", "method": "g"}, "yui-min.js": {"classlist": [], "name": "yui-min.js", "module": "loader"}, "cookie.js": {"classlist": ["Cookie"], "name": "cookie.js", "module": "cookie"}, "aui-datepicker-min.js": {"name": "aui-datepicker-min.js", "classlist": [], "module": "aui-calendar", "guessedname": "f", "guessedtype": "function", "method": "f"}, "node-event-delegate.js": {"classlist": [], "name": "node-event-delegate.js", "module": "node"}, "editor-debug.js": {"classlist": ["Frame", "Selection", "Plugin.ExecCommand", "Plugin.EditorTab", "Plugin.CreateLinkBase", "EditorBase", "Plugin.EditorLists", "Plugin.EditorBidi", "Plugin.EditorPara", "Plugin.EditorBR"], "name": "editor-debug.js", "module": "editor"}, "datatype-date-format_da.js": {"classlist": [], "name": "datatype-date-format_da.js", "module": "datatype"}, "widget-position-constrain-debug.js": {"classlist": ["WidgetPositionConstrain"], "name": "widget-position-constrain-debug.js", "module": "widget-position-constrain"}, "aui-min.js": {"classlist": [], "name": "aui-min.js", "module": "yui"}, "aui-ace-editor-mode-ocaml-min.js": {"name": "aui-ace-editor-mode-ocaml-min.js", "classlist": [], "module": "yui", "guessedname": "j", "guessedtype": "function", "method": "j"}, "charts-debug.js": {"classlist": ["Renderer", "LeftAxisLayout", "RightAxisLayout", "BottomAxisLayout", "TopAxisLayout", "Axis", "AxisType", "NumericAxis", "StackedAxis", "TimeAxis", "CategoryAxis", "CurveUtil", "StackingUtil", "Lines", "Fills", "Plots", "Histogram", "CartesianSeries", "MarkerSeries", "LineSeries", "SplineSeries", "AreaSplineSeries", "StackedSplineSeries", "StackedMarkerSeries", "ColumnSeries", "BarSeries", "AreaSeries", "StackedAreaSplineSeries", "ComboSeries", "StackedComboSeries", "ComboSplineSeries", "StackedComboSplineSeries", "StackedLineSeries", "StackedAreaSeries", "StackedColumnSeries", "StackedBarSeries", "PieSeries", "Gridlines", "Graph", "ChartBase", "CartesianChart", "PieChart", "Chart"], "name": "charts-debug.js", "module": "charts"}, "dd-delegate-min.js": {"classlist": [], "name": "dd-delegate-min.js", "module": "dd"}, "datasource-function.js": {"classlist": ["DataSource.Function"], "name": "datasource-function.js", "module": "datasource"}, "arraysort-debug.js": {"classlist": ["ArraySort"], "name": "arraysort-debug.js", "module": "arraysort"}, "aui-char-counter.js": {"classlist": ["CharCounter"], "name": "aui-char-counter.js", "module": "aui-char-counter"}, "aui-tabs-menu-plugin.js": {"classlist": [], "name": "aui-tabs-menu-plugin.js", "module": "aui-resize"}, "aui-scheduler-calendar.js": {"classlist": [], "name": "aui-scheduler-calendar.js", "module": "aui-resize"}, "aui-textboxlist-min.js": {"name": "aui-textboxlist-min.js", "classlist": [], "module": "aui-textboxlist", "guessedname": "d", "guessedtype": "function", "method": "d"}, "editor-para-debug.js": {"classlist": ["Plugin.EditorPara"], "name": "editor-para-debug.js", "module": "editor"}, "querystring-parse-simple-debug.js": {"classlist": [], "name": "querystring-parse-simple-debug.js", "module": "querystring"}, "aui-diagram-builder-connector-min.js": {"name": "aui-diagram-builder-connector-min.js", "classlist": [], "module": "aui-delayed-task", "guessedname": "U", "guessedtype": "function", "method": "U"}, "dataschema-array.js": {"classlist": ["DataSchema.Array"], "name": "dataschema-array.js", "module": "dataschema"}, "aui-scheduler-min.js": {"name": "aui-scheduler-min.js", "classlist": [], "module": "aui-resize", "guessedname": "W", "guessedtype": "function", "method": "W"}, "autocomplete-list-debug.js": {"classlist": ["AutoCompleteList", "AutoComplete"], "name": "autocomplete-list-debug.js", "module": "autocomplete"}, "panel-debug.js": {"classlist": ["Panel"], "name": "panel-debug.js", "module": "panel"}, "datatype-date-format_it.js": {"classlist": [], "name": "datatype-date-format_it.js", "module": "datatype"}, "range-slider.js": {"classlist": ["Slider"], "name": "range-slider.js", "module": "slider"}, "datasource-function-min.js": {"classlist": [], "name": "datasource-function-min.js", "module": "datasource"}, "widget-buttons-debug.js": {"classlist": ["WidgetButtons"], "name": "widget-buttons-debug.js", "module": "widget-buttons"}, "selection.js": {"classlist": ["Selection"], "name": "selection.js", "module": "editor"}, "aui-tpl-snippets-base-debug.js": {"classlist": [], "name": "aui-tpl-snippets-base-debug.js", "module": "aui-tooltip"}, "aui-editor-base-debug.js": {"classlist": [], "name": "aui-editor-base-debug.js", "module": "aui-editable"}, "swfdetect-min.js": {"classlist": [], "name": "swfdetect-min.js", "module": "swfdetect"}, "datatype-date-format_de-AT.js": {"classlist": [], "name": "datatype-date-format_de-AT.js", "module": "datatype"}, "widget-base-ie.js": {"classlist": [], "name": "widget-base-ie.js", "module": "widget-base-ie"}, "calendar_ru.js": {"classlist": [], "name": "calendar_ru.js", "module": "calendar"}, "dataschema-json-min.js": {"classlist": [], "name": "dataschema-json-min.js", "module": "dataschema"}, "anim-xy-min.js": {"classlist": [], "name": "anim-xy-min.js", "module": "anim"}, "editor-min.js": {"classlist": [], "name": "editor-min.js", "module": "editor"}, "aui-editor-tools-plugin.js": {"classlist": [], "name": "aui-editor-tools-plugin.js", "module": "aui-editable"}, "arraylist-debug.js": {"classlist": ["ArrayList"], "name": "arraylist-debug.js", "module": "collection"}, "node-event-html5.js": {"classlist": [], "name": "node-event-html5.js", "module": "node"}, "anim-color-debug.js": {"classlist": [], "name": "anim-color-debug.js", "module": "anim"}, "yui-log.js": {"classlist": [], "name": "yui-log.js", "module": "yui"}, "datatable-base-debug.js": {"classlist": ["Column", "Columnset", "DataTable.Base"], "name": "datatable-base-debug.js", "module": "datatable"}, "datatype-date-format_en-PH.js": {"classlist": [], "name": "datatype-date-format_en-PH.js", "module": "datatype"}, "event-base-ie.js": {"classlist": [], "name": "event-base-ie.js", "module": "event"}, "aui-color-picker-debug.js": {"classlist": ["ColorPicker"], "name": "aui-color-picker-debug.js", "module": "aui-color-picker"}, "aui-scheduler-calendar-min.js": {"name": "aui-scheduler-calendar-min.js", "classlist": [], "module": "aui-resize", "guessedname": "i", "guessedtype": "function", "method": "i"}, "editor-base-debug.js": {"classlist": ["EditorBase"], "name": "editor-base-debug.js", "module": "editor"}, "node-pluginhost-debug.js": {"classlist": [], "name": "node-pluginhost-debug.js", "module": "node"}, "aui-base-core-debug.js": {"classlist": [], "name": "aui-base-core-debug.js", "module": "aui-autocomplete"}, "autocomplete-plugin.js": {"classlist": ["Plugin.AutoComplete"], "name": "autocomplete-plugin.js", "module": "autocomplete"}, "calendar-debug.js": {"classlist": ["Calendar"], "name": "calendar-debug.js", "module": "calendar"}, "text-data-wordbreak-min.js": {"classlist": [], "name": "text-data-wordbreak-min.js", "module": "text"}, "history-hash-ie.js": {"classlist": [], "name": "history-hash-ie.js", "module": "history"}, "datatype-date-format_zh-Hans.js": {"classlist": [], "name": "datatype-date-format_zh-Hans.js", "module": "datatype"}, "aui-chart-debug.js": {"classlist": [], "name": "aui-chart-debug.js", "module": "aui-char-counter"}, "cache-plugin.js": {"classlist": ["Plugin.Cache"], "name": "cache-plugin.js", "module": "cache"}, "graphics-vml-debug.js": {"classlist": ["VMLDrawing", "VMLShape", "VMLPath", "VMLRect", "VMLEllipse", "VMLCircle", "VMLPieSlice", "VMLGraphic"], "name": "graphics-vml-debug.js", "module": "graphics"}, "datatype-date-format_el.js": {"classlist": [], "name": "datatype-date-format_el.js", "module": "datatype"}, "datatype-date-format_fr-CA.js": {"classlist": [], "name": "datatype-date-format_fr-CA.js", "module": "datatype"}, "querystring-parse.js": {"classlist": ["QueryString"], "name": "querystring-parse.js", "module": "querystring"}, "datatype-date-format_es-MX.js": {"classlist": [], "name": "datatype-date-format_es-MX.js", "module": "datatype"}, "dial_en.js": {"classlist": [], "name": "dial_en.js", "module": "dial"}, "dom-style-debug.js": {"classlist": [], "name": "dom-style-debug.js", "module": "dom"}, "aui-datatable-min.js": {"name": "aui-datatable-min.js", "classlist": [], "module": "aui-component", "guessedname": "j", "guessedtype": "function", "method": "j"}, "oop-debug.js": {"classlist": [], "name": "oop-debug.js", "module": "oop"}, "yui-throttle-debug.js": {"classlist": [], "name": "yui-throttle-debug.js", "module": "yui"}, "aui-editor-html-creole-debug.js": {"classlist": [], "name": "aui-editor-html-creole-debug.js", "module": "aui-editable"}, "calendar-min.js": {"classlist": [], "name": "calendar-min.js", "module": "calendar"}, "anim-scroll-min.js": {"classlist": [], "name": "anim-scroll-min.js", "module": "anim"}, "datatype-date-format_tr.js": {"classlist": [], "name": "datatype-date-format_tr.js", "module": "datatype"}, "tabview.js": {"classlist": ["TabView", "Tab"], "name": "tabview.js", "module": "tabview"}, "widget-buttons.js": {"classlist": ["WidgetButtons"], "name": "widget-buttons.js", "module": "widget-buttons"}, "aui-editor-creole-plugin-min.js": {"name": "aui-editor-creole-plugin-min.js", "classlist": [], "module": "aui-editable", "guessedname": "g", "guessedtype": "function", "method": "g"}, "autocomplete-plugin-debug.js": {"classlist": ["Plugin.AutoComplete"], "name": "autocomplete-plugin-debug.js", "module": "autocomplete"}, "aui-form-combobox-debug.js": {"classlist": [], "name": "aui-form-combobox-debug.js", "module": "aui-event"}, "aui-autocomplete-min.js": {"name": "aui-autocomplete-min.js", "classlist": [], "module": "aui-autocomplete", "guessedname": "P", "guessedtype": "function", "method": "P"}, "transition-timer-min.js": {"classlist": [], "name": "transition-timer-min.js", "module": "transition"}, "datatype-date-format_nl-BE.js": {"classlist": [], "name": "datatype-date-format_nl-BE.js", "module": "datatype"}, "aui-video-min.js": {"name": "aui-video-min.js", "classlist": [], "module": "aui-tree", "guessedname": "i", "guessedtype": "function", "method": "i"}, "editor-para-min.js": {"classlist": [], "name": "editor-para-min.js", "module": "editor"}, "aui-node-html5-debug.js": {"classlist": ["A.HTML5"], "name": "aui-node-html5-debug.js", "module": "aui-node"}, "widget-stack-min.js": {"classlist": [], "name": "widget-stack-min.js", "module": "widget-stack"}, "widget-position-min.js": {"classlist": [], "name": "widget-position-min.js", "module": "widget-position"}, "aui-form-textfield-min.js": {"name": "aui-form-textfield-min.js", "classlist": [], "module": "aui-event", "guessedname": "e", "guessedtype": "function", "method": "e"}, "datatype-date-format_fi.js": {"classlist": [], "name": "datatype-date-format_fi.js", "module": "datatype"}, "graphics-vml-default-debug.js": {"classlist": [], "name": "graphics-vml-default-debug.js", "module": "graphics"}, "aui-ace-editor-worker-css-min.js": {"name": "aui-ace-editor-worker-css-min.js", "classlist": [], "module": "yui", "guessedname": "a", "guessedtype": "function", "method": "a"}, "io-form-min.js": {"classlist": [], "name": "io-form-min.js", "module": "io-base"}, "highlight-accentfold-debug.js": {"classlist": ["Highlight"], "name": "highlight-accentfold-debug.js", "module": "highlight"}, "overlay.js": {"classlist": ["Overlay"], "name": "overlay.js", "module": "overlay"}, "aui-tpl-snippets-textarea-min.js": {"name": "aui-tpl-snippets-textarea-min.js", "classlist": [], "module": "aui-tooltip", "guessedname": "requires", "guessedtype": "function", "method": "requires"}, "aui-event.js": {"classlist": ["AUI~event~input"], "name": "aui-event.js", "module": "aui-event"}, "aui-ace-editor-base-min.js": {"name": "aui-ace-editor-base-min.js", "classlist": [], "module": "yui", "guessedname": "a", "guessedtype": "function", "method": "a"}}, "modules": {"recordset": {"name": "recordset", "submodules": ["recordset-sort", "recordset-indexer", "recordset-filter", "recordset-base"], "classlist": ["RecordsetSort", "RecordsetIndexer", "RecordsetFilter", "Record", "Recordset"], "filelist": ["recordset-sort-debug.js", "recordset-sort-min.js", "recordset-sort.js", "recordset-indexer-debug.js", "recordset-indexer-min.js", "recordset-indexer.js", "recordset-filter-debug.js", "recordset-filter-min.js", "recordset-filter.js", "recordset-base-debug.js", "recordset-base-min.js", "recordset-base.js"], "subdata": {"recordset-sort": {"name": "RecordsetSort", "description": "Adds default and custom sorting functionality to the Recordset utility"}, "recordset-indexer": {"name": "RecordsetIndexer", "description": "Provides the ability to store multiple custom hash tables referencing records in the recordset."}, "recordset-base": {"name": "Recordset", "description": "The Recordset utility provides a standard way for dealing with\na collection of similar objects."}, "recordset-filter": {"name": "RecordsetFilter", "description": "Plugin that provides the ability to filter through a recordset.\nUses the filter methods available on Y.Array (see arrayextras submodule) to filter the recordset."}}, "guessedname": "Compare", "guessedtype": "property", "description": "Adds default and custom sorting functionality to the Recordset utility"}, "widget-position-constrain": {"description": "Provides constrained xy positioning support for Widgets, through an extension.\nIt builds on top of the widget-position module, to provide constrained positioning support.", "submodules": [], "classlist": ["WidgetPositionConstrain"], "filelist": ["widget-position-constrain-debug.js", "widget-position-constrain-min.js", "widget-position-constrain.js"], "subdata": {}, "guessedname": "CONSTRAIN", "guessedtype": "property", "name": "widget-position-constrain"}, "jsonp": {"description": "<p>Provides a JSONPRequest class for repeated JSONP calls, and a convenience\nmethod Y.jsonp(url, callback) to instantiate and send a JSONP request.</p>\n<p>Both the constructor as well as the convenience function take two\nparameters: a url string and a callback.</p>\n<p>The url provided must include the placeholder string\n&quot;{callback}&quot; which will be replaced by a dynamically\ngenerated routing function to pass the data to your callback function.\nAn example url might look like\n&quot;http://example.com/service?callback={callback}&quot;.</p>\n<p>The second parameter can be a callback function that accepts the JSON\npayload as its argument, or a configuration object supporting the keys:</p>\n<ul>\n<li>on - map of callback subscribers\n<ul>\n<li>success - function handler for successful transmission</li>\n<li>failure - function handler for failed transmission</li>\n<li>timeout - function handler for transactions that timeout</li>\n</ul>\n</li>\n<li>format  - override function for inserting the proxy name in the url</li>\n<li>timeout - the number of milliseconds to wait before giving up</li>\n<li>context - becomes <code>this</code> in the callbacks</li>\n<li>args    - array of subsequent parameters to pass to the callbacks</li>\n<li>allowCache - use the same proxy name for all requests? (boolean)</li>\n</ul>", "submodules": ["jsonp-url"], "classlist": ["JSONPRequest"], "filelist": ["jsonp-url-debug.js", "jsonp-url-min.js", "jsonp-url.js", "jsonp-debug.js", "jsonp-min.js", "jsonp.js"], "subdata": {"jsonp-url": {"name": "JSONPRequest", "description": "Adds support for parsing complex callback identifiers from the jsonp url.\nThis includes callback=foo[1]bar.baz[\"goo\"] as well as referencing methods\nin the YUI instance."}}, "name": "jsonp"}, "align-plugin": {"description": "Provides advanced positioning support for Node via a Plugin\nfor centering and alignment.", "submodules": [], "classlist": ["Plugin.Align"], "filelist": ["align-plugin-debug.js", "align-plugin-min.js", "align-plugin.js"], "subdata": {}, "guessedname": "OFFSET_WIDTH", "guessedtype": "property", "name": "align-plugin"}, "scrollview": {"description": "<p>\nThe scrollview module does not add any new classes. It simply plugs the ScrollViewScrollbars plugin into the \nbase ScrollView class implementation provided by the scrollview-base module, so that all scrollview instances \nhave scrollbars enabled.\n</p>\n<ul>\n<li><a href=\"ScrollView.html\">ScrollView API documentation</a></li>\n<li><a href=\"module_scrollview-base.html\">scrollview-base Module documentation</a></li>\n</ul>", "submodules": [], "classlist": [], "filelist": ["scrollview-debug.js", "scrollview-min.js", "scrollview.js"], "subdata": {}, "name": "scrollview"}, "aui-io": {"name": "aui-io", "submodules": ["aui-io-request", "aui-io-plugin"], "classlist": ["IORequest", "A.io", "A.Plugin.IO"], "filelist": ["aui-io-debug.js", "aui-io-min.js", "aui-io-plugin-debug.js", "aui-io-plugin-min.js", "aui-io-plugin.js", "aui-io-request-debug.js", "aui-io-request-min.js", "aui-io-request.js", "aui-io.js"], "subdata": {"aui-io-plugin": {"name": "A.Plugin.IO", "description": "The IOPlugin Utility - When plugged to a Node or Widget loads the content\nof a URI and set as its content, parsing the <code>script</code> tags if\npresent on the code."}, "aui-io-request": {"name": "A.io", "description": "The IORequest Utility - Provides response data normalization for XML, JSON,\nJavaScript and cache option."}}, "guessedname": "L", "guessedtype": "property", "description": "The IORequest Utility - Provides response data normalization for XML, JSON,\nJavaScript and cache option."}, "aui-media-viewer-plugin": {"description": "The ImageViewer Media Plugin", "submodules": [], "classlist": [], "filelist": ["aui-image-viewer-gallery-debug.js", "aui-media-gallery-plugin-debug.js", "aui-media-viewer-plugin-min.js", "aui-media-viewer-plugin.js"], "subdata": {}, "guessedname": "Lang", "guessedtype": "property", "name": "aui-media-viewer-plugin"}, "scrollview-paginator": {"description": "Provides a plugin, which adds pagination support to ScrollView instances", "submodules": [], "classlist": ["Plugin.ScrollViewPaginator"], "filelist": ["scrollview-paginator-debug.js", "scrollview-paginator-min.js", "scrollview-paginator.js"], "subdata": {}, "guessedname": "UI", "guessedtype": "property", "name": "scrollview-paginator"}, "console": {"description": "Console creates a visualization for messages logged through calls to a YUI\ninstance's <code>Y.log( message, category, source )</code> method.  The\ndebug versions of YUI modules will include logging statements to offer some\ninsight into the steps executed during that module's operation.  Including\nlog statements in your code will cause those messages to also appear in the\nConsole.  Use Console to aid in developing your page or application.\nEntry categories &quot;info&quot;, &quot;warn&quot;, and &quot;error&quot;\nare also referred to as the log level, and entries are filtered against the\nconfigured logLevel.", "submodules": [], "classlist": ["Console"], "filelist": ["console-debug.js", "console-min.js", "console.js", "console_en.js", "console_es.js"], "subdata": {}, "name": "console"}, "arraysort": {"description": "Provides a case-insenstive comparator which can be used for array sorting.", "submodules": [], "classlist": ["ArraySort"], "filelist": ["arraysort-debug.js", "arraysort-min.js", "arraysort.js"], "subdata": {}, "guessedname": "LANG", "guessedtype": "property", "name": "arraysort"}, "cache": {"description": "The Cache utility provides a common configurable interface for components to\ncache and retrieve data from a local JavaScript struct.", "submodules": [], "classlist": ["Plugin.Cache", "CacheOffline", "Cache"], "filelist": ["cache-plugin-debug.js", "cache-plugin-min.js", "cache-plugin.js", "cache-offline-debug.js", "cache-offline-min.js", "cache-offline.js", "cache-base-debug.js", "cache-base-min.js", "cache-base.js"], "subdata": {}, "guessedname": "LANG", "guessedtype": "property", "name": "cache"}, "widget-position": {"description": "Provides basic XY positioning support for Widgets, though an extension", "submodules": [], "classlist": ["WidgetPosition"], "filelist": ["widget-position-debug.js", "widget-position-min.js", "widget-position.js"], "subdata": {}, "guessedname": "Lang", "guessedtype": "property", "name": "widget-position"}, "text": {"description": "Text utilities.", "submodules": ["text-wordbreak", "text-accentfold"], "classlist": ["Text.WordBreak", "Text.AccentFold"], "since": "3.3.0", "filelist": ["text-wordbreak-debug.js", "text-wordbreak-min.js", "text-wordbreak.js", "text-data-wordbreak-debug.js", "text-data-wordbreak-min.js", "text-data-wordbreak.js", "text-data-accentfold-debug.js", "text-data-accentfold-min.js", "text-data-accentfold.js", "text-accentfold-debug.js", "text-accentfold-min.js", "text-accentfold.js"], "subdata": {"text-accentfold": {"name": "Text.AccentFold", "description": "Provides a basic accent folding implementation that converts common accented\nletters (like \"á\") to their non-accented forms (like \"a\")."}, "text-wordbreak": {"name": "Text.WordBreak", "description": "Provides utility methods for splitting strings on word breaks and determining\nwhether a character index represents a word boundary."}}, "name": "text"}, "aui-nested-list": {"description": "The NestedList Utility - Full documentation coming soon.", "submodules": [], "classlist": ["NestedList"], "filelist": ["aui-nested-list-debug.js", "aui-nested-list-min.js", "aui-nested-list.js"], "subdata": {}, "guessedname": "L", "guessedtype": "property", "name": "aui-nested-list"}, "anim": {"name": "anim", "submodules": ["anim-xy", "anim-scroll", "anim-node-plugin", "anim-easing", "anim-curve", "anim-color", "anim-base"], "classlist": ["Plugin.NodeFX", "Easing", "Anim"], "filelist": ["anim-xy-debug.js", "anim-xy-min.js", "anim-xy.js", "anim-scroll-debug.js", "anim-scroll-min.js", "anim-scroll.js", "anim-node-plugin-debug.js", "anim-node-plugin-min.js", "anim-node-plugin.js", "anim-easing-debug.js", "anim-easing-min.js", "anim-easing.js", "anim-curve-debug.js", "anim-curve-min.js", "anim-curve.js", "anim-color-debug.js", "anim-color-min.js", "anim-color.js", "anim-base-debug.js", "anim-base-min.js", "anim-base.js", "anim-debug.js", "anim-min.js", "anim.js"], "subdata": {"anim-node-plugin": {"name": "Plugin.NodeFX", "description": "Binds an Anim instance to a Node instance"}, "anim-base": {"name": "Anim", "description": "Provides the base Anim class, for animating numeric properties."}, "anim-scroll": {"name": "Plugin.NodeFX", "description": "Adds support for the <code>scroll</code> property in <code>to</code>\nand <code>from</code> attributes."}, "anim-xy": {"name": "Plugin.NodeFX", "description": "Adds support for the <code>xy</code> property in <code>from</code> and \n<code>to</code> attributes."}, "anim-color": {"name": "Anim", "description": "Adds support for color properties in <code>to</code>\nand <code>from</code> attributes."}, "anim-curve": {"name": "Anim", "description": "Adds support for the <code>curve</code> property for the <code>to</code> \nattribute.  A curve is zero or more control points and an end point."}, "anim-easing": {"name": "Easing", "description": "The easing module provides methods for customizing\nhow an animation behaves during each run."}}, "guessedname": "NUM", "guessedtype": "property", "description": "The Animation Utility provides an API for creating advanced transitions."}, "pluginhost-base": {"description": "Provides the augmentable PluginHost interface, which can be added to any class.", "submodules": [], "classlist": ["Plugin.Host"], "filelist": ["pluginhost-base-min.js", "pluginhost-base.js"], "subdata": {}, "name": "pluginhost-base"}, "event-touch": {"description": "Adds touch event facade normalization properties (touches, changedTouches, targetTouches etc.) to the DOM event facade", "submodules": [], "classlist": [], "filelist": ["event-touch-debug.js", "event-touch-min.js", "event-touch.js"], "subdata": {}, "guessedname": "SCALE", "guessedtype": "property", "name": "event-touch"}, "dd": {"description": "Base scroller class used to create the Plugin.DDNodeScroll and Plugin.DDWinScroll.\nThis class should not be called on it's own, it's designed to be a plugin.", "submodules": ["dd-scroll", "dd-proxy", "dd-plugin", "dd-drop-plugin", "dd-drop", "dd-drag", "dd-delegate", "dd-ddm-drop", "dd-ddm-base", "dd-ddm", "dd-constrain"], "classlist": ["DD.Scroll", "Plugin.DDWindowScroll", "Plugin.DDNodeScroll", "Plugin.DDProxy", "Plugin.Drag", "Plugin.Drop", "DD.Drop", "DD.Drag", "DD.Delegate", "DD.DDM", "Plugin.DDConstrained"], "filelist": ["dd-scroll-debug.js", "dd-scroll-min.js", "dd-scroll.js", "dd-proxy-debug.js", "dd-proxy-min.js", "dd-proxy.js", "dd-plugin-debug.js", "dd-plugin-min.js", "dd-plugin.js", "dd-gestures-debug.js", "dd-gestures-min.js", "dd-gestures.js", "dd-drop-plugin-debug.js", "dd-drop-plugin-min.js", "dd-drop-plugin.js", "dd-drop-debug.js", "dd-drop-min.js", "dd-drop.js", "dd-drag-debug.js", "dd-drag-min.js", "dd-drag.js", "dd-delegate-debug.js", "dd-delegate-min.js", "dd-delegate.js", "dd-ddm-drop-debug.js", "dd-ddm-drop-min.js", "dd-ddm-drop.js", "dd-ddm-base-debug.js", "dd-ddm-base-min.js", "dd-ddm-base.js", "dd-ddm-debug.js", "dd-ddm-min.js", "dd-ddm.js", "dd-constrain-debug.js", "dd-constrain-min.js", "dd-constrain.js", "dd-debug.js", "dd-min.js", "dd.js"], "subdata": {"dd-scroll": {"name": "Plugin.DDNodeScroll", "description": "Base scroller class used to create the Plugin.DDNodeScroll and Plugin.DDWinScroll.\nThis class should not be called on it's own, it's designed to be a plugin."}, "dd-constrain": {"name": "Plugin.DDConstrained", "description": "The Drag & Drop Utility allows you to create a draggable interface efficiently, buffering you from browser-level abnormalities and enabling you to focus on the interesting logic surrounding your particular implementation. This component enables you to create a variety of standard draggable objects with just a few lines of code and then, using its extensive API, add your own specific implementation logic."}, "dd-drop": {"name": "DD.Drop", "description": "Provides the ability to create a Drop Target."}, "dd-ddm-drop": {"name": "DD.DDM", "description": "Extends the dd-ddm Class to add support for the placement of Drop Target shims inside the viewport shim. It also handles all Drop Target related events and interactions."}, "dd-delegate": {"name": "DD.Delegate", "description": "Provides the ability to drag multiple nodes under a container element using only one Y.DD.Drag instance as a delegate."}, "dd-ddm": {"name": "DD.DDM", "description": "Extends the dd-ddm-base Class to add support for the viewport shim to allow a draggable node to drag to be dragged over an iframe or any other node that traps mousemove events.\nIt is also required to have Drop Targets enabled, as the viewport shim will contain the shims for the Drop Targets."}, "dd-plugin": {"name": "Plugin.Drag", "description": "Simple Drag plugin that can be attached to a Node or Widget via the plug method."}, "dd-drag": {"name": "DD.Drag", "description": "Provides the ability to drag a Node."}, "dd-proxy": {"name": "Plugin.DDProxy", "description": "Plugin for dd-drag for creating a proxy drag node, instead of dragging the original node."}, "dd-drop-plugin": {"name": "Plugin.Drop", "description": "Simple Drop plugin that can be attached to a Node via the plug method."}, "dd-ddm-base": {"name": "DD.DDM", "description": "Provides the base Drag Drop Manger required for making a Node draggable."}}, "name": "dd"}, "scrollview-base": {"description": "The scrollview-base module provides a basic ScrollView Widget, without scrollbar indicators", "submodules": [], "classlist": ["ScrollView"], "filelist": ["scrollview-base-debug.js", "scrollview-base-min.js", "scrollview-base.js"], "subdata": {}, "guessedname": "getClassName", "guessedtype": "property", "name": "scrollview-base"}, "uploader": {"description": "The Uploader widget is a tool for uploading files to the server.", "submodules": [], "classlist": ["View", "Uploader"], "title": "Uploader", "filelist": ["view-debug.js", "view-min.js", "view.js", "uploader-debug.js", "uploader-min.js", "uploader.js"], "subdata": {}, "guessedname": "Event", "guessedtype": "property", "requires": "base, node, event, swf", "name": "uploader"}, "aui-event": {"classlist": ["AUI~event~input"], "subdata": {"aui-event-input": {"name": "AUI~event~input", "description": "An object that encapsulates text changed events for textareas and input\nelement of type text and password. This event only occurs when the element\nis focused."}}, "name": "aui-event", "filelist": ["aui-form-validator-debug.js", "aui-form-validator-min.js", "aui-form-validator.js", "aui-form-builder-base-debug.js", "aui-form-builder-base-min.js", "aui-form-builder-base.js", "aui-form-builder-debug.js", "aui-form-builder-field-debug.js", "aui-form-builder-field-min.js", "aui-form-builder-field.js", "aui-form-builder-min.js", "aui-form-builder.js", "aui-form-base-debug.js", "aui-form-base-min.js", "aui-form-base.js", "aui-form-combobox-debug.js", "aui-form-combobox-min.js", "aui-form-combobox.js", "aui-form-debug.js", "aui-form-field-debug.js", "aui-form-field-min.js", "aui-form-field.js", "aui-form-min.js", "aui-form-select.js", "aui-form-textarea-debug.js", "aui-form-textarea-min.js", "aui-form-textarea.js", "aui-form-textfield-debug.js", "aui-form-textfield-min.js", "aui-form-textfield.js", "aui-form.js", "aui-event-base-debug.js", "aui-event-base-min.js", "aui-event-base.js", "aui-event-debug.js", "aui-event-input-debug.js", "aui-event-input-min.js", "aui-event-input.js", "aui-event-min.js", "aui-event.js"], "submodules": ["aui-event-input"]}, "aui-progressbar": {"description": "The ProgressBar Utility provides a visual means of showing progress of an\nongoing operation. The ProgressBar can be enhanced via CSS styles to provide\ndifferent colors, shapes and textures. The bar can move horizontally or\nvertically. The movement can be enhanced by using the Animation utility.", "submodules": [], "classlist": ["ProgressBar"], "filelist": ["aui-property-list-debug.js", "aui-property-list-min.js", "aui-property-list.js", "aui-progressbar-debug.js", "aui-progressbar-min.js", "aui-progressbar.js"], "subdata": {}, "guessedname": "L", "guessedtype": "property", "name": "aui-progressbar"}, "queue-promote": {"description": "Adds methods promote, remove, and indexOf to Queue instances.", "submodules": [], "classlist": [], "filelist": ["queue-promote-debug.js", "queue-promote-min.js", "queue-promote.js"], "subdata": {}, "name": "queue-promote"}, "querystring": {"description": "<p>The QueryString module adds support for serializing JavaScript objects into\nquery strings and parsing JavaScript objects from query strings format.</p>\n<p>The QueryString namespace is added to your YUI instance including static methods\nY.QueryString.parse(..) and Y.QueryString.stringify(..).</p>\n<p>The <code>querystring</code> module is a rollup of <code>querystring-parse</code> and\n<code>querystring-stringify</code>.</p>\n<p>As their names suggest, <code>querystring-parse</code> adds support for parsing\nQuery String data (Y.QueryString.parse) and <code>querystring-stringify</code> for serializing\nJavaScript data into Query Strings (Y.QueryString.stringify).  You may choose to\ninclude either of the submodules individually if you don't need the\ncomplementary functionality, or include the rollup for both.</p>", "submodules": ["querystring-stringify-simple", "querystring-stringify", "querystring-parse-simple"], "classlist": ["QueryString"], "filelist": ["querystring-stringify-simple-debug.js", "querystring-stringify-simple-min.js", "querystring-stringify-simple.js", "querystring-stringify-debug.js", "querystring-stringify-min.js", "querystring-stringify.js", "querystring-parse-simple-debug.js", "querystring-parse-simple-min.js", "querystring-parse-simple.js", "querystring-parse-debug.js", "querystring-parse-min.js", "querystring-parse.js"], "subdata": {"querystring-parse-simple": {"name": "QueryString", "description": "<p>Provides Y.QueryString.stringify method for converting objects to Query Strings.\nThis is a simpler implementation than the full querystring-stringify.</p>\n<p>Because some things may require basic query string escaping functionality,\nthis module provides the bare minimum functionality (decoding a hash of simple values),\nwithout the additional support for arrays, objects, and so on.</p>\n<p>This provides a friendly way to deserialize basic query strings, without necessitating\na lot of code for simple use-cases.</p>"}, "querystring-stringify": {"name": "QueryString", "description": "Provides Y.QueryString.escape method to be able to override default encoding\nmethod.  This is important in cases where non-standard delimiters are used, if\nthe delimiters would not normally be handled properly by the builtin\n(en|de)codeURIComponent functions.\nDefault: encodeURIComponent"}, "querystring-stringify-simple": {"name": "QueryString", "description": "<p>Provides Y.QueryString.stringify method for converting objects to Query Strings.\nThis is a subset implementation of the full querystring-stringify.</p>\n<p>This module provides the bare minimum functionality (encoding a hash of simple values),\nwithout the additional support for nested data structures.  Every key-value pair is\nencoded by encodeURIComponent.</p>\n<p>This module provides a minimalistic way for io to handle  single-level objects\nas transaction data.</p>"}}, "static": "", "guessedname": "QueryString", "guessedtype": "property", "name": "querystring"}, "node-focusmanager": {"description": "<p>The Focus Manager Node Plugin makes it easy to manage focus among\na Node's descendants.  Primarily intended to help with widget development,\nthe Focus Manager Node Plugin can be used to improve the keyboard\naccessibility of widgets.</p>\n<p>\nWhen designing widgets that manage a set of descendant controls (i.e. buttons\nin a toolbar, tabs in a tablist, menuitems in a menu, etc.) it is important to\nlimit the number of descendants in the browser's default tab flow.  The fewer\nnumber of descendants in the default tab flow, the easier it is for keyboard\nusers to navigate between widgets by pressing the tab key.  When a widget has\nfocus it should provide a set of shortcut keys (typically the arrow keys)\nto move focus among its descendants.\n</p>\n<p>\nTo this end, the Focus Manager Node Plugin makes it easy to define a Node's\nfocusable descendants, define which descendant should be in the default tab\nflow, and define the keys that move focus among each descendant.\nAdditionally, as the CSS\n<a href=\"http://www.w3.org/TR/CSS21/selector.html#x38\"><code>:focus</code></a>\npseudo class is not supported on all elements in all\n<a href=\"http://developer.yahoo.com/yui/articles/gbs/\">A-Grade browsers</a>,\nthe Focus Manager Node Plugin provides an easy, cross-browser means of\nstyling focus.\n</p>", "submodules": [], "classlist": ["plugin.NodeFocusManager"], "filelist": ["node-focusmanager-debug.js", "node-focusmanager-min.js", "node-focusmanager.js"], "subdata": {}, "name": "node-focusmanager"}, "dump": {"description": "Returns a simple string representation of the object or array.\nOther types of objects will be returned unprocessed.  Arrays\nare expected to be indexed.  Use object notation for\nassociative arrays.\nIf included, the dump method is added to the YUI instance.", "submodules": [], "classlist": [], "filelist": ["simpleyui-min.js", "simpleyui.js", "dump-debug.js", "dump-min.js", "dump.js"], "subdata": {}, "guessedname": "L", "guessedtype": "property", "name": "dump"}, "aui-component": {"description": "The Component Utility", "submodules": [], "classlist": ["CellEditorSupport", "BaseCellEditor", "BaseOptionsCellEditor", "TextCellEditor", "TextAreaCellEditor", "DropDownCellEditor", "CheckboxCellEditor", "RadioCellEditor", "DateCellEditor", "Component"], "filelist": ["aui-datatable-base-debug.js", "aui-datatable-base-min.js", "aui-datatable-base.js", "aui-datatable-debug.js", "aui-datatable-edit-debug.js", "aui-datatable-edit-min.js", "aui-datatable-edit.js", "aui-datatable-events-debug.js", "aui-datatable-events-min.js", "aui-datatable-events.js", "aui-datatable-min.js", "aui-datatable-selection-debug.js", "aui-datatable-selection-min.js", "aui-datatable-selection.js", "aui-datatable.js", "aui-datasource-control-base-debug.js", "aui-datasource-control-base-min.js", "aui-datasource-control-base.js", "aui-datasource-control-debug.js", "aui-datasource-control-min.js", "aui-datasource-control.js", "aui-input-text-control-debug.js", "aui-input-text-control-min.js", "aui-input-text-control.js", "aui-data-set-debug.js", "aui-data-set-min.js", "aui-data-set.js", "aui-data-browser-debug.js", "aui-data-browser-min.js", "aui-data-browser.js", "aui-component-debug.js", "aui-component-min.js", "aui-component.js"], "subdata": {}, "guessedname": "Lang", "guessedtype": "property", "name": "aui-component"}, "'aui-media-gallery-plugin": {"description": "The ImageGallery Media Plugin", "submodules": [], "classlist": [], "filelist": ["aui-media-gallery-plugin-min.js", "aui-media-gallery-plugin.js", "aui-media-viewer-plugin-debug.js"], "subdata": {}, "guessedname": "Lang", "guessedtype": "property", "name": "'aui-media-gallery-plugin"}, "escape": {"description": "Provides utility methods for escaping strings.", "submodules": [], "classlist": ["Escape"], "filelist": ["escape-debug.js", "escape-min.js"], "subdata": {}, "name": "escape"}, "calendar": {"name": "calendar", "submodules": ["calendar-base"], "classlist": ["CalendarBase", "Calendar"], "filelist": ["calendar-base-debug.js", "calendar-base-min.js", "calendar-base.js", "calendar-base_en.js", "calendar-base_ru.js", "calendar-debug.js", "calendar-min.js", "calendar.js", "calendar_en.js", "calendar_ru.js"], "subdata": {"calendar-base": {"name": "CalendarBase", "description": "The Calendar component is a UI widget that allows users\nto view dates in a two-dimensional month grid, as well as\nto select one or more dates, or ranges of dates. Calendar\nis generated dynamically."}}, "guessedname": "getCN", "guessedtype": "property", "description": "The Calendar component is a UI widget that allows users\nto view dates in a two-dimensional month grid, as well as\nto select one or more dates, or ranges of dates. Calendar\nis generated dynamically and relies on the developer to\nprovide for a progressive enhancement alternative."}, "aui-panel": {"description": "The Panel Utility - Panel is a container that has specific functionality\nand structural components that make it the good for building block for\napplication-oriented user interfaces. Panel also provides built-in\nexpandable and collapsible behavior, along with a variety of prebuilt tool\nbuttons that can be wired up to provide other customized behavior. Panels\ncan be easily dropped into any Container or layout.", "submodules": [], "classlist": ["Panel"], "filelist": ["aui-panel-debug.js", "aui-panel-min.js", "aui-panel.js"], "subdata": {}, "guessedname": "Lang", "guessedtype": "property", "name": "aui-panel"}, "event": {"description": "Adds a window resize event that has its behavior normalized to fire at the\nend of the resize rather than constantly during the resize.", "submodules": ["event-resize", "event-outside", "event-mousewheel", "event-mouseenter", "event-key", "event-hover", "event-focus", "event-delegate", "event-base"], "classlist": ["DOMEventFacade", "Event"], "filelist": ["event-resize-debug.js", "event-resize-min.js", "event-resize.js", "event-outside-debug.js", "event-outside-min.js", "event-outside.js", "event-mousewheel-debug.js", "event-mousewheel-min.js", "event-mousewheel.js", "event-mouseenter-debug.js", "event-mouseenter-min.js", "event-mouseenter.js", "event-key-debug.js", "event-key-min.js", "event-key.js", "event-hover-debug.js", "event-hover-min.js", "event-hover.js", "event-focus-debug.js", "event-focus-min.js", "event-focus.js", "event-delegate-debug.js", "event-delegate-min.js", "event-delegate.js", "event-base-ie-debug.js", "event-base-ie-min.js", "event-base-ie.js", "event-base-debug.js", "event-base-min.js", "event-base.js"], "subdata": {"event-focus": {"name": "", "description": "Adds bubbling and delegation support to DOM events focus and blur."}, "event-outside": {"name": "YUI", "description": "Outside events are synthetic DOM events that fire when a corresponding native\nor synthetic DOM event occurs outside a bound element.\nThe following outside events are pre-defined by this module:\n<ul>\n<li>blur</li>\n<li>change</li>\n<li>click</li>\n<li>dblclick</li>\n<li>focus</li>\n<li>keydown</li>\n<li>keypress</li>\n<li>keyup</li>\n<li>mousedown</li>\n<li>mousemove</li>\n<li>mouseout</li>\n<li>mouseover</li>\n<li>mouseup</li>\n<li>select</li>\n<li>submit</li>\n</ul>\nDefine new outside events with\n<code>Y.Event.defineOutside(eventType);</code>.\nBy default, the created synthetic event name will be the name of the event\nwith \"outside\" appended (e.g. \"click\" becomes \"clickoutside\"). If you want\na different name for the created Event, pass it as a second argument like so:\n<code>Y.Event.defineOutside(eventType, \"yonderclick\")</code>."}, "event-key": {"name": "YUI", "description": "Functionality to listen for one or more specific key combinations."}, "event-base": {"name": "Event", "description": "DOM event listener abstraction layer"}, "event-resize": {"name": "YUI", "description": "Adds a window resize event that has its behavior normalized to fire at the\nend of the resize rather than constantly during the resize."}, "event-mouseenter": {"name": "", "description": "<p>Adds subscription and delegation support for mouseenter and mouseleave\nevents.  Unlike mouseover and mouseout, these events aren't fired from child\nelements of a subscribed node.</p>\n<p>This avoids receiving three mouseover notifications from a setup like</p>\n<pre><code>div#container > p > a[href]</code></pre>\n<p>where</p>\n<pre><code>Y.one('#container').on('mouseover', callback)</code></pre>\n<p>When the mouse moves over the link, one mouseover event is fired from\n#container, then when the mouse moves over the p, another mouseover event is\nfired and bubbles to #container, causing a second notification, and finally\nwhen the mouse moves over the link, a third mouseover event is fired and\nbubbles to #container for a third notification.</p>\n<p>By contrast, using mouseenter instead of mouseover, the callback would be\nexecuted only once when the mouse moves over #container.</p>"}, "event-delegate": {"name": "YUI", "description": "Adds event delegation support to the library."}, "event-mousewheel": {"name": "YUI", "description": "Adds mousewheel event support"}, "event-hover": {"name": "", "description": "Adds support for a \"hover\" event.  The event provides a convenience wrapper\nfor subscribing separately to mouseenter and mouseleave.  The signature for\nsubscribing to the event is</p>\n<pre><code>node.on(\"hover\", overFn, outFn);\nnode.delegate(\"hover\", overFn, outFn, \".filterSelector\");\nY.on(\"hover\", overFn, outFn, \".targetSelector\");\nY.delegate(\"hover\", overFn, outFn, \"#container\", \".filterSelector\");\n</code></pre>\n<p>Additionally, for compatibility with a more typical subscription\nsignature, the following are also supported:</p>\n<pre><code>Y.on(\"hover\", overFn, \".targetSelector\", outFn);\nY.delegate(\"hover\", overFn, \"#container\", outFn, \".filterSelector\");\n</code></pre>"}}, "guessedname": "DOM_MOUSE_SCROLL", "guessedtype": "property", "main": "event", "name": "event"}, "substitute": {"description": "String variable substitution and string formatting.\nIf included, the substitute method is added to the YUI instance.", "submodules": [], "classlist": ["YUI~substitute"], "filelist": ["substitute-debug.js", "substitute-min.js", "substitute.js"], "subdata": {}, "guessedname": "L", "guessedtype": "property", "name": "substitute"}, "dial": {"description": "Create a circular dial value range input visualized as a draggable handle on a\nbackground element.", "submodules": [], "classlist": ["Dial"], "filelist": ["dial-debug.js", "dial-min.js", "dial.js", "dial_en.js", "dial_es.js"], "subdata": {}, "guessedname": "supportsVML", "guessedtype": "property", "name": "dial"}, "overlay": {"description": "Provides a basic Overlay widget, with Standard Module content support. The Overlay widget\nprovides Page XY positioning support, alignment and centering support along with basic \nstackable support (z-index and shimming).", "submodules": [], "classlist": ["Overlay"], "filelist": ["overlay-debug.js", "overlay-min.js", "overlay.js"], "subdata": {}, "name": "overlay"}, "aui-resize": {"description": "The Resize Utility allows you to make an HTML element resizable.", "submodules": [], "classlist": ["Resize"], "filelist": ["aui-template-debug.js", "aui-template-min.js", "aui-template.js", "aui-task-manager-debug.js", "aui-task-manager-min.js", "aui-task-manager.js", "aui-tabs-base-debug.js", "aui-tabs-base-min.js", "aui-tabs-base.js", "aui-tabs-debug.js", "aui-tabs-menu-plugin-debug.js", "aui-tabs-menu-plugin-min.js", "aui-tabs-menu-plugin.js", "aui-tabs-min.js", "aui-tabs.js", "aui-swf-debug.js", "aui-swf-min.js", "aui-swf.js", "aui-state-interaction-debug.js", "aui-state-interaction-min.js", "aui-state-interaction.js", "aui-sortable-debug.js", "aui-sortable-min.js", "aui-sortable.js", "aui-simple-anim-debug.js", "aui-simple-anim-min.js", "aui-simple-anim.js", "aui-selector-debug.js", "aui-selector-min.js", "aui-selector.js", "aui-scroller-debug.js", "aui-scroller-min.js", "aui-scroller.js", "aui-scheduler-base-debug.js", "aui-scheduler-base-min.js", "aui-scheduler-base.js", "aui-scheduler-calendar-debug.js", "aui-scheduler-calendar-min.js", "aui-scheduler-calendar.js", "aui-scheduler-debug.js", "aui-scheduler-event-debug.js", "aui-scheduler-event-min.js", "aui-scheduler-event.js", "aui-scheduler-min.js", "aui-scheduler-view.js", "aui-scheduler.js", "aui-resize-iframe-debug.js", "aui-resize-iframe-min.js", "aui-resize-iframe.js", "aui-resize-base-debug.js", "aui-resize-base-min.js", "aui-resize-base.js", "aui-resize-constrain-debug.js", "aui-resize-constrain-min.js", "aui-resize-constrain.js", "aui-resize-debug.js", "aui-resize-min.js", "aui-resize.js"], "subdata": {}, "guessedname": "Lang", "guessedtype": "property", "name": "aui-resize"}, "aui-live-search": {"description": "The LiveSearch Utility allow real-time filtering for DOM elements based on\na input query.", "submodules": [], "classlist": ["LiveSearch"], "filelist": ["aui-live-search-debug.js", "aui-live-search-min.js", "aui-live-search.js"], "subdata": {}, "guessedname": "L", "guessedtype": "property", "name": "aui-live-search"}, "widget-child": {"description": "Extension enabling a Widget to be a child of another Widget.", "submodules": [], "classlist": ["WidgetChild"], "filelist": ["widget-child-debug.js", "widget-child-min.js", "widget-child.js"], "subdata": {}, "guessedname": "Lang", "guessedtype": "property", "name": "widget-child"}, "widget": {"name": "widget", "submodules": ["widget-uievents", "widget-skin", "widget-htmlparser", "widget-base"], "classlist": ["Widget"], "filelist": ["widget-uievents-debug.js", "widget-uievents-min.js", "widget-uievents.js", "widget-skin-debug.js", "widget-skin-min.js", "widget-skin.js", "widget-htmlparser-debug.js", "widget-htmlparser-min.js", "widget-htmlparser.js", "widget-base-debug.js", "widget-base-min.js", "widget-base.js"], "subdata": {"widget-base": {"name": "Widget", "description": "Provides the base Widget class"}, "widget-htmlparser": {"name": "Widget", "description": "Adds HTML Parser support to the base Widget class"}, "widget-skin": {"name": "Widget", "description": "Provides skin related utlility methods."}, "widget-uievents": {"name": "Widget", "description": "Support for Widget UI Events (Custom Events fired by the widget, which wrap the underlying DOM events - e.g. widget:click, widget:mousedown)"}}, "guessedname": "BOUNDING_BOX", "guessedtype": "property", "main": "widget", "description": "Provides the base Widget class, with HTML Parser support"}, "aui-button-item": {"description": "The ButtonItem Utility", "submodules": [], "classlist": ["ButtonItem"], "filelist": ["aui-button-item-debug.js", "aui-button-item-min.js", "aui-button-item.js"], "subdata": {}, "guessedname": "Lang", "guessedtype": "property", "name": "aui-button-item"}, "base": {"description": "The base module provides the Base class, which objects requiring attribute and custom event support can extend. \nThe module also provides two ways to reuse code - It augments Base with the Plugin.Host interface which provides \nplugin support and also provides the Base.build method which provides a way to build custom classes using extensions.", "submodules": ["base-pluginhost", "base-build", "base-base"], "classlist": ["Base"], "filelist": ["base-pluginhost-debug.js", "base-pluginhost-min.js", "base-pluginhost.js", "base-build-debug.js", "base-build-min.js", "base-build.js", "base-base-debug.js", "base-base-min.js", "base-base.js"], "subdata": {"base-pluginhost": {"name": "Base", "description": "The base-pluginhost submodule adds Plugin support to Base, by augmenting Base with \nPlugin.Host and setting up static (class level) Base.plug and Base.unplug methods."}, "base-build": {"name": "Base", "description": "The base-build submodule provides Base.build functionality, which\ncan be used to create custom classes, by aggregating extensions onto \na main class."}, "base-base": {"name": "Base", "description": "The base-base submodule provides the Base class without the Plugin support, provided by Plugin.Host, \nand without the extension support provided by Base.build."}}, "guessedname": "Base", "guessedtype": "property", "name": "base"}, "widget-parent": {"description": "Extension enabling a Widget to be a parent of another Widget.", "submodules": [], "classlist": ["WidgetParent"], "filelist": ["widget-parent-debug.js", "widget-parent-min.js", "widget-parent.js"], "subdata": {}, "guessedname": "Lang", "guessedtype": "property", "name": "widget-parent"}, "widget-anim": {"description": "Provides a plugin which can be used to animate widget visibility changes.", "submodules": [], "classlist": ["Plugin.WidgetAnim"], "filelist": ["widget-anim-debug.js", "widget-anim-min.js", "widget-anim.js"], "subdata": {}, "guessedname": "BOUNDING_BOX", "guessedtype": "property", "name": "widget-anim"}, "aui-editable": {"description": "The Editable Utility", "submodules": [], "classlist": ["Editable"], "filelist": ["aui-editor-base-debug.js", "aui-editor-base-min.js", "aui-editor-base.js", "aui-editor-bbcode-plugin-debug.js", "aui-editor-bbcode-plugin-min.js", "aui-editor-bbcode-plugin.js", "aui-editor-creole-parser-debug.js", "aui-editor-creole-parser-min.js", "aui-editor-creole-parser.js", "aui-editor-creole-plugin-debug.js", "aui-editor-creole-plugin-min.js", "aui-editor-creole-plugin.js", "aui-editor-debug.js", "aui-editor-html-creole-debug.js", "aui-editor-html-creole-min.js", "aui-editor-html-creole.js", "aui-editor-menu-plugin-debug.js", "aui-editor-menu-plugin-min.js", "aui-editor-menu-plugin.js", "aui-editor-min.js", "aui-editor-toolbar-plugin-debug.js", "aui-editor-toolbar-plugin-min.js", "aui-editor-toolbar-plugin.js", "aui-editor-tools-plugin-debug.js", "aui-editor-tools-plugin-min.js", "aui-editor-tools-plugin.js", "aui-editor.js", "aui-editable-debug.js", "aui-editable-min.js", "aui-editable.js"], "subdata": {}, "guessedname": "Lang", "guessedtype": "property", "name": "aui-editable"}, "aui-delayed-task": {"description": "The DelayedTask Utility - Executes the supplied function in the context of\nthe supplied object 'when' milliseconds later", "submodules": [], "classlist": ["DelayedTask"], "filelist": ["aui-diagram-builder-base-debug.js", "aui-diagram-builder-base-min.js", "aui-diagram-builder-base.js", "aui-diagram-builder-connector-debug.js", "aui-diagram-builder-connector-min.js", "aui-diagram-builder-connector.js", "aui-diagram-builder-debug.js", "aui-diagram-builder-impl-debug.js", "aui-diagram-builder-impl-min.js", "aui-diagram-builder-impl.js", "aui-diagram-builder-min.js", "aui-diagram-builder.js", "aui-delayed-task-debug.js", "aui-delayed-task-min.js", "aui-delayed-task.js"], "subdata": {}, "name": "aui-delayed-task"}, "panel": {"description": "Provides a Panel widget, a widget that mimics the functionality of a regular OS window.\nComes with Standard Module support, XY Positioning, Alignment Support, Stack (z-index) support,\nmodality, auto-focus and auto-hide functionality, and header/footer button support.", "submodules": [], "classlist": ["Panel"], "filelist": ["panel-debug.js", "panel-min.js", "panel.js"], "subdata": {}, "name": "panel"}, "plugin": {"description": "Provides the base Plugin class, which plugin developers should extend, when creating custom plugins", "submodules": [], "classlist": ["Plugin.Base"], "filelist": ["plugin-debug.js", "plugin-min.js", "plugin.js"], "subdata": {}, "name": "plugin"}, "charts": {"description": "The Chart class is the basic application used to create a chart.", "submodules": [], "classlist": ["Renderer", "LeftAxisLayout", "RightAxisLayout", "BottomAxisLayout", "TopAxisLayout", "Axis", "AxisType", "NumericAxis", "StackedAxis", "TimeAxis", "CategoryAxis", "CurveUtil", "StackingUtil", "Lines", "Fills", "Plots", "Histogram", "CartesianSeries", "MarkerSeries", "LineSeries", "SplineSeries", "AreaSplineSeries", "StackedSplineSeries", "StackedMarkerSeries", "ColumnSeries", "BarSeries", "AreaSeries", "StackedAreaSplineSeries", "ComboSeries", "StackedComboSeries", "ComboSplineSeries", "StackedComboSplineSeries", "StackedLineSeries", "StackedAreaSeries", "StackedColumnSeries", "StackedBarSeries", "PieSeries", "Gridlines", "Graph", "ChartBase", "CartesianChart", "PieChart", "Chart"], "filelist": ["charts-debug.js", "charts-min.js", "charts.js"], "subdata": {}, "guessedname": "DOCUMENT", "guessedtype": "property", "main": "charts", "name": "charts"}, "transition": {"description": "Provides the transition method for Node.\nTransition has no API of its own, but adds the transition method to Node.", "submodules": [], "classlist": ["Transition"], "filelist": ["transition-timer-debug.js", "transition-timer-min.js", "transition-timer.js", "transition-native-debug.js", "transition-native-min.js", "transition-native.js", "transition-debug.js", "transition-min.js", "transition.js"], "subdata": {}, "guessedname": "CAMEL_VENDOR_PREFIX", "guessedtype": "property", "requires": "node-style", "name": "transition"}, "aui-tooltip": {"description": "The Tooltip Utility - A standard tooltip implementation for providing additional information when hovering over a target element.", "submodules": [], "classlist": ["Tooltip"], "filelist": ["aui-tpl-snippets-base-debug.js", "aui-tpl-snippets-base-min.js", "aui-tpl-snippets-base.js", "aui-tpl-snippets-checkbox-debug.js", "aui-tpl-snippets-checkbox-min.js", "aui-tpl-snippets-checkbox.js", "aui-tpl-snippets-debug.js", "aui-tpl-snippets-input-debug.js", "aui-tpl-snippets-input-min.js", "aui-tpl-snippets-input.js", "aui-tpl-snippets-min.js", "aui-tpl-snippets-select-debug.js", "aui-tpl-snippets-select-min.js", "aui-tpl-snippets-select.js", "aui-tpl-snippets-textarea-debug.js", "aui-tpl-snippets-textarea-min.js", "aui-tpl-snippets-textarea.js", "aui-tpl-snippets.js", "aui-tooltip-debug.js", "aui-tooltip-min.js", "aui-tooltip.js"], "subdata": {}, "guessedname": "L", "guessedtype": "property", "name": "aui-tooltip"}, "yui": {"description": "Provides a throttle/limiter for function calls", "submodules": ["yui-throttle", "yui-base", "get", "rls", "yui-log", "yui-later"], "classlist": ["YUI", "config", "Lang", "Array", "Queue", "Object", "UA", "Get", "Intl", "rls"], "filelist": ["yui-throttle-debug.js", "yui-throttle-min.js", "yui-throttle.js", "yui-rls-debug.js", "yui-rls-min.js", "yui-rls.js", "yui-log-debug.js", "yui-log-min.js", "yui-log.js", "yui-later-debug.js", "yui-later-min.js", "yui-later.js", "yui-core-debug.js", "yui-core-min.js", "yui-core.js", "yui-base-debug.js", "yui-base-min.js", "yui-debug.js", "simpleyui-debug.js", "rls-debug.js", "rls-min.js", "rls.js", "get-debug.js", "get-min.js", "get.js", "aui-arraysort-debug.js", "aui-arraysort-min.js", "aui-arraysort.js", "aui-aria-debug.js", "aui-aria-min.js", "aui-aria.js", "aui-ace-editor-base-debug.js", "aui-ace-editor-base-min.js", "aui-ace-editor-cockpit-uncompressed-debug.js", "aui-ace-editor-keybinding-emacs-debug.js", "aui-ace-editor-keybinding-emacs-min.js", "aui-ace-editor-keybinding-emacs.js", "aui-ace-editor-keybinding-vim-debug.js", "aui-ace-editor-keybinding-vim-min.js", "aui-ace-editor-keybinding-vim.js", "aui-ace-editor-min.js", "aui-ace-editor-mode-clojure-min.js", "aui-ace-editor-mode-clojure.js", "aui-ace-editor-mode-coffee-min.js", "aui-ace-editor-mode-coffee.js", "aui-ace-editor-mode-css-min.js", "aui-ace-editor-mode-groovy-debug.js", "aui-ace-editor-mode-groovy-min.js", "aui-ace-editor-mode-groovy.js", "aui-ace-editor-mode-html-debug.js", "aui-ace-editor-mode-html-min.js", "aui-ace-editor-mode-ocaml-min.js", "aui-ace-editor-mode-perl-debug.js", "aui-ace-editor-mode-perl.js", "aui-ace-editor-mode-python-min.js", "aui-ace-editor-mode-python.js", "aui-ace-editor-mode-ruby-min.js", "aui-ace-editor-mode-ruby.js", "aui-ace-editor-mode-scad-debug.js", "aui-ace-editor-mode-scad-min.js", "aui-ace-editor-mode-scad.js", "aui-ace-editor-mode-scala-debug.js", "aui-ace-editor-mode-scala-min.js", "aui-ace-editor-mode-scala.js", "aui-ace-editor-mode-scss-debug.js", "aui-ace-editor-mode-scss.js", "aui-ace-editor-mode-textile-min.js", "aui-ace-editor-mode-textile.js", "aui-ace-editor-worker-coffee-min.js", "aui-ace-editor-worker-coffee.js", "aui-ace-editor-worker-css-min.js", "aui-ace-editor-worker-javascript-debug.js", "aui-ace-editor-worker-javascript-min.js", "aui-ace-editor-worker-javascript.js", "aui-ace-editor.js", "aui-min.js", "aui.js"], "subdata": {"yui-base": {"name": "UA", "description": "The YUI module contains the components required for building the YUI seed\nfile.  This includes the script loading mechanism, a simple queue, and the\ncore utilities for the library."}, "get": {"name": "Intl", "description": "Provides a mechanism to fetch remote resources and\ninsert them into a document."}, "yui-later": {"name": "YUI", "description": "Provides a setTimeout/setInterval wrapper. This module is a `core` YUI module, <a href=\"../classes/YUI.html#method_later\">it's documentation is located under the YUI class</a>."}, "yui-throttle": {"name": "YUI", "description": "Provides a throttle/limiter for function calls"}, "yui-log": {"name": "Intl", "description": "Provides console log capability and exposes a custom event for\nconsole implementations. This module is a `core` YUI module, <a href=\"../classes/YUI.html#method_log\">it's documentation is located under the YUI class</a>."}, "rls": {"name": "rls", "description": "RLS (Remote Loader Service) Support"}}, "guessedname": "Lang", "guessedtype": "property", "main": "yui", "name": "yui"}, "calendarnavigator": {"description": "Provides a plugin which adds navigation controls to Calendar.", "submodules": [], "classlist": ["Plugin.CalendarNavigator"], "filelist": ["calendarnavigator-debug.js", "calendarnavigator-min.js", "calendarnavigator.js"], "subdata": {}, "guessedname": "CONTENT_BOX", "guessedtype": "property", "name": "calendarnavigator"}, "imageloader": {"description": "The ImageLoader Utility is a framework to dynamically load images according to certain triggers,\nenabling faster load times and a more responsive UI.", "submodules": [], "classlist": ["ImgLoadGroup", "ImgLoadImgObj"], "filelist": ["imageloader-debug.js", "imageloader-min.js", "imageloader.js"], "subdata": {}, "name": "imageloader"}, "event-custom": {"description": "Custom event engine, DOM event listener abstraction layer, synthetic DOM\nevents.", "submodules": ["event-custom-base", "event-custom-complex"], "classlist": ["Do", "Do.Method", "Do.AlterArgs", "Do.AlterReturn", "Do.Halt", "Do.Prevent", "Do.Error", "CustomEvent", "Subscriber", "EventHandle", "EventTarget", "EventFacade"], "filelist": ["event-custom-complex-debug.js", "event-custom-complex-min.js", "event-custom-complex.js", "event-custom-base-debug.js", "event-custom-base-min.js", "event-custom-base.js"], "subdata": {"event-custom-base": {"name": "EventTarget", "description": "Custom event engine, DOM event listener abstraction layer, synthetic DOM\nevents."}, "event-custom-complex": {"name": "EventFacade", "description": "Adds event facades, preventable default behavior, and bubbling.\nevents."}}, "guessedname": "evt", "guessedtype": "property", "name": "event-custom"}, "cookie": {"description": "Utilities for cookie management", "submodules": [], "classlist": ["Cookie"], "filelist": ["cookie-debug.js", "cookie-min.js", "cookie.js"], "subdata": {}, "name": "cookie"}, "console-filters": {"description": "<p>Provides Plugin.ConsoleFilters plugin class.</p>\n<p>This plugin adds the ability to control which Console entries display by filtering on category and source. Two groups of checkboxes are added to the Console footer, one for categories and the other for sources.  Only those messages that match a checked category or source are displayed.</p>", "submodules": [], "classlist": ["Plugin.ConsoleFilters"], "filelist": ["console-filters-debug.js", "console-filters-min.js", "console-filters.js"], "subdata": {}, "name": "console-filters"}, "aui-image-viewer": {"name": "aui-image-viewer", "submodules": ["aui-image-viewer-base", "aui-image-viewer-gallery"], "classlist": ["ImageViewer", "ImageViewerMask", "ImageGallery"], "filelist": ["aui-image-viewer-base-debug.js", "aui-image-viewer-base-min.js", "aui-image-viewer-base.js", "aui-image-viewer-debug.js", "aui-image-viewer-gallery-min.js", "aui-image-viewer-gallery.js", "aui-image-viewer-min.js"], "subdata": {"aui-image-viewer-base": {"name": "ImageViewerMask", "description": "The ImageViewer Utility"}, "aui-image-viewer-gallery": {"name": "ImageGallery", "description": "The ImageGallery Utility"}}, "guessedname": "L", "guessedtype": "property", "description": "The ImageViewer Utility"}, "intl": {"description": "Provides utilities to support the management of localized resources (strings and formatting patterns).", "submodules": [], "classlist": ["Intl"], "filelist": ["intl-base-debug.js", "intl-base-min.js", "intl-base.js", "intl-debug.js", "intl-min.js", "intl.js"], "subdata": {}, "name": "intl"}, "app": {"description": "The app framework provides simple MVC-like building blocks (models, model lists,\nviews, and controllers) for writing single-page JavaScript applications.", "submodules": [], "classlist": ["Controller"], "since": "3.4.0", "filelist": ["controller-debug.js", "controller-min.js", "controller.js"], "subdata": {}, "main": "app", "name": "app"}, "widget-stack": {"description": "Provides stackable (z-index) support for Widgets through an extension.", "submodules": [], "classlist": ["WidgetStack"], "filelist": ["widget-stack-debug.js", "widget-stack-min.js", "widget-stack.js"], "subdata": {}, "guessedname": "L", "guessedtype": "property", "name": "widget-stack"}, "shim-plugin": {"description": "Provides shimming support for Node via a Plugin.\nThis fixes SELECT bleedthrough for IE6 & Mac scrollbars", "submodules": [], "classlist": ["Plugin.Shim"], "filelist": ["shim-plugin-debug.js", "shim-plugin-min.js", "shim-plugin.js"], "subdata": {}, "name": "shim-plugin"}, "loader": {"description": "The YUI loader core", "submodules": ["loader-base", "rollup", "yui3"], "classlist": ["Loader", "ModelList", "Model"], "filelist": ["yui-min.js", "yui.js", "model-list-debug.js", "model-list-min.js", "model-list.js", "model-debug.js", "model-min.js", "model.js", "loader-yui3-debug.js", "loader-yui3-min.js", "loader-yui3.js", "loader-rollup-debug.js", "loader-rollup-min.js", "loader-rollup.js", "loader-base-debug.js", "loader-base-min.js", "loader-base.js", "loader-debug.js", "loader-min.js", "loader.js"], "subdata": {"rollup": {"name": "Loader", "description": "Optional automatic rollup logic for reducing http connections\nwhen not using a combo service."}, "yui3": {"name": "Loader", "description": "YUI 3 module metadata"}, "loader-base": {"name": "Loader", "description": "Loader dynamically loads script and css files.  It includes the dependency\ninfo for the version of the library in use, and will automatically pull in\ndependencies for the modules requested.  It supports rollup files and will\nautomatically use these when appropriate in order to minimize the number of\nhttp connections required to load all of the dependencies.  It can load the\nfiles from the Yahoo! CDN, and it can utilize the combo service provided on\nthis network to reduce the number of http connections required to download\nYUI files."}}, "guessedname": "NOT_FOUND", "guessedtype": "property", "main": "loader", "name": "loader"}, "aui-calendar": {"name": "aui-calendar", "submodules": ["aui-calendar-datepicker-select", "aui-calendar-base"], "classlist": ["DatepickerManager", "DatePickerSelect", "Calendar"], "filelist": ["aui-debounce-debug.js", "aui-debounce-min.js", "aui-debounce.js", "aui-datepicker-base-debug.js", "aui-datepicker-base-min.js", "aui-datepicker-base.js", "aui-datepicker-debug.js", "aui-datepicker-min.js", "aui-datepicker-select-debug.js", "aui-datepicker-select-min.js", "aui-datepicker-select.js", "aui-datepicker.js", "aui-carousel-debug.js", "aui-carousel-min.js", "aui-carousel.js", "aui-calendar-base-debug.js", "aui-calendar-base-min.js", "aui-calendar-base.js", "aui-calendar-debug.js", "aui-calendar-min.js"], "subdata": {"aui-calendar-datepicker-select": {"name": "DatePickerSelect", "description": "The DatePickerSelect Utility"}, "aui-calendar-base": {"name": "Calendar", "description": "The Calendar component is a UI control that enables users to choose one or\nmore dates from a graphical calendar presented in a single month or multi\nmonth interface. Calendars are generated entirely via script and can be\nnavigated without any page refreshes."}}, "guessedname": "Lang", "guessedtype": "property", "description": "The DatePickerSelect Utility"}, "async-queue": {"description": "<p>AsyncQueue allows you create a chain of function callbacks executed\nvia setTimeout (or synchronously) that are guaranteed to run in order.\nItems in the queue can be promoted or removed.  Start or resume the\nexecution chain with run().  pause() to temporarily delay execution, or\nstop() to halt and clear the queue.</p>", "submodules": [], "classlist": ["AsyncQueue"], "filelist": ["async-queue-debug.js", "async-queue-min.js", "async-queue.js"], "subdata": {}, "name": "async-queue"}, "aui-autocomplete": {"description": "The AutoComplete Utility", "submodules": [], "classlist": ["AutoComplete"], "filelist": ["aui-base-core-debug.js", "aui-base-core-min.js", "aui-base-core.js", "aui-base-debug.js", "aui-base-lang-debug.js", "aui-base-lang-min.js", "aui-base-lang.js", "aui-base-min.js", "aui-base.js", "aui-autocomplete-debug.js", "aui-autocomplete-min.js", "aui-autocomplete.js"], "subdata": {}, "guessedname": "Lang", "guessedtype": "property", "name": "aui-autocomplete"}, "widget-buttons": {"description": "Provides header/footer button support for Widgets that implement the WidgetStdMod extension", "submodules": [], "classlist": ["WidgetButtons"], "author": "tilomitra", "filelist": ["widget-buttons-debug.js", "widget-buttons-min.js", "widget-buttons.js"], "subdata": {}, "guessedname": "BOUNDING_BOX", "guessedtype": "property", "name": "widget-buttons"}, "event-simulate": {"description": "Simulate user interaction by generating native DOM events.", "submodules": [], "classlist": ["SyntheticEvent.Notifier", "SynthRegistry", "SyntheticEvent"], "filelist": ["event-synthetic-debug.js", "event-synthetic-min.js", "event-synthetic.js", "event-simulate-debug.js", "event-simulate-min.js", "event-simulate.js"], "subdata": {}, "requires": "event", "name": "event-simulate"}, "aui-textboxlist": {"description": "The Textboxlist Utility - Full documentation coming soon.", "submodules": [], "classlist": ["Textboxlist"], "filelist": ["aui-textboxlist-debug.js", "aui-textboxlist-min.js", "aui-textboxlist.js"], "subdata": {}, "guessedname": "Lang", "guessedtype": "property", "name": "aui-textboxlist"}, "aui-portal-layout": {"description": "The PortalLayout Utility - Full documentation coming soon.", "submodules": [], "classlist": ["PortalLayout"], "filelist": ["aui-portal-layout-debug.js", "aui-portal-layout-min.js", "aui-portal-layout.js"], "subdata": {}, "guessedname": "Lang", "guessedtype": "property", "name": "aui-portal-layout"}, "stylesheet": {"description": "The StyleSheet component is a module for creating and modifying CSS\nstylesheets.", "submodules": [], "classlist": ["StyleSheet"], "filelist": ["stylesheet-debug.js", "stylesheet-min.js", "stylesheet.js"], "subdata": {}, "guessedname": "d", "guessedtype": "property", "name": "stylesheet"}, "swf": {"description": "The SWF utility is a tool for embedding Flash applications in HTML pages.", "submodules": [], "classlist": ["SWF"], "title": "SWF Utility", "filelist": ["swf-debug.js", "swf-min.js", "swf.js"], "subdata": {}, "guessedname": "Event", "guessedtype": "property", "requires": "event-custom, node, swfdetect", "name": "swf"}, "json": {"description": "<p>The JSON module adds support for serializing JavaScript objects into\nJSON strings and parsing JavaScript objects from strings in JSON format.</p>\n<p>The JSON namespace is added to your YUI instance including static methods\nY.JSON.parse(..) and Y.JSON.stringify(..).</p>\n<p>The functionality and method signatures follow the ECMAScript 5\nspecification.  In browsers with native JSON support, the native\nimplementation is used.</p>\n<p>The <code>json</code> module is a rollup of <code>json-parse</code> and\n<code>json-stringify</code>.</p>\n<p>As their names suggest, <code>json-parse</code> adds support for parsing\nJSON data (Y.JSON.parse) and <code>json-stringify</code> for serializing\nJavaScript data into JSON strings (Y.JSON.stringify).  You may choose to\ninclude either of the submodules individually if you don't need the\ncomplementary functionality, or include the rollup for both.</p>", "submodules": ["json-stringify", "json-parse"], "classlist": ["JSON"], "filelist": ["json-stringify-debug.js", "json-stringify-min.js", "json-stringify.js", "json-parse-debug.js", "json-parse-min.js", "json-parse.js"], "subdata": {"json-stringify": {"name": "JSON", "description": "Provides Y.JSON.stringify method for converting objects to JSON strings."}, "json-parse": {"name": "JSON", "description": "Provides Y.JSON.parse method to accept JSON strings and return native\nJavaScript objects."}}, "static": "", "guessedname": "_JSON", "guessedtype": "property", "name": "json"}, "editor": {"classlist": ["Selection", "Frame", "Plugin.ExecCommand", "Plugin.EditorTab", "Plugin.EditorPara", "Plugin.EditorLists", "Plugin.EditorBR", "Plugin.EditorBidi", "EditorBase", "Plugin.CreateLinkBase"], "subdata": {"editor-br": {"name": "Plugin.EditorBR", "description": "Plugin for Editor to normalize BR's."}, "editor-tab": {"name": "Plugin.EditorTab", "description": "Handles tab and shift-tab indent/outdent support."}, "editor-base": {"name": "EditorBase", "description": "Base class for Editor. Handles the business logic of Editor, no GUI involved only utility methods and events."}, "frame": {"name": "Frame", "description": "Creates a wrapper around an iframe. It loads the content either from a local\nfile or from script and creates a local YUI instance bound to that new window and document."}, "editor-lists": {"name": "Plugin.EditorLists", "description": "Handles list manipulation inside the Editor. Adds keyboard manipulation and execCommand support. Adds overrides for the <a href=\"Plugin.ExecCommand.html#method_COMMANDS.insertorderedlist\">insertorderedlist</a> and <a href=\"Plugin.ExecCommand.html#method_COMMANDS.insertunorderedlist\">insertunorderedlist</a> execCommands."}, "exec-command": {"name": "Plugin.ExecCommand", "description": "Plugin for the frame module to handle execCommands for Editor"}, "createlink-base": {"name": "Plugin.CreateLinkBase", "description": "Adds prompt style link creation. Adds an override for the <a href=\"Plugin.ExecCommand.html#method_COMMANDS.createlink\">createlink execCommand</a>."}, "selection": {"name": "Selection", "description": "Wraps some common Selection/Range functionality into a simple object"}, "editor-bidi": {"name": "Plugin.EditorBidi", "description": "Plugin for Editor to support BiDirectional (bidi) text operations."}, "editor-para": {"name": "Plugin.EditorPara", "description": "Plugin for Editor to paragraph auto wrapping and correction."}}, "name": "editor", "filelist": ["selector-debug.js", "selector-min.js", "selector.js", "selection-debug.js", "selection-min.js", "selection.js", "frame-debug.js", "frame-min.js", "frame.js", "features-debug.js", "features-min.js", "features.js", "exec-command-debug.js", "exec-command-min.js", "exec-command.js", "editor-tab-debug.js", "editor-tab-min.js", "editor-tab.js", "editor-para-debug.js", "editor-para-min.js", "editor-para.js", "editor-lists-debug.js", "editor-lists-min.js", "editor-lists.js", "editor-br-debug.js", "editor-br-min.js", "editor-br.js", "editor-bidi-debug.js", "editor-bidi-min.js", "editor-bidi.js", "editor-base-debug.js", "editor-base-min.js", "editor-base.js", "editor-debug.js", "editor-min.js", "editor.js", "createlink-base-debug.js", "createlink-base-min.js", "createlink-base.js"], "submodules": ["selection", "frame", "exec-command", "editor-tab", "editor-para", "editor-lists", "editor-br", "editor-bidi", "editor-base", "createlink-base"]}, "scrollview-base-ie": {"description": "IE specific support for the scrollview-base module.", "submodules": [], "classlist": [], "filelist": ["scrollview-base-ie-debug.js", "scrollview-base-ie-min.js", "scrollview-base-ie.js"], "subdata": {}, "name": "scrollview-base-ie"}, "aui-color-picker": {"description": "The ColorPicker Utility - Full documentation coming soon.", "submodules": [], "classlist": ["ColorPicker"], "filelist": ["aui-color-util-debug.js", "aui-color-util-min.js", "aui-color-util.js", "aui-color-picker-base-debug.js", "aui-color-picker-base-min.js", "aui-color-picker-base.js", "aui-color-picker-debug.js", "aui-color-picker-grid-plugin-debug.js", "aui-color-picker-grid-plugin-min.js", "aui-color-picker-grid-plugin.js", "aui-color-picker-min.js", "aui-color-picker.js"], "subdata": {}, "guessedname": "Lang", "guessedtype": "property", "name": "aui-color-picker"}, "node-menunav": {"description": "<p>The MenuNav Node Plugin makes it easy to transform existing list-based \nmarkup into traditional, drop down navigational menus that are both accessible \nand easy to customize, and only require a small set of dependencies.</p>\n<p>To use the MenuNav Node Plugin, simply pass a reference to the plugin to a \nNode instance's <code>plug</code> method.</p>\n<p>\n<code>\n&#60;script type=\"text/javascript\"&#62; <br>\n<br>\n//\tCall the \"use\" method, passing in \"node-menunav\".  This will <br>\n//\tload the script and CSS for the MenuNav Node Plugin and all of <br>\n//\tthe required dependencies. <br>\n<br>\nYUI().use(\"node-menunav\", function(Y) { <br>\n<br>\n//\tUse the \"contentready\" event to initialize the menu when <br>\n//\tthe subtree of element representing the root menu <br>\n//\t(&#60;div id=\"menu-1\"&#62;) is ready to be scripted. <br>\n<br>\nY.on(\"contentready\", function () { <br>\n<br>\n//\tThe scope of the callback will be a Node instance <br>\n//\trepresenting the root menu (&#60;div id=\"menu-1\"&#62;). <br>\n//\tTherefore, since \"this\" represents a Node instance, it <br>\n//\tis possible to just call \"this.plug\" passing in a <br>\n//\treference to the MenuNav Node Plugin. <br>\n<br>\nthis.plug(Y.Plugin.NodeMenuNav); <br>\n<br>\n}, \"#menu-1\"); <br>\n<br>\t\t\n}); <br>\n<br>\t\n&#60;/script&#62; <br>\n</code>\n</p>\n<p>The MenuNav Node Plugin has several configuration properties that can be \nset via an object literal that is passed as a second argument to a Node \ninstance's <code>plug</code> method.\n</p>\n<p>\n<code>\n&#60;script type=\"text/javascript\"&#62; <br>\n<br>\n//\tCall the \"use\" method, passing in \"node-menunav\".  This will <br>\n//\tload the script and CSS for the MenuNav Node Plugin and all of <br>\n//\tthe required dependencies. <br>\n<br>\nYUI().use(\"node-menunav\", function(Y) { <br>\n<br>\n//\tUse the \"contentready\" event to initialize the menu when <br>\n//\tthe subtree of element representing the root menu <br>\n//\t(&#60;div id=\"menu-1\"&#62;) is ready to be scripted. <br>\n<br>\nY.on(\"contentready\", function () { <br>\n<br>\n//\tThe scope of the callback will be a Node instance <br>\n//\trepresenting the root menu (&#60;div id=\"menu-1\"&#62;). <br>\n//\tTherefore, since \"this\" represents a Node instance, it <br>\n//\tis possible to just call \"this.plug\" passing in a <br>\n//\treference to the MenuNav Node Plugin. <br>\n<br>\nthis.plug(Y.Plugin.NodeMenuNav, { mouseOutHideDelay: 1000 });\n<br><br>\n}, \"#menu-1\"); <br>\n<br>\t\t\n}); <br>\n<br>\t\n&#60;/script&#62; <br>\n</code>\n</p>", "submodules": [], "classlist": ["plugin.NodeMenuNav"], "filelist": ["node-menunav-debug.js", "node-menunav-min.js", "node-menunav.js"], "subdata": {}, "name": "node-menunav"}, "slider": {"description": "Adds value support for Slider as a range of integers between a configured\nminimum and maximum value.  For use with <code>Y.Base.build(..)</code> to\nadd the plumbing to <code>Y.SliderBase</code>.", "submodules": ["slider-value-range", "slider-base", "range-slider", "clickable-rail"], "classlist": ["SliderValueRange", "SliderBase", "Slider", "ClickableRail"], "filelist": ["slider-value-range-debug.js", "slider-value-range-min.js", "slider-value-range.js", "slider-base-debug.js", "slider-base-min.js", "slider-base.js", "range-slider-debug.js", "range-slider-min.js", "range-slider.js", "clickable-rail-debug.js", "clickable-rail-min.js", "clickable-rail.js"], "subdata": {"slider-value-range": {"name": "SliderValueRange", "description": "Adds value support for Slider as a range of integers between a configured\nminimum and maximum value.  For use with <code>Y.Base.build(..)</code> to\nadd the plumbing to <code>Y.SliderBase</code>."}, "range-slider": {"name": "Slider", "description": "Create a sliding value range input visualized as a draggable thumb on a\nbackground rail element."}, "slider-base": {"name": "SliderBase", "description": "Create a sliding value range input visualized as a draggable thumb on a\nbackground element."}, "clickable-rail": {"name": "ClickableRail", "description": "Adds support for mouse interaction with the Slider rail triggering thumb\nmovement."}}, "guessedname": "INVALID_VALUE", "guessedtype": "property", "main": "slider", "name": "slider"}, "aui-char-counter": {"description": "The CharCounter Utility", "submodules": [], "classlist": ["CharCounter"], "filelist": ["aui-color-debug.js", "aui-color-min.js", "aui-color.js", "aui-classnamemanager-debug.js", "aui-classnamemanager-min.js", "aui-classnamemanager.js", "aui-chart-debug.js", "aui-chart-min.js", "aui-chart.js", "aui-char-counter-debug.js", "aui-char-counter-min.js", "aui-char-counter.js"], "subdata": {}, "guessedname": "L", "guessedtype": "property", "name": "aui-char-counter"}, "oop": {"description": "Adds object inheritance and manipulation utilities to the YUI instance. This\nmodule is required by most YUI components.", "submodules": [], "classlist": [], "filelist": ["oop-debug.js", "oop-min.js", "oop.js"], "subdata": {}, "guessedname": "L", "guessedtype": "property", "name": "oop"}, "graphics": {"description": "<p>The `Graphics` module provides a JavaScript API for creating shapes in a variety of formats across \na <a href=\"http://developer.yahoo.com/yui/articles/gbs\">browser test baseline</a>. \nBased on device and browser capabilities, `Graphics` leverages <a href=\"http://www.w3.org/TR/SVG/\">SVG</a>, \n<a href=\"http://www.w3.org/TR/html5/the-canvas-element.html\">Canvas</a> and <a href=\"http://www.w3.org/TR/NOTE-VML\">VML</a> \nto render its graphical elements.</p>\n<p>The `Graphics` module features a <a href=\"../classes/Graphic.html\">`Graphic`</a> class that allows you to easily create and manage shapes. \nCurrently, a <a href=\"../classes/Graphic.html\">`Graphic`</a> instance can be used to create predifined shapes and free-form polygons with fill \nand stroke properties.</p>  \n<p>The `Graphics` module normalizes an API through the use of alias and implementation classes that share\ninterfaces. Each alias class points to an appropriate implementation class dependent on the browser's \ncapabilities. There should rarely, if ever, be a need to interact directly with an implementation class.</p>\n<p>Below is a list of available classes. \n<ul>\n<li><a href=\"../classes/Graphic.html\">`Graphic`</a>\n<li><a href=\"../classes/Shape.html\">`Shape`</a>\n<li><a href=\"../classes/Circle.html\">`Circle`</a>\n<li><a href=\"../classes/Ellipse.html\">`Ellipse`</a>\n<li><a href=\"../classes/Rect.html\">`Rect`</a>\n<li><a href=\"../classes/Path.html\">`Path`</a>\n</ul>\nYou can also extend the `Shape` class to create your own custom shape classes.</p>", "submodules": [], "classlist": ["VMLDrawing", "VMLShape", "VMLPath", "VMLRect", "VMLEllipse", "VMLCircle", "VMLPieSlice", "VMLGraphic", "SVGDrawing", "SVGShape", "SVGPath", "SVGRect", "SVGEllipse", "SVGCircle", "SVGPieSlice", "SVGGraphic", "CanvasDrawing", "CanvasShape", "CanvasPath", "CanvasRect", "CanvasEllipse", "CanvasCircle", "CanvasPieSlice", "CanvasGraphic", "Matrix", "AttributeLite", "BaseGraphic", "Drawing", "Shape", "Circle", "Ellipse", "Rect", "Path", "Graphic"], "filelist": ["graphics-vml-default-debug.js", "graphics-vml-default-min.js", "graphics-vml-default.js", "graphics-vml-debug.js", "graphics-vml-min.js", "graphics-svg-default-debug.js", "graphics-svg-default-min.js", "graphics-svg-default.js", "graphics-svg-debug.js", "graphics-svg-min.js", "graphics-canvas-default-debug.js", "graphics-canvas-default-min.js", "graphics-canvas-default.js", "graphics-canvas-debug.js", "graphics-canvas-min.js", "graphics-canvas.js", "graphics-debug.js", "graphics-min.js", "graphics.js"], "subdata": {}, "guessedname": "SETTER", "guessedtype": "property", "main": "graphics", "name": "graphics"}, "dataschema": {"description": "The DataSchema utility provides a common configurable interface for widgets to\napply a given schema to a variety of data.", "submodules": ["dataschema-xml", "dataschema-text", "dataschema-json", "dataschema-base", "dataschema-array"], "classlist": ["DataSchema.XML", "DataSchema.Text", "DataSchema.JSON", "DataSchema.Base", "DataSchema.Array"], "filelist": ["dataschema-xml-debug.js", "dataschema-xml-min.js", "dataschema-xml.js", "dataschema-text-debug.js", "dataschema-text-min.js", "dataschema-text.js", "dataschema-json-debug.js", "dataschema-json-min.js", "dataschema-json.js", "dataschema-base-debug.js", "dataschema-base-min.js", "dataschema-base.js", "dataschema-array-debug.js", "dataschema-array-min.js", "dataschema-array.js"], "subdata": {"dataschema-array": {"name": "DataSchema.Array", "description": "Provides a DataSchema implementation which can be used to work with data\nstored in arrays."}, "dataschema-base": {"name": "DataSchema.Base", "description": "Provides the base DataSchema implementation, which can be extended to \ncreate DataSchemas for specific data formats, such XML, JSON, text and\narrays."}, "dataschema-xml": {"name": "DataSchema.XML", "description": "Provides a DataSchema implementation which can be used to work with XML data."}, "dataschema-text": {"name": "DataSchema.Text", "description": "Provides a DataSchema implementation which can be used to work with\ndelimited text data."}, "dataschema-json": {"name": "DataSchema.JSON", "description": "Provides a DataSchema implementation which can be used to work with JSON data."}}, "guessedname": "LANG", "guessedtype": "property", "main": "dataschema", "name": "dataschema"}, "datatable": {"description": "The DataTable widget provides a progressively enhanced DHTML control for\ndisplaying tabular data across A-grade browsers.", "submodules": ["datatable-sort", "datatable-scroll", "datatable-datasource", "datatable-base"], "classlist": ["DataTableSort", "DataTableScroll", "DataTableDataSource", "Column", "Columnset", "DataTable.Base"], "filelist": ["datatable-sort-debug.js", "datatable-sort-min.js", "datatable-sort.js", "datatable-sort_en.js", "datatable-scroll-debug.js", "datatable-scroll-min.js", "datatable-scroll.js", "datatable-datasource-debug.js", "datatable-datasource-min.js", "datatable-datasource.js", "datatable-base-debug.js", "datatable-base-min.js", "datatable-base.js"], "subdata": {"datatable-base": {"name": "DataTable.Base", "description": "Provides the base DataTable implementation, which can be extended to add\nadditional functionality, such as sorting or scrolling."}, "datatable-datasource": {"name": "DataTableDataSource", "description": "Plugs DataTable with DataSource integration."}, "datatable-scroll": {"name": "DataTableScroll", "description": "Extends DataTable base to enable x,y, and xy scrolling."}, "datatable-sort": {"name": "DataTableSort", "description": "Plugs DataTable with sorting functionality."}}, "guessedname": "YNode", "guessedtype": "property", "name": "datatable"}, "resize": {"description": "The Resize Utility allows you to make an HTML element resizable.", "submodules": ["resize-proxy", "resize-plugin", "resize-contrain"], "classlist": ["Plugin.ResizeProxy", "Plugin.Resize", "Plugin.ResizeConstrained", "Resize"], "filelist": ["resize-proxy-debug.js", "resize-proxy-min.js", "resize-proxy.js", "resize-plugin-debug.js", "resize-plugin-min.js", "resize-plugin.js", "resize-constrain-debug.js", "resize-constrain-min.js", "resize-constrain.js", "resize-base-debug.js", "resize-base-min.js", "resize-base.js", "resize-debug.js", "resize-min.js", "resize.js"], "subdata": {"resize-plugin": {"name": "Plugin.Resize", "description": "The Resize Plugin allows you to make a Node or a Widget resizable. It supports all the functionality of\nthe standalone Resize utility. Additionally, resizing a widget updates the widget's height,width and x,y\nattributes, if they exist.\nvar overlay = new Y.Overlay({\nwidth: \"200px\",\nsrcNode: \"#overlay\",\nvisible: false,\nalign: {node:\".example\", points:[\"tc\", \"bc\"]}\n});\noverlay.plug(Y.Plugin.Resize);"}, "resize-contrain": {"name": "Plugin.ResizeConstrained", "description": "A Resize plugin that will attempt to constrain the resize node to the boundaries."}, "resize-proxy": {"name": "Plugin.ResizeProxy", "description": "Adds a `proxyNode` attribute and resizes it instead of the actual node. __very similar to DDProxy__\nvar resize = new Y.Resize({\n//Selector of the node to resize\nnode: '#demo'\n});\nresize.plug(Y.Plugin.ResizeProxy);"}}, "guessedname": "Lang", "guessedtype": "property", "main": "resize", "name": "resize"}, "aui-overlay": {"description": "Provides a basic Overlay widget, with Standard Module content support. The Overlay widget\nprovides Page XY positioning support, alignment and centering support along with basic \nstackable support (z-index and shimming).", "submodules": ["aui-overlay-base", "aui-overlay-context", "aui-overlay-context-panel", "aui-overlay-manager", "aui-overlay-mask"], "classlist": ["OverlayBase", "OverlayContext", "OverlayContextManager", "OverlayContextPanel", "OverlayContextPanelManager", "OverlayManager", "OverlayMask"], "filelist": ["aui-overlay-base-debug.js", "aui-overlay-base-min.js", "aui-overlay-base.js", "aui-overlay-context-debug.js", "aui-overlay-context-min.js", "aui-overlay-context-panel-debug.js", "aui-overlay-context-panel-min.js", "aui-overlay-context-panel.js", "aui-overlay-context.js", "aui-overlay-debug.js", "aui-overlay-manager-debug.js", "aui-overlay-manager-min.js", "aui-overlay-manager.js", "aui-overlay-mask-debug.js", "aui-overlay-mask-min.js", "aui-overlay-mask.js", "aui-overlay-min.js", "aui-overlay.js"], "subdata": {"aui-overlay-base": {"name": "OverlayBase", "description": "Provides a basic Overlay widget, with Standard Module content support. The Overlay widget\nprovides Page XY positioning support, alignment and centering support along with basic \nstackable support (z-index and shimming)."}, "aui-overlay-mask": {"name": "OverlayMask", "description": "The OverlayMask Utility"}, "aui-overlay-context": {"name": "OverlayContextManager", "description": "The OverlayContext Utility"}, "aui-overlay-context-panel": {"name": "OverlayContextPanelManager", "description": "The OverlayContextPanel Utility"}, "aui-overlay-manager": {"name": "OverlayManager", "description": "The OverlayManager Utility"}}, "guessedname": "L", "guessedtype": "property", "name": "aui-overlay"}, "swfdetect": {"description": "Utility for Flash version detection", "submodules": [], "classlist": [], "filelist": ["swfdetect-debug.js", "swfdetect-min.js", "swfdetect.js"], "subdata": {}, "name": "swfdetect"}, "widget-position-align": {"description": "Provides extended/advanced XY positioning support for Widgets, through an extension.\nIt builds on top of the widget-position module, to provide alignmentment and centering support.\nFuture releases aim to add constrained and fixed positioning support.", "submodules": [], "classlist": ["WidgetPositionAlign"], "filelist": ["widget-position-align-debug.js", "widget-position-align-min.js", "widget-position-align.js"], "subdata": {}, "guessedname": "L", "guessedtype": "property", "name": "widget-position-align"}, "sortable": {"description": "The class allows you to create a Drag & Drop reordered list.", "submodules": ["sortable-scroll"], "classlist": ["Plugin.SortScroll", "Sortable"], "filelist": ["sortable-scroll-debug.js", "sortable-scroll-min.js", "sortable-scroll.js", "sortable-debug.js", "sortable-min.js", "sortable.js"], "subdata": {"sortable-scroll": {"name": "Plugin.SortScroll", "description": "Plugin for sortable to handle scrolling lists."}}, "name": "sortable"}, "widget-autohide": {"since": "3.4.0", "description": "A widget-level extension that provides ability to hide widget when \ncertain events occur.", "submodules": [], "classlist": ["WidgetAutohide"], "author": "eferraiuolo, tilomitra", "filelist": ["widget-autohide-debug.js", "widget-autohide-min.js", "widget-autohide.js"], "subdata": {}, "guessedname": "WIDGET_AUTOHIDE", "guessedtype": "property", "name": "widget-autohide"}, "io-base": {"description": "Base IO functionality. Provides basic XHR transport support.", "submodules": ["io-xdr", "io-upload-iframe", "io-queue", "io-form"], "classlist": ["IO"], "filelist": ["io-xdr-debug.js", "io-xdr-min.js", "io-xdr.js", "io-upload-iframe-debug.js", "io-upload-iframe-min.js", "io-upload-iframe.js", "io-queue-debug.js", "io-queue-min.js", "io-queue.js", "io-form-debug.js", "io-form-min.js", "io-form.js", "io-base-debug.js", "io-base-min.js", "io-base.js"], "subdata": {"io-xdr": {"name": "IO", "description": "Extends IO to provide an alternate, Flash transport, for making\ncross-domain requests."}, "io-form": {"name": "IO", "description": "Extends IO to enable HTML form data serialization, when specified\nin the transaction's configuration object."}, "io-queue": {"name": "IO", "description": "Extends IO to implement Queue for synchronous\ntransaction processing."}, "io-upload-iframe": {"name": "IO", "description": "Extends the IO  to enable file uploads, with HTML forms \nusing an iframe as the transport medium."}}, "guessedname": "w", "guessedtype": "property", "main": "io-base", "name": "io-base"}, "profiler": {"description": "The YUI JavaScript profiler.", "submodules": [], "classlist": ["Profiler"], "filelist": ["profiler-debug.js", "profiler-min.js", "profiler.js"], "subdata": {}, "name": "profiler"}, "autocomplete": {"name": "autocomplete", "submodules": ["autocomplete-sources", "autocomplete-plugin", "autocomplete-list-keys", "autocomplete-highlighters-accentfold", "autocomplete-highlighters", "autocomplete-filters-accentfold", "autocomplete-filters"], "classlist": ["Plugin.AutoComplete", "AutoCompleteList", "AutoComplete", "AutoCompleteHighlighters", "AutoCompleteFilters", "AutoCompleteBase"], "since": "3.3.0", "filelist": ["autocomplete-sources-debug.js", "autocomplete-sources-min.js", "autocomplete-sources.js", "autocomplete-plugin-debug.js", "autocomplete-plugin-min.js", "autocomplete-plugin.js", "autocomplete-list-keys-debug.js", "autocomplete-list-keys-min.js", "autocomplete-list-keys.js", "autocomplete-list-debug.js", "autocomplete-list-min.js", "autocomplete-list.js", "autocomplete-list_en.js", "autocomplete-highlighters-accentfold-debug.js", "autocomplete-highlighters-accentfold-min.js", "autocomplete-highlighters-accentfold.js", "autocomplete-highlighters-debug.js", "autocomplete-highlighters-min.js", "autocomplete-highlighters.js", "autocomplete-filters-accentfold-debug.js", "autocomplete-filters-accentfold-min.js", "autocomplete-filters-accentfold.js", "autocomplete-filters-debug.js", "autocomplete-filters-min.js", "autocomplete-filters.js", "autocomplete-base-debug.js", "autocomplete-base-min.js", "autocomplete-base.js"], "subdata": {"autocomplete-highlighters": {"name": "AutoCompleteHighlighters", "description": "Provides pre-built result highlighters for AutoComplete."}, "autocomplete-filters": {"name": "AutoCompleteFilters", "description": "Provides pre-built result matching filters for AutoComplete."}, "autocomplete-plugin": {"name": "Plugin.AutoComplete", "description": "Binds an AutoCompleteList instance to a Node instance."}, "autocomplete-list-keys": {"name": "AutoCompleteList", "description": "Mixes keyboard support into AutoCompleteList. By default, this module is not\nloaded for iOS and Android devices."}, "autocomplete-highlighters-accentfold": {"name": "AutoCompleteHighlighters", "description": "<p>\nProvides pre-built accent-folding result highlighters for AutoComplete.\n</p>\n<p>\nThese highlighters are similar to the ones provided by the\n<code>autocomplete-highlighters</code> module, but use accent-aware\ncomparisons. For example, \"resume\" and \"résumé\" will be considered equal when\nusing the accent-folding highlighters.\n</p>"}, "autocomplete-sources": {"name": "AutoCompleteBase", "description": "Mixes support for JSONP and YQL result sources into AutoCompleteBase."}, "autocomplete-filters-accentfold": {"name": "AutoCompleteFilters", "description": "<p>\nProvides pre-built accent-folding result matching filters for AutoComplete.\n</p>\n<p>\nThese filters are similar to the ones provided by the\n<code>autocomplete-filters</code> module, but use accent-aware comparisons.\nFor example, \"resume\" and \"résumé\" will be considered equal when using the\naccent-folding filters.\n</p>"}}, "guessedname": "ACBase", "guessedtype": "property", "description": "Provides automatic input completion or suggestions for text input fields and\ntextareas."}, "aui-node": {"name": "aui-node", "submodules": ["aui-node-base", "aui-node-html5"], "classlist": ["A.Node", "A.NodeList", "A.HTML5"], "filelist": ["aui-node-base-debug.js", "aui-node-base-min.js", "aui-node-base.js", "aui-node-debug.js", "aui-node-html5-debug.js", "aui-node-html5-min.js", "aui-node-html5-print-debug.js", "aui-node-html5-print-min.js", "aui-node-html5-print.js", "aui-node-html5.js", "aui-node-min.js", "aui-node.js"], "subdata": {"aui-node-html5": {"name": "A.HTML5", "description": "aui-node-html5 provides support for HTML shiv natively on the Alloy dom\nmethods. The HTML5 shiv just affects IE."}, "aui-node-base": {"name": "A.NodeList", "description": "aui-node-base A set of utility methods to the Node."}}, "guessedname": "Lang", "guessedtype": "property", "description": "aui-node-base A set of utility methods to the Node."}, "highlight": {"description": "Provides methods for highlighting strings within other strings by wrapping\nthem in HTML.", "submodules": ["highlight-base", "highlight-accentfold"], "classlist": ["Highlight"], "since": "3.3.0", "filelist": ["highlight-base-debug.js", "highlight-base-min.js", "highlight-base.js", "highlight-accentfold-debug.js", "highlight-accentfold-min.js", "highlight-accentfold.js"], "subdata": {"highlight-base": {"name": "Highlight", "description": "<p>\nProvides methods for highlighting strings within other strings by wrapping\nthem in HTML.\n</p>\n<p>\nThe highlight methods first escape any special HTML characters in the input\nstrings and then highlight the appropriate substrings by wrapping them in a\n<code>&lt;b class=\"yui3-highlight\"&gt;&lt;/b&gt;</code> element. The\n<code>&lt;b&gt;</code> element is used rather than\n<code>&lt;strong&gt;</code> in accordance with HTML5's definition of\n<code>&lt;b&gt;</code> as being purely presentational, which is exactly what\nhighlighting is.\n</p>"}, "highlight-accentfold": {"name": "Highlight", "description": "Adds accent-folding highlighters to <code>Y.Highlight</code>."}}, "name": "highlight"}, "history": {"name": "history", "submodules": ["history-html5", "history-hash-ie", "history-hash", "history-base"], "classlist": ["HistoryHTML5", "HistoryHash", "HistoryBase"], "since": "3.2.0", "filelist": ["history-html5-debug.js", "history-html5-min.js", "history-html5.js", "history-hash-ie-debug.js", "history-hash-ie-min.js", "history-hash-ie.js", "history-hash-debug.js", "history-hash-min.js", "history-hash.js", "history-base-debug.js", "history-base-min.js", "history-base.js"], "subdata": {"history-hash": {"name": "HistoryHash", "description": "Provides browser history management backed by\n<code>window.location.hash</code>, as well as convenience methods for working\nwith the location hash and a synthetic <code>hashchange</code> event that\nnormalizes differences across browsers."}, "history-html5": {"name": "HistoryHTML5", "description": "Provides browser history management using the HTML5 history API."}, "history-base": {"name": "HistoryBase", "description": "Provides global state management backed by an object, but with no browser\nhistory integration. For actual browser history integration and back/forward\nsupport, use the history-html5 or history-hash modules."}, "history-hash-ie": {"name": "HistoryHash", "description": "Improves IE6/7 support in history-hash by using a hidden iframe to create\nentries in IE's browser history. This module is only needed if IE6/7 support\nis necessary; it's not needed for any other browser."}}, "description": "Provides browser history management functionality using a simple\nadd/replace/get paradigm. This can be used to ensure that the browser's back\nand forward buttons work as the user expects and to provide bookmarkable URLs\nthat return the user to the current application state, even in an Ajax\napplication that doesn't perform full-page refreshes."}, "widget-base-ie": {"description": "IE specific support for the widget-base module.", "submodules": [], "classlist": [], "filelist": ["widget-base-ie-debug.js", "widget-base-ie-min.js", "widget-base-ie.js"], "subdata": {}, "guessedname": "BOUNDING_BOX", "guessedtype": "property", "name": "widget-base-ie"}, "aui-text": {"description": "Utility for testing strings against unicode patterns.", "submodules": [], "classlist": [], "filelist": ["aui-text-data-unicode-debug.js", "aui-text-data-unicode-min.js", "aui-text-data-unicode.js", "aui-text-debug.js", "aui-text-min.js", "aui-text-unicode-debug.js", "aui-text-unicode-min.js", "aui-text-unicode.js", "aui-text.js"], "subdata": {}, "guessedname": "Lang", "guessedtype": "property", "name": "aui-text"}, "widget-modality": {"description": "Provides modality support for Widgets, though an extension", "submodules": [], "classlist": ["WidgetModality"], "filelist": ["widget-modality-debug.js", "widget-modality-min.js", "widget-modality.js"], "subdata": {}, "guessedname": "WIDGET", "guessedtype": "property", "name": "widget-modality"}, "aui-toolbar": {"description": "The Toolbar Utility", "submodules": [], "classlist": ["Toolbar"], "filelist": ["aui-toolbar-debug.js", "aui-toolbar-min.js", "aui-toolbar.js"], "subdata": {}, "guessedname": "Lang", "guessedtype": "property", "name": "aui-toolbar"}, "aui-parse-content": {"description": "The ParseContent Utility - Parse the content of a Node so that all of the \njavascript contained in that Node will be executed according to the order\nthat it appears.", "submodules": [], "classlist": ["ParseContent"], "filelist": ["aui-parse-content-debug.js", "aui-parse-content-min.js", "aui-parse-content.js"], "subdata": {}, "name": "aui-parse-content"}, "aui-loading-mask": {"description": "The LoadingMask Utility", "submodules": [], "classlist": ["LoadingMask"], "filelist": ["aui-messaging-debug.js", "aui-messaging-min.js", "aui-messaging.js", "aui-loading-mask-debug.js", "aui-loading-mask-min.js", "aui-loading-mask.js"], "subdata": {}, "guessedname": "Lang", "guessedtype": "property", "name": "aui-loading-mask"}, "event-gestures": {"name": "event-gestures", "submodules": ["event-move", "event-flick"], "classlist": [], "filelist": ["event-move-debug.js", "event-move-min.js", "event-move.js", "event-flick-debug.js", "event-flick-min.js", "event-flick.js"], "subdata": {"event-move": {"name": "YUI", "description": "Adds lower level support for \"gesturemovestart\", \"gesturemove\" and \"gesturemoveend\" events, which can be used to create drag/drop\ninteractions which work across touch and mouse input devices. They correspond to \"touchstart\", \"touchmove\" and \"touchend\" on a touch input\ndevice, and \"mousedown\", \"mousemove\", \"mouseup\" on a mouse based input device."}, "event-flick": {"name": "YUI", "description": "Adds support for a \"flick\" event, which is fired at the end of a touch or mouse based flick gesture, and provides \nvelocity of the flick, along with distance and time information."}}, "guessedname": "EVENT", "guessedtype": "property", "description": "The gestures module provides gesture events such as \"flick\", which normalize user interactions\nacross touch and mouse or pointer based input devices. This layer can be used by application developers\nto build input device agnostic components which behave the same in response to either touch or mouse based  \ninteraction.\n<p>Documentation for events added by this module can be found in the event document for the <a href=\"YUI.html#events\">YUI</a> global.</p>"}, "attribute": {"description": "The attribute module provides an augmentable Attribute implementation, which \nadds configurable attributes and attribute change events to the class being \naugmented. It also provides a State class, which is used internally by Attribute,\nbut can also be used independently to provide a name/property/value data structure to\nstore state.", "submodules": ["attribute-complex", "attribute-base"], "classlist": ["State", "Attribute"], "filelist": ["attribute-complex-debug.js", "attribute-complex-min.js", "attribute-complex.js", "attribute-base-debug.js", "attribute-base-min.js", "attribute-base.js"], "subdata": {"attribute-base": {"name": "Attribute", "description": "The attribute-base submodule provides core attribute handling support, with everything\naside from complex attribute handling in the provider's constructor."}, "attribute-complex": {"name": "Attribute", "description": "Adds support for attribute providers to handle complex attributes in the constructor"}}, "guessedname": "O", "guessedtype": "property", "name": "attribute"}, "aui-rating": {"description": "The Rating Utility - The Star Rating creates a non-obstrusive star rating\ncontrol, could be based on a set of radio input boxes.", "submodules": [], "classlist": ["Rating", "ThumbRating"], "filelist": ["aui-rating-debug.js", "aui-rating-min.js", "aui-rating.js"], "subdata": {}, "guessedname": "L", "guessedtype": "property", "name": "aui-rating"}, "pluginhost": {"description": "Provides the augmentable PluginHost interface, which can be added to any class.", "submodules": [], "classlist": [], "filelist": ["pluginhost-config-debug.js", "pluginhost-config-min.js", "pluginhost-config.js", "pluginhost-base-debug.js"], "subdata": {}, "name": "pluginhost"}, "test": {"description": "YUI JavaScript Testing Framework", "submodules": [], "classlist": ["Test.Case", "Test.Wait", "Test.Suite", "Test.Runner", "Test.Assert", "Test.Assert.Error", "Test.Assert.ComparisonFailure", "Test.Assert.UnexpectedValue", "Test.Assert.ShouldFail", "Test.Assert.ShouldError", "Test.Assert.UnexpectedError", "Test.ArrayAssert", "Test.ObjectAssert", "Test.DateAssert", "Test.Format", "Test.Coverage.Format", "Test.Reporter", "Test.Mock", "Test.Mock.Value"], "filelist": ["test-debug.js", "test-min.js", "test.js"], "subdata": {}, "name": "test"}, "widget-locale": {"description": "Provides string support for widget with BCP 47 language tag lookup. This module has been deprecated. It's replaced by the \"intl\" module which provides generic internationalization and BCP 47 language tag support with externalization.", "submodules": [], "classlist": [], "guessedtype": "property", "filelist": ["widget-locale-debug.js", "widget-locale-min.js", "widget-locale.js"], "subdata": {}, "guessedname": "TRUE", "deprecated": "This module has been deprecated. It's replaced by the \"intl\" module which provides generic internationalization and BCP 47 language tag support with externalization.", "name": "widget-locale"}, "scrollview-scrollbars": {"description": "Provides a plugin, which adds support for a scroll indicator to ScrollView instances", "submodules": [], "classlist": ["Plugin.ScrollViewScrollbars"], "filelist": ["scrollview-scrollbars-debug.js", "scrollview-scrollbars-min.js", "scrollview-scrollbars.js", "scrollview-list-debug.js", "scrollview-list-min.js", "scrollview-list.js"], "subdata": {}, "guessedname": "getClassName", "guessedtype": "property", "name": "scrollview-scrollbars"}, "datasource": {"description": "The DataSource utility provides a common configurable interface for widgets to\naccess a variety of data, from JavaScript arrays to online database servers.", "submodules": ["datasource-xmlschema", "datasource-textschema", "datasource-polling", "datasource-local", "datasource-jsonschema", "datasource-io", "datasource-get", "datasource-function", "datasource-cache", "datasource-arrayschema"], "classlist": ["DataSourceXMLSchema", "DataSourceTextSchema", "Pollable", "DataSource.Local", "DataSourceJSONSchema", "DataSource.IO", "DataSource.Get", "DataSource.Function", "DataSourceCacheExtension", "DataSourceCache", "DataSourceArraySchema"], "filelist": ["datasource-xmlschema-debug.js", "datasource-xmlschema-min.js", "datasource-xmlschema.js", "datasource-textschema-debug.js", "datasource-textschema-min.js", "datasource-textschema.js", "datasource-polling-debug.js", "datasource-polling-min.js", "datasource-polling.js", "datasource-local-debug.js", "datasource-local-min.js", "datasource-local.js", "datasource-jsonschema-debug.js", "datasource-jsonschema-min.js", "datasource-jsonschema.js", "datasource-io-debug.js", "datasource-io-min.js", "datasource-io.js", "datasource-get-debug.js", "datasource-get-min.js", "datasource-get.js", "datasource-function-debug.js", "datasource-function-min.js", "datasource-function.js", "datasource-cache-debug.js", "datasource-cache-min.js", "datasource-cache.js", "datasource-arrayschema-debug.js", "datasource-arrayschema-min.js", "datasource-arrayschema.js"], "subdata": {"datasource-io": {"name": "DataSource.IO", "description": "Provides a DataSource implementation which can be used to retrieve data via the IO Utility."}, "datasource-function": {"name": "DataSource.Function", "description": "Provides a DataSource implementation which can be used to retrieve data from a custom function."}, "datasource-arrayschema": {"name": "DataSourceArraySchema", "description": "Extends DataSource with schema-parsing on array data."}, "datasource-textschema": {"name": "DataSourceTextSchema", "description": "Extends DataSource with schema-parsing on text data."}, "datasource-cache": {"name": "DataSourceCache", "description": "Plugs DataSource with caching functionality."}, "datasource-get": {"name": "DataSource.Get", "description": "Provides a DataSource implementation which can be used to retrieve data via the Get Utility."}, "datasource-polling": {"name": "Pollable", "description": "Extends DataSource with polling functionality."}, "datasource-local": {"name": "DataSource.Local", "description": "Provides the base DataSource implementation, which can be extended to\ncreate DataSources for specific data protocols, such as the IO Utility, the\nGet Utility, or custom functions."}, "datasource-xmlschema": {"name": "DataSourceXMLSchema", "description": "Extends DataSource with schema-parsing on XML data."}, "datasource-jsonschema": {"name": "DataSourceJSONSchema", "description": "Extends DataSource with schema-parsing on JSON data."}}, "main": "datasource", "name": "datasource"}, "node": {"description": "The Node Utility provides a DOM-like interface for interacting with DOM nodes.", "submodules": ["node-core", "node-base", "node-style", "node-screen", "node-pluginhost", "node-load", "node-event-simulate", "node-event-delegate", "node-deprecated"], "classlist": ["Node", "NodeList"], "deprecated": "", "filelist": ["node-style-debug.js", "node-style-min.js", "node-style.js", "node-screen-debug.js", "node-screen-min.js", "node-screen.js", "node-pluginhost-debug.js", "node-pluginhost-min.js", "node-pluginhost.js", "node-load-debug.js", "node-load-min.js", "node-load.js", "node-event-simulate-debug.js", "node-event-simulate-min.js", "node-event-simulate.js", "node-event-html5-debug.js", "node-event-html5-min.js", "node-event-html5.js", "node-event-delegate-debug.js", "node-event-delegate-min.js", "node-event-delegate.js", "node-deprecated-debug.js", "node-deprecated-min.js", "node-deprecated.js", "node-core-debug.js", "node-core-min.js", "node-core.js", "node-base-debug.js", "node-debug.js"], "subdata": {"node-deprecated": {"name": "Node"}, "node-pluginhost": {"name": "Node"}, "node-core": {"name": "NodeList"}, "node-event-delegate": {"name": "Node", "description": "Functionality to make the node a delegated event container"}, "node-base": {"name": "NodeList"}, "node-style": {"name": "NodeList", "description": "Extended Node interface for managing node styles."}, "node-load": {"name": "Node", "description": "Extended Node interface with a basic IO API."}, "node-screen": {"name": "Node"}, "node-event-simulate": {"name": "Node", "description": "Adds functionality to simulate events."}}, "guessedname": "Y_NodeList", "guessedtype": "property", "main": "node", "name": "node"}, "aui-datatype": {"description": "The Datatype Utility", "submodules": [], "classlist": ["DataType.Boolean", "DataType.String", "A.DataType.DateMath"], "filelist": ["aui-datatype-debug.js", "aui-datatype-min.js", "aui-datatype.js"], "subdata": {}, "guessedname": "L", "guessedtype": "property", "name": "aui-datatype"}, "node-flick": {"description": "Provide a simple Flick plugin, which can be used along with the \"flick\" gesture event, to \nanimate the motion of the host node in response to a (mouse or touch) flick gesture. \n<p>The current implementation is designed to move the node, relative to the bounds of a parent node and is suitable\nfor scroll/carousel type implementations. Future versions will remove that constraint, to allow open ended movement within\nthe document.</p>", "submodules": [], "classlist": ["Plugin.Flick"], "filelist": ["node-flick-debug.js", "node-flick-min.js", "node-flick.js"], "subdata": {}, "guessedname": "HOST", "guessedtype": "property", "name": "node-flick"}, "collection": {"description": "Collection utilities beyond what is provided in the YUI core", "submodules": ["arraylist-filter", "arraylist-add", "arraylist", "array-invoke", "array-extras"], "classlist": ["ArrayList"], "filelist": ["arraylist-filter-debug.js", "arraylist-filter-min.js", "arraylist-filter.js", "arraylist-add-debug.js", "arraylist-add-min.js", "arraylist-add.js", "arraylist-debug.js", "arraylist-min.js", "arraylist.js", "array-invoke-debug.js", "array-invoke-min.js", "array-invoke.js", "array-extras-debug.js", "array-extras-min.js", "array-extras.js"], "subdata": {"arraylist-add": {"name": "ArrayList", "description": "Collection utilities beyond what is provided in the YUI core"}, "array-extras": {"name": "Array", "description": "Adds additional utility methods to the `Y.Array` class."}, "arraylist-filter": {"name": "ArrayList", "description": "Collection utilities beyond what is provided in the YUI core"}, "array-invoke": {"name": "Array"}, "arraylist": {"name": "ArrayList", "description": "Collection utilities beyond what is provided in the YUI core"}}, "guessedname": "YArray", "guessedtype": "property", "name": "collection"}, "aui-dialog": {"description": "The Dialog Utility - The Dialog component is an extension of Panel that is\nmeant to emulate the behavior of an dialog window using a floating,\ndraggable HTML element.", "submodules": [], "classlist": ["Dialog", "DialogManager", "DialogMask"], "filelist": ["aui-drawing-animate-debug.js", "aui-drawing-animate-min.js", "aui-drawing-animate.js", "aui-drawing-base-debug.js", "aui-drawing-base-min.js", "aui-drawing-base.js", "aui-drawing-debug.js", "aui-drawing-drag-debug.js", "aui-drawing-drag-min.js", "aui-drawing-drag.js", "aui-drawing-fonts-debug.js", "aui-drawing-fonts-min.js", "aui-drawing-fonts.js", "aui-drawing-min.js", "aui-drawing-safari-debug.js", "aui-drawing-safari-min.js", "aui-drawing-safari.js", "aui-drawing-svg-debug.js", "aui-drawing-svg-min.js", "aui-drawing-svg.js", "aui-drawing-vml-debug.js", "aui-drawing-vml-min.js", "aui-drawing-vml.js", "aui-drawing.js", "aui-dialog-iframe-debug.js", "aui-dialog-iframe-min.js", "aui-dialog-iframe.js", "aui-dialog-debug.js", "aui-dialog-min.js", "aui-dialog.js"], "subdata": {}, "guessedname": "L", "guessedtype": "property", "name": "aui-dialog"}, "widget-stdmod": {"description": "Provides standard module support for Widgets through an extension.", "submodules": [], "classlist": ["WidgetStdMod"], "filelist": ["widget-stdmod-debug.js", "widget-stdmod-min.js", "widget-stdmod.js"], "subdata": {}, "guessedname": "L", "guessedtype": "property", "name": "widget-stdmod"}, "aui-paginator": {"description": "The Paginator Utility - The Paginator widget provides a set of controls to navigate through paged data.", "submodules": [], "classlist": ["Paginator"], "filelist": ["aui-paginator-debug.js", "aui-paginator-min.js", "aui-paginator.js"], "subdata": {}, "guessedname": "L", "guessedtype": "property", "name": "aui-paginator"}, "yql": {"description": "This class adds a sugar class to allow access to YQL (http://developer.yahoo.com/yql/).", "submodules": [], "classlist": ["YQLRequest", "YQL"], "filelist": ["yql-debug.js", "yql-min.js", "yql.js"], "subdata": {}, "name": "yql"}, "aui-tree": {"name": "aui-tree", "submodules": ["aui-tree-data", "aui-tree-node", "aui-tree-view"], "classlist": ["TreeData", "TreeNode", "TreeNodeIO", "TreeNodeCheck", "TreeNodeTask", "TreeNodeRadio", "TreeView", "TreeViewDD"], "filelist": ["aui-viewport-debug.js", "aui-viewport-min.js", "aui-viewport.js", "aui-video-debug.js", "aui-video-min.js", "aui-video.js", "aui-tree-data-debug.js", "aui-tree-data-min.js", "aui-tree-data.js", "aui-tree-debug.js", "aui-tree-min.js", "aui-tree-node-min.js", "aui-tree-node.js", "aui-tree-view-debug.js", "aui-tree-view-min.js", "aui-tree-view.js", "aui-tree.js"], "subdata": {"aui-tree-node": {"name": "TreeNodeRadio", "description": "The TreeNode Utility"}, "aui-tree-data": {"name": "TreeData", "description": "The TreeData Utility"}, "aui-tree-view": {"name": "TreeViewDD", "description": "The TreeView Utility"}}, "guessedname": "L", "guessedtype": "property", "description": "The TreeData Utility"}, "dom": {"description": "The DOM utility provides a cross-browser abtraction layer\nnormalizing DOM tasks, and adds extra helper functionality\nfor other common tasks.", "submodules": ["dom-base", "dom-style", "dom-screen", "selector-native", "selector-css3", "selector-css2"], "classlist": ["DOM", "Selector"], "filelist": ["selector-native-debug.js", "selector-native-min.js", "selector-native.js", "selector-css3-debug.js", "selector-css3-min.js", "selector-css3.js", "selector-css2-debug.js", "selector-css2-min.js", "selector-css2.js", "dom-style-ie-debug.js", "dom-style-ie-min.js", "dom-style-ie.js", "dom-style-debug.js", "dom-style-min.js", "dom-style.js", "dom-size-debug.js", "dom-size-min.js", "dom-size.js", "dom-screen-debug.js", "dom-screen-min.js", "dom-screen.js", "dom-deprecated-debug.js", "dom-deprecated-min.js", "dom-deprecated.js", "dom-create-debug.js", "dom-create-min.js", "dom-create.js", "dom-core-debug.js", "dom-core-min.js", "dom-core.js", "dom-class-debug.js", "dom-class-min.js", "dom-class.js", "dom-base-debug.js", "dom-base-min.js", "dom-base.js", "dom-attrs-debug.js", "dom-attrs-min.js", "dom-attrs.js", "dom-debug.js", "dom-min.js", "dom.js"], "subdata": {"selector-css2": {"name": "Selector", "description": "The selector module provides helper methods allowing CSS2 Selectors to be used with DOM elements."}, "selector-css3": {"name": "Selector", "description": "The selector css3 module provides support for css3 selectors."}, "dom-base": {"name": "DOM", "description": "The DOM utility provides a cross-browser abtraction layer\nnormalizing DOM tasks, and adds extra helper functionality\nfor other common tasks."}, "dom-style": {"name": "DOM", "description": "Add style management functionality to DOM."}, "selector-native": {"name": "Selector", "description": "The selector-native module provides support for native querySelector"}, "dom-screen": {"name": "DOM", "description": "Adds position and region management functionality to DOM."}}, "guessedname": "DOCUMENT_ELEMENT", "guessedtype": "property", "name": "dom"}, "datatype": {"description": "The DataType Utility provides type-conversion and string-formatting\nconvenience methods for various JavaScript object types.", "submodules": ["datatype-xml-parse", "datatype-xml-format", "datatype-xml", "datatype-number-parse", "datatype-number", "datatype-number-format", "datatype-date-parse", "datatype-date", "datatype-date-format"], "classlist": ["DataType.XML", "DataType.Number", "DataType.Date", "DataType.Date.Locale"], "filelist": ["datatype-xml-parse-debug.js", "datatype-xml-parse-min.js", "datatype-xml-parse.js", "datatype-xml-format-debug.js", "datatype-xml-format-min.js", "datatype-xml-format.js", "datatype-number-parse-debug.js", "datatype-number-parse-min.js", "datatype-number-parse.js", "datatype-number-format-debug.js", "datatype-number-format-min.js", "datatype-number-format.js", "datatype-date-parse-debug.js", "datatype-date-parse-min.js", "datatype-date-parse.js", "datatype-date-math-debug.js", "datatype-date-math-min.js", "datatype-date-math.js", "datatype-date-format-debug.js", "datatype-date-format-min.js", "datatype-date-format.js", "datatype-date-format_ar-JO.js", "datatype-date-format_ar.js", "datatype-date-format_ca-ES.js", "datatype-date-format_ca.js", "datatype-date-format_da-DK.js", "datatype-date-format_da.js", "datatype-date-format_de-AT.js", "datatype-date-format_de-DE.js", "datatype-date-format_de.js", "datatype-date-format_el-GR.js", "datatype-date-format_el.js", "datatype-date-format_en-AU.js", "datatype-date-format_en-CA.js", "datatype-date-format_en-GB.js", "datatype-date-format_en-IE.js", "datatype-date-format_en-IN.js", "datatype-date-format_en-JO.js", "datatype-date-format_en-MY.js", "datatype-date-format_en-NZ.js", "datatype-date-format_en-PH.js", "datatype-date-format_en-SG.js", "datatype-date-format_en-US.js", "datatype-date-format_en.js", "datatype-date-format_es-AR.js", "datatype-date-format_es-BO.js", "datatype-date-format_es-CL.js", "datatype-date-format_es-CO.js", "datatype-date-format_es-EC.js", "datatype-date-format_es-ES.js", "datatype-date-format_es-MX.js", "datatype-date-format_es-PE.js", "datatype-date-format_es-PY.js", "datatype-date-format_es-US.js", "datatype-date-format_es-UY.js", "datatype-date-format_es-VE.js", "datatype-date-format_es.js", "datatype-date-format_fi-FI.js", "datatype-date-format_fi.js", "datatype-date-format_fr-BE.js", "datatype-date-format_fr-CA.js", "datatype-date-format_fr-FR.js", "datatype-date-format_fr.js", "datatype-date-format_hi-IN.js", "datatype-date-format_hi.js", "datatype-date-format_id-ID.js", "datatype-date-format_id.js", "datatype-date-format_it-IT.js", "datatype-date-format_it.js", "datatype-date-format_ja-JP.js", "datatype-date-format_ja.js", "datatype-date-format_ko-KR.js", "datatype-date-format_ko.js", "datatype-date-format_ms-MY.js", "datatype-date-format_ms.js", "datatype-date-format_nb-NO.js", "datatype-date-format_nb.js", "datatype-date-format_nl-BE.js", "datatype-date-format_nl-NL.js", "datatype-date-format_nl.js", "datatype-date-format_pl-PL.js", "datatype-date-format_pl.js", "datatype-date-format_pt-BR.js", "datatype-date-format_pt.js", "datatype-date-format_ro-RO.js", "datatype-date-format_ro.js", "datatype-date-format_ru-RU.js", "datatype-date-format_ru.js", "datatype-date-format_sv-SE.js", "datatype-date-format_sv.js", "datatype-date-format_th-TH.js", "datatype-date-format_th.js", "datatype-date-format_tr-TR.js", "datatype-date-format_tr.js", "datatype-date-format_vi-VN.js", "datatype-date-format_vi.js", "datatype-date-format_zh-Hans-CN.js", "datatype-date-format_zh-Hans.js", "datatype-date-format_zh-Hant-HK.js", "datatype-date-format_zh-Hant-TW.js", "datatype-date-format_zh-Hant.js"], "subdata": {"datatype-xml-parse": {"name": "DataType.XML", "description": "Parse XML submodule."}, "datatype-date": {"name": "", "description": "Date submodule."}, "datatype-number-format": {"name": "DataType.Number", "description": "Format number submodule."}, "datatype-number": {"name": "DataType.Number", "description": "Number submodule."}, "datatype-xml": {"name": "DataType.XML", "description": "XML submodule."}, "datatype-date-format": {"name": "DataType.Date", "description": "Format date submodule implements strftime formatters for javascript based on the\nOpen Group specification defined at\nhttp://www.opengroup.org/onlinepubs/007908799/xsh/strftime.html\nThis implementation does not include modified conversion specifiers (i.e., Ex and Ox)"}, "datatype-xml-format": {"name": "DataType.XML", "description": "Format XML submodule."}, "datatype-date-parse": {"name": "DataType.Date", "description": "Parse number submodule."}, "datatype-number-parse": {"name": "DataType.Number", "description": "Parse number submodule."}}, "guessedname": "LANG", "guessedtype": "property", "name": "datatype"}, "tabview": {"description": "The TabView module", "submodules": [], "classlist": ["TabView", "Tab"], "filelist": ["tabview-plugin-debug.js", "tabview-plugin-min.js", "tabview-plugin.js", "tabview-base-debug.js", "tabview-base-min.js", "tabview-base.js", "tabview-debug.js", "tabview-min.js", "tabview.js"], "subdata": {}, "guessedname": "_queries", "guessedtype": "property", "name": "tabview"}, "classnamemanager": {"description": "Contains a singleton (ClassNameManager) that enables easy creation and caching of \nprefixed class names.", "submodules": [], "classlist": ["ClassNameManager"], "filelist": ["classnamemanager-debug.js", "classnamemanager-min.js", "classnamemanager.js"], "subdata": {}, "name": "classnamemanager"}, "event-valuechange": {"description": "Adds a synthetic <code>valueChange</code> event that fires when the\n<code>value</code> property of an input field or textarea changes as a result\nof a keystroke, mouse operation, or input method editor (IME) input event.", "submodules": [], "classlist": ["ValueChange"], "filelist": ["event-valuechange-debug.js", "event-valuechange-min.js", "event-valuechange.js"], "subdata": {}, "name": "event-valuechange"}}, "classmap": {"Paginator": {"name": "Paginator", "configs": {"pageReportLabelTemplate": {"default": "'({page} of {totalPages})'", "type": "String", "description": "Template for the\n<a href=\"Paginator.html#config_pageReportEl\">pageReportEl</a> content.\nNote the placeholders for the page {page} and the total pages\n{totalPages}.", "guessedname": "pageReportLabelTemplate", "guessedtype": "property"}, "prevPageLink": {"default": "Generated anchor element.", "type": "Node | String", "description": "The <a href=\"Node.html\">Node</a> or template to be used as the\nprev link element.", "guessedname": "prevPageLink", "guessedtype": "property"}, "pageLinkTemplate": {"default": "Generated anchor HTML element.", "type": "String", "description": "HTML Template for the link elements.", "guessedname": "pageLinkTemplate", "guessedtype": "property"}, "pageReportEl": {"default": "Generated span HTML element.", "type": "String", "description": "Node element to display the page report (i.e., (1 of 100)).", "guessedname": "pageReportEl", "guessedtype": "property"}, "prevPageLinkLabel": {"default": "'&lt; prev'", "type": "String", "description": "The label used as content of the\n<a href=\"Paginator.html#config_prevPageLink\">prevPageLink</a> element.", "guessedname": "prevPageLinkLabel", "guessedtype": "property"}, "pageLinkContent": {"default": "Basic function to set the html of the page element with the page number.", "type": "function", "description": "<p>Function which set the content of the each page element. The passed\nfunction receive as arguments the reference for the page element\nnode, the page number and the index of the page element.</p>\nExample:\n<pre><code>function(pageEl, pageNumber, index) {\npageEl.html(pageNumber);\n}</code></pre>", "guessedname": "pageLinkContent", "guessedtype": "property"}, "firstPageLinkLabel": {"default": "'first'", "type": "String", "description": "The label used as content of the\n<a href=\"Paginator.html#config_firstPageLink\">firstPageLink</a> element.", "guessedname": "firstPageLinkLabel", "guessedtype": "property"}, "rowsPerPageOptions": {"default": "[]", "type": "Array", "description": "Array to be displayed on the generated HTML Select element with the\n<a href=\"Paginator.html#config_rowsPerPage\">rowsPerPage</a>\ninformation. (i.e., [1,3,5,7], will display these values on the\nselect)", "guessedname": "rowsPerPageOptions", "guessedtype": "property"}, "total": {"default": "0", "type": "Number", "description": "Total number of records to paginate through.", "guessedname": "total", "guessedtype": "property"}, "totalLabel": {"default": "'(Total {total})'", "type": "String", "description": "The label markup to the total information.", "guessedname": "totalLabel", "guessedtype": "property"}, "state": {"default": "{}", "type": "Object", "description": "Generates information to the <code>changeRequest</code> event. See\n<a href=\"Paginator.html#method_changeRequest\">changeRequest</a>.", "guessedname": "state", "guessedtype": "property"}, "template": {"default": "'{FirstPageLink} {PrevPageLink} {PageLinks} {NextPageLink} {LastPageLink} {CurrentPageReport} {Total} {RowsPerPageSelect}'", "type": "String", "description": "Template used to render controls. The string will be used as\ninnerHTML on all specified container nodes. Bracketed keys (e.g.\n{pageLinks}) in the string will be replaced with an instance of the\nso named ui component.", "guessedname": "template", "guessedtype": "property"}, "firstPageLink": {"default": "Generated anchor element.", "type": "Node | String", "description": "The <a href=\"Node.html\">Node</a> or template to be used as the\nfirst link element.", "guessedname": "firstPageLink", "guessedtype": "property"}, "pageContainerTemplate": {"default": "Generated span HTML element.", "type": "String", "description": "HTML Template for the page links container.", "guessedname": "pageContainerTemplate", "guessedtype": "property"}, "containers": {"default": "null", "type": "Node | String", "description": "The Paginator controls UI could be displayed in more than one\ncontainer (i.e., in the header and footer of a list). Pass a\n<a href=\"NodeList.html\">NodeList</a> or a selector to grab the\ncontainers.", "guessedname": "containers", "guessedtype": "property"}, "lastPageLink": {"default": "Generated anchor element.", "type": "Node | String", "description": "The <a href=\"Node.html\">Node</a> or template to be used as the\nlast link element.", "guessedname": "lastPageLink", "guessedtype": "property"}, "nextPageLink": {"default": "Generated anchor element.", "type": "Node | String", "description": "The <a href=\"Node.html\">Node</a> or template to be used as the\nnext link element.", "guessedname": "nextPageLink", "guessedtype": "property"}, "maxPageLinks": {"default": "10", "type": "Number", "description": "The max number of page links to be displayed. If lower than the\ntotal number of pages they are still navigable using next and prev\nlinks.", "guessedname": "maxPageLinks", "guessedtype": "property"}, "rowsPerPageEl": {"default": "Generated select HTML element.", "type": "Node | String", "description": "Node element to display the\n<a href=\"Paginator.html#config_rowsPerPage\">rowsPerPage</a>.", "guessedname": "rowsPerPageEl", "guessedtype": "property"}, "nextPageLinkLabel": {"default": "'next &gt;'", "type": "String", "description": "The label used as content of the\n<a href=\"Paginator.html#config_nextPageLink\">nextPageLink</a> element.", "guessedname": "nextPageLinkLabel", "guessedtype": "property"}, "rowsPerPage": {"default": "1", "type": "Number", "description": "Number of records constituting a \"page\".", "guessedname": "rowsPerPage", "guessedtype": "property"}, "totalEl": {"default": "Generated span HTML element.", "type": "String", "description": "Node element to display the total information.", "guessedname": "totalEl", "guessedtype": "property"}, "totalPages": {"default": "0", "type": "Number", "description": "Number of pages. Calculated based on the\n<a href=\"Paginator.html#config_total\">total</a> divided by the\n<a href=\"Paginator.html#config_rowsPerPage\">rowsPerPage</a>.", "guessedname": "totalPages", "guessedtype": "property"}, "lastPageLinkLabel": {"default": "'last'", "type": "String", "description": "The label used as content of the\n<a href=\"Paginator.html#config_lastPageLink\">lastPageLink</a> element.", "guessedname": "lastPageLinkLabel", "guessedtype": "property"}, "page": {"default": "1", "type": "Number", "description": "Page to display on initial paint.", "guessedname": "page", "guessedtype": "property"}, "alwaysVisible": {"default": "true", "type": "boolean", "description": "If true the Paginator will be always visible, even when the number\nof pages is 0. To hide the paginator controls automatically when\nthere is no pages to display use <code>false</code>.", "guessedname": "alwaysVisible", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "<p><img src=\"assets/images/aui-paginator/main.png\"/></p>\nA base class for Paginator, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Set of controls to navigate through paged data</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.Paginator({\ncontainers: '.paginatorA',\ntotal: 10,\nmaxPageLinks: 10,\nrowsPerPage: 1,\nrowsPerPageOptions: [ 1, 3, 5, 7 ]\n}).render();\n</code></pre>\nCheck the list of <a href=\"Paginator.html#configattributes\">Configuration Attributes</a> available for\nPaginator."}], "namespace": "", "module": "aui-paginator", "events": {"stateChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "stateChange", "description": "Fires when the value for the configuration attribute 'state' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "totalLabelChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "totalLabelChange", "description": "Fires when the value for the configuration attribute 'totalLabel' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "prevPageLinkChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "prevPageLinkChange", "description": "Fires when the value for the configuration attribute 'prevPageLink' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "firstPageLinkChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "firstPageLinkChange", "description": "Fires when the value for the configuration attribute 'firstPageLink' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "prevPageLinkLabelChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "prevPageLinkLabelChange", "description": "Fires when the value for the configuration attribute 'prevPageLinkLabel' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "templateChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "templateChange", "description": "Fires when the value for the configuration attribute 'template' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "rowsPerPageOptionsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "rowsPerPageOptionsChange", "description": "Fires when the value for the configuration attribute 'rowsPerPageOptions' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "totalChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "totalChange", "description": "Fires when the value for the configuration attribute 'total' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "firstPageLinkLabelChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "firstPageLinkLabelChange", "description": "Fires when the value for the configuration attribute 'firstPageLinkLabel' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "rowsPerPageElChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "rowsPerPageElChange", "description": "Fires when the value for the configuration attribute 'rowsPerPageEl' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "pageChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "pageChange", "description": "Fires when the value for the configuration attribute 'page' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "pageLinkContentChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "pageLinkContentChange", "description": "Fires when the value for the configuration attribute 'pageLinkContent' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "lastPageLinkLabelChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "lastPageLinkLabelChange", "description": "Fires when the value for the configuration attribute 'lastPageLinkLabel' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "rowsPerPageChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "rowsPerPageChange", "description": "Fires when the value for the configuration attribute 'rowsPerPage' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "nextPageLinkLabelChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "nextPageLinkLabelChange", "description": "Fires when the value for the configuration attribute 'nextPageLinkLabel' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "pageReportLabelTemplateChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "pageReportLabelTemplateChange", "description": "Fires when the value for the configuration attribute 'pageReportLabelTemplate' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "alwaysVisibleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "alwaysVisibleChange", "description": "Fires when the value for the configuration attribute 'alwaysVisible' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "totalPagesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "totalPagesChange", "description": "Fires when the value for the configuration attribute 'totalPages' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "maxPageLinksChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "maxPageLinksChange", "description": "Fires when the value for the configuration attribute 'maxPageLinks' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "totalElChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "totalElChange", "description": "Fires when the value for the configuration attribute 'totalEl' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "pageLinkTemplateChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "pageLinkTemplateChange", "description": "Fires when the value for the configuration attribute 'pageLinkTemplate' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "lastPageLinkChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "lastPageLinkChange", "description": "Fires when the value for the configuration attribute 'lastPageLink' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "containersChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "containersChange", "description": "Fires when the value for the configuration attribute 'containers' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "pageReportElChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "pageReportElChange", "description": "Fires when the value for the configuration attribute 'pageReportEl' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "nextPageLinkChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "nextPageLinkChange", "description": "Fires when the value for the configuration attribute 'nextPageLink' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "pageContainerTemplateChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "pageContainerTemplateChange", "description": "Fires when the value for the configuration attribute 'pageContainerTemplate' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "Paginator", "methods": {"_setTotal": {"return": {"type": "Number", "description": ""}, "description": "Setter for <a href=\"Paginator.html#config_total\">total</a>.", "param": "{Number} v", "protected": "", "params": [{"type": "Number", "name": "v", "description": ""}], "guessedname": "_setTotal", "guessedtype": "function"}, "_getState": {"return": {"type": "Object", "description": "State object."}, "description": "Private getter for <a href=\"Paginator.html#config_state\">state</a>.", "param": "{Object} v Current state object.", "protected": "", "params": [{"type": "Object", "name": "v", "description": " Current state object."}], "guessedname": "_getState", "guessedtype": "function"}, "_beforeSetState": {"description": "Fires before the value of the\n<a href=\"Paginator.html#config_state\">state</a> attribute change.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_beforeSetState", "guessedtype": "function"}, "setState": {"param": "{Object} v New state object.", "params": [{"type": "Object", "name": "v", "description": " New state object."}], "description": "Public setter for <a href=\"Paginator.html#config_state\">state</a>.", "guessedname": "setState", "guessedtype": "function"}, "_onClickPrevLinkEl": {"description": "Click event handler for the\n<a href=\"Paginator.html#config_prevLinkEl\">prevLinkEl</a>.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onClickPrevLinkEl", "guessedtype": "function"}, "hasNextPage": {"return": {"type": "boolean", "description": ""}, "description": "Check if there is a next page.", "guessedname": "hasNextPage", "guessedtype": "function"}, "_afterSetState": {"description": "Fires after the value of the\n<a href=\"Paginator.html#config_state\">state</a> attribute change.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_afterSetState", "guessedtype": "function"}, "_setState": {"return": {"type": "Object", "description": ""}, "description": "Private setter for <a href=\"Paginator.html#config_state\">state</a>.", "param": "{Object} v New state object.", "protected": "", "params": [{"type": "Object", "name": "v", "description": " New state object."}], "guessedname": "_setState", "guessedtype": "function"}, "destructor": {"protected": "", "description": "Descructor lifecycle implementation for the Paginator class.\nPurges events attached to the node (and all child nodes).", "guessedname": "destructor", "guessedtype": "function"}, "hasPrevPage": {"return": {"type": "boolean", "description": ""}, "description": "Check if there is a previous page.", "guessedname": "hasPrevPage", "guessedtype": "function"}, "changeRequest": {"description": "Fires <a href=\"Paginator.html#event_changeRequest\">changeRequest</a>\nevent. This is the most important event because it's responsible to\nupdate the UI, invoked <code>.setState(newState)</code> to update the\nUI.", "guessedname": "changeRequest", "guessedtype": "function"}, "_getTemplate": {"return": {"type": "String", "description": "Current template."}, "description": "Getter for <a href=\"Paginator.html#config_template\">template</a>.", "param": "{String} v Current template.", "protected": "", "params": [{"type": "String", "name": "v", "description": " Current template."}], "guessedname": "_getTemplate", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Bind the events on the Paginator UI. Lifecycle.", "guessedname": "bindUI", "guessedtype": "function"}, "_delegateDOM": {"protected": "", "description": "Delegate DOM events on the Paginator UI.", "guessedname": "_delegateDOM", "guessedtype": "function"}, "_renderTemplateUI": {"protected": "", "description": "Render the UI controls based on the\n<a href=\"Paginator.html#config_template\">template</a>.", "guessedname": "_renderTemplateUI", "guessedtype": "function"}, "_bindDOMEvents": {"protected": "", "description": "Bind DOM events on the Paginator UI.", "guessedname": "_bindDOMEvents", "guessedtype": "function"}, "hasPage": {"return": {"type": "boolean", "description": ""}, "description": "Check if the <code>page</code> exists.", "param": "{Number} page", "params": [{"type": "Number", "name": "page", "description": ""}], "guessedname": "hasPage", "guessedtype": "function"}, "eachContainer": {"param": "{function} fn Callback", "params": [{"type": "function", "name": "fn", "description": " Callback"}], "description": "Loop through all\n<a href=\"Paginator.html#config_containers\">containers</a> and execute the\npassed callback.", "guessedname": "eachContainer", "guessedtype": "function"}, "_onClickPageLinkEl": {"description": "Click event handler for the\n<a href=\"Paginator.html#config_pageLinkEl\">pageLinkEl</a>.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onClickPageLinkEl", "guessedtype": "function"}, "syncUI": {"protected": "", "description": "Sync the Paginator UI. Lifecycle.", "guessedname": "syncUI", "guessedtype": "function"}, "_onClickFirstLinkEl": {"description": "Click event handler for the\n<a href=\"Paginator.html#config_firstLinkEl\">firstLinkEl</a>.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onClickFirstLinkEl", "guessedtype": "function"}, "_renderRowsPerPageOptions": {"protected": "", "description": "Render rows per page options.", "guessedname": "_renderRowsPerPageOptions", "guessedtype": "function"}, "_onClickLastLinkEl": {"description": "Click event handler for the\n<a href=\"Paginator.html#config_lastLinkEl\">lastLinkEl</a>.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onClickLastLinkEl", "guessedtype": "function"}, "_syncPageLinksUI": {"protected": "", "description": "Sync the Paginator links UI.", "guessedname": "_syncPageLinksUI", "guessedtype": "function"}, "_onClickNextLinkEl": {"description": "Click event handler for the\n<a href=\"Paginator.html#config_nextLinkEl\">nextLinkEl</a>.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onClickNextLinkEl", "guessedtype": "function"}, "calculateRange": {"return": {"type": "Object", "description": "Object containing the start and end information."}, "description": "Create a range to display on the pageLinks, keep the current page on\ncenter.", "param": "{Type} name description", "params": [{"type": "Type", "name": "name", "description": " description"}], "guessedname": "calculateRange", "guessedtype": "function"}, "renderUI": {"protected": "", "description": "Create the DOM structure for the Paginator. Lifecycle.", "guessedname": "renderUI", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "aui-paginator.js", "guessedtype": "property", "shortname": "Paginator", "properties": {"Paginator.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}, "templatesCache": {"protected": "", "type": "String", "description": "Cached template after <a href=\"YUI.html#method_substitute\">YUI\nsubstitute</a> were applied.", "guessedname": "templatesCache", "guessedtype": "property"}, "Paginator.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the Paginator.", "guessedname": "ATTRS", "guessedtype": "property"}, "lastState": {"protected": "", "type": "Object | null", "description": "Store the last state object used on the <a href=\"Paginator.html#method_changeRequest\">changeRequest</a> event.", "guessedname": "lastState", "guessedtype": "property"}}, "description": "<p><img src=\"assets/images/aui-paginator/main.png\"/></p>\nA base class for Paginator, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Set of controls to navigate through paged data</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.Paginator({\ncontainers: '.paginatorA',\ntotal: 10,\nmaxPageLinks: 10,\nrowsPerPage: 1,\nrowsPerPageOptions: [ 1, 3, 5, 7 ]\n}).render();\n</code></pre>\nCheck the list of <a href=\"Paginator.html#configattributes\">Configuration Attributes</a> available for\nPaginator."}, "Dial": {"name": "Dial", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Configuration object"}], "description": "Create a dial to represent an input control capable of representing a\nseries of intermediate states based on the position of the Dial's handle.\nThese states are typically aligned to a value algorithm whereby the angle of the handle's\nposition corresponds to a given value."}], "namespace": "", "module": "dial", "events": {"handleDiameterChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "handleDiameterChange", "description": "Fires when the value for the configuration attribute 'handleDiameter' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "stringsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "stringsChange", "description": "Fires when the value for the configuration attribute 'strings' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "handleDistanceChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "handleDistanceChange", "description": "Fires when the value for the configuration attribute 'handleDistance' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "markerDiameterChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "markerDiameterChange", "description": "Fires when the value for the configuration attribute 'markerDiameter' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "minorStepChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "minorStepChange", "description": "Fires when the value for the configuration attribute 'minorStep' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "diameterChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "diameterChange", "description": "Fires when the value for the configuration attribute 'diameter' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "minChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "minChange", "description": "Fires when the value for the configuration attribute 'min' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "valueChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "valueChange", "description": "Fires when the value for the configuration attribute 'value' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "stepsPerRevolutionChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "stepsPerRevolutionChange", "description": "Fires when the value for the configuration attribute 'stepsPerRevolution' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "majorStepChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "majorStepChange", "description": "Fires when the value for the configuration attribute 'majorStep' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "maxChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "maxChange", "description": "Fires when the value for the configuration attribute 'max' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "centerButtonDiameterChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "centerButtonDiameterChange", "description": "Fires when the value for the configuration attribute 'centerButtonDiameter' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "decimalPlacesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "decimalPlacesChange", "description": "Fires when the value for the configuration attribute 'decimalPlaces' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "configs": {"minorStep": {"default": "1", "type": "{Number}", "description": "amount to increment/decrement the dial value\nwhen the arrow up/down/left/right keys are pressed", "guessedname": "minorStep", "guessedtype": "property"}, "diameter": {"description": "diameter of the circular background object.\nOther objects scale accordingly.\nSet this only before rendering.", "writeonce": "", "default": "100", "guessedname": "diameter", "guessedtype": "property", "type": "{Number} the number of px in diameter"}, "centerButtonDiameter": {"description": "diameter of the center button object.\nDial sets the pixel dimension of the centerButton equal to centerButtonDiameter * diameter.\nSet this only before rendering.", "writeonce": "", "default": "0.1", "guessedname": "centerButtonDiameter", "guessedtype": "property", "type": "{Number}"}, "min": {"default": "-220", "type": "{Number}", "description": "minimum value allowed", "guessedname": "min", "guessedtype": "property"}, "handleDistance": {"default": "0.75", "type": "{number}", "description": "distance from the center of the dial to the \ncenter of the marker and handle, when at rest. \nThe value is a percent of the radius of the dial.", "guessedname": "handleDistance", "guessedtype": "property"}, "max": {"default": "220", "type": "{Number}", "description": "maximum value allowed", "guessedname": "max", "guessedtype": "property"}, "markerDiameter": {"description": "diameter of the marker object which follows the angle of the handle during value changes.\nDial sets the pixel dimension of the marker equal to markerDiameter * diameter.\nSet this only before rendering.", "writeonce": "", "default": "0.1", "guessedname": "markerDiameter", "guessedtype": "property", "type": "{Number}"}, "value": {"default": "0", "type": "{Number}", "description": "initial value of the Dial", "guessedname": "value", "guessedtype": "property"}, "handleDiameter": {"description": "diameter of the handle object which users drag to change the value.\nDial sets the pixel dimension of the handle equal to handleDiameter * diameter.\nSet this only before rendering.", "writeonce": "", "default": "0.2", "guessedname": "handleDiameter", "guessedtype": "property", "type": "{Number}"}, "stepsPerRevolution": {"default": "100", "type": "{Number}", "description": "number of value increments in one 360 degree revolution \nof the handle around the dial", "guessedname": "stepsPerRevolution", "guessedtype": "property"}, "decimalPlaces": {"default": "0", "type": "{Number}", "description": "number of decimal places of accuracy in the value", "guessedname": "decimalPlaces", "guessedtype": "property"}, "majorStep": {"default": "10", "type": "{Number}", "description": "amount to increment/decrement the dial value\nwhen the page up/down keys are pressed", "guessedname": "majorStep", "guessedtype": "property"}, "strings": {"default": "{label: 'My label', resetStr: 'Reset', tooltipHandle: 'Drag to set value'}", "type": "{Object} the values are HTML strings", "description": "visible strings for the dial UI. This attribute is \ndefined by the base Widget class but has an empty value. The\nDial is simply providing a default value for the attribute.\nGets localized strings in the current language", "guessedname": "strings", "guessedtype": "property"}}, "methods": {"": {"return": {"type": "", "description": ""}, "param": "{String} string to be appended at the end of class name", "params": [{"type": "String", "name": "string", "description": " to be appended at the end of class name"}], "description": "returns a properly formed yui class name", "private": ""}, "_renderLabel": {"protected": "", "description": "renders the DOM object for the Dial's label", "guessedname": "_renderLabel", "guessedtype": "function"}, "_incrMajor": {"protected": "", "description": "increments Dial value by a major increment", "guessedname": "_incrMajor", "guessedtype": "function"}, "_setNodeToFixedRadius": {"return": {"type": "Array", "description": "an array of [XY] is optionally returned"}, "description": "returns the XY of the fixed position, handleDistance, from the center of the Dial (resting position).\nThe XY also represents the angle related to the current value.\nIf typeArray is true, [X,Y] is returned.\nIf typeArray is false, the XY of the obj node passed in is set.", "param": "obj {Node}", "protected": "", "params": [{"type": "Node", "name": "obj", "description": ""}, {"type": "Boolean", "name": "typeArray", "description": "  true returns an array [X,Y]"}], "guessedname": "_setNodeToFixedRadius", "guessedtype": "function"}, "_setBorderRadius": {"private": "", "description": "Sets -webkit-border-radius to 50% of width/height of the ring, handle, marker, and center-button.\nThis is needed for iOS 3.x.\nThe objects render square if the radius is > 50% of the width/height", "guessedname": "_setBorderRadius", "guessedtype": "function"}, "_renderMarker": {"protected": "", "description": "renders the DOM object for the Dial's background marker which \ntracks the angle of the user dragging the handle", "guessedname": "_renderMarker", "guessedtype": "function"}, "_incrMinor": {"protected": "", "description": "increments Dial value by a minor increment", "guessedname": "_incrMinor", "guessedtype": "function"}, "_renderCenterButton": {"protected": "", "description": "renders the DOM object for the Dial's center", "guessedname": "_renderCenterButton", "guessedtype": "function"}, "_handleDragEnd": {"protected": "", "description": "handles the end of a user dragging the handle, animates the handle returning to\nresting position.", "guessedname": "_handleDragEnd", "guessedtype": "function"}, "_handleDragStart": {"description": "handles the user starting to drag the handle around the Dial", "param": "e {DOMEvent} the drag event object", "protected": "", "params": [{"type": "DOMEvent", "name": "e", "description": "  the drag event object"}], "guessedname": "_handleDragStart", "guessedtype": "function"}, "_setLabelString": {"description": "sets the visible UI label HTML string", "deprecated": "Use DialObjName.set('strings',{'label':'My new label'});   before DialObjName.render();", "param": "str {HTML}", "protected": "", "params": [{"type": "HTML", "name": "str", "description": ""}], "guessedname": "_setLabelString", "guessedtype": "function"}, "_setTimesWrappedFromValue": {"description": "Sets _timesWrapped based on Dial value\nto net integer revolutions the user dragged the handle around the Dial", "param": "val {Number} current value of the Dial", "params": [{"type": "Number", "name": "val", "description": "  current value of the Dial"}], "private": "", "guessedname": "_setTimesWrappedFromValue", "guessedtype": "function"}, "_handleDrag": {"description": "handles the user dragging the handle around the Dial, calculates the angle, \nchecks for wrapping around top center", "param": "e {DOMEvent} the drag event object", "protected": "", "params": [{"type": "DOMEvent", "name": "e", "description": "  the drag event object"}], "guessedname": "_handleDrag", "guessedtype": "function"}, "_validateValue": {"description": "value attribute default validator. Verifies that\nthe value being set lies between the min/max value", "param": "val {Number} value of the Dial", "protected": "", "params": [{"type": "Number", "name": "val", "description": "  value of the Dial"}], "guessedname": "_validateValue", "guessedtype": "function"}, "_setToMin": {"protected": "", "description": "sets Dial value to dial's min attr", "guessedname": "_setToMin", "guessedtype": "function"}, "_setToMax": {"protected": "", "description": "sets Dial value to dial's max attr", "guessedname": "_setToMax", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Creates the Y.DD.Drag instance used for the handle movement and\nbinds Dial interaction to the configured value model.", "guessedname": "bindUI", "guessedtype": "function"}, "_decrMinor": {"protected": "", "description": "decrements Dial value by a minor increment", "guessedname": "_decrMinor", "guessedtype": "function"}, "_getNewValueFromMousedown": {"return": {"type": "number", "description": "newValue  the new value for the dial"}, "description": "gets the new value when mousedown or gesturemovestart on the ringNode", "param": "ang {number} angle where user clicked on the dial", "protected": "", "params": [{"type": "number", "name": "ang", "description": "  angle where user clicked on the dial"}], "guessedname": "_getNewValueFromMousedown", "guessedtype": "function"}, "_handleValuesBeyondMinMax": {"description": "handles the case where the value is less than min or greater than max", "param": "e {DOMEvent} the event object", "protected": "", "params": [{"type": "DOMEvent", "name": "e", "description": "  the event object"}, {"type": "number", "name": "newValue", "description": "  current value of the dial"}], "guessedname": "_handleValuesBeyondMinMax", "guessedtype": "function"}, "_onDirectionKey": {"description": "sets the Dial's value in response to key events.\nLeft and right keys are in a separate method \nin case an implementation wants to increment values\nbut needs left and right arrow keys for other purposes.", "param": "e {Event} the key event", "protected": "", "params": [{"type": "Event", "name": "e", "description": "  the key event"}], "guessedname": "_onDirectionKey", "guessedtype": "function"}, "_setSizes": {"protected": "", "description": "sets the sizes of ring, center-button, marker, handle, and VML ovals in pixels.\nNeeded only because some IE versions \nignore CSS percent sizes/offsets.\nso these must be set in pixels.\nNormally these are set in % of the ring.", "guessedname": "_setSizes", "guessedtype": "function"}, "_resetDial": {"protected": "", "description": "resets Dial value to the orignal initial value.", "guessedname": "_resetDial", "guessedtype": "function"}, "_onLeftRightKey": {"description": "sets the Dial's value in response to left or right key events", "param": "e {Event} the key event", "protected": "", "params": [{"type": "Event", "name": "e", "description": "  the key event"}], "guessedname": "_onLeftRightKey", "guessedtype": "function"}, "_getAngleFromValue": {"return": {"type": "Number", "description": "the angle associated with the current Dial value"}, "description": "returns the handle angle associated with the current value of the Dial. \nReturns a number between 0 and 360.", "param": "newVal {Number} the current value of the Dial", "protected": "", "params": [{"type": "Number", "name": "newVal", "description": "  the current value of the Dial"}], "guessedname": "_getAngleFromValue", "guessedtype": "function"}, "_renderHandle": {"protected": "", "description": "renders the DOM object for the Dial's user draggable handle", "guessedname": "_renderHandle", "guessedtype": "function"}, "_uiSetValue": {"description": "Updates the UI display value of the Dial to reflect \nthe value passed in.\nMakes all other needed UI display changes", "param": "val {Number} value of the Dial", "protected": "", "params": [{"type": "Number", "name": "val", "description": "  value of the Dial"}], "guessedname": "_uiSetValue", "guessedtype": "function"}, "syncUI": {"description": "Synchronizes the DOM state with the attribute settings.", "guessedname": "syncUI", "guessedtype": "function"}, "_decrMajor": {"protected": "", "description": "decrements Dial value by a major increment", "guessedname": "_decrMajor", "guessedtype": "function"}, "_afterValueChange": {"description": "calls the method to update the UI whenever the Dial value changes", "param": "e {Event}", "protected": "", "params": [{"type": "Event", "name": "e", "description": ""}], "guessedname": "_afterValueChange", "guessedtype": "function"}, "_setTooltipString": {"description": "sets the tooltip HTML string in the Dial's handle", "deprecated": "Use DialObjName.set('strings',{'tooltipHandle':'My new tooltip'});   before DialObjName.render();", "param": "str {HTML}", "protected": "", "params": [{"type": "HTML", "name": "str", "description": ""}], "guessedname": "_setTooltipString", "guessedtype": "function"}, "_renderRing": {"protected": "", "description": "renders the DOM object for the Dial's background ring", "guessedname": "_renderRing", "guessedtype": "function"}, "renderUI": {"protected": "", "description": "creates the DOM structure for the Dial.", "guessedname": "renderUI", "guessedtype": "function"}, "_valueToDecimalPlaces": {"return": {"type": "Number", "description": "the input val changed to have the correct decimal places"}, "description": "Changes a value to have the correct decimal places per the attribute decimalPlaces", "param": "val {Number} a raw value to set to the Dial", "protected": "", "params": [{"type": "Number", "name": "val", "description": "  a raw value to set to the Dial"}], "guessedname": "_valueToDecimalPlaces", "guessedtype": "function"}, "_setResetString": {"description": "sets the visible UI label HTML string", "deprecated": "Use DialObjName.set('strings',{'resetStr':'My new reset string'});   before DialObjName.render();", "param": "str {HTML}", "protected": "", "params": [{"type": "HTML", "name": "str", "description": ""}], "guessedname": "_setResetString", "guessedtype": "function"}, "_getValueFromAngle": {"return": {"type": "Number", "description": "the current Dial value corresponding to the handle position"}, "description": "returns the value of the Dial calculated from the current handle angle", "param": "angle {Number} the current angle of the Dial's handle", "protected": "", "params": [{"type": "Number", "name": "angle", "description": "  the current angle of the Dial's handle"}], "guessedname": "_getValueFromAngle", "guessedtype": "function"}}, "extends": "Widget", "superclass": "Widget", "file": "dial.js", "shortname": "Dial", "properties": {"LABEL_TEMPLATE": {"description": "template that will contain the Dial's label.", "default": "&lt;div id=\"' + labelId + '\" class=\"[...-label]\">&lt;span class=\"[...-label-string]\">{label}&lt;/span>&lt;span class=\"[...-value-string]\">&lt;/span>&lt;/div>", "protected": "", "guessedname": "LABEL_TEMPLATE", "guessedtype": "property", "type": "{HTML}"}, "CENTER_BUTTON_TEMPLATE": {"description": "template that will contain the Dial's center button.", "default": "&lt;div class=\"[...-centerButton]\">&lt;div class=\"[...-resetString]\">' + Y.substitute('{resetStr}', Dial.ATTRS.strings.value) + '&lt;/div>&lt;/div>", "protected": "", "guessedname": "CENTER_BUTTON_TEMPLATE", "guessedtype": "property", "type": "{HTML}"}, "HANDLE_TEMPLATE": {"description": "template that will contain the Dial's handle.", "default": "&lt;div class=\"[...-handle]\">&lt;div class=\"[...-handleUser]\" aria-labelledby=\"' + labelId + '\" aria-valuetext=\"\" aria-valuemax=\"\" aria-valuemin=\"\" aria-valuenow=\"\" role=\"slider\"  tabindex=\"0\">&lt;/div>&lt;/div>';// title=\"{tooltipHandle}\"", "protected": "", "guessedname": "HANDLE_TEMPLATE", "guessedtype": "property", "type": "{HTML}"}, "MARKER_TEMPLATE": {"description": "template that will contain the Dial's current angle marker.", "default": "&lt;div class=\"[...-marker] [...-marker-hidden]\">&lt;div class=\"[...-markerUser]\">&lt;/div>&lt;/div>", "protected": "", "guessedname": "MARKER_TEMPLATE", "guessedtype": "property", "type": "{HTML}"}, "RING_TEMPLATE": {"description": "template that will contain the Dial's background ring.", "default": "&lt;div class=\"[...-ring]\">&lt;div class=\"[...-northMark]\">&lt;/div>&lt;/div>", "protected": "", "guessedname": "RING_TEMPLATE", "guessedtype": "property", "type": "{HTML}"}, "ATTRS": {"description": "Static property used to define the default attribute configuration of\nthe Widget.", "protected": "", "static": "", "guessedname": "ATTRS", "guessedtype": "property", "type": "{Object}"}, "CSS_CLASSES": {"description": "array of static constants used to identify the classname applied to the Dial DOM objects", "private": "", "static": "", "guessedname": "CSS_CLASSES", "guessedtype": "property", "type": "{Array}"}, "NAME": {"description": "The identity of the widget.", "default": "'dial'", "readonly": "", "protected": "", "static": "", "guessedname": "NAME", "guessedtype": "property", "type": "String"}}, "description": "Create a dial to represent an input control capable of representing a\nseries of intermediate states based on the position of the Dial's handle.\nThese states are typically aligned to a value algorithm whereby the angle of the handle's\nposition corresponds to a given value."}, "Textboxlist": {"name": "Textboxlist", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "A base class for Textboxlist, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Text box list</li>\n</ul>\nCheck the list of <a href=\"Textboxlist.html#configattributes\">Configuration Attributes</a> available for\nTextboxlist."}], "namespace": "", "module": "aui-textboxlist", "guessedname": "TextboxList", "methods": {"bindUI": {"protected": "", "description": "Bind the events on the Textboxlist UI. Lifecycle.", "guessedname": "bindUI", "guessedtype": "function"}, "renderUI": {"protected": "", "description": "Create the DOM structure for the Textboxlist. Lifecycle.", "guessedname": "renderUI", "guessedtype": "function"}, "initializer": {"protected": "", "description": "Construction logic executed during Textboxlist instantiation. Lifecycle.", "guessedname": "initializer", "guessedtype": "function"}}, "extends": "AutoComplete", "superclass": "AutoComplete", "file": "aui-textboxlist.js", "guessedtype": "property", "shortname": "Textboxlist", "properties": {"Textboxlist.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the Textboxlist.", "guessedname": "ATTRS", "guessedtype": "property"}, "Textboxlist.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}}, "description": "A base class for Textboxlist, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Text box list</li>\n</ul>\nCheck the list of <a href=\"Textboxlist.html#configattributes\">Configuration Attributes</a> available for\nTextboxlist."}, "NodeList": {"name": "NodeList", "configs": {"text": {"type": "String", "description": "Allows for getting and setting the text of an element.\nFormatting is preserved and special characters are treated literally.", "guessedname": "text", "guessedtype": "property"}, "children": {"readonly": "", "type": "NodeList", "description": "Returns a NodeList instance of all HTMLElement children."}, "for": {"type": "String", "description": "Allows for getting and setting the text of an element.\nFormatting is preserved and special characters are treated literally."}}, "description": "The NodeList class provides a wrapper for manipulating DOM NodeLists.\nNodeList properties can be accessed via the set/get methods.\nUse Y.all() to retrieve NodeList instances.", "constructors": [{"description": "The NodeList class provides a wrapper for manipulating DOM NodeLists.\nNodeList properties can be accessed via the set/get methods.\nUse Y.all() to retrieve NodeList instances."}], "namespace": "", "module": "node", "guessedname": "NodeList", "file": "node-core.js", "guessedtype": "function", "shortname": "NodeList", "properties": {"_nodes": {"private": "", "description": "The underlying array of DOM nodes bound to the Y.NodeList instance", "guessedname": "_nodes", "guessedtype": "property"}, "ATTRS": {"type": "object", "static": "", "description": "Static collection of configuration attributes for special handling", "guessedname": "ATTRS", "guessedtype": "property"}}, "methods": {"appendChild": {"see": "Node.appendChild", "description": "Called on each Node instance"}, "set": {"see": "Node.set", "description": "Called on each Node instance"}, "getComputedStyle": {"return": {"type": "Array", "description": "The computed values for each node."}, "see": "Node.getComputedStyle", "params": [{"type": "String", "name": "attr", "description": " The style attribute to retrieve."}], "description": "Returns an array of the computed value for each node.", "param": "{String} attr The style attribute to retrieve."}, "removeAttribute": {"see": "Node", "params": [{"type": "string", "name": "name", "description": " The attribute to remove"}], "description": "Allows for removing attributes on DOM nodes.\nThis passes through to the DOM node, allowing for custom attributes.", "param": "{string} name The attribute to remove"}, "getAttribute": {"return": {"type": "string", "description": "The attribute value"}, "see": "Node", "params": [{"type": "string", "name": "name", "description": " The attribute name"}], "description": "Allows getting attributes on DOM nodes, normalizing in some cases.\nThis passes through to the DOM node, allowing for custom attributes.", "param": "{string} name The attribute name"}, "replaceClass": {"see": "Node.replaceClass", "params": [{"type": "String", "name": "oldClassName", "description": " the class name to be replaced"}, {"type": "String", "name": "newClassName", "description": " the class name that will be replacing the old class name"}], "chainable": "", "param": "{String} oldClassName the class name to be replaced", "description": "Replace a class with another class for each node.\nIf no oldClassName is present, the newClassName is simply added."}, "some": {"return": {"type": "Boolean", "description": "Whether or not the function returned true for any node."}, "description": "Executes the function once for each node until a true value is returned.", "param": "{Function} fn The function to apply. It receives 3 arguments:\nthe current node instance, the node's index, and the NodeList instance", "params": [{"type": "Function", "name": "fn", "description": " The function to apply. It receives 3 arguments:\nthe current node instance, the node's index, and the NodeList instance"}, {"type": "Object", "name": "context", "description": " optional An optional context to execute the function from.\nDefault context is the current Node instance"}], "guessedname": "some", "guessedtype": "function"}, "pop": {"return": {"type": "Node", "description": "The last item in the NodeList."}, "description": "Removes the first last from the NodeList and returns it."}, "setStyle": {"see": "Node.setStyle", "params": [{"type": "String", "name": "attr", "description": " The style attribute to set."}, {"type": "String|Number", "name": "val", "description": " The value."}], "chainable": "", "param": "{String} attr The style attribute to set.", "description": "Sets a style property on each node."}, "remove": {"see": "Node.remove", "description": "Called on each Node instance"}, "wrap": {"chainable": "", "params": [{"type": "String", "name": "html", "description": " The markup to wrap around the node."}], "description": "Wraps the given HTML around each node.", "param": "{String} html The markup to wrap around the node."}, "setStyles": {"see": "Node.setStyles", "params": [{"type": "Object", "name": "hash", "description": " An object literal of property:value pairs."}], "chainable": "", "param": "{Object} hash An object literal of property:value pairs.", "description": "Sets multiple style properties on each node."}, "odd": {"return": {"type": "NodeList", "description": "NodeList containing the updated collection"}, "description": "Creates a new NodeList containing all nodes at odd indices\n(zero-based index).", "guessedname": "odd", "guessedtype": "function"}, "setContent": {"see": "Node.setContent", "description": "Called on each Node instance"}, "append": {"see": "Node.append", "description": "Called on each Node instance"}, "size": {"return": {"type": "Int", "description": "The number of items in the NodeList."}, "description": "Returns the current number of items in the NodeList.", "guessedname": "size", "guessedtype": "function"}, "even": {"return": {"type": "NodeList", "description": "NodeList containing the updated collection"}, "description": "Creates a new NodeList containing all nodes at even indices\n(zero-based index), including zero.", "guessedname": "even", "guessedtype": "function"}, "slice": {"return": {"type": "NodeList", "description": "A new NodeList comprised of this NodeList joined with the input."}, "params": [{"type": "Number", "name": "begin", "description": " Zero-based index at which to begin extraction.\nAs a negative index, start indicates an offset from the end of the sequence. slice(-2) extracts the second-to-last element and the last element in the sequence."}, {"type": "Number", "name": "end", "description": " Zero-based index at which to end extraction. slice extracts up to but not including end.\nslice(1,4) extracts the second element through the fourth element (elements indexed 1, 2, and 3).\nAs a negative index, end indicates an offset from the end of the sequence. slice(2,-1) extracts the third element through the second-to-last element in the sequence.\nIf end is omitted, slice extracts to the end of the sequence."}], "description": "Returns a new NodeList comprising the Nodes in the given range.", "param": "{Number} begin Zero-based index at which to begin extraction.\nAs a negative index, start indicates an offset from the end of the sequence. slice(-2) extracts the second-to-last element and the last element in the sequence."}, "hide": {"chainable": "", "params": [{"type": "String", "name": "name", "description": " A named Transition effect to use as the show effect."}, {"type": "Object", "name": "config", "description": " Options to use with the transition."}, {"type": "Function", "name": "callback", "description": " An optional function to run after the transition completes."}], "description": "Hides each node.\nIf the \"transition\" module is loaded, hide optionally\nanimates the hiding of the node using either the default\ntransition effect ('fadeOut'), or the given named effect.", "param": "{String} name A named Transition effect to use as the show effect."}, "toFrag": {"return": {"type": "", "description": "Node a Node instance bound to the documentFragment"}, "description": "Creates a documenFragment from the nodes bound to the NodeList instance", "guessedname": "toFrag", "guessedtype": "function"}, "unwrap": {"chainable": "", "description": "Removes the parent node from node in the list."}, "generateID": {"return": {"type": "String", "description": "The existing or generated ID"}, "description": "Applies a unique ID to each node if none exists"}, "prepend": {"see": "Node.prepend", "description": "Called on each Node instance"}, "isEmpty": {"return": {"type": "Boolean", "description": "Whether or not the NodeList is bound to any nodes"}, "description": "Determines if the instance is bound to any nodes", "guessedname": "isEmpty", "guessedtype": "function"}, "toggleClass": {"see": "Node.toggleClass", "params": [{"type": "String", "name": "className", "description": " the class name to be toggled"}], "chainable": "", "param": "{String} className the class name to be toggled", "description": "If the className exists on the node it is removed, if it doesn't exist it is added."}, "show": {"chainable": "", "params": [{"type": "String", "name": "name", "description": " A named Transition effect to use as the show effect."}, {"type": "Object", "name": "config", "description": " Options to use with the transition."}, {"type": "Function", "name": "callback", "description": " An optional function to run after the transition completes."}], "description": "Makes each node visible.\nIf the \"transition\" module is loaded, show optionally\nanimates the showing of the node using either the default\ntransition effect ('fadeIn'), or the given named effect.", "param": "{String} name A named Transition effect to use as the show effect."}, "destroy": {"see": "Node.destroy", "description": "Called on each Node instance"}, "modulus": {"return": {"type": "NodeList", "description": "NodeList containing the updated collection"}, "description": "Creates a new NodeList containing all nodes at every n indices, where\nremainder n % index equals r.\n(zero-based index).", "param": "{Int} n The offset to use (return every nth node)", "params": [{"type": "Int", "name": "n", "description": " The offset to use (return every nth node)"}, {"type": "Int", "name": "r", "description": " An optional remainder to use with the modulus operation (defaults to zero)"}], "guessedname": "modulus", "guessedtype": "function"}, "empty": {"see": "Node.empty", "description": "Called on each Node instance"}, "addClass": {"see": "Node.addClass", "params": [{"type": "String", "name": "className", "description": " the class name to add to the node's class attribute"}], "chainable": "", "param": "{String} className the class name to add to the node's class attribute", "description": "Adds a class name to each node."}, "removeClass": {"see": "Node.removeClass", "params": [{"type": "String", "name": "className", "description": " the class name to remove from the node's class attribute"}], "chainable": "", "param": "{String} className the class name to remove from the node's class attribute", "description": "Removes a class name from each node."}, "insertBefore": {"see": "Node.insertBefore", "description": "Called on each Node instance"}, "get": {"see": "Node", "description": "Called on each Node instance", "guessedname": "get", "guessedtype": "function"}, "indexOf": {"return": {"type": "Int", "description": "the index of the node value or -1 if not found"}, "description": "Returns the index of the node in the NodeList instance\nor -1 if the node isn't found.", "param": "{Y.Node || DOMNode} node the node to search for", "params": [{"type": "Y.Node || DOMNode", "name": "node", "description": " the node to search for"}], "guessedname": "indexOf", "guessedtype": "function"}, "after": {"return": {"type": "Object", "description": "Returns an event handle that can later be use to detach()."}, "description": "Applies an event listener to each Node bound to the NodeList.\nThe handler is called only after all on() handlers are called\nand the event is not prevented.", "param": "{String} type The event being listened for", "see": "Event.on", "params": [{"type": "String", "name": "type", "description": " The event being listened for"}, {"type": "Function", "name": "fn", "description": " The handler to call when the event fires"}, {"type": "Object", "name": "context", "description": " The context to call the handler with.\nDefault is the NodeList instance."}], "guessedname": "after", "guessedtype": "function"}, "hasClass": {"return": {"type": "Array", "description": "An array of booleans for each node bound to the NodeList."}, "see": "Node.hasClass", "params": [{"type": "String", "name": "className", "description": " the class name to search for"}], "description": "Determines whether each node has the given className.", "param": "{String} className the class name to search for"}, "getStyle": {"return": {"type": "Array", "description": "The current values of the style property for the element."}, "see": "Node.getStyle", "params": [{"type": "String", "name": "attr", "description": " The style attribute to retrieve."}], "description": "Returns an array of values for each node.", "param": "{String} attr The style attribute to retrieve."}, "onceAfter": {"return": {"type": "Object", "description": "Returns an event handle that can later be use to detach()."}, "description": "Applies an one-time event listener to each Node bound to the NodeList\nthat will be called only after all on() handlers are called and the\nevent is not prevented.", "param": "{String} type The event being listened for", "see": "Event.on", "params": [{"type": "String", "name": "type", "description": " The event being listened for"}, {"type": "Function", "name": "fn", "description": " The handler to call when the event fires"}, {"type": "Object", "name": "context", "description": " The context to call the handler with.\nDefault is the NodeList instance."}], "guessedname": "onceAfter", "guessedtype": "function"}, "splice": {"return": {"type": "NodeList", "description": "The element(s) removed."}, "params": [{"type": "Number", "name": "index", "description": " Index at which to start changing the array. If negative, will begin that many elements from the end."}, {"type": "Number", "name": "howMany", "description": " An integer indicating the number of old array elements to remove. If howMany is 0, no elements are removed. In this case, you should specify at least one new element. If no howMany parameter is specified (second syntax above, which is a SpiderMonkey extension), all elements after index are removed.\n{Node | DOMNode| element1, ..., elementN\nThe elements to add to the array. If you don't specify any elements, splice simply removes elements from the array."}], "description": "Changes the content of the NodeList, adding new elements while removing old elements.", "param": "{Number} index Index at which to start changing the array. If negative, will begin that many elements from the end."}, "insert": {"see": "Node.insert", "description": "Called on each Node instance"}, "unshift": {"params": [{"type": "Node | DOMNode", "name": "nodes", "description": " One or more nodes to add to the NodeList."}], "description": "Adds the given Node(s) to the beginning of the NodeList.", "param": "{Node | DOMNode} nodes One or more nodes to add to the NodeList."}, "detach": {"see": "Node.detach", "description": "Called on each Node instance"}, "getDOMNodes": {"return": {"type": "Array", "description": "The array of DOM nodes bound to the NodeList"}, "description": "Retrieves the DOM nodes bound to a NodeList instance", "param": "{Y.NodeList} nodelist The NodeList instance", "static": "", "guessedname": "getDOMNodes", "guessedtype": "function", "params": [{"type": "Y.NodeList", "name": "nodelist", "description": " The NodeList instance"}]}, "concat": {"return": {"type": "NodeList", "description": "A new NodeList comprised of this NodeList joined with the input."}, "params": [{"type": "NodeList | Array", "name": "valueN", "description": " Arrays/NodeLists and/or values to\nconcatenate to the resulting NodeList"}], "description": "Returns a new NodeList combining the given NodeList(s)", "param": "{NodeList | Array} valueN Arrays/NodeLists and/or values to\nconcatenate to the resulting NodeList"}, "on": {"return": {"type": "Object", "description": "Returns an event handle that can later be use to detach()."}, "description": "Applies an event listener to each Node bound to the NodeList.", "param": "{String} type The event being listened for", "see": "Event.on", "params": [{"type": "String", "name": "type", "description": " The event being listened for"}, {"type": "Function", "name": "fn", "description": " The handler to call when the event fires"}, {"type": "Object", "name": "context", "description": " The context to call the handler with.\nDefault is the NodeList instance."}, {"type": "Object} context The context to call the handler with.\nparam {mixed", "name": "arg*", "description": " 0..n additional arguments to supply to the subscriber\nwhen the event fires."}], "guessedname": "on", "guessedtype": "function"}, "shift": {"return": {"type": "Node", "description": "The first item in the NodeList."}, "description": "Removes the first item from the NodeList and returns it."}, "transition": {"description": "Animate one or more css properties to a given value. Requires the \"transition\" module.\n<pre>example usage:\nY.all('.demo').transition({\nduration: 1, // in seconds, default is 0.5\neasing: 'ease-out', // default is 'ease'\ndelay: '1', // delay start for 1 second, default is 0\nheight: '10px',\nwidth: '10px',\nopacity: { // per property\nvalue: 0,\nduration: 2,\ndelay: 2,\neasing: 'ease-in'\n}\n});\n</pre>", "chainable": "", "param": "{Object} config An object containing one or more style properties, a duration and an easing.", "params": [{"type": "Object", "name": "config", "description": " An object containing one or more style properties, a duration and an easing."}, {"type": "Function", "name": "callback", "description": " A function to run after the transition has completed. The callback fires\nonce per item in the NodeList."}], "guessedname": "transition", "guessedtype": "function"}, "setAttribute": {"chainable": "", "param": "{string} name The attribute name", "params": [{"type": "string", "name": "name", "description": " The attribute name"}, {"type": "string", "name": "value", "description": " The value to set"}], "description": "Allows setting attributes on DOM nodes, normalizing in some cases.\nThis passes through to the DOM node, allowing for custom attributes.", "see": "Node"}, "refresh": {"chainable": "", "description": "Reruns the initial query, when created using a selector query", "guessedname": "refresh", "guessedtype": "function"}, "detachAll": {"see": "Node.detachAll", "description": "Called on each Node instance"}, "filter": {"return": {"type": "NodeList", "description": "NodeList containing the updated collection"}, "description": "Filters the NodeList instance down to only nodes matching the given selector.", "param": "{String} selector The selector to filter against", "see": "Selector", "params": [{"type": "String", "name": "selector", "description": " The selector to filter against"}], "guessedname": "filter", "guessedtype": "function"}, "item": {"return": {"type": "Node", "description": "The Node instance at the given index."}, "description": "Retrieves the Node instance at the given index.", "param": "{Number} index The index of the target Node.", "params": [{"type": "Number", "name": "index", "description": " The index of the target Node."}], "guessedname": "item", "guessedtype": "function"}, "each": {"description": "Applies the given function to each Node in the NodeList.", "chainable": "", "param": "{Function} fn The function to apply. It receives 3 arguments:\nthe current node instance, the node's index, and the NodeList instance", "params": [{"type": "Function", "name": "fn", "description": " The function to apply. It receives 3 arguments:\nthe current node instance, the node's index, and the NodeList instance"}, {"type": "Object", "name": "context", "description": " optional An optional context to apply the function with\nDefault context is the current Node instance"}], "guessedname": "each", "guessedtype": "function"}, "push": {"params": [{"type": "Node | DOMNode", "name": "nodes", "description": " One or more nodes to add to the end of the NodeList."}], "description": "Adds the given Node(s) to the end of the NodeList.", "param": "{Node | DOMNode} nodes One or more nodes to add to the NodeList."}, "getContent": {"see": "Node.getContent", "description": "Called on each Node instance"}, "once": {"return": {"type": "Object", "description": "Returns an event handle that can later be use to detach()."}, "description": "Applies an one-time event listener to each Node bound to the NodeList.", "param": "{String} type The event being listened for", "see": "Event.on", "params": [{"type": "String", "name": "type", "description": " The event being listened for"}, {"type": "Function", "name": "fn", "description": " The handler to call when the event fires"}, {"type": "Object", "name": "context", "description": " The context to call the handler with.\nDefault is the NodeList instance."}], "guessedname": "once", "guessedtype": "function"}}}, "AxisType": {"name": "AxisType", "configs": {"setMin": {"type": "Boolean", "description": "Determines whether the minimum is calculated or explicitly\nset by the user.", "guessedname": "setMin", "guessedtype": "property"}, "labelFunction": {"type": "Function", "description": "Method used for formatting a label. This attribute allows for the default label formatting method to overridden. The method use would need\nto implement the arguments below and return a `String`.\n<dl>\n<dt>val</dt><dd>Label to be formatted. (`String`)</dd>\n<dt>format</dt><dd>Template for formatting label. (optional)</dd>\n</dl>", "guessedname": "labelFunction", "guessedtype": "property"}, "keys": {"type": "Object", "description": "Hash of array identifed by a string value.", "guessedname": "keys", "guessedtype": "property"}, "dataMaximum": {"type": "Number", "description": "The maximum value contained in the `data` array. Used for\n`maximum` when `autoMax` is true.", "guessedname": "dataMaximum", "guessedtype": "property"}, "setMax": {"type": "Boolean", "description": "Determines whether the maximum is calculated or explicitly \nset by the user.", "guessedname": "setMax", "guessedtype": "property"}, "maximum": {"type": "Number", "description": "The maximum value that will appear on an axis.", "guessedname": "maximum", "guessedtype": "property"}, "data": {"type": "Array", "description": "Array of axis data", "guessedname": "data", "guessedtype": "property"}, "keyCollection": {"type": "Array", "description": "Array containing all the keys in the axis.", "guessedname": "keyCollection", "guessedtype": "property"}, "minimum": {"type": "Number", "description": "The minimum value that will appear on an axis.", "guessedname": "minimum", "guessedtype": "property"}, "roundingMethod": {"default": "niceNumber", "type": "String", "description": "Indicates how to round unit values.\n<dl>\n<dt>niceNumber</dt><dd>Units will be smoothed based on the number of ticks and data range.</dd>\n<dt>auto</dt><dd>If the range is greater than 1, the units will be rounded.</dd>\n<dt>numeric value</dt><dd>Units will be equal to the numeric value.</dd>\n<dt>null</dt><dd>No rounding will occur.</dd>\n</dl>", "guessedname": "roundingMethod", "guessedtype": "property"}, "dataMinimum": {"type": "Number", "description": "The minimum value contained in the `data` array. Used for\n`minimum` when `autoMin` is true.", "guessedname": "dataMinimum", "guessedtype": "property"}, "dataProvider": {"type": "Array", "description": "Instance of `ChartDataProvider` that the class uses\nto build its own data.", "guessedname": "dataProvider", "guessedtype": "property"}, "type": {"type": "String", "description": "Returns the type of axis data\n<dl>\n<dt>time</dt><dd>Manages time data</dd>\n<dt>stacked</dt><dd>Manages stacked numeric data</dd>      \n<dt>numeric</dt><dd>Manages numeric data</dd>\n<dt>category</dt><dd>Manages categorical data</dd>\n</dl>", "guessedname": "type", "guessedtype": "property"}}, "constructors": [{"description": "AxisType is an abstract class that manages the data for an axis."}], "namespace": "", "module": "charts", "events": {"keysChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "keysChange", "description": "Fires when the value for the configuration attribute 'keys' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "dataMaximumChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "dataMaximumChange", "description": "Fires when the value for the configuration attribute 'dataMaximum' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "setMinChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "setMinChange", "description": "Fires when the value for the configuration attribute 'setMin' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "dataChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "dataChange", "description": "Fires when the value for the configuration attribute 'data' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "dataMinimumChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "dataMinimumChange", "description": "Fires when the value for the configuration attribute 'dataMinimum' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "labelFunctionChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "labelFunctionChange", "description": "Fires when the value for the configuration attribute 'labelFunction' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "setMaxChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "setMaxChange", "description": "Fires when the value for the configuration attribute 'setMax' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "maximumChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "maximumChange", "description": "Fires when the value for the configuration attribute 'maximum' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "keyCollectionChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "keyCollectionChange", "description": "Fires when the value for the configuration attribute 'keyCollection' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "minimumChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "minimumChange", "description": "Fires when the value for the configuration attribute 'minimum' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "typeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "typeChange", "description": "Fires when the value for the configuration attribute 'type' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "dataProviderChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "dataProviderChange", "description": "Fires when the value for the configuration attribute 'dataProvider' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "roundingMethodChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "roundingMethodChange", "description": "Fires when the value for the configuration attribute 'roundingMethod' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "AxisType", "methods": {"getMajorUnitDistance": {"return": {"type": "", "description": "Number"}, "description": "Returns the distance between major units on an axis.", "param": "{Number} len Number of ticks", "params": [{"type": "Number", "name": "len", "description": " Number of ticks"}, {"type": "Number", "name": "uiLen", "description": " Size of the axis."}, {"type": "Object", "name": "majorUnit", "description": " Hash of properties used to determine the majorUnit"}], "guessedname": "getMajorUnitDistance", "guessedtype": "function"}, "removeKey": {"param": "{String} value Indicates what key to use in removing from \nthe hash.", "params": [{"type": "String", "name": "value", "description": " Indicates what key to use in removing from \nthe hash."}], "description": "Removes an array from the key hash.", "guessedname": "removeKey", "guessedtype": "function"}, "_keyChangeHandler": {"description": "Updates the `Axis` after a change in keys.", "param": "{Object} e Event object.", "params": [{"type": "Object", "name": "e", "description": " Event object."}], "private": "", "guessedname": "_keyChangeHandler", "guessedtype": "function"}, "getEdgeOffset": {"return": {"type": "", "description": "Number"}, "description": "Gets the distance that the first and last ticks are offset from there respective\nedges.", "param": "{Number} ct Number of ticks on the axis.", "params": [{"type": "Number", "name": "ct", "description": " Number of ticks on the axis."}, {"type": "Number", "name": "l", "description": " Length (in pixels) of the axis."}], "guessedname": "getEdgeOffset", "guessedtype": "function"}, "getLabelByIndex": {"return": {"type": "", "description": "String"}, "description": "Calculates and returns a value based on the number of labels and the index of\nthe current label.", "param": "{Number} i Index of the label.", "params": [{"type": "Number", "name": "i", "description": " Index of the label."}, {"type": "Number", "name": "l", "description": " Total number of labels."}], "guessedname": "getLabelByIndex", "guessedtype": "function"}, "getKeyValueAt": {"return": {"type": "", "description": "Object"}, "description": "Returns a value based of a key value and an index.", "param": "{String} key value used to look up the correct array", "params": [{"type": "String", "name": "key", "description": " value used to look up the correct array"}, {"type": "Number", "name": "index", "description": " within the array"}], "guessedname": "getKeyValueAt", "guessedtype": "function"}, "getTotalMajorUnits": {"return": {"type": "", "description": "Number"}, "description": "Returns the total number of majorUnits that will appear on an axis.", "guessedname": "getTotalMajorUnits", "guessedtype": "function"}, "_dataProviderChangeHandler": {"description": "Handles changes to `dataProvider`.", "param": "{Object} e Event object.", "params": [{"type": "Object", "name": "e", "description": " Event object."}], "private": "", "guessedname": "_dataProviderChangeHandler", "guessedtype": "function"}, "getDataByKey": {"return": {"type": "", "description": "Object"}, "description": "Returns an array of values based on an identifier key.", "param": "{String} value value used to identify the array", "params": [{"type": "String", "name": "value", "description": " value used to identify the array"}], "guessedname": "getDataByKey", "guessedtype": "function"}, "_getKeyArray": {"return": {"type": "", "description": "Array"}, "description": "Gets an array of values based on a key.", "private": "", "params": [{"type": "String", "name": "key", "description": " Value key associated with the data array."}, {"type": "Array", "name": "data", "description": " Array in which the data resides."}], "param": "{String} key Value key associated with the data array.", "guessedname": "_getKeyArray", "guessedtype": "function"}, "addKey": {"param": "value Indicates what key to use in retrieving\nthe array.", "params": [{"type": "", "name": "value", "description": " Indicates what key to use in retrieving\nthe array."}], "description": "Adds an array to the key hash.", "guessedname": "addKey", "guessedtype": "function"}, "bindUI": {"private": "", "guessedname": "bindUI", "guessedtype": "function"}, "_updateTotalData": {"private": "", "description": "Updates the total data array.", "guessedname": "_updateTotalData", "guessedtype": "function"}, "_setDataByKey": {"description": "Sets data by key", "param": "{String} key Key value to use.", "params": [{"type": "String", "name": "key", "description": " Key value to use."}, {"type": "Array", "name": "data", "description": " Array to use."}], "private": "", "guessedname": "_setDataByKey", "guessedtype": "function"}, "_updateMinAndMax": {"private": "", "description": "Calculates the maximum and minimum values for the `Axis`.", "guessedname": "_updateMinAndMax", "guessedtype": "function"}}, "extends": "Axis", "superclass": "Axis", "file": "charts.js", "guessedtype": "property", "shortname": "AxisType", "properties": {"_type": {"description": "Type of data used in `Axis`.", "private": "", "readonly": "", "guessedname": "_type", "guessedtype": "property", "type": "String"}, "_setMaximum": {"guessedname": "_setMaximum", "type": "Object", "description": "Storage for `setMaximum` attribute.", "private": "", "guessedtype": "property"}, "_setMinimum": {"guessedname": "_setMinimum", "type": "Object", "description": "Storage for `setMinimum` attribute.", "private": "", "guessedtype": "property"}, "_updateTotalDataFlag": {"guessedname": "_updateTotalDataFlag", "type": "Boolean", "description": "Indicates whether the all data is up to date.", "private": "", "guessedtype": "property"}, "_data": {"guessedname": "_data", "type": "Array", "description": "Reference to data array.", "private": "", "guessedtype": "property"}, "GUID": {"guessedname": "GUID", "type": "String", "description": "Constant used to generate unique id.", "private": "", "guessedtype": "property"}, "_dataReady": {"description": "Storage for `dataReady` attribute.", "private": "", "readonly": "", "guessedname": "_dataReady", "guessedtype": "property", "type": "Boolean"}, "_dataMaximum": {"guessedname": "_dataMaximum", "type": "Object", "description": "Storage for `dataMaximum` attribute.", "private": "", "guessedtype": "property"}}, "description": "AxisType is an abstract class that manages the data for an axis."}, "Plugin.Resize": {"name": "Plugin.Resize", "configs": {"node": {"description": "Stores the node that is being resized", "default": "undefined", "guessedname": "node", "guessedtype": "property", "type": "Node", "public": ""}, "activeHandle": {"description": "Stores the active handle during the resize.", "default": "null", "private": "", "guessedname": "activeHandle", "guessedtype": "property", "type": "String"}, "widget": {"default": "undefined", "public": "", "description": "Stores the widget that the node belongs to, if one exists", "guessedname": "widget", "guessedtype": "property"}, "wrapTypes": {"description": "Elements that requires a wrapper by default. Normally are elements\nwhich cannot have children elements.", "default": "/canvas|textarea|input|select|button|img/i", "readonly": "", "guessedname": "wrapTypes", "guessedtype": "property", "type": "Regex"}, "defMinWidth": {"default": "15", "type": "Number", "description": "The default minimum width of the element. Only used when\nResizeConstrained is not plugged.", "guessedname": "defMinWidth", "guessedtype": "property"}, "wrapper": {"description": "Element to wrap the <code>wrapTypes</code>. This element will house\nthe handles elements.", "writeonce": "", "default": "div", "guessedname": "wrapper", "guessedtype": "property", "type": "String | Node"}, "activeHandleNode": {"description": "Stores the active handle element during the resize.", "default": "null", "private": "", "guessedname": "activeHandleNode", "guessedtype": "property", "type": "Node"}, "handles": {"default": "all", "type": "Array | String", "description": "The handles to use (any combination of): 't', 'b', 'r', 'l', 'bl',\n'br', 'tl', 'tr'. Can use a shortcut of All.", "guessedname": "handles", "guessedtype": "property"}, "autoHide": {"default": "false", "type": "boolean", "description": "False to ensure that the resize handles are always visible, true to\ndisplay them only when the user mouses over the resizable borders.", "guessedname": "autoHide", "guessedtype": "property"}, "wrap": {"default": "false", "type": "boolean", "description": "True to wrap an element with a div if needed (required for textareas\nand images, defaults to false) in favor of the handles config option.\nThe wrapper element type (default div) could be over-riden passing the\n<code>wrapper</code> attribute.", "guessedname": "wrap", "guessedtype": "property"}, "resizing": {"default": "false", "type": "boolean", "description": "True when the element is being Resized.", "guessedname": "resizing", "guessedtype": "property"}, "handlesWrapper": {"type": "Node", "description": "Node to wrap the resize handles.", "guessedname": "handlesWrapper", "guessedtype": "property"}, "defMinHeight": {"default": "15", "type": "Number", "description": "The default minimum height of the element. Only used when\nResizeConstrained is not plugged.", "guessedname": "defMinHeight", "guessedtype": "property"}}, "constructors": [{"description": "The Resize Plugin allows you to make a Node or a Widget resizable. It supports all the functionality of\nthe standalone Resize utility. Additionally, resizing a widget updates the widget's height,width and x,y\nattributes, if they exist.\nvar overlay = new Y.Overlay({\nwidth: \"200px\",\nsrcNode: \"#overlay\",\nvisible: false,\nalign: {node:\".example\", points:[\"tc\", \"bc\"]}\n});\noverlay.plug(Y.Plugin.Resize);"}, {"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "A base class for Resize, providing:\nBasic Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)\nApplies drag handles to an element to make it resizable\nHere is the list of valid resize handles:\n`[ 't', 'tr', 'r', 'br', 'b', 'bl', 'l', 'tl' ]`. You can\nread this list as top, top-right, right, bottom-right, bottom,\nbottom-left, left, top-left.\nThe drag handles are inserted into the element and positioned\nabsolute. Some elements, such as a textarea or image, don't support\nchildren. To overcome that, set wrap:true in your config and the\nelement willbe wrapped for you automatically.\nQuick Example:\nvar instance = new Y.Resize({\nnode: '#resize1',\npreserveRatio: true,\nwrap: true,\nmaxHeight: 170,\nmaxWidth: 400,\nhandles: 't, tr, r, br, b, bl, l, tl'\n});\nCheck the list of <a href=\"Resize.html#configattributes\">Configuration Attributes</a> available for\nResize."}], "namespace": "", "module": "resize", "events": {"resizingChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "resizingChange", "description": "Fires when the value for the configuration attribute 'resizing' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "wrapperChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "wrapperChange", "description": "Fires when the value for the configuration attribute 'wrapper' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "resize:start": {"preventable": "_defResizeStartFn", "bubbles": "Resize", "params": [{"type": "Event.Facade", "name": "event", "description": " The resize start event."}], "description": "Handles the resize start event. Fired when a handle starts to be\ndragged.", "type": "{Event.Custom}"}, "resize:align": {"preventable": "_defResizeAlignFn", "bubbles": "Resize", "params": [{"type": "Event.Facade", "name": "event", "description": " The resize align event."}], "description": "Handles the resize align event.", "type": "{Event.Custom}"}, "widgetChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "widgetChange", "description": "Fires when the value for the configuration attribute 'widget' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "resize:end": {"preventable": "_defResizeEndFn", "bubbles": "Resize", "params": [{"type": "Event.Facade", "name": "event", "description": " The resize end event."}], "description": "Handles the resize end event. Fired when a handle stop to be\ndragged.", "type": "{Event.Custom}"}, "activeHandleNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "activeHandleNodeChange", "description": "Fires when the value for the configuration attribute 'activeHandleNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "autoHideChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "autoHideChange", "description": "Fires when the value for the configuration attribute 'autoHide' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "wrapTypesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "wrapTypesChange", "description": "Fires when the value for the configuration attribute 'wrapTypes' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "handlesWrapperChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "handlesWrapperChange", "description": "Fires when the value for the configuration attribute 'handlesWrapper' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "resize:resize": {"preventable": "_defResizeFn", "bubbles": "Resize", "params": [{"type": "Event.Facade", "name": "event", "description": " The resize event."}], "description": "Handles the resize event. Fired on each pixel when the handle is\nbeing dragged.", "type": "{Event.Custom}"}, "defMinHeightChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "defMinHeightChange", "description": "Fires when the value for the configuration attribute 'defMinHeight' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "nodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "nodeChange", "description": "Fires when the value for the configuration attribute 'node' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "wrapChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "wrapChange", "description": "Fires when the value for the configuration attribute 'wrap' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "resize:mouseUp": {"preventable": "_defMouseUpFn", "bubbles": "Resize", "params": [{"type": "Event.Facade", "name": "event", "description": " The resize mouseUp event."}], "description": "Handles the resize mouseUp event. Fired when a mouseUp event happens on a\nhandle.", "type": "{Event.Custom}"}, "defMinWidthChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "defMinWidthChange", "description": "Fires when the value for the configuration attribute 'defMinWidth' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "handlesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "handlesChange", "description": "Fires when the value for the configuration attribute 'handles' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "activeHandleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "activeHandleChange", "description": "Fires when the value for the configuration attribute 'activeHandle' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "ResizePlugin", "methods": {"_onHandleMouseEnter": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Mouseenter event handler for the handles.", "guessedname": "_onHandleMouseEnter", "guessedtype": "function"}, "_resizeAlign": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " The Event object"}], "description": "Logic method for _defResizeAlignFn. Allow AOP.", "guessedname": "_resizeAlign", "guessedtype": "function"}, "eachHandle": {"params": [{"type": "function", "name": "fn", "description": " Callback function to be executed for each handle."}], "description": "<p>Loop through each handle which is being used and executes a callback.</p>\n<p>Example:</p>\n<pre><code>instance.eachHandle(\nfunction(handleName, index) { ... }\n);</code></pre>", "guessedname": "eachHandle", "guessedtype": "function"}, "initializer": {"protected": "", "description": "Stores the values for node and widget, and sets up an event-listener", "guessedname": "initializer", "guessedtype": "function"}, "_valueHandlesWrapper": {"readonly": "", "protected": "", "description": "Default value for the wrapper handles node attribute", "guessedname": "_valueHandlesWrapper", "guessedtype": "function"}, "_onHandleMouseLeave": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Mouseout event handler for the handles.", "guessedname": "_onHandleMouseLeave", "guessedtype": "function"}, "_bindDD": {"private": "", "description": "Bind the handles DragDrop events to the Resize instance.", "guessedname": "_bindDD", "guessedtype": "function"}, "_handleResizeEvent": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " resize:resize event facade"}], "description": "Fires the resize:resize event.", "guessedname": "_handleResizeEvent", "guessedtype": "function"}, "_syncUI": {"protected": "", "description": "Sync the Resize UI with internal values from\n<a href=\"Resize.html#property_info\">info</a>.", "guessedname": "_syncUI", "guessedtype": "function"}, "_defResizeFn": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " The Event object"}], "description": "Default resize:resize handler", "guessedname": "_defResizeFn", "guessedtype": "function"}, "_getInfo": {"guessedname": "_getInfo", "params": [{"type": "Node", "name": "node", "description": ""}, {"type": "EventFacade", "name": "event", "description": ""}], "description": "<p>Generates metadata to the <a href=\"Resize.html#property_info\">info</a>\nand <a href=\"Resize.html#property_originalInfo\">originalInfo</a></p>\n<pre><code>bottom, actXY, left, top, offsetHeight, offsetWidth, right</code></pre>", "private": "", "guessedtype": "function"}, "_isDifferent": {"description": "a little utility method that returns a value if the old !== new, otherwise it returns false.", "param": "{Number} oldVal", "params": [{"type": "Number", "name": "oldVal", "description": ""}, {"type": "Number", "name": "newVal", "description": ""}], "private": "", "guessedname": "_isDifferent", "guessedtype": "function"}, "_setHandleFromNode": {"protected": "", "params": [{"type": "Node", "name": "node", "description": ""}], "description": "Handles setting the activeHandle from a node, used from startDrag (for touch) and mouseenter (for mouse).", "guessedname": "_setHandleFromNode", "guessedtype": "function"}, "_updateInfo": {"private": "", "description": "Update <a href=\"Resize.html#property_info\">info</a> values (bottom, actXY, left, top, offsetHeight, offsetWidth, right).", "guessedname": "_updateInfo", "guessedtype": "function"}, "_getBoxSurroundingInfo": {"return": {"type": "Object", "description": ""}, "description": "Each box has a content area and optional surrounding margin,\npadding and * border areas. This method get all this information from\nthe passed node. For more reference see\n<a href=\"http://www.w3.org/TR/CSS21/box.html#box-dimensions\">\nhttp://www.w3.org/TR/CSS21/box.html#box-dimensions</a>.", "private": "", "params": [{"type": "Node", "name": "node", "description": ""}], "guessedname": "_getBoxSurroundingInfo", "guessedtype": "function"}, "destructor": {"protected": "", "description": "Descructor lifecycle implementation for the Resize class. Purges events attached\nto the node (and all child nodes) and removes the Resize handles.", "guessedname": "destructor", "guessedtype": "function"}, "_defResizeStartFn": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " The Event object"}], "description": "Default resize:start handler", "guessedname": "_defResizeStartFn", "guessedtype": "function"}, "_buildHandle": {"protected": "", "params": [{"type": "String", "name": "handle", "description": " Handle name ('t', 'tr', 'b', ...)."}], "description": "Creates the handle element based on the handle name and initialize the\nDragDrop on it.", "guessedname": "_buildHandle", "guessedtype": "function"}, "_handleResizeAlignEvent": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " resize:resize event facade"}], "description": "Fires the resize:align event.", "guessedname": "_handleResizeAlignEvent", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Bind the events on the Resize UI. Lifecycle.", "guessedname": "bindUI", "guessedtype": "function"}, "_correctDimensions": {"description": "Updates the node's (x,y) values if they are changed via resizing.\nIf the node belongs to a widget, passes the widget down to _setWidgetProperties method", "param": "{EventFacade} e The Event object", "params": [{"type": "EventFacade", "name": "e", "description": " The Event object"}], "private": "", "guessedname": "_correctDimensions", "guessedtype": "function"}, "_createEvents": {"private": "", "description": "Create the custom events used on the Resize.", "guessedname": "_createEvents", "guessedtype": "function"}, "_resize": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " The Event object"}], "description": "Logic method for _defResizeFn. Allow AOP.", "guessedname": "_resize", "guessedtype": "function"}, "_handleMouseUpEvent": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " resize:mouseUp event facade"}], "description": "Fires the resize:mouseUp event.", "guessedname": "_handleMouseUpEvent", "guessedtype": "function"}, "_valueWrapper": {"readonly": "", "protected": "", "description": "Default value for the wrapper attribute", "guessedname": "_valueWrapper", "guessedtype": "function"}, "_defResizeAlignFn": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " The Event object"}], "description": "Default resize:align handler", "guessedname": "_defResizeAlignFn", "guessedtype": "function"}, "_renderHandles": {"protected": "", "description": "Responsible for loop each handle element and append to the wrapper.", "guessedname": "_renderHandles", "guessedtype": "function"}, "_defMouseUpFn": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " The Event object"}], "description": "Default resize:mouseUp handler", "guessedname": "_defMouseUpFn", "guessedtype": "function"}, "_updateSurroundingInfo": {"private": "", "description": "Update properties\n<a href=\"Resize.html#property_nodeSurrounding\">nodeSurrounding</a>,\n<a href=\"Resize.html#property_nodeSurrounding\">wrapperSurrounding</a>,\n<a href=\"Resize.html#property_nodeSurrounding\">totalVSurrounding</a>,\n<a href=\"Resize.html#property_nodeSurrounding\">totalHSurrounding</a>.", "guessedname": "_updateSurroundingInfo", "guessedtype": "function"}, "_setWidgetProperties": {"description": "If the host is a widget, then set the width, height. Then look for widgetPosition and set x,y", "param": "{EventFacade} e The Event object", "params": [{"type": "EventFacade", "name": "e", "description": " The Event object"}, {"type": "Object", "name": "x", "description": " Literal containing old x value and current x value"}, {"type": "Object", "name": "y", "description": " Literal containing old y value and current y value"}], "private": "", "guessedname": "_setWidgetProperties", "guessedtype": "function"}, "_onWrapperMouseEnter": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Mouseenter event handler for the <a href=\"Resize.html#config_wrapper\">wrapper</a>.", "guessedname": "_onWrapperMouseEnter", "guessedtype": "function"}, "_setHideHandlesUI": {"protected": "", "params": [{"type": "boolean", "name": "val", "description": " True to hide the handles, false to show."}], "description": "Set the visibility of the handles.", "guessedname": "_setHideHandlesUI", "guessedtype": "function"}, "_copyStyles": {"protected": "", "params": [{"type": "Node", "name": "node", "description": " Node from."}, {"type": "Node", "name": "wrapper", "description": " Node to."}], "description": "Copy relevant styles of the <a href=\"Resize.html#config_node\">node</a>\nto the <a href=\"Resize.html#config_wrapper\">wrapper</a>.", "guessedname": "_copyStyles", "guessedtype": "function"}, "_resizeStart": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " The Event object"}], "description": "Logic method for _defResizeStartFn. Allow AOP.", "guessedname": "_resizeStart", "guessedtype": "function"}, "_bindHandle": {"private": "", "description": "Bind the events related to the handles (_onHandleMouseEnter, _onHandleMouseLeave).", "guessedname": "_bindHandle", "guessedtype": "function"}, "_handleResizeEndEvent": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " resize:end event facade"}], "description": "Fires the resize:end event.", "guessedname": "_handleResizeEndEvent", "guessedtype": "function"}, "_setHandles": {"protected": "", "params": [{"type": "String", "name": "val", "description": ""}], "description": "Setter for the handles attribute", "guessedname": "_setHandles", "guessedtype": "function"}, "_setWrap": {"protected": "", "params": [{"type": "boolean", "name": "val", "description": ""}], "description": "Setter for the wrap attribute", "guessedname": "_setWrap", "guessedtype": "function"}, "_onWrapperMouseLeave": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Mouseleave event handler for the <a href=\"Resize.html#config_wrapper\">wrapper</a>.", "guessedname": "_onWrapperMouseLeave", "guessedtype": "function"}, "_defResizeEndFn": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " The Event object"}], "description": "Default resize:end handler", "guessedname": "_defResizeEndFn", "guessedtype": "function"}, "syncUI": {"protected": "", "description": "Sync the Resize UI.", "guessedname": "syncUI", "guessedtype": "function"}, "_calcResize": {"protected": "", "description": "Basic resize calculations.", "guessedname": "_calcResize", "guessedtype": "function"}, "_checkSize": {"protected": "", "params": [{"type": "String", "name": "offset", "description": " 'offsetHeight' or 'offsetWidth'"}, {"type": "number", "name": "size", "description": " Size to restrict the offset"}], "description": "Helper method to update the current size value on\n<a href=\"Resize.html#property_info\">info</a> to respect the\nmin/max values and fix the top/left calculations.", "guessedname": "_checkSize", "guessedtype": "function"}, "_handleResizeStartEvent": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " resize:start event facade"}], "description": "Fires the resize:start event.", "guessedname": "_handleResizeStartEvent", "guessedtype": "function"}, "_resizeEnd": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " The Event object"}], "description": "Logic method for _defResizeEndFn. Allow AOP.", "guessedname": "_resizeEnd", "guessedtype": "function"}, "_setActiveHandlesUI": {"protected": "", "params": [{"type": "boolean", "name": "val", "description": " True to activate the handles, false to deactivate."}], "description": "Set the active state of the handles.", "guessedname": "_setActiveHandlesUI", "guessedtype": "function"}, "_updateChangeHandleInfo": {"private": "", "description": "Update <code>instance.changeHeightHandles,\ninstance.changeLeftHandles, instance.changeTopHandles,\ninstance.changeWidthHandles</code> information.", "guessedname": "_updateChangeHandleInfo", "guessedtype": "function"}, "renderUI": {"protected": "", "description": "Create the DOM structure for the Resize. Lifecycle.", "guessedname": "renderUI", "guessedtype": "function"}, "renderer": {"protected": "", "description": "Creates DOM (or manipulates DOM for progressive enhancement)\nThis method is invoked by initializer(). It's chained automatically for\nsubclasses if required.", "guessedname": "renderer", "guessedtype": "function"}}, "extends": "Resize", "superclass": "Base", "file": "resize.js", "guessedtype": "function", "shortname": "Plugin.Resize", "properties": {"REGEX_CHANGE_TOP": {"type": "{String}", "description": "Regex which matches with the handles that could change the top of\nthe resizable element.", "guessedname": "REGEX_CHANGE_TOP", "guessedtype": "property"}, "changeLeftHandles": {"default": "false", "type": "boolean", "description": "Whether the handle being dragged can change the left.", "guessedname": "changeLeftHandles", "guessedtype": "property"}, "HANDLES_WRAP_TEMPLATE": {"type": "{String}", "description": "Template used to create the resize wrapper for the handles.", "guessedname": "HANDLES_WRAP_TEMPLATE", "guessedtype": "property"}, "nodeSurrounding": {"default": "null", "type": "Object", "description": "Stores the <a href=\"Resize.html#config_node\">node</a>\nsurrounding information retrieved from\n<a href=\"Resize.html#method__getBoxSurroundingInfo\">_getBoxSurroundingInfo</a>.", "guessedname": "nodeSurrounding", "guessedtype": "property"}, "originalInfo": {"protected": "", "type": "Object", "description": "Stores the original values for the height, width, top and left, stored\non resize start.", "guessedname": "originalInfo", "guessedtype": "property"}, "REGEX_CHANGE_LEFT": {"type": "{String}", "description": "Regex which matches with the handles that could change the left of\nthe resizable element.", "guessedname": "REGEX_CHANGE_LEFT", "guessedtype": "property"}, "ALL_HANDLES": {"type": "{String}", "description": "Array containing all possible resizable handles.", "guessedname": "ALL_HANDLES", "guessedtype": "property"}, "wrapperSurrounding": {"default": "null", "type": "Object", "description": "Stores the <a href=\"Resize.html#config_wrapper\">wrapper</a>\nsurrounding information retrieved from\n<a href=\"Resize.html#method__getBoxSurroundingInfo\">_getBoxSurroundingInfo</a>.", "guessedname": "wrapperSurrounding", "guessedtype": "property"}, "WRAP_TEMPLATE": {"type": "{String}", "description": "Template used to create the resize wrapper node when needed.", "guessedname": "WRAP_TEMPLATE", "guessedtype": "property"}, "REGEX_CHANGE_WIDTH": {"type": "{String}", "description": "Regex which matches with the handles that could change the width of\nthe resizable element.", "guessedname": "REGEX_CHANGE_WIDTH", "guessedtype": "property"}, "changeWidthHandles": {"default": "false", "type": "boolean", "description": "Whether the handle being dragged can change the width.", "guessedname": "changeWidthHandles", "guessedtype": "property"}, "totalHSurrounding": {"default": "0", "type": "number", "description": "Each box has a content area and optional surrounding padding and\nborder areas. This property stores the sum of all horizontal\nsurrounding information needed to adjust the node height.", "guessedname": "totalHSurrounding", "guessedtype": "property"}, "ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the Resize plugin.", "guessedname": "ATTRS", "guessedtype": "property"}, "HANDLE_TEMPLATE": {"type": "{String}", "description": "Template used to create each resize handle.", "guessedname": "HANDLE_TEMPLATE", "guessedtype": "property"}, "changeHeightHandles": {"default": "false", "type": "boolean", "description": "Whether the handle being dragged can change the height.", "guessedname": "changeHeightHandles", "guessedtype": "property"}, "info": {"protected": "", "type": "Object", "description": "Stores the current values for the height, width, top and left. You are\nable to manipulate these values on resize in order to change the resize\nbehavior.", "guessedname": "info", "guessedtype": "property"}, "NS": {"type": "{String}", "description": "The Resize instance will be placed on the Node instance under the resize namespace. It can be accessed via Node.resize or Widget.resize;", "guessedname": "NS", "guessedtype": "property"}, "NAME": {"static": "", "type": "{String}", "description": "resize-plugin", "guessedname": "NAME", "guessedtype": "property"}, "changeTopHandles": {"default": "false", "type": "boolean", "description": "Whether the handle being dragged can change the top.", "guessedname": "changeTopHandles", "guessedtype": "property"}, "totalVSurrounding": {"default": "0", "type": "number", "description": "Each box has a content area and optional surrounding padding and\nborder areas. This property stores the sum of all vertical\nsurrounding information needed to adjust the node height.", "guessedname": "totalVSurrounding", "guessedtype": "property"}, "lastInfo": {"protected": "", "type": "Object", "description": "Stores the last values for the height, width, top and left.", "guessedname": "lastInfo", "guessedtype": "property"}, "delegate": {"default": "null", "type": "Object", "description": "Store DD.Delegate reference for the respective Resize instance.", "guessedname": "delegate", "guessedtype": "property"}, "REGEX_CHANGE_HEIGHT": {"type": "{String}", "description": "Regex which matches with the handles that could change the height of\nthe resizable element.", "guessedname": "REGEX_CHANGE_HEIGHT", "guessedtype": "property"}}, "description": "The Resize Plugin allows you to make a Node or a Widget resizable. It supports all the functionality of\nthe standalone Resize utility. Additionally, resizing a widget updates the widget's height,width and x,y\nattributes, if they exist.\nvar overlay = new Y.Overlay({\nwidth: \"200px\",\nsrcNode: \"#overlay\",\nvisible: false,\nalign: {node:\".example\", points:[\"tc\", \"bc\"]}\n});\noverlay.plug(Y.Plugin.Resize);"}, "ExecCommand": {"shortname": "ExecCommand", "namespace": "", "name": "ExecCommand", "methods": {"COMMANDS.createlink": {"return": {"type": "Node", "description": "Node instance of the item touched by this command."}, "description": "Override for the createlink method from the <a href=\"Plugin.CreateLinkBase.html\">CreateLinkBase</a> plugin.", "param": "{String} cmd The command executed: createlink", "static": "", "guessedname": "createlink", "guessedtype": "function", "params": [{"type": "String", "name": "cmd", "description": " The command executed: createlink"}]}}}, "ModelList": {"since": "3.4.0", "name": "ModelList", "constructors": [{"description": "Provides an API for managing an ordered list of Model instances.\nIn addition to providing convenient `add`, `create`, `reset`, and `remove`\nmethods for managing the models in the list, ModelLists are also bubble targets\nfor events on the model instances they contain. This means, for example, that\nyou can add several models to a list, and then subscribe to the `*:change` event\non the list to be notified whenever any model in the list changes.\nModelLists also maintain sort order efficiently as models are added and removed,\nbased on a custom `comparator` function you may define (if no comparator is\ndefined, models are sorted in insertion order)."}], "namespace": "", "module": "loader", "properties": {"model": {"default": "`null`", "type": "Model", "description": "The `Model` class or subclass of the models in this list.\nThis property is `null` by default, and is intended to be overridden in a\nsubclass or specified as a config property at instantiation time. It will be\nused to create model instances automatically based on attribute hashes\npassed to the `add()`, `create()`, and `reset()` methods.", "guessedname": "model", "guessedtype": "property"}}, "guessedname": "AttrProto", "methods": {"load": {"description": "Loads this list of models from the server.\nThis method delegates to the `sync()` method to perform the actual load\noperation, which is an asynchronous action. Specify a _callback_ function to\nbe notified of success or failure.\nIf the load operation succeeds, a `reset` event will be fired.", "chainable": "", "param": "{Object} [options] Options to be passed to `sync()` and to\n`reset()` when adding the loaded models. It's up to the custom sync\nimplementation to determine what options it supports or requires, if any.", "params": [{"type": "Object", "name": "[options]", "description": " Options to be passed to `sync()` and to\n`reset()` when adding the loaded models. It's up to the custom sync\nimplementation to determine what options it supports or requires, if any."}, {"type": "Function", "name": "[callback]", "description": " Called when the sync operation finishes."}, {"type": "Error", "name": "callback.err", "description": " If an error occurred, this parameter will\ncontain the error. If the sync operation succeeded, _err_ will be\nfalsy."}, {"type": "Any", "name": "callback.response", "description": " The server's response. This value will\nbe passed to the `parse()` method, which is expected to parse it and\nreturn an array of model attribute hashes."}], "guessedname": "load", "guessedtype": "function"}, "_afterIdChange": {"description": "Updates the model maps when a model's `id` attribute changes.", "param": "{EventFacade} e", "protected": "", "params": [{"type": "EventFacade", "name": "e", "description": ""}], "guessedname": "_afterIdChange", "guessedtype": "function"}, "_defRemoveFn": {"description": "Default event handler for `remove` events.", "param": "{EventFacade} e", "protected": "", "params": [{"type": "EventFacade", "name": "e", "description": ""}], "guessedname": "_defRemoveFn", "guessedtype": "function"}, "sync": {"param": "{String} action Sync action to perform. May be one of the following:\n`create`: Store a list of newly-created models for the first time.\n`delete`: Delete a list of existing models.\n`read`  : Load a list of existing models.\n`update`: Update a list of existing models.\nCurrently, model lists only make use of the `read` action, but other\nactions may be used in future versions.", "params": [{"type": "String", "name": "action", "description": " Sync action to perform. May be one of the following:\n`create`: Store a list of newly-created models for the first time.\n`delete`: Delete a list of existing models.\n`read`  : Load a list of existing models.\n`update`: Update a list of existing models.\nCurrently, model lists only make use of the `read` action, but other\nactions may be used in future versions."}, {"type": "Object", "name": "[options]", "description": " Sync options. It's up to the custom sync\nimplementation to determine what options it supports or requires, if any."}, {"type": "Function", "name": "[callback]", "description": " Called when the sync operation finishes."}, {"type": "Error", "name": "callback.err", "description": " If an error occurred, this parameter will\ncontain the error. If the sync operation succeeded, _err_ will be\nfalsy."}, {"type": "Any", "name": "[callback.response]", "description": " The server's response. This value will\nbe passed to the `parse()` method, which is expected to parse it and\nreturn an array of model attribute hashes."}], "description": "Override this method to provide a custom persistence implementation for this\nlist. The default method just calls the callback without actually doing\nanything.\nThis method is called internally by `load()`.", "guessedname": "sync", "guessedtype": "function"}, "parse": {"return": {"type": "Object[]", "description": "Array of model attribute hashes."}, "description": "Called to parse the _response_ when the list is loaded from the server.\nThis method receives a server _response_ and is expected to return an array\nof model attribute hashes.\nThe default implementation assumes that _response_ is either an array of\nattribute hashes or a JSON string that can be parsed into an array of\nattribute hashes. If _response_ is a JSON string and either `Y.JSON` or the\nnative `JSON` object are available, it will be parsed automatically. If a\nparse error occurs, an `error` event will be fired and the model will not be\nupdated.\nYou may override this method to implement custom parsing logic if necessary.", "param": "{Any} response Server response.", "params": [{"type": "Any", "name": "response", "description": " Server response."}], "guessedname": "parse", "guessedtype": "function"}, "_defResetFn": {"description": "Default event handler for `reset` events.", "param": "{EventFacade} e", "protected": "", "params": [{"type": "EventFacade", "name": "e", "description": ""}], "guessedname": "_defResetFn", "guessedtype": "function"}, "toJSON": {"see": "Model.toJSON()", "return": {"type": "Object[]", "description": "Array of model attribute hashes."}, "description": "Returns an array containing attribute hashes for each model in this list,\nsuitable for being passed to `Y.JSON.stringify()`.\nUnder the hood, this method calls `toJSON()` on each model in the list and\npushes the results into an array.", "guessedname": "toJSON", "guessedtype": "function"}, "getByClientId": {"return": {"type": "Model", "description": "Model, or `null` if not found."}, "description": "Returns the model with the specified _clientId_, or `null` if not found.", "param": "{String} clientId Client id.", "params": [{"type": "String", "name": "clientId", "description": " Client id."}], "guessedname": "getByClientId", "guessedtype": "function"}, "create": {"return": {"type": "Model", "description": "Created model."}, "description": "Creates or updates the specified model on the server, then adds it to this\nlist if the server indicates success.", "param": "{Model|Object} model Model to create. May be an existing model\ninstance or a hash of model attributes, in which case a new model instance\nwill be created from the hash.", "params": [{"type": "Model|Object", "name": "model", "description": " Model to create. May be an existing model\ninstance or a hash of model attributes, in which case a new model instance\nwill be created from the hash."}, {"type": "Object", "name": "[options]", "description": " Options to be passed to the model's `sync()` and\n`set()` methods and mixed into the `add` event when the model is added\nto the list."}, {"type": "Boolean", "name": "[options.silent=false]", "description": " If `true`, no `add` event(s) will\nbe fired."}, {"type": "callback", "name": "[callback]", "description": " Called when the sync operation finishes."}, {"type": "Error", "name": "callback.err", "description": " If an error occurred, this parameter will\ncontain the error. If the sync operation succeeded, _err_ will be\nfalsy."}, {"type": "mixed", "name": "callback.response", "description": " The server's response."}], "guessedname": "create", "guessedtype": "function"}, "_remove": {"return": {"type": "Model", "description": "Removed model."}, "description": "Removes the specified _model_ if it's in this list.", "param": "{Model} model Model to remove.", "protected": "", "params": [{"type": "Model", "name": "model", "description": " Model to remove."}, {"type": "Object", "name": "[options]", "description": " Data to be mixed into the event facade of the\n`remove` event for the removed model."}, {"type": "Boolean", "name": "[options.silent=false]", "description": " If `true`, no `remove` event will\nbe fired."}], "guessedname": "_remove", "guessedtype": "function"}, "_findIndex": {"return": {"type": "Number", "description": "Index at which the model should be inserted."}, "description": "Returns the index at which the given _model_ should be inserted to maintain\nthe sort order of the list.", "param": "{Model} model The model being inserted.", "protected": "", "params": [{"type": "Model", "name": "model", "description": " The model being inserted."}], "guessedname": "_findIndex", "guessedtype": "function"}, "add": {"return": {"type": "Model|Model[]", "description": "Added model or array of added models."}, "description": "Adds the specified model or array of models to this list.", "param": "{Model|Model[]|Object|Object[]} models Models to add. May be existing\nmodel instances or hashes of model attributes, in which case new model\ninstances will be created from the hashes.", "params": [{"type": "Model|Model[]|Object|Object[]", "name": "models", "description": " Models to add. May be existing\nmodel instances or hashes of model attributes, in which case new model\ninstances will be created from the hashes."}, {"type": "Object", "name": "[options]", "description": " Data to be mixed into the event facade of the\n`add` event(s) for the added models."}, {"type": "Boolean", "name": "[options.silent=false]", "description": " If `true`, no `add` event(s) will\nbe fired."}], "guessedname": "add", "guessedtype": "function", "example": "// Add a single model instance.\nlist.add(new Model({foo: 'bar'}));\n// Add a single model, creating a new instance automatically.\nlist.add({foo: 'bar'});\n// Add multiple models, creating new instances automatically.\nlist.add([\n{foo: 'bar'},\n{baz: 'quux'}\n]);"}, "getById": {"return": {"type": "Model", "description": "Model, or `null` if not found."}, "description": "Returns the model with the specified _id_, or `null` if not found.\nNote that models aren't expected to have an id until they're saved, so if\nyou're working with unsaved models, it may be safer to call\n`getByClientId()`.", "param": "{String|Number} id Model id.", "params": [{"type": "String|Number", "name": "id", "description": " Model id."}], "guessedname": "getById", "guessedtype": "function"}, "_attachList": {"description": "Adds this list as a bubble target for the specified model's events.", "param": "{Model} model Model to attach to this list.", "protected": "", "params": [{"type": "Model", "name": "model", "description": " Model to attach to this list."}], "guessedname": "_attachList", "guessedtype": "function"}, "sort": {"description": "Forcibly re-sorts the list.\nUsually it shouldn't be necessary to call this method since the list\nmaintains its sort order when items are added and removed, but if you change\nthe `comparator` function after items are already in the list, you'll need\nto re-sort.", "chainable": "", "param": "{Object} [options] Data to be mixed into the event facade of the\n`reset` event.", "params": [{"type": "Object", "name": "[options]", "description": " Data to be mixed into the event facade of the\n`reset` event."}, {"type": "Boolean", "name": "[options.silent=false]", "description": " If `true`, no `reset` event will\nbe fired."}], "guessedname": "sort", "guessedtype": "function"}, "map": {"return": {"type": "Array", "description": "Array of return values from _fn_."}, "description": "Executes the specified function on each model in this list and returns an\narray of the function's collected return values.", "param": "{Function} fn Function to execute on each model.", "params": [{"type": "Function", "name": "fn", "description": " Function to execute on each model."}, {"type": "Model", "name": "fn.model", "description": " Current model being iterated."}, {"type": "Number", "name": "fn.index", "description": " Index of the current model in the list."}, {"type": "Model[]", "name": "fn.models", "description": " Array of models being iterated."}, {"type": "Object", "name": "[thisObj]", "description": " `this` object to use when calling _fn_."}], "guessedname": "map", "guessedtype": "function"}, "invoke": {"return": {"type": "Array", "description": "Array of return values, indexed according to the index of\nthe model on which the method was called."}, "description": "Calls the named method on every model in the list. Any arguments provided\nafter _name_ will be passed on to the invoked method.", "param": "{String} name Name of the method to call on each model.", "params": [{"type": "String", "name": "name", "description": " Name of the method to call on each model."}, {"type": "Any", "name": "[args*]", "description": " Zero or more arguments to pass to the invoked method."}], "guessedname": "invoke", "guessedtype": "function"}, "get": {"return": {"type": "Any|Array", "description": "Attribute value or array of attribute values."}, "description": "If _name_ refers to an attribute on this ModelList instance, returns the\nvalue of that attribute. Otherwise, returns an array containing the values\nof the specified attribute from each model in this list.", "param": "{String} name Attribute name or object property path.", "see": "Model.get()", "params": [{"type": "String", "name": "name", "description": " Attribute name or object property path."}], "guessedname": "get", "guessedtype": "function"}, "_clear": {"protected": "", "description": "Clears all internal state and the internal list of models, returning this\nlist to an empty state. Automatically detaches all models in the list.", "guessedname": "_clear", "guessedtype": "function"}, "_add": {"return": {"type": "Model", "description": "The added model."}, "description": "Adds the specified _model_ if it isn't already in this list.", "param": "{Model|Object} model Model or object to add.", "protected": "", "params": [{"type": "Model|Object", "name": "model", "description": " Model or object to add."}, {"type": "Object", "name": "[options]", "description": " Data to be mixed into the event facade of the\n`add` event for the added model."}, {"type": "Boolean", "name": "[options.silent=false]", "description": " If `true`, no `add` event will be\nfired."}], "guessedname": "_add", "guessedtype": "function"}, "reset": {"description": "Completely replaces all models in the list with those specified, and fires a\nsingle `reset` event.\nUse `reset` when you want to add or remove a large number of items at once\nwithout firing `add` or `remove` events for each one.", "chainable": "", "param": "{Model[]|Object[]} [models] Models to add. May be existing model\ninstances or hashes of model attributes, in which case new model instances\nwill be created from the hashes. Calling `reset()` without passing in any\nmodels will clear the list.", "params": [{"type": "Model[]|Object[]", "name": "[models]", "description": " Models to add. May be existing model\ninstances or hashes of model attributes, in which case new model instances\nwill be created from the hashes. Calling `reset()` without passing in any\nmodels will clear the list."}, {"type": "Object", "name": "[options]", "description": " Data to be mixed into the event facade of the\n`reset` event."}, {"type": "Boolean", "name": "[options.silent=false]", "description": " If `true`, no `reset` event will\nbe fired."}], "guessedname": "reset", "guessedtype": "function"}, "toArray": {"return": {"type": "Array", "description": "Array containing the models in this list."}, "description": "Returns an array containing the models in this list.", "guessedname": "toArray", "guessedtype": "function"}, "_sort": {"return": {"type": "Number", "description": "`-1` if _a_ is less than _b_, `0` if equal, `1` if greater."}, "description": "Array sort function used by `sort()` to re-sort the models in the list.", "param": "{Model} a First model to compare.", "protected": "", "params": [{"type": "Model", "name": "a", "description": " First model to compare."}, {"type": "Model", "name": "b", "description": " Second model to compare."}], "guessedname": "_sort", "guessedtype": "function"}, "comparator": {"return": {"type": "Number|String", "description": "Value by which the model should be sorted relative\nto other models in this list."}, "params": [{"type": "Model", "name": "model", "description": " Model being sorted."}], "description": "Define this method to provide a function that takes a model as a parameter\nand returns a value by which that model should be sorted relative to other\nmodels in this list.\nBy default, no comparator is defined, meaning that models will not be sorted\n(they'll be stored in the order they're added).", "param": "{Model} model Model being sorted.", "example": "var list = new Y.ModelList({model: Y.Model});\nlist.comparator = function (model) {\nreturn model.get('id'); // Sort models by id.\n};"}, "_detachList": {"description": "Removes this list as a bubble target for the specified model's events.", "param": "{Model} model Model to detach.", "protected": "", "params": [{"type": "Model", "name": "model", "description": " Model to detach."}], "guessedname": "_detachList", "guessedtype": "function"}, "remove": {"return": {"type": "Model|Model[]", "description": "Removed model or array of removed models."}, "description": "Removes the specified model or array of models from this list.", "param": "{Model|Model[]} models Models to remove.", "params": [{"type": "Model|Model[]", "name": "models", "description": " Models to remove."}, {"type": "Object", "name": "[options]", "description": " Data to be mixed into the event facade of the\n`remove` event(s) for the removed models."}, {"type": "Boolean", "name": "[options.silent=false]", "description": " If `true`, no `remove` event(s)\nwill be fired."}], "guessedname": "remove", "guessedtype": "function"}, "item": {"return": {"type": "Model", "description": "The model at the specified index, or `undefined` if there\nisn't a model there."}, "params": [{"type": "Number", "name": "index", "description": " Index of the model to fetch."}], "description": "Returns the model at the specified _index_.", "param": "{Number} index Index of the model to fetch."}, "getAsHTML": {"return": {"type": "String|String[]", "description": "HTML-escaped value or array of HTML-escaped\nvalues."}, "description": "If _name_ refers to an attribute on this ModelList instance, returns the\nHTML-escaped value of that attribute. Otherwise, returns an array containing\nthe HTML-escaped values of the specified attribute from each model in this\nlist.\nThe values are escaped using `Escape.html()`.", "param": "{String} name Attribute name or object property path.", "see": "Model.getAsHTML()", "params": [{"type": "String", "name": "name", "description": " Attribute name or object property path."}], "guessedname": "getAsHTML", "guessedtype": "function"}, "_defAddFn": {"description": "Default event handler for `add` events.", "param": "{EventFacade} e", "protected": "", "params": [{"type": "EventFacade", "name": "e", "description": ""}], "guessedname": "_defAddFn", "guessedtype": "function"}, "getAsURL": {"return": {"type": "String|String[]", "description": "URL-encoded value or array of URL-encoded values."}, "description": "If _name_ refers to an attribute on this ModelList instance, returns the\nURL-encoded value of that attribute. Otherwise, returns an array containing\nthe URL-encoded values of the specified attribute from each model in this\nlist.\nThe values are encoded using the native `encodeURIComponent()` function.", "param": "{String} name Attribute name or object property path.", "see": "Model.getAsURL()", "params": [{"type": "String", "name": "name", "description": " Attribute name or object property path."}], "guessedname": "getAsURL", "guessedtype": "function"}}, "uses": ["ArrayList"], "superclass": "Base", "file": "model-list.js", "guessedtype": "property", "extends": "Base", "shortname": "ModelList", "events": {"reset": {"description": "Fired when the list is completely reset via the `reset()` method or sorted\nvia the `sort()` method.\nListen to the `on` phase of this event to be notified before the list is\nreset. Calling `e.preventDefault()` during the `on` phase will prevent\nthe list from being reset.\nListen to the `after` phase of this event to be notified after the list has\nbeen reset.", "param": "{Model[]} models Array of the list's new models after the reset.", "params": [{"type": "Model[]", "name": "models", "description": " Array of the list's new models after the reset."}, {"type": "String", "name": "src", "description": " Source of the event. May be either `'reset'` or\n`'sort'`."}], "guessedname": "EVT_RESET", "guessedtype": "property", "preventable": "_defResetFn"}, "add": {"description": "Fired when a model is added to the list.\nListen to the `on` phase of this event to be notified before a model is\nadded to the list. Calling `e.preventDefault()` during the `on` phase will\nprevent the model from being added.\nListen to the `after` phase of this event to be notified after a model has\nbeen added to the list.", "param": "{Model} model The model being added.", "params": [{"type": "Model", "name": "model", "description": " The model being added."}, {"type": "Number", "name": "index", "description": " The index at which the model will be added."}], "guessedname": "EVT_ADD", "guessedtype": "property", "preventable": "_defAddFn"}, "remove": {"description": "Fired when a model is removed from the list.\nListen to the `on` phase of this event to be notified before a model is\nremoved from the list. Calling `e.preventDefault()` during the `on` phase\nwill prevent the model from being removed.\nListen to the `after` phase of this event to be notified after a model has\nbeen removed from the list.", "param": "{Model} model The model being removed.", "params": [{"type": "Model", "name": "model", "description": " The model being removed."}, {"type": "int", "name": "index", "description": " The index of the model being removed."}], "guessedname": "EVT_REMOVE", "guessedtype": "property", "preventable": "_defRemoveFn"}, "error": {"param": "{Any} error Error message, object, or exception generated by the\nerror. Calling `toString()` on this should result in a meaningful error\nmessage.", "params": [{"type": "Any", "name": "error", "description": " Error message, object, or exception generated by the\nerror. Calling `toString()` on this should result in a meaningful error\nmessage."}, {"type": "String", "name": "src", "description": " Source of the error. May be one of the following (or any\ncustom error source defined by a ModelList subclass):\n`add`: Error while adding a model (probably because it's already in the\nlist and can't be added again). The model in question will be provided\nas the `model` property on the event facade.\n`parse`: An error parsing a JSON response. The response in question will\nbe provided as the `response` property on the event facade.\n`remove`: Error while removing a model (probably because it isn't in the\nlist and can't be removed). The model in question will be provided as\nthe `model` property on the event facade."}], "description": "Fired when an error occurs, such as when an attempt is made to add a\nduplicate model to the list, or when a sync layer response can't be parsed.", "guessedname": "EVT_ERROR", "guessedtype": "property"}}, "description": "Provides an API for managing an ordered list of Model instances.\nIn addition to providing convenient `add`, `create`, `reset`, and `remove`\nmethods for managing the models in the list, ModelLists are also bubble targets\nfor events on the model instances they contain. This means, for example, that\nyou can add several models to a list, and then subscribe to the `*:change` event\non the list to be notified whenever any model in the list changes.\nModelLists also maintain sort order efficiently as models are added and removed,\nbased on a custom `comparator` function you may define (if no comparator is\ndefined, models are sorted in insertion order)."}, "DOMEventFacade": {"name": "DOMEventFacade", "description": "Wraps a DOM event, properties requiring browser abstraction are\nfixed here.  Provids a security layer when required.", "namespace": "", "module": "event", "guessedname": "ua", "param": "ev {Event} the DOM event", "file": "event-base.js", "guessedtype": "property", "shortname": "DOMEventFacade", "properties": {"ctrlKey": {"type": "{Boolean}", "description": "`true` if the \"Ctrl\" or \"control\" key is pressed."}, "metaKey": {"type": "{Boolean}", "description": "`true` if the \"Windows\" key on a Windows keyboard, \"command\" key on an\nApple keyboard, or \"meta\" key on other keyboards is pressed."}, "changedTouches": {"type": "{DOMEventFacade[]}", "description": "An array of event-specific touch events.\nFor `touchstart`, the touch points that became active with the current\nevent.\nFor `touchmove`, the touch points that have changed since the last\nevent.\nFor `touchend`, the touch points that have been removed from the touch\nsurface.", "guessedname": "changedTouches", "guessedtype": "property"}, "touches": {"type": "{DOMEventFacade[]}", "description": "Array of individual touch events for touch points that are still in\ncontact with the touch surface.", "guessedname": "touches", "guessedtype": "property"}, "currentTarget": {"type": "{Node}", "description": "Node reference for the element that the listener was attached to."}, "which": {"type": "{Number}", "description": "The button that was pushed.  Same as button."}, "type": {"type": "{String}", "description": "The name of the event (e.g. \"click\")"}, "clientX": {"type": "{Number}", "description": "The X location of the event in the viewport"}, "clientY": {"type": "{Number}", "description": "The Y location of the event in the viewport"}, "_event": {"type": "{Native DOM Event}", "description": "The native event", "private": ""}, "altKey": {"type": "{Boolean}", "description": "`true` if the \"alt\" or \"option\" key is pressed."}, "wheelDelta": {"type": "{Number}", "description": "Number representing the direction and velocity of the movement of the mousewheel.\nNegative is down, the higher the number, the faster.  Applies to the mousewheel event."}, "charCode": {"type": "{Number}", "description": "The charCode for key events.  Same as keyCode"}, "webkitKeymap": {"private": "", "description": "webkit key remapping required for Safari < 3.1", "guessedname": "webkitKeymap", "guessedtype": "property"}, "target": {"type": "{Node}", "description": "Node reference for the targeted element"}, "relatedTarget": {"type": "{Node}", "description": "Node reference to the relatedTarget"}, "shiftKey": {"type": "{Boolean}", "description": "`true` if the shift key is pressed."}, "button": {"type": "{Number}", "description": "The button that was pushed. 1 for left click, 2 for middle click, 3 for\nright click.  This is only reliably populated on `mouseup` events."}, "targetTouches": {"type": "{DOMEventFacade[]}", "description": "Array of individual touch events still in contact with the touch\nsurface and whose `touchstart` event occurred inside the same taregt\nelement as the current target element.", "guessedname": "targetTouches", "guessedtype": "property"}, "pageX": {"type": "{Number}", "description": "The X location of the event on the page (including scroll)"}, "pageY": {"type": "{Number}", "description": "The Y location of the event on the page (including scroll)"}, "keyCode": {"type": "{Number}", "description": "The keyCode for key events.  Uses charCode if keyCode is not available"}}, "methods": {"resolve": {"private": "", "description": "Returns a wrapped node.  Intended to be used on event targets,\nso it will return the node's parent if the target is a text\nnode.\nIf accessing a property of the node throws an error, this is\nprobably the anonymous div wrapper Gecko adds inside text\nnodes.  This likely will only occur when attempting to access\nthe relatedTarget.  In this case, we now return null because\nthe anonymous div is completely useless and we do not know\nwhat the related target was because we can't even get to\nthe element's parent node.", "guessedname": "resolve", "guessedtype": "function"}, "halt": {"params": [{"type": "boolean", "name": "immediate", "description": "  if true additional listeners\non the current target will not be executed"}], "description": "Stops the event propagation and prevents the default\nevent behavior.", "param": "immediate {boolean} if true additional listeners\non the current target will not be executed"}, "_touch": {"description": "Adds touch event facade normalization properties to the DOM event facade", "param": "ev {Event} the DOM event", "params": [{"type": "Event", "name": "ev", "description": "  the DOM event"}, {"type": "HTMLElement", "name": "currentTarget", "description": "  the element the listener was attached to"}, {"type": "Event.Custom", "name": "wrapper", "description": "  the custom event wrapper for this DOM event"}], "private": "", "guessedname": "_touch", "guessedtype": "function"}, "stopImmediatePropagation": {"description": "Stops the propagation to the next bubble target and\nprevents any additional listeners from being exectued\non the current target."}, "preventDefault": {"params": [{"type": "string", "name": "returnValue", "description": "  sets the returnValue of the event to this value\n(rather than the default false value).  This can be used to add a customized\nconfirmation query to the beforeunload event)."}], "description": "Prevents the event's default behavior", "param": "returnValue {string} sets the returnValue of the event to this value\n(rather than the default false value).  This can be used to add a customized\nconfirmation query to the beforeunload event)."}, "stopPropagation": {"description": "Stops the propagation to the next bubble target"}}}, "plugin.NodeFocusManager": {"name": "plugin.NodeFocusManager", "namespace": "plugin", "module": "node-focusmanager", "events": {"circularChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "circularChange", "description": "Fires when the value for the configuration attribute 'circular' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "keysChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "keysChange", "description": "Fires when the value for the configuration attribute 'keys' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "focusClassChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "focusClassChange", "description": "Fires when the value for the configuration attribute 'focusClass' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "activeDescendantChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "activeDescendantChange", "description": "Fires when the value for the configuration attribute 'activeDescendant' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "focusedChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "focusedChange", "description": "Fires when the value for the configuration attribute 'focused' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "descendantsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "descendantsChange", "description": "Fires when the value for the configuration attribute 'descendants' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "NodeFocusManager", "methods": {"_onDocMouseDown": {"description": "\"mousedown\" event handler for the owner document of the\nFocus Manager's Node.", "param": "event {Object} Object representing the DOM event.", "protected": "", "params": [{"type": "Object", "name": "event", "description": "  Object representing the DOM event."}], "guessedname": "_onDocMouseDown", "guessedtype": "function"}, "_detachEventHandlers": {"protected": "", "description": "Detaches all event handlers used by the Focus Manager.", "guessedname": "_detachEventHandlers", "guessedtype": "function"}, "_preventScroll": {"protected": "", "description": "Prevents the viewport from scolling when the user presses\nthe up, down, left, or right key.", "guessedname": "_preventScroll", "guessedtype": "function"}, "_focusPrevious": {"description": "Keydown event handler that moves focus to the previous\nenabled descendant.", "param": "event {Object} Object representing the DOM event.", "protected": "", "params": [{"type": "Object", "name": "event", "description": "  Object representing the DOM event."}, {"type": "Number", "name": "activeDescendant", "description": "  Number representing the index of the\nnext descendant to be focused."}], "guessedname": "_focusPrevious", "guessedtype": "function"}, "_onDocFocus": {"description": "\"focus\" event handler for the owner document of the\nFocus Manager's Node.", "param": "event {Object} Object representing the DOM event.", "protected": "", "params": [{"type": "Object", "name": "event", "description": "  Object representing the DOM event."}], "guessedname": "_onDocFocus", "guessedtype": "function"}, "_initDescendants": {"protected": "", "description": "Sets the <code>tabIndex</code> attribute of all of the\ndescendants to -1, except the active descendant, whose\n<code>tabIndex</code> attribute is set to 0.", "guessedname": "_initDescendants", "guessedtype": "function"}, "_afterActiveDescendantChange": {"description": "afterChange event handler for the\n\"activeDescendant\" attribute.", "param": "event {Object} Object representing the change event.", "protected": "", "params": [{"type": "Object", "name": "event", "description": "  Object representing the change event."}], "guessedname": "_afterActiveDescendantChange", "guessedtype": "function"}, "_focusNext": {"description": "Keydown event handler that moves focus to the next\nenabled descendant.", "param": "event {Object} Object representing the DOM event.", "protected": "", "params": [{"type": "Object", "name": "event", "description": "  Object representing the DOM event."}, {"type": "Number", "name": "activeDescendant", "description": "  Number representing the index of the\nnext descendant to be focused"}], "guessedname": "_focusNext", "guessedtype": "function"}, "blur": {"description": "Blurs the current active descendant and sets the\n<code>focused</code> attribute to false.", "guessedname": "blur", "guessedtype": "function"}, "stop": {"description": "Disables the Focus Manager by detaching all event handlers.", "guessedname": "stop", "guessedtype": "function"}, "focus": {"param": "index {Number} Optional. Number representing the index of the\ndescendant to be set as the active descendant.", "params": [{"type": "Number", "name": "index", "description": "  Optional. Number representing the index of the\ndescendant to be set as the active descendant."}, {"type": "Node", "name": "index", "description": "  Optional. Node instance representing the\ndescendant to be set as the active descendant."}], "description": "Focuses the active descendant and sets the\n<code>focused</code> attribute to true.", "guessedname": "focus", "guessedtype": "function"}, "refresh": {"description": "Refreshes the Focus Manager's descendants by re-executing the\nCSS selector query specified by the <code>descendants</code> attribute.", "guessedname": "refresh", "guessedtype": "function"}, "start": {"description": "Enables the Focus Manager.", "guessedname": "start", "guessedtype": "function"}, "_fireClick": {"protected": "", "description": "Fires the click event if the enter key is pressed while\nfocused on an HTML element that is not natively clickable.", "guessedname": "_fireClick", "guessedtype": "function"}, "_removeFocusClass": {"protected": "", "description": "Removes the class name representing focus (as specified by\nthe \"focusClass\" attribute) from the Node instance to which it is\ncurrently applied.", "guessedname": "_removeFocusClass", "guessedtype": "function"}, "_isDescendant": {"return": {"type": "Boolean", "description": "Boolean indicating if the specified Node instance is a\ndescendant managed by the Focus Manager."}, "description": "Determines if the specified Node instance is a descendant\nmanaged by the Focus Manager.", "param": "node {Node} Node instance to be checked.", "protected": "", "params": [{"type": "Node", "name": "node", "description": "  Node instance to be checked."}], "guessedname": "_isDescendant", "guessedtype": "function"}, "_detachKeyHandler": {"protected": "", "description": "Detaches the \"key\" event handlers used to support the \"keys\"\nattribute.", "guessedname": "_detachKeyHandler", "guessedtype": "function"}, "_attachKeyHandler": {"protected": "", "description": "Attaches the \"key\" event handlers used to support the \"keys\"\nattribute.", "guessedname": "_attachKeyHandler", "guessedtype": "function"}}, "file": "node-focusmanager.js", "guessedtype": "function", "shortname": "NodeFocusManager", "configs": {"descendants": {"type": "Y.NodeList", "description": "String representing the CSS selector used to define the descendant Nodes\nwhose focus should be managed.", "guessedname": "descendants", "guessedtype": "property"}, "keys": {"type": "Object", "description": "Object literal representing the keys to be used to navigate between the\nnext/previous descendant.  The format for the attribute's value is\n<code>{ next: \"down:40\", previous: \"down:38\" }</code>.  The value for the\n\"next\" and \"previous\" properties are used to attach\n<a href=\"event/#keylistener\"><code>key</code></a> event listeners. See\nthe <a href=\"event/#keylistener\">Using the key Event</a> section of\nthe Event documentation for more information on \"key\" event listeners.", "guessedname": "keys", "guessedtype": "property"}, "focusClass": {"type": "String|Object", "description": "String representing the name of class applied to the focused active\ndescendant Node.  Can also be an object literal used to define both the\nclass name, and the Node to which the class should be applied.  If using\nan object literal, the format is:\n<code>{ className: \"focus\", fn: myFunction }</code>.  The function\nreferenced by the <code>fn</code> property in the object literal will be\npassed a reference to the currently focused active descendant Node.", "guessedname": "focusClass", "guessedtype": "property"}, "focused": {"description": "Boolean indicating that one of the descendants is focused.", "default": "false", "readonly": "", "guessedname": "focused", "guessedtype": "property", "type": "boolean"}, "activeDescendant": {"type": "Number", "description": "<p>Node, or index of the Node, representing the descendant that is either\nfocused or is focusable (<code>tabIndex</code> attribute is set to 0).\nThe value cannot represent a disabled descendant Node.  Use a value of -1\nto remove all descendant Nodes from the default tab flow.\nIf no value is specified, the active descendant will be inferred using\nthe following criteria:</p>\n<ol>\n<li>Examining the <code>tabIndex</code> attribute of each descendant and\nusing the first descendant whose <code>tabIndex</code> attribute is set\nto 0</li>\n<li>If no default can be inferred then the value is set to either 0 or\nthe index of the first enabled descendant.</li>\n</ol>", "guessedname": "activeDescendant", "guessedtype": "property"}, "circular": {"default": "true", "type": "Boolean", "description": "Boolean indicating if focus should be set to the first/last descendant\nwhen the end or beginning of the descendants has been reached.", "guessedname": "circular", "guessedtype": "property"}}, "description": "The NodeFocusManager class is a plugin for a Node instance.  The class is used\nvia the <a href=\"Node.html#method_plug\"><code>plug</code></a> method of Node\nand should not be instantiated directly."}, "YUI": {"global": "", "name": "YUI", "description": "The YUI global namespace object.  If YUI is already defined, the\nexisting YUI object will not be overwritten so that defined\nnamespaces are preserved.  It is the constructor for the object\nthe end user interacts with.  As indicated below, each instance\nhas full custom event support, but only if the event system\nis available.  This is a self-instantiable factory function.  You\ncan invoke it directly like this:\nYUI().use('*', function(Y) {\n// ready\n});\nBut it also works like this:\nvar Y = YUI();", "constructors": [{"params": [{"type": "Object", "name": "o*", "description": "  0..n optional configuration objects.  these values\nare store in Y.config.  See <a href=\"config.html\">Config</a> for the list of supported\nproperties."}], "description": "The YUI global namespace object.  If YUI is already defined, the\nexisting YUI object will not be overwritten so that defined\nnamespaces are preserved.  It is the constructor for the object\nthe end user interacts with.  As indicated below, each instance\nhas full custom event support, but only if the event system\nis available.  This is a self-instantiable factory function.  You\ncan invoke it directly like this:\nYUI().use('*', function(Y) {\n// ready\n});\nBut it also works like this:\nvar Y = YUI();"}, {"params": [{"type": "object", "name": "o*", "description": "  0..n optional configuration objects.  these values\nare store in Y.config.  See <a href=\"config.html\">Config</a> for the list of supported\nproperties."}], "description": "The YUI global namespace object.  If YUI is already defined, the\nexisting YUI object will not be overwritten so that defined\nnamespaces are preserved.  It is the constructor for the object\nthe end user interacts with.  As indicated below, each instance\nhas full custom event support, but only if the event system\nis available.  This is a self-instantiable factory function.  You\ncan invoke it directly like this:\nYUI().use('*', function(Y) {\n// ready\n});\nBut it also works like this:\nvar Y = YUI();"}, {"params": [{"type": "", "name": "emitter", "description": " Arguments use something else to pass on change events.\nCurrently this will be the creating Requisition. This prevents dependency\nloops and prevents us from needing to merge listener lists."}, {"type": "", "name": "text", "description": " The string (trimmed) that contains the argument"}, {"type": "", "name": "start", "description": " The position of the text in the original input string"}, {"type": "", "name": "end", "description": " See start"}, {"type": "", "name": "prefix", "description": " Knowledge of quotation marks and whitespace used prior to the\ntext in the input string allows us to re-generate the original input from\nthe arguments."}, {"type": "", "name": "suffix", "description": " Any quotation marks and whitespace used after the text.\nWhitespace is normally placed in the prefix to the succeeding argument, but\ncan be used here when this is the last argument."}], "description": "We record where in the input string an argument comes so we can report errors\nagainst those string positions.\nWe publish a 'change' event when-ever the text changes"}, {"description": "A link between a parameter and the data for that parameter.\nThe data for the parameter is available as in the preferred type and as\nan Argument for the CLI.\n<p>We also record validity information where applicable.\n<p>For values, null and undefined have distinct definitions. null means\nthat a value has been provided, undefined means that it has not.\nThus, null is a valid default value, and common because it identifies an\nparameter that is optional. undefined means there is no value from\nthe command line."}, {"description": "A Requisition collects the information needed to execute a command.\nThere is no point in a requisition for parameter-less commands because there\nis no information to collect. A Requisition is a collection of assignments\nof values to parameters, each handled by an instance of Assignment.\nCliRequisition adds functions for parsing input from a command line to this\nclass.\n<h2>Events<h2>\nWe publish the following events:<ul>\n<li>argumentChange: The text of some argument has changed. It is likely that\nany UI component displaying this argument will need to be updated. (Note that\nthis event is actually published by the Argument itself - see the docs for\nArgument for more details)\nThe event object looks like: { argument: A, oldText: B, text: B }\n<li>commandChange: The command has changed. It is likely that a UI\nstructure will need updating to match the parameters of the new command.\nThe event object looks like { command: A }"}, {"params": [{"type": "string", "name": "typed", "description": "  The instruction as typed by the user so far"}, {"type": "object} A list of optional named parameters. Can be any of:\n<b>flags</b>: Flags for us to check against the predicates specified with the\ncommands. Defaulted to <tt>keyboard.buildFlags({ ", "name": "options", "description": " );</tt>\nif not specified."}], "description": "An object used during command line parsing to hold the various intermediate\ndata steps.\n<p>The 'output' of the update is held in 2 objects: input.hints which is an\narray of hints to display to the user. In the future this will become a\nsingle value.\n<p>The other output value is input.requisition which gives access to an\nargs object for use in executing the final command.\n<p>The majority of the functions in this class are called in sequence by the\nconstructor. Their task is to add to <tt>hints</tt> fill out the requisition.\n<p>The general sequence is:<ul>\n<li>_tokenize(): convert _typed into _parts\n<li>_split(): convert _parts into _command and _unparsedArgs\n<li>_assign(): convert _unparsedArgs into requisition\n</ul>"}], "namespace": "", "module": "yui", "events": {"flick": {"return": "{EventHandle} the detach handle", "params": [{"type": "string", "name": "type", "description": "  \"flick\""}, {"type": "function", "name": "fn", "description": "  The method the event invokes. It receives an event facade with an e.flick object containing the flick related properties: e.flick.time, e.flick.distance, e.flick.velocity and e.flick.axis, e.flick.start."}, {"type": "Object", "name": "cfg", "description": "  Optional. An object which specifies any of the following:\n<dl>\n<dt>minDistance (in pixels, defaults to 10)</dt>\n<dd>The minimum distance between start and end points, which would qualify the gesture as a flick.</dd>\n<dt>minVelocity (in pixels/ms, defaults to 0)</dt>\n<dd>The minimum velocity which would qualify the gesture as a flick.</dd>\n<dt>preventDefault (defaults to false)</dt>\n<dd>Can be set to true/false to prevent default behavior as soon as the touchstart/touchend or mousedown/mouseup is received so that things like scrolling or text selection can be \nprevented. This property can also be set to a function, which returns true or false, based on the event facade passed to it.</dd>\n<dt>axis (no default)</dt>\n<dd>Can be set to \"x\" or \"y\" if you want to constrain the flick velocity and distance to a single axis. If not\ndefined, the axis along which the maximum distance was covered is used.</dd>\n</dl>"}], "description": "Sets up a \"flick\" event, that is fired whenever the user initiates a flick gesture on the node\nwhere the listener is attached. The subscriber can specify a minimum distance or velocity for\nwhich the event is to be fired. The subscriber can also specify if there is a particular axis which\nthey are interested in - \"x\" or \"y\". If no axis is specified, the axis along which there was most distance\ncovered is used.\n<p>It is recommended that you use Y.bind to set up context and additional arguments for your event handler,\nhowever if you want to pass the context and arguments as additional signature arguments to \"on\", \nyou need to provide a null value for the configuration object, e.g: <code>node.on(\"flick\", fn, null, context, arg1, arg2, arg3)</code></p>", "param": "type {string} \"flick\""}, "contentready": {"return": "{EventHandle} the detach handle", "description": "Executes the callback as soon as the specified element\nis detected in the DOM with a nextSibling property\n(indicating that the element's children are available).\nThis function expects a selector\nstring for the element(s) to detect.  If you already have\nan element reference, you don't need this event.", "param": "type {string} 'contentready'", "params": [{"type": "string", "name": "type", "description": "  'contentready'"}, {"type": "function", "name": "fn", "description": "  the callback function to execute."}, {"type": "string", "name": "el", "description": "  an selector for the element(s) to attach."}, {"type": "", "name": "context", "description": " optional argument that specifies what 'this' refers to."}, {"type": "", "name": "args*", "description": " 0..n additional arguments to pass on to the callback function.\nThese arguments will be added after the event object."}], "guessedname": "contentready", "guessedtype": "property"}, "gesturemoveend": {"return": "{EventHandle} the detach handle", "params": [{"type": "string", "name": "type", "description": "  \"gesturemoveend\""}, {"type": "function", "name": "fn", "description": "  The method the event invokes. It receives the event facade of the underlying DOM event (mouseup or touchend.changedTouches[0])."}, {"type": "Object", "name": "cfg", "description": "  Optional. An object which specifies:\n<dl>\n<dt>standAlone (defaults to false)</dt>\n<dd>true, if the subscriber should be notified even if a \"gesturemovestart\" or \"gesturemove\" has not occured on the same node.</dd>\n<dt>root (defaults to document)</dt>\n<dd>The node to which the internal DOM listeners should be attached.</dd>\n<dt>preventDefault (defaults to false)</dt>\n<dd>Can be set to true/false to prevent default behavior as soon as the touchend or mouseup is received. As with gesturemovestart, can also be set to function which returns true/false based on the event facade passed to it.</dd>\n</dl>"}], "description": "Sets up a \"gesturemoveend\" event, that is fired on touch devices in response to a single finger \"touchend\",\nand on mouse based devices in response to a \"mouseup\".\n<p>By default this event is only fired when the same node\nhas received a \"gesturemove\" or \"gesturemovestart\" event. The subscriber can set standAlone to true, in the configuration properties,\nif they want to listen for this event without a preceding \"gesturemovestart\" or \"gesturemove\".</p>\n<p>By default this event sets up it's internal \"touchend\" and \"mouseup\" DOM listeners on the document element. The subscriber\ncan set the root configuration property, to specify which node to attach DOM listeners to, if different from the document.</p> \n<p>This event can also be listened for using node.delegate().</p>\n<p>It is recommended that you use Y.bind to set up context and additional arguments for your event handler,\nhowever if you want to pass the context and arguments as additional signature arguments to on/delegate, \nyou need to provide a null value for the configuration object, e.g: <code>node.on(\"gesturemoveend\", fn, null, context, arg1, arg2, arg3)</code></p>", "param": "type {string} \"gesturemoveend\""}, "dateFormatChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "dateFormatChange", "description": "Fires when the value for the configuration attribute 'dateFormat' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "formatterChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "formatterChange", "description": "Fires when the value for the configuration attribute 'formatter' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "hashchange": {"description": "Synthetic <code>window.onhashchange</code> event that normalizes differences\nacross browsers and provides support for browsers that don't natively support\n<code>onhashchange</code>.\nThis event is provided by the <code>history-hash</code> module.", "since": "3.2.0", "param": "{EventFacade} e Event facade with the following additional\nproperties:\n<dl>\n<dt>oldHash</dt>\n<dd>\nPrevious hash fragment value before the change.\n</dd>\n<dt>oldUrl</dt>\n<dd>\nPrevious URL (including the hash fragment) before the change.\n</dd>\n<dt>newHash</dt>\n<dd>\nNew hash fragment value after the change.\n</dd>\n<dt>newUrl</dt>\n<dd>\nNew URL (including the hash fragment) after the change.\n</dd>\n</dl>", "params": [{"type": "EventFacade", "name": "e", "description": " Event facade with the following additional\nproperties:\n<dl>\n<dt>oldHash</dt>\n<dd>\nPrevious hash fragment value before the change.\n</dd>\n<dt>oldUrl</dt>\n<dd>\nPrevious URL (including the hash fragment) before the change.\n</dd>\n<dt>newHash</dt>\n<dd>\nNew hash fragment value after the change.\n</dd>\n<dt>newUrl</dt>\n<dd>\nNew URL (including the hash fragment) after the change.\n</dd>\n</dl>"}], "guessedname": "hashNotifiers", "guessedtype": "property", "example": "YUI().use('history-hash', function (Y) {\nY.on('hashchange', function (e) {\n// Handle hashchange events on the current window.\n}, Y.config.win);\n});"}, "containerCollapse": {"params": [{"type": "Event.Facade", "name": "event", "description": " The containerCollapse event."}], "description": "Handles the containerCollapse event. Fired when the container is hidden.", "param": "{Event.Facade} event The containerCollapse event."}, "localeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "localeChange", "description": "Fires when the value for the configuration attribute 'locale' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "dataSourceTypeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "dataSourceTypeChange", "description": "Fires when the value for the configuration attribute 'dataSourceType' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "selectionEnforce": {"params": [{"type": "Event.Facade", "name": "event", "description": " The selectionEnforce event."}], "description": "Handles the selectionEnforce event. Fired if <a href=\"Autocomplete.html#config_forceSelection\">forceSelection</a>\nis enabled and the users input element has been cleared because it did not match one of the results.", "param": "{Event.Facade} event The selectionEnforce event."}, "dataReturn": {"params": [{"type": "Event.Facade", "name": "event", "description": " The dataReturn event."}], "description": "Handles the dataReturn event. Fired when data successfully comes back from the data request.", "param": "{Event.Facade} event The dataReturn event."}, "stackChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "stackChange", "description": "Fires when the value for the configuration attribute 'stack' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "queryIntervalChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "queryIntervalChange", "description": "Fires when the value for the configuration attribute 'queryInterval' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "gesturemovestart": {"return": "{EventHandle} the detach handle", "params": [{"type": "string", "name": "type", "description": "  \"gesturemovestart\""}, {"type": "function", "name": "fn", "description": "  The method the event invokes. It receives the event facade of the underlying DOM event (mousedown or touchstart.touches[0]) which contains position co-ordinates."}, {"type": "Object", "name": "cfg", "description": "  Optional. An object which specifies:\n<dl>\n<dt>minDistance (defaults to 0)</dt>\n<dd>The minimum distance threshold which should be crossed before the gesturemovestart is fired</dd>\n<dt>minTime (defaults to 0)</dt>\n<dd>The minimum time threshold for which the finger/mouse should be help down before the gesturemovestart is fired</dd>\n<dt>button (no default)</dt>\n<dd>In the case of a mouse input device, if the event should only be fired for a specific mouse button.</dd>\n<dt>preventDefault (defaults to false)</dt>\n<dd>Can be set to true/false to prevent default behavior as soon as the touchstart or mousedown is received (that is before minTime or minDistance thresholds are crossed, and so before the gesturemovestart listener is notified) so that things like text selection and context popups (on touch devices) can be \nprevented. This property can also be set to a function, which returns true or false, based on the event facade passed to it (for example, DragDrop can determine if the target is a valid handle or not before preventing default).</dd>\n</dl>"}], "description": "Sets up a \"gesturemovestart\" event, that is fired on touch devices in response to a single finger \"touchstart\",\nand on mouse based devices in response to a \"mousedown\". The subscriber can specify the minimum time\nand distance thresholds which should be crossed before the \"gesturemovestart\" is fired and for the mouse,\nwhich button should initiate a \"gesturemovestart\". This event can also be listened for using node.delegate().\n<p>It is recommended that you use Y.bind to set up context and additional arguments for your event handler,\nhowever if you want to pass the context and arguments as additional signature arguments to on/delegate, \nyou need to provide a null value for the configuration object, e.g: <code>node.on(\"gesturemovestart\", fn, null, context, arg1, arg2, arg3)</code></p>", "param": "type {string} \"gesturemovestart\""}, "domready": {"description": "The domready event fires at the moment the browser's DOM is\nusable. In most cases, this is before images are fully\ndownloaded, allowing you to provide a more responsive user\ninterface.\nIn YUI 3, domready subscribers will be notified immediately if\nthat moment has already passed when the subscription is created.\nOne exception is if the yui.js file is dynamically injected into\nthe page.  If this is done, you must tell the YUI instance that\nyou did this in order for DOMReady (and window load events) to\nfire normally.  That configuration option is 'injected' -- set\nit to true if the yui.js script is not included inline.\nThis method is part of the 'event-ready' module, which is a\nsubmodule of 'event'."}, "buttonChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "buttonChange", "description": "Fires when the value for the configuration attribute 'button' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "dataError": {"params": [{"type": "Event.Facade", "name": "event", "description": " The dataError event."}], "description": "Handles the dataError event. Fired when there is an error accessing the data.", "param": "{Event.Facade} event The dataError event."}, "forceSelectionChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "forceSelectionChange", "description": "Fires when the value for the configuration attribute 'forceSelection' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "dataSourceChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "dataSourceChange", "description": "Fires when the value for the configuration attribute 'dataSource' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "calendarChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "calendarChange", "description": "Fires when the value for the configuration attribute 'calendar' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "uniqueNameChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "uniqueNameChange", "description": "Fires when the value for the configuration attribute 'uniqueName' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "gesturemove": {"return": "{EventHandle} the detach handle", "params": [{"type": "string", "name": "type", "description": "  \"gesturemove\""}, {"type": "function", "name": "fn", "description": "  The method the event invokes. It receives the event facade of the underlying DOM event (mousemove or touchmove.touches[0]) which contains position co-ordinates."}, {"type": "Object", "name": "cfg", "description": "  Optional. An object which specifies:\n<dl>\n<dt>standAlone (defaults to false)</dt>\n<dd>true, if the subscriber should be notified even if a \"gesturemovestart\" has not occured on the same node.</dd>\n<dt>root (defaults to document)</dt>\n<dd>The node to which the internal DOM listeners should be attached.</dd>\n<dt>preventDefault (defaults to false)</dt>\n<dd>Can be set to true/false to prevent default behavior as soon as the touchmove or mousemove is received. As with gesturemovestart, can also be set to function which returns true/false based on the event facade passed to it.</dd>\n</dl>"}], "description": "Sets up a \"gesturemove\" event, that is fired on touch devices in response to a single finger \"touchmove\",\nand on mouse based devices in response to a \"mousemove\".\n<p>By default this event is only fired when the same node\nhas received a \"gesturemovestart\" event. The subscriber can set standAlone to true, in the configuration properties,\nif they want to listen for this event without an initial \"gesturemovestart\".</p>\n<p>By default this event sets up it's internal \"touchmove\" and \"mousemove\" DOM listeners on the document element. The subscriber\ncan set the root configuration property, to specify which node to attach DOM listeners to, if different from the document.</p> \n<p>This event can also be listened for using node.delegate().</p>\n<p>It is recommended that you use Y.bind to set up context and additional arguments for your event handler,\nhowever if you want to pass the context and arguments as additional signature arguments to on/delegate, \nyou need to provide a null value for the configuration object, e.g: <code>node.on(\"gesturemove\", fn, null, context, arg1, arg2, arg3)</code></p>", "param": "type {string} \"gesturemove\""}, "textboxChange": {"params": [{"type": "Event.Facade", "name": "event", "description": " The textboxChange event."}], "description": "Handles the textboxChange event. Fired when the value in the input element is changed.", "param": "{Event.Facade} event The textboxChange event."}, "typeAhead": {"params": [{"type": "Event.Facade", "name": "event", "description": " The typeAhead event."}], "description": "Handles the typeAhead event. Fired when the input element has been pre-filled by the type-ahead feature.", "param": "{Event.Facade} event The typeAhead event."}, "matchKeyChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "matchKeyChange", "description": "Fires when the value for the configuration attribute 'matchKey' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "dataRequest": {"params": [{"type": "Event.Facade", "name": "event", "description": " The dataRequest event."}], "description": "Handles the dataRequest event. Fired when ever a query is sent to the data source.", "param": "{Event.Facade} event The dataRequest event."}, "available": {"return": "{EventHandle} the detach handle", "description": "Executes the callback as soon as the specified element\nis detected in the DOM.  This function expects a selector\nstring for the element(s) to detect.  If you already have\nan element reference, you don't need this event.", "param": "type {string} 'available'", "params": [{"type": "string", "name": "type", "description": "  'available'"}, {"type": "function", "name": "fn", "description": "  the callback function to execute."}, {"type": "string", "name": "el", "description": "  an selector for the element(s) to attach"}, {"type": "", "name": "context", "description": " optional argument that specifies what 'this' refers to."}, {"type": "", "name": "args*", "description": " 0..n additional arguments to pass on to the callback function.\nThese arguments will be added after the event object."}], "guessedname": "available", "guessedtype": "property"}, "queryMatchContainsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "queryMatchContainsChange", "description": "Fires when the value for the configuration attribute 'queryMatchContains' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "mousewheel": {"return": "{EventHandle} the detach handle", "description": "Mousewheel event.  This listener is automatically attached to the\ncorrect target, so one should not be supplied.  Mouse wheel \ndirection and velocity is stored in the 'wheelDelta' field.", "param": "type {string} 'mousewheel'", "params": [{"type": "string", "name": "type", "description": "  'mousewheel'"}, {"type": "function", "name": "fn", "description": "  the callback to execute"}, {"type": "", "name": "context", "description": " optional context object"}, {"type": "", "name": "args", "description": " 0..n additional arguments to provide to the listener."}], "guessedname": "mousewheel", "guessedtype": "property"}, "itemMouseOut": {"params": [{"type": "Event.Facade", "name": "event", "description": " The itemMouseOut event."}], "description": "Handles the itemMouseOut event. Fired when the user mouses away from an item.", "param": "{Event.Facade} event The itemMouseOut event."}, "itemArrowTo": {"params": [{"type": "Event.Facade", "name": "event", "description": " The itemArrowTo event."}], "description": "Handles the itemArrowTo event. Fired when the user navigates via the keyboard to a selected item.", "param": "{Event.Facade} event The itemArrowTo event."}, "delimCharChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "delimCharChange", "description": "Fires when the value for the configuration attribute 'delimChar' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "valueChange": {"params": [{"type": "EventFacade", "name": "e", "description": " Event facade with the following additional\nproperties:\n<dl>\n<dt>prevVal (String)</dt>\n<dd>\nPrevious value before the latest change.\n</dd>\n<dt>newVal (String)</dt>\n<dd>\nNew value after the latest change.\n</dd>\n</dl>"}], "description": "<p>\nSynthetic event that fires when the <code>value</code> property of an input\nfield or textarea changes as a result of a keystroke, mouse operation, or\ninput method editor (IME) input event.\n</p>\n<p>\nUnlike the <code>onchange</code> event, this event fires when the value\nactually changes and not when the element loses focus. This event also\nreports IME and multi-stroke input more reliably than <code>oninput</code> or\nthe various key events across browsers.\n</p>", "param": "{EventFacade} e Event facade with the following additional\nproperties:\n<dl>\n<dt>prevVal (String)</dt>\n<dd>\nPrevious value before the latest change.\n</dd>\n<dt>newVal (String)</dt>\n<dd>\nNew value after the latest change.\n</dd>\n</dl>", "example": "YUI().use('event-valuechange', function (Y) {\nY.one('input').on('valueChange', function (e) {\n// Handle valueChange events on the first input element on the page.\n});\n});"}, "minQueryLengthChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "minQueryLengthChange", "description": "Fires when the value for the configuration attribute 'minQueryLength' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "containerExpand": {"params": [{"type": "Event.Facade", "name": "event", "description": " The containerExpand event."}], "description": "Handles the containerExpand event. Fired when the container is shown.", "param": "{Event.Facade} event The containerExpand event."}, "typeAheadDelayChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "typeAheadDelayChange", "description": "Fires when the value for the configuration attribute 'typeAheadDelay' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "key": {"return": "{Event.Handle} the detach handle", "params": [{"type": "string", "name": "type", "description": "  'key'"}, {"type": "function", "name": "fn", "description": "  the function to execute"}, {"type": "string|HTMLElement|collection", "name": "id", "description": "  the element(s) to bind"}, {"type": "string", "name": "spec", "description": "  the keyCode and modifier specification"}, {"type": "", "name": "o", "description": " optional context object"}, {"type": "", "name": "args", "description": " 0..n additional arguments to provide to the listener."}], "description": "<p>Add a key listener.  The listener will only be notified if the\nkeystroke detected meets the supplied specification.  The\nspecification is a string that is defined as:</p>\n<dl>\n<dt>spec</dt>\n<dd><code>[{type}:]{code}[,{code}]*</code></dd>\n<dt>type</dt>\n<dd><code>\"down\", \"up\", or \"press\"</code></dd>\n<dt>code</dt>\n<dd><code>{keyCode|character|keyName}[+{modifier}]*</code></dd>\n<dt>modifier</dt>\n<dd><code>\"shift\", \"ctrl\", \"alt\", or \"meta\"</code></dd>\n<dt>keyName</dt>\n<dd><code>\"enter\", \"backspace\", \"esc\", \"tab\", \"pageup\", or \"pagedown\"</code></dd>\n</dl>\n<p>Examples:</p>\n<ul>\n<li><code>Y.on(\"key\", callback, \"press:12,65+shift+ctrl\", \"#my-input\");</code></li>\n<li><code>Y.delegate(\"key\", preventSubmit, \"enter\", \"#forms\", \"input[type=text]\");</code></li>\n<li><code>Y.one(\"doc\").on(\"key\", viNav, \"j,k,l,;\");</code></li>\n</ul>", "param": "type {string} 'key'"}, "inputChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "inputChange", "description": "Fires when the value for the configuration attribute 'input' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "unmatchedItemSelect": {"params": [{"type": "Event.Facade", "name": "event", "description": " The unmatchedItemSelect event."}], "description": "Handles the unmatchedItemSelect event. Fired when a user selects something that does\nnot match any of the displayed results.", "param": "{Event.Facade} event The unmatchedItemSelect event."}, "schemaTypeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "schemaTypeChange", "description": "Fires when the value for the configuration attribute 'schemaType' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "itemMouseOver": {"params": [{"type": "Event.Facade", "name": "event", "description": " The itemMouseOver event."}], "description": "Handles the itemMouseOver event. Fired when the user mouses over an item.", "param": "{Event.Facade} event The itemMouseOver event."}, "windowresize": {"description": "Firefox fires the window resize event once when the resize action\nfinishes, other browsers fire the event periodically during the\nresize.  This code uses timeout logic to simulate the Firefox \nbehavior in other browsers.", "guessedname": "windowresize", "guessedtype": "property"}, "suppressInputUpdateChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "suppressInputUpdateChange", "description": "Fires when the value for the configuration attribute 'suppressInputUpdate' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "typeAheadChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "typeAheadChange", "description": "Fires when the value for the configuration attribute 'typeAhead' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "queryMatchCaseChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "queryMatchCaseChange", "description": "Fires when the value for the configuration attribute 'queryMatchCase' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "textboxFocus": {"params": [{"type": "Event.Facade", "name": "event", "description": " The textboxFocus event."}], "description": "Handles the textboxFocus event. Fired when user moves focus to the input element.", "param": "{Event.Facade} event The textboxFocus event."}, "itemArrowFrom": {"params": [{"type": "Event.Facade", "name": "event", "description": " The itemArrowFrom event."}], "description": "Handles the itemArrowFrom event. Fired when the user navigates via the keyboard away from\na selected item.", "param": "{Event.Facade} event The itemArrowFrom event."}, "firstDayOfWeekChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "firstDayOfWeekChange", "description": "Fires when the value for the configuration attribute 'firstDayOfWeek' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "containerPopulate": {"params": [{"type": "Event.Facade", "name": "event", "description": " The containerPopulate event."}], "description": "Handles the containerPopulate event. Fired when the container is populated.", "param": "{Event.Facade} event The containerPopulate event."}, "itemSelect": {"params": [{"type": "Event.Facade", "name": "event", "description": " The itemSelect event."}], "description": "Handles the itemSelect event. Fired when an item in the list is selected.", "param": "{Event.Facade} event The itemSelect event."}, "queryQuestionMarkChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "queryQuestionMarkChange", "description": "Fires when the value for the configuration attribute 'queryQuestionMark' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "setValueChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "setValueChange", "description": "Fires when the value for the configuration attribute 'setValue' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "textboxKey": {"params": [{"type": "Event.Facade", "name": "event", "description": " The textboxKey event."}], "description": "Handles the textboxKey event. Fired when the input element receives key input.", "param": "{Event.Facade} event The textboxKey event."}, "textboxBlur": {"params": [{"type": "Event.Facade", "name": "event", "description": " The textboxBlur event."}], "description": "Handles the textboxBlur event. Fired when the user leaves the input element.", "param": "{Event.Facade} event The textboxBlur event."}, "schemaChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "schemaChange", "description": "Fires when the value for the configuration attribute 'schema' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "queryDelayChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "queryDelayChange", "description": "Fires when the value for the configuration attribute 'queryDelay' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "configs": {"queryQuestionMark": {"default": "true", "type": "Boolean", "description": "For IO DataSources, AutoComplete will automatically insert a \"?\" between the server URI and \nthe encoded query string. To prevent this behavior, you can\nset this value to false. If you need to customize this even further, you\ncan override the <a href=\"AutoComplete.html#method_generateRequest\">generateRequest</a> method.", "guessedname": "queryQuestionMark", "guessedtype": "property"}, "forceSelection": {"default": "false", "type": "Boolean", "description": "If <a href=\"AutoComplete.html#config_typeAhead\">typeAhead</a> is true, this\nwill clear a selection when the overlay closes unless a user explicitly selects an item.", "guessedname": "forceSelection", "guessedtype": "property"}, "locale": {"default": "\"en\"", "deprecated": "Use Y.config.lang and Y.Intl externalization support", "type": "String", "description": "The default locale for the widget. NOTE: Using get/set on the \"strings\" attribute will\nreturn/set strings for this locale."}, "typeAheadDelay": {"default": "0.2", "type": "Number", "description": "If <a href=\"AutoComplete.html#config_typeAhead\">typeAhead</a> is true, number of seconds \nto delay before updating the input. In order to prevent certain race conditions, this value must\nalways be greater than the <a href=\"AutoComplete.html#config_queryDelay\">queryDelay</a>.", "guessedname": "typeAheadDelay", "guessedtype": "property"}, "calendar": {"default": "{}", "type": "Object", "description": "<a href=\"Calendar.html\">Calendar</a> configuration Object.</a>", "guessedname": "calendar", "guessedtype": "property"}, "schemaType": {"default": "array", "type": "String", "description": "A valid type of <a href=\"module_datasource.html\">DataSource</a> schema plugin, such as array, json, xml, etc.", "guessedname": "schemaType", "guessedtype": "property"}, "dateFormat": {"default": "%A - %d %b %Y", "type": "String", "description": "The default date format string which can be overriden for\nlocalization support. The format must be valid according to\n<a href=\"DataType.Date.html\">A.DataType.Date.format</a>.", "guessedname": "navigationDateFormat", "guessedtype": "property"}, "firstDayOfWeek": {"default": "0", "type": "Number", "description": "First day of the week: Sunday is 0, Monday is 1.", "guessedname": "firstDayOfWeek", "guessedtype": "property"}, "queryMatchCase": {"default": "false", "type": "Boolean", "description": "When <a href=\"AutoComplete.html#config_applyLocalFilter\">applyLocalFilter</a> is true,\nsetting this to true will match only results with the same case.", "guessedname": "queryMatchCase", "guessedtype": "property"}, "typeAhead": {"default": "false", "type": "Boolean", "description": "If <a href=\"AutoComplete.html#config_autoHighlight\">autoHighlight</a> is enabled, whether or not the \ninput field should be automatically updated with the first result as the user types, \nautomatically selecting the portion of the text the user has not typed yet.", "guessedname": "typeAhead", "guessedtype": "property"}, "delimChar": {"default": "null", "type": "String", "description": "The character used to indicate the beginning or ending of a new value. Most commonly used\nis a \",\".", "guessedname": "delimChar", "guessedtype": "property"}, "input": {"default": "null", "type": "String | Node", "description": "The input field which will recieve the users input.", "guessedname": "input", "guessedtype": "property"}, "queryInterval": {"default": "0.5", "type": "Number", "description": "When IME usage is detected or interval detection is explicitly enabled,\nAutoComplete will detect the input value at the given interval and send a\nquery if the value has changed.", "guessedname": "queryInterval", "guessedtype": "property"}, "formatter": {"default": "function(dates) { return dates.formatted.join(','); }", "type": "function", "description": "Function to format the array of the selected dates before set the\nvalue of the input.", "guessedname": "formatter", "guessedtype": "property"}, "schema": {"default": "null", "type": "Object", "description": "A valid configuration object for any of <a href=\"module_datasource.html\">DataSource</a> schema plugins.", "guessedname": "schema", "guessedtype": "property"}, "minQueryLength": {"default": "1", "type": "Number", "description": "The minimum number of characters required to query the data source.", "guessedname": "minQueryLength", "guessedtype": "property"}, "setValue": {"default": "true", "type": "boolean", "description": "If true set the selected date with the correct\n<a href=\"Calendar.html#config_dateFormat\">dateFormat</a> to the\nvalue of the input field which is hosting the Calendar.", "guessedname": "setValue", "guessedtype": "property"}, "matchKey": {"default": "0", "type": "String | Number", "description": "The key or numeric index in the schema to match the result against.", "guessedname": "matchKey", "guessedtype": "property"}, "queryMatchContains": {"default": "false", "type": "Boolean", "description": "When <a href=\"AutoComplete.html#config_applyLocalFilter\">applyLocalFilter</a> is true,\nsetting this to true will match results which contain the query anywhere in the text,\ninstead of just matching just items that start with the query.", "guessedname": "queryMatchContains", "guessedtype": "property"}, "suppressInputUpdate": {"default": "false", "type": "Boolean", "description": "Whether or not the input field should be updated with selections.", "guessedname": "suppressInputUpdate", "guessedtype": "property"}, "dataSource": {"default": "null", "type": "Object | String | Function | Array", "description": "The data source that results will be read from. This can either be\nan existing <a href=\"DataSource.html\">DataSource</a> object, or it can be a\nvalue that would be passed to <a href=\"DataSource.html\">DataSource</a>.", "guessedname": "dataSource", "guessedtype": "property"}, "uniqueName": {"default": "null", "type": "String", "description": "The unique ID of the input element.", "guessedname": "uniqueName", "guessedtype": "property"}, "stack": {"default": "true", "type": "boolean", "description": "If true is able to do stacking with another overlays.", "guessedname": "stack", "guessedtype": "property"}, "button": {"description": "To use a button", "default": "true", "deprecated": "", "guessedname": "button", "guessedtype": "property", "type": "Boolean"}, "dataSourceType": {"default": "null", "type": "String", "description": "The type of the data source passed into <a href=\"AutoComplete.html#config_dataSource\">dataSource</a>.\nThis can be used to explicitly declare what kind of <a href=\"DataSource.html\">DataSource</a> object will\nbe created.", "guessedname": "dataSourceType", "guessedtype": "property"}, "queryDelay": {"default": "0.2", "type": "Number", "description": "The amount of time in seconds to delay before submitting the query.", "guessedname": "queryDelay", "guessedtype": "property"}}, "uses": ["EventTarget"], "file": "aui.js", "shortname": "YUI", "properties": {"value": {"description": "The current value in a type as specified by param.type", "guessedname": "value", "guessedtype": "property"}, "conversion": {"see": "types.Conversion", "description": "Report on the status of the last parse() conversion.", "guessedname": "conversion", "guessedtype": "property"}, "version": {"type": "string", "description": "The version number of the YUI instance.", "guessedname": "version", "guessedtype": "property"}, "commandParam": {"description": "This is a special parameter to reflect the command itself.", "guessedname": "commandParam", "guessedtype": "property"}, "_assignments": {"description": "The object that stores of Assignment objects that we are filling out.\nThe Assignment objects are stored under their param.name for named\nlookup. Note: We make use of the property of Javascript objects that\nthey are not just hashmaps, but linked-list hashmaps which iterate in\ninsertion order.\nExcludes the commandAssignment.", "guessedname": "_assignments", "guessedtype": "property"}, "Global": {"type": "EventTarget", "description": "Hosts YUI page level events.  This is where events bubble to\nwhen the broadcast config is set to 2.  This property is\nonly available if the custom event module is loaded.", "guessedname": "Global", "guessedtype": "property"}, "AutoComplete.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the AutoComplete.", "guessedname": "ATTRS", "guessedtype": "property"}, "AT_CURSOR": {"description": "We sometimes need a way to say 'this error occurs where ever the cursor is'", "guessedname": "AT_CURSOR", "guessedtype": "property"}, "param": {"readonly": "", "description": "The parameter that we are assigning to", "guessedname": "param", "guessedtype": "property"}, "commandAssignment": {"guessedname": "commandAssignment", "readonly": "", "description": "The command that we are about to execute.", "see": "setCommandConversion()", "guessedtype": "property"}, "meta": {"description": "The component metadata is stored in Y.Env.meta.\nPart of the loader module.", "guessedname": "meta", "guessedtype": "property"}, "flags": {"description": "TODO: We were using a default of keyboard.buildFlags({ });\nThis allowed us to have commands that only existed in certain contexts\n- i.e. Javascript specific commands.", "guessedname": "flags", "guessedtype": "property"}, "PluginHost": {"submodule": "pluginhost-config", "description": "Adds pluginhost constructor configuration and static configuration support", "guessedname": "PluginHost", "guessedtype": "property"}, "Unicode": {"description": "Mapping UTF-8 groups of characters. Based on Steven Levithan's XRegExp\nproject (http://xregexp.com)", "guessedname": "Unicode", "guessedtype": "property"}, "arg": {"description": "The string version of the current value", "guessedname": "arg", "guessedtype": "property"}, "START_EVENT": {"description": "This module is the conditional loaded DD file to support gesture events.\nIn the event that DD is loaded onto a device that support touch based events\nThis module is loaded and over rides 2 key methods on DD.Drag and DD.DDM to\nattach the gesture events.", "guessedname": "START_EVENT", "guessedtype": "property"}, "GlobalConfig": {"type": "{Object}", "global": "", "static": "", "description": "YUI.GlobalConfig is a master configuration that might span\nmultiple contexts in a non-browser environment.  It is applied\nfirst to all instances in all contexts.", "example": "YUI.GlobalConfig = {\nfilter: 'debug'\n};\nYUI().use('node', function(Y) {\n//debug files used here\n});\nYUI({\nfilter: 'min'\n}).use('node', function(Y) {\n//min files used here\n});"}, "assignmentCount": {"readonly": "", "description": "The count of assignments. Excludes the commandAssignment", "guessedname": "assignmentCount", "guessedtype": "property"}, "YUI_config": {"global": "", "type": "{Object}", "description": "YUI_config is a page-level config.  It is applied to all\ninstances created on the page.  This is applied after\nYUI.GlobalConfig, and before the instance level configuration\nobjects.", "example": "//Single global var to include before YUI seed file\nYUI_config = {\nfilter: 'debug'\n};\nYUI().use('node', function(Y) {\n//debug files used here\n});\nYUI({\nfilter: 'min'\n}).use('node', function(Y) {\n//min files used here\n});"}, "_hints": {"description": "The store of hints generated by the assignments. We are trying to prevent\nthe UI from needing to access this in broad form, but instead use\nmethods that query part of this structure.", "guessedname": "_hints", "guessedtype": "property"}}, "methods": {"instanceOf": {"since": "3.3.0", "description": "instanceof check for objects that works around\nmemory leak in IE when the item tested is\nwindow/document"}, "_onTextboxKeyPress": {"description": "Handles the key press events of the input element.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onTextboxKeyPress", "guessedtype": "function"}, "all": {"return": {"type": "NodeList", "description": "A NodeList instance for the matching HTMLCollection/Array."}, "params": [{"type": "string", "name": "selector", "description": " The CSS selector to test against."}], "description": "Retrieves a NodeList based on the given CSS selector.", "param": "{string} selector The CSS selector to test against."}, "_onShowOverlay": {"protected": "", "params": [{"type": "Event", "name": "event", "description": ""}], "description": "Fires before the DatePicker overlay show. Responsible to invoke the\nrender phase of the Calendar.", "guessedname": "_onShowOverlay", "guessedtype": "function"}, "_notify": {"description": "Notify handler from Loader for attachment/load errors", "param": "callback {Function} The callback to pass to the `Y.config.loadErrorFn`", "params": [{"type": "Function", "name": "callback", "description": "  The callback to pass to the `Y.config.loadErrorFn`"}, {"type": "Object", "name": "response", "description": "  The response returned from Loader"}, {"type": "Array", "name": "args", "description": "  The aruments passed from Loader"}], "private": "", "guessedname": "_notify", "guessedtype": "function"}, "_init": {"private": "", "description": "Initialize this YUI instance", "guessedname": "_init", "guessedtype": "function"}, "_bindUITreeBrowserView": {"protected": "", "description": "Bind the events on the TreeBrowserView UI. Lifecycle.", "guessedname": "_bindUITreeBrowserView", "guessedtype": "function"}, "_typeAhead": {"description": "Updates in the input element with the first result as the user types,\nselecting the text the user has not typed yet.", "param": "{Node} elListItem The selected list item", "protected": "", "params": [{"type": "Node", "name": "elListItem", "description": " The selected list item"}, {"type": "String", "name": "query", "description": " The query string"}], "guessedname": "_typeAhead", "guessedtype": "function"}, "getStrings": {"params": [{"type": "String", "name": "locale", "description": " (optional) The locale for which the string value is required. Defaults to the current locale, if not provided."}], "description": "Gets the entire strings hash for a particular locale, performing locale lookup.\n<p>\nIf no values of the key are defined for a particular locale the value for the \ndefault locale (in initial locale set for the class) is returned.\n</p>", "param": "{String} locale (optional) The locale for which the string value is required. Defaults to the current locale, if not provided."}, "_setCalendar": {"return": {"type": "", "description": ""}, "description": "Setter for the <a href=\"DatePicker.html#calendar\">calendar</a>\nattribute.", "protected": "", "params": [{"type": "String", "name": "eventType", "description": " Event type"}], "guessedname": "_setCalendar", "guessedtype": "function"}, "setDefaultValues": {"description": "Reset all the assignments to their default values", "guessedname": "setDefaultValues", "guessedtype": "function"}, "_getStrings": {"description": "Returns the strings key/value hash for a paricular locale, without locale lookup applied.", "param": "{Object} locale", "protected": "", "params": [{"type": "Object", "name": "locale", "description": ""}], "guessedname": "_getStrings", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Bind the events on the Datepicker UI. Lifecycle.", "guessedname": "bindUI", "guessedtype": "function"}, "match": {"param": "{String} str", "params": [{"type": "String", "name": "str", "description": ""}, {"type": "String", "name": "group", "description": ""}, {"type": "String", "name": "flags", "description": ""}], "description": "Tests a string against an Unicode pattern. Returns the first match.", "guessedname": "match", "guessedtype": "function"}, "generateRequest": {"return": {"type": "Object", "description": ""}, "description": "An overridable method that creates an object to be passed to the sendRequest\nmethod of the data source object. Useful to overwrite if you wish to create\na custom request object before it's sent.", "param": "{String} query The string currently being entered", "params": [{"type": "String", "name": "query", "description": " The string currently being entered"}], "guessedname": "generateRequest", "guessedtype": "function"}, "get": {"deprecated": "Use Y.one", "static": "", "params": [{"type": "String | HTMLElement", "name": "node", "description": " a node or Selector"}, {"type": "Node | HTMLElement", "name": "doc", "description": " an optional document to scan. Defaults to Y.config.doc."}], "description": "Returns a single Node instance bound to the node or the\nfirst element matching the given selector.", "param": "{String | HTMLElement} node a node or Selector"}, "getParameterNames": {"description": "Where parameter name == assignment names - they are the same.", "guessedname": "getParameterNames", "guessedtype": "function"}, "_bindUISearchBrowserView": {"protected": "", "description": "Bind the events on the SearchBrowserView UI. Lifecycle.", "guessedname": "_bindUISearchBrowserView", "guessedtype": "function"}, "getInputStatusMarkup": {"description": "Return an array of Status scores so we can create a marked up\nversion of the command line input.", "guessedname": "getInputStatusMarkup", "guessedtype": "function"}, "_define": {"description": "Wrapper function for Object.defineProperty that creates a property whose\nvalue will be calulated only when asked for.  After calculating the value,\nthe getter wll be removed, so it will behave as a normal property beyond that\npoint.  A setter is also assigned so assigning to the property will clear\nthe getter, so foo.prop = 'a'; foo.prop; won't trigger the getter,\noverwriting value 'a'.\nUsed only by the DOMEventFacades used by IE8 when the YUI configuration\n<code>lazyEventFacade</code> is set to true.", "private": "", "static": "", "param": "o {DOMObject} A DOM object to add the property to", "guessedname": "_define", "guessedtype": "function", "params": [{"type": "DOMObject", "name": "o", "description": "  A DOM object to add the property to"}, {"type": "String", "name": "prop", "description": "  The name of the new property"}, {"type": "Function", "name": "valueFn", "description": "  The function that will return the initial, default\nvalue for the property."}]}, "getAssignment": {"description": "Assignments have an order, so we need to store them in an array.\nBut we also need named access ...", "guessedname": "getAssignment", "guessedtype": "function"}, "syncUI": {"protected": "", "description": "Sync the AutoComplete UI. Lifecycle.", "guessedname": "syncUI", "guessedtype": "function"}, "cached": {"return": {"type": "Function", "description": "Wrapped function."}, "description": "Returns a wrapper for a function which caches the return value of that function,\nkeyed off of the combined string representation of the argument values provided\nwhen the wrapper is called.\nCalling this function again with the same arguments will return the cached value\nrather than executing the wrapped function.\nNote that since the cache is keyed off of the string representation of arguments\npassed to the wrapper function, arguments that aren't strings and don't provide\na meaningful `toString()` method may result in unexpected caching behavior. For\nexample, the objects `{}` and `{foo: 'bar'}` would both be converted to the\nstring `[object Object]` when used as a cache key.", "param": "{Function} source The function to memoize.", "params": [{"type": "Function", "name": "source", "description": " The function to memoize."}, {"type": "Object} [cache={", "name": "]", "description": " Object in which to store cached values. You may seed\nthis object with pre-existing cached values if desired."}, {"type": "any", "name": "[refetch]", "description": " If supplied, this value is compared with the cached value\nusing a `==` comparison. If the values are equal, the wrapped function is\nexecuted again even though a cached value exists."}], "guessedname": "cached", "guessedtype": "function"}, "_setup": {"private": "", "description": "Finishes the instance setup. Attaches whatever modules were defined\nwhen the yui modules was registered.", "guessedname": "_setup", "guessedtype": "function"}, "applyTo": {"return": {"type": "Object", "description": "the return value from the applied method or null."}, "description": "Executes a method on a YUI instance with\nthe specified id if the specified method is whitelisted.", "param": "id {String} the YUI instance id.", "params": [{"type": "String", "name": "id", "description": "  the YUI instance id."}, {"type": "String", "name": "method", "description": "  the name of the method to exectute.\nEx: 'Object.keys'."}, {"type": "Array", "name": "args", "description": "  the arguments to apply to the method."}], "guessedname": "applyTo", "guessedtype": "function"}, "rbind": {"return": {"type": "function", "description": "the wrapped function."}, "description": "Returns a function that will execute the supplied function in the\nsupplied object's context, optionally adding any additional\nsupplied parameters to the end of the arguments the function\nis executed with.", "param": "{Function|String} f the function to bind, or a function name\nto execute on the context object.", "params": [{"type": "Function|String", "name": "f", "description": " the function to bind, or a function name\nto execute on the context object."}, {"type": "object", "name": "c", "description": " the execution context."}, {"type": "any", "name": "args*", "description": " 0..n arguments to append to the end of\narguments collection supplied to the function."}], "guessedname": "rbind", "guessedtype": "function"}, "delegate": {"return": {"type": "EventHandle", "description": "the detach handle"}, "description": "<p>Sets up event delegation on a container element.  The delegated event\nwill use a supplied selector or filtering function to test if the event\nreferences at least one node that should trigger the subscription\ncallback.</p>\n<p>Selector string filters will trigger the callback if the event originated\nfrom a node that matches it or is contained in a node that matches it.\nFunction filters are called for each Node up the parent axis to the\nsubscribing container node, and receive at each level the Node and the event\nobject.  The function should return true (or a truthy value) if that Node\nshould trigger the subscription callback.  Note, it is possible for filters\nto match multiple Nodes for a single event.  In this case, the delegate\ncallback will be executed for each matching Node.</p>\n<p>For each matching Node, the callback will be executed with its 'this'\nobject set to the Node matched by the filter (unless a specific context was\nprovided during subscription), and the provided event's\n<code>currentTarget</code> will also be set to the matching Node.  The\ncontaining Node from which the subscription was originally made can be\nreferenced as <code>e.container</code>.", "param": "type {string} the event type to delegate", "params": [{"type": "String", "name": "type", "description": "  the event type to delegate"}, {"type": "Function", "name": "fn", "description": "  the callback function to execute.  This function\nwill be provided the event object for the delegated event."}, {"type": "String|node", "name": "el", "description": "  the element that is the delegation container"}, {"type": "string|Function", "name": "spec", "description": "  a selector that must match the target of the\nevent or a function to test target and its parents for a match"}, {"type": "", "name": "context", "description": " optional argument that specifies what 'this' refers to."}, {"type": "", "name": "args*", "description": " 0..n additional arguments to pass on to the callback function.\nThese arguments will be added after the event object."}], "guessedname": "delegate", "guessedtype": "property"}, "_renderUISearchBrowserView": {"protected": "", "description": "Create the DOM structure for the SearchBrowserView. Lifecycle.", "guessedname": "_renderUISearchBrowserView", "guessedtype": "function"}, "each": {"return": {"type": "YUI", "description": "the YUI instance."}, "description": "Executes the supplied function for each item in\na collection.  Supports arrays, objects, and\nNodeLists", "param": "{object} o the object to iterate.", "params": [{"type": "object", "name": "o", "description": " the object to iterate."}, {"type": "function", "name": "f", "description": " the function to execute.  This function\nreceives the value, key, and object as parameters."}, {"type": "object", "name": "c", "description": " the execution context for the function."}, {"type": "boolean", "name": "proto", "description": " if true, prototype properties are\niterated on objects."}], "guessedname": "each", "guessedtype": "function"}, "syncStdContent": {"protected": "", "description": "Sync SchedulerBase StdContent.", "guessedname": "syncStdContent", "guessedtype": "function"}, "_use": {"description": "This private method is called from the `use` method queue. To ensure that only one set of loading\nlogic is performed at a time.", "param": "args* {String} 1-n modules to bind (uses arguments array).", "params": [{"type": "String", "name": "args*", "description": "  1-n modules to bind (uses arguments array)."}, {"type": "Function", "name": "*callback", "description": "  callback function executed when\nthe instance has the required functionality.  If included, it\nmust be the last parameter."}], "private": "", "guessedname": "_use", "guessedtype": "function"}, "dump": {"return": {"type": "String", "description": "the dump result."}, "description": "Returns a simple string representation of the object or array.\nOther types of objects will be returned unprocessed.  Arrays\nare expected to be indexed.", "param": "{Object} o The object to dump.", "params": [{"type": "Object", "name": "o", "description": " The object to dump."}, {"type": "Number", "name": "d", "description": " How deep to recurse child objects, default 3."}], "guessedname": "dump", "guessedtype": "function"}, "_renderUITreeBrowserView": {"protected": "", "description": "Create the DOM structure for the TreeBrowserView. Lifecycle.", "guessedname": "_renderUITreeBrowserView", "guessedtype": "function"}, "_renderUIInputTextControl": {"protected": "", "description": "Create the DOM structure for the InputTextControl. Lifecycle.", "guessedname": "_renderUIInputTextControl", "guessedtype": "function"}, "some": {"return": {"type": "boolean", "description": "true if the function ever returns true,\nfalse otherwise."}, "description": "Executes the supplied function for each item in\na collection.  The operation stops if the function\nreturns true. Supports arrays, objects, and\nNodeLists.", "param": "{object} o the object to iterate.", "params": [{"type": "object", "name": "o", "description": " the object to iterate."}, {"type": "function", "name": "f", "description": " the function to execute.  This function\nreceives the value, key, and object as parameters."}, {"type": "object", "name": "c", "description": " the execution context for the function."}, {"type": "boolean", "name": "proto", "description": " if true, prototype properties are\niterated on objects."}], "guessedname": "some", "guessedtype": "function"}, "initializer": {"protected": "", "description": "Construction logic executed during Datepicker instantiation. Lifecycle.", "guessedname": "initializer", "guessedtype": "function"}, "fail": {"description": "Forces an assertion error to occur. Shortcut for Y.Assert.fail().", "param": "{String} message (Optional) The message to display with the failure.", "static": "", "guessedname": "fail", "guessedtype": "property", "params": [{"type": "String", "name": "message", "description": " (Optional) The message to display with the failure."}]}, "decrement": {"description": "Replace the current value with the lower value if such a concept\nexists.", "guessedname": "decrement", "guessedtype": "function"}, "getHints": {"description": "Accessor for the hints array.\nWhile we could just use the hints property, using getHints() is\npreferred for symmetry with Requisition where it needs a function due to\nlack of an atomic update system.", "guessedname": "getHints", "guessedtype": "function"}, "_onInterval": {"protected": "", "description": "Enables the query to be triggered based on detecting text input via intervals instead of via\nkey events.", "guessedname": "_onInterval", "guessedtype": "function"}, "isFlashVersionAtLeast": {"return": {"type": "Boolean", "description": "Whether the Flash player version is greater than or equal to the one specified."}, "description": "Checks whether the version of the Flash player installed on the user's machine is greater\nthan or equal to the one specified. If it is, this method returns true; it is false otherwise.", "param": "flashMajor {int} The Major version of the Flash player to compare against.", "params": [{"type": "int", "name": "flashMajor", "description": "  The Major version of the Flash player to compare against."}, {"type": "int", "name": "flashMinor", "description": "  The Minor version of the Flash player to compare against."}, {"type": "int", "name": "flashRev", "description": "  The Revision version of the Flash player to compare against."}], "guessedname": "isFlashVersionAtLeast", "guessedtype": "function"}, "_applyFilter": {"return": {"type": "Node|Node[]|undefined", "description": "The Node or Nodes that satisfy the filter"}, "description": "Walks up the parent axis of an event's target, and tests each element\nagainst a supplied filter function.  If any Nodes, including the container,\nsatisfy the filter, the delegated callback will be triggered for each.\nHosted as a protected property of the `delegate` method (e.g.\n`Y.delegate._applyFilter`).", "param": "filter {Function} boolean function to test for inclusion in event\nnotification", "protected": "", "params": [{"type": "Function", "name": "filter", "description": "  boolean function to test for inclusion in event\nnotification"}, {"type": "Array", "name": "args", "description": "  the arguments that would be passed to subscribers"}, {"type": "CustomEvent", "name": "ce", "description": "    the DOM event wrapper"}], "guessedname": "_applyFilter", "guessedtype": "function"}, "_renderInput": {"protected": "", "description": "Handles the rendering of the input element.", "guessedname": "_renderInput", "guessedtype": "function"}, "merge": {"return": {"type": "Object", "description": "A new merged object."}, "description": "Returns a new object containing all of the properties of all the supplied\nobjects. The properties from later objects will overwrite those in earlier\nobjects.\nPassing in a single object will create a shallow copy of it. For a deep copy,\nuse `clone()`.", "param": "{Object} objects* One or more objects to merge.", "params": [{"type": "Object", "name": "objects*", "description": " One or more objects to merge."}], "guessedname": "merge", "guessedtype": "function"}, "applyConfig": {"description": "Applies a new configuration object to the YUI instance config.\nThis will merge new group/module definitions, and will also\nupdate the loader cache if necessary.  Updating Y.config directly\nwill not update the cache.", "since": "3.2.0", "param": "{Object} o the configuration object.", "params": [{"type": "Object", "name": "o", "description": " the configuration object."}], "guessedname": "applyConfig", "guessedtype": "function"}, "getDefaultLocale": {"return": {"type": "String", "description": "The default locale for the widget"}, "description": "Returns the default locale for the widget (the locale value defined by the\nwidget class, or provided by the user during construction).", "guessedname": "getDefaultLocale", "guessedtype": "function"}, "toString": {"description": "Helper when we're putting arguments back together", "guessedname": "toString", "guessedtype": "function"}, "_tokenize": {"description": "Split up the input taking into account ' and \"", "guessedname": "_tokenize", "guessedtype": "function"}, "getAttibute": {"return": {"type": "String", "description": "The current value of the attribute."}, "description": "Provides a normalized attribute interface.", "param": "{HTMLElement} el The target element for the attribute.", "params": [{"type": "HTMLElement", "name": "el", "description": " The target element for the attribute."}, {"type": "String", "name": "attr", "description": " The attribute to get."}], "guessedname": "getAttribute", "guessedtype": "function"}, "getAssignments": {"params": [{"type": "", "name": "includeCommand", "description": " By default only the parameter arguments are\nreturned unless (includeCommand === true), in which case the list is\nprepended with commandAssignment.arg"}], "description": "Access the arguments as an array.", "guessedname": "getAssignments", "guessedtype": "function"}, "extend": {"return": {"type": "object", "description": "the extended object."}, "description": "Utility to set up the prototype, constructor and superclass properties to\nsupport an inheritance strategy that can chain constructors and methods.\nStatic members will not be inherited.", "param": "{function} r   the object to modify.", "params": [{"type": "function", "name": "r", "description": "   the object to modify."}, {"type": "function", "name": "s", "description": " the object to inherit."}, {"type": "object", "name": "px", "description": " prototype properties to add/override."}, {"type": "object", "name": "sx", "description": " static properties to add/override."}], "guessedname": "extend", "guessedtype": "function"}, "_enableIntervalDetection": {"protected": "", "description": "Enables query interval detection for IME support.", "guessedname": "_enableIntervalDetection", "guessedtype": "function"}, "update": {"params": [{"type": " typed:a, cursor: { start:b, end:c } ", "name": "input", "description": " A structure that details the state of the input field.\nIt should look something like: \nWhere a is the contents of the input field, and b and c are the start\nand end of the cursor/selection respectively."}], "description": "Called by the UI when ever the user interacts with a command line input", "guessedname": "update", "guessedtype": "function"}, "_extractQuery": {"return": {"type": "String", "description": ""}, "description": "Extracts the right most query from the delimited string in the input.", "param": "{String} query String to parse", "protected": "", "params": [{"type": "String", "name": "query", "description": " String to parse"}], "guessedname": "_extractQuery", "guessedtype": "function"}, "_setStack": {"return": {"type": "boolean", "description": ""}, "description": "Setter for the <a href=\"Calendar.html#config_stack\">stack</a> attribute.", "protected": "", "params": [{"type": "boolean", "name": "value", "description": ""}], "guessedname": "_setStack", "guessedtype": "function"}, "_setTriggerValue": {"protected": "", "params": [{"type": "Object", "name": "dateObj", "description": " Object containing date information"}], "description": "Set the value of the trigger input with the date information.", "guessedname": "_setTriggerValue", "guessedtype": "function"}, "on": {"return": {"type": "", "description": "the event target or a detach handle per 'chain' config"}, "see": "Do.before", "params": [{"type": "", "name": "type", "description": " event type (this parameter does not apply for function events)"}, {"type": "", "name": "fn", "description": " the callback"}, {"type": "", "name": "context", "description": " optionally change the value of 'this' in the callback"}, {"type": "", "name": "args*", "description": " 0..n additional arguments to pass to the callback."}], "description": "<code>YUI</code>'s <code>on</code> method is a unified interface for subscribing to\nmost events exposed by YUI.  This includes custom events, DOM events, and\nfunction events.  <code>detach</code> is also provided to remove listeners\nserviced by this function.\nThe signature that <code>on</code> accepts varies depending on the type\nof event being consumed.  Refer to the specific methods that will\nservice a specific request for additional information about subscribing\nto that type of event.\n<ul>\n<li>Custom events.  These events are defined by various\nmodules in the library.  This type of event is delegated to\n<code>EventTarget</code>'s <code>on</code> method.\n<ul>\n<li>The type of the event</li>\n<li>The callback to execute</li>\n<li>An optional context object</li>\n<li>0..n additional arguments to supply the callback.</li>\n</ul>\nExample:\n<code>Y.on('drag:drophit', function() { // start work });</code>\n</li>\n<li>DOM events.  These are moments reported by the browser related\nto browser functionality and user interaction.\nThis type of event is delegated to <code>Event</code>'s\n<code>attach</code> method.\n<ul>\n<li>The type of the event</li>\n<li>The callback to execute</li>\n<li>The specification for the Node(s) to attach the listener\nto.  This can be a selector, collections, or Node/Element\nrefereces.</li>\n<li>An optional context object</li>\n<li>0..n additional arguments to supply the callback.</li>\n</ul>\nExample:\n<code>Y.on('click', function(e) { // something was clicked }, '#someelement');</code>\n</li>\n<li>Function events.  These events can be used to react before or after a\nfunction is executed.  This type of event is delegated to <code>Event.Do</code>'s\n<code>before</code> method.\n<ul>\n<li>The callback to execute</li>\n<li>The object that has the function that will be listened for.</li>\n<li>The name of the function to listen for.</li>\n<li>An optional context object</li>\n<li>0..n additional arguments to supply the callback.</li>\n</ul>\nExample <code>Y.on(function(arg1, arg2, etc) { // obj.methodname was executed }, obj 'methodname');</code>\n</li>\n</ul>\n<code>on</code> corresponds to the moment before any default behavior of\nthe event.  <code>after</code> works the same way, but these listeners\nexecute after the event's default behavior.  <code>before</code> is an\nalias for <code>on</code>.", "param": "type event type (this parameter does not apply for function events)"}, "_onTextboxBlur": {"description": "Handles the input element losing focus.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onTextboxBlur", "guessedtype": "function"}, "_setStrings": {"description": "Sets strings for a particular locale, merging with any existing\nstrings which may already be defined for the locale.", "param": "{Object} strings The hash of string key/values to set", "protected": "", "params": [{"type": "Object", "name": "strings", "description": " The hash of string key/values to set"}, {"type": "Object", "name": "locale", "description": " The locale for the string values being set"}], "guessedname": "_setStrings", "guessedtype": "function"}, "getAssignmentAt": {"description": "Look through the arguments attached to our assignments for the assignment\nat the given position.", "guessedname": "getAssignmentAt", "guessedtype": "function"}, "getCustomHint": {"description": "Provide some documentation for a command.", "guessedname": "getCustomHint", "guessedtype": "function"}, "_clearInterval": {"private": "", "description": "Clears the query interval", "guessedname": "_clearInterval", "guessedtype": "function"}, "getText": {"return": {"type": "String", "description": "The text content of the element (includes text of any descending elements)."}, "description": "Returns the text content of the HTMLElement.", "param": "{HTMLElement} element The html element.", "params": [{"type": "HTMLElement", "name": "element", "description": " The html element."}], "guessedname": "getText", "guessedtype": "property"}, "one": {"return": {"type": "Y.Node | null", "description": "a Node instance or null if no match found."}, "params": [{"type": "String | HTMLElement", "name": "node", "description": " a node or Selector"}], "description": "Returns a single Node instance bound to the node or the\nfirst element matching the given selector. Returns null if no match found.\n<strong>Note:</strong> For chaining purposes you may want to\nuse <code>Y.all</code>, which returns a NodeList when no match is found.", "param": "{String | HTMLElement} node a node or Selector"}, "header": {"description": "Method for setting and deleting IO HTTP headers to be sent with every\nrequest.\nHosted as a property on the `io` function (e.g. `Y.io.header`).", "param": "{String} l - HTTP header", "static": "", "guessedname": "header", "guessedtype": "function", "params": [{"type": "String", "name": "l", "description": " - HTTP header"}, {"type": "String", "name": "v", "description": " - HTTP header value"}]}, "_onTextboxFocus": {"description": "Handles the input element gaining focus.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onTextboxFocus", "guessedtype": "function"}, "message": {"return": {"type": "YUI", "description": "YUI instance."}, "description": "Write a system message.  This message will be preserved in the\nminified and raw versions of the YUI files, unlike log statements.", "param": "{String}  msg  The message to log.", "params": [{"type": "String", "name": "msg", "description": "  The message to log."}, {"type": "String", "name": "cat", "description": "  The log category for the message.  Default\ncategories are \"info\", \"warn\", \"error\", time\".\nCustom categories can be used as well. (opt)."}, {"type": "String", "name": "src", "description": "  The source of the the message (opt)."}, {"type": "boolean", "name": "silent", "description": " If true, the log event won't fire."}], "guessedname": "message", "guessedtype": "function"}, "guid": {"return": {"type": "String", "description": "the guid."}, "description": "Generate an id that is unique among all YUI instances", "param": "pre {String} optional guid prefix.", "params": [{"type": "String", "name": "pre", "description": "  optional guid prefix."}], "guessedname": "guid", "guessedtype": "function"}, "setWidth": {"param": "{HTMLElement} element The DOM element.", "params": [{"type": "HTMLElement", "name": "element", "description": " The DOM element."}, {"type": "String|Int", "name": "size", "description": " The pixel height to size to"}], "description": "Sets the width of the element to the given size, regardless\nof box model, border, padding, etc.", "guessedname": "setWidth", "guessedtype": "function"}, "use": {"return": {"type": "YUI", "description": "the YUI instance."}, "description": "Attaches one or more modules to the YUI instance.  When this\nis executed, the requirements are analyzed, and one of\nseveral things can happen:\nAll requirements are available on the page --  The modules\nare attached to the instance.  If supplied, the use callback\nis executed synchronously.\nModules are missing, the Get utility is not available OR\nthe 'bootstrap' config is false -- A warning is issued about\nthe missing modules and all available modules are attached.\nModules are missing, the Loader is not available but the Get\nutility is and boostrap is not false -- The loader is bootstrapped\nbefore doing the following....\nModules are missing and the Loader is available -- The loader\nexpands the dependency tree and fetches missing modules.  When\nthe loader is finshed the callback supplied to use is executed\nasynchronously.", "param": "modules* {String} 1-n modules to bind (uses arguments array).", "params": [{"type": "String", "name": "modules*", "description": "  1-n modules to bind (uses arguments array)."}, {"type": "Function", "name": "*callback", "description": "  callback function executed when\nthe instance has the required functionality.  If included, it\nmust be the last parameter."}], "guessedname": "use", "guessedtype": "function", "example": "// loads and attaches dd and its dependencies\nYUI().use('dd', function(Y) {});\n// loads and attaches dd and node as well as all of their dependencies (since 3.4.0)\nYUI().use(['dd', 'node'], function(Y) {});\n// attaches all modules that are available on the page\nYUI().use('*', function(Y) {});\n// intrinsic YUI gallery support (since 3.1.0)\nYUI().use('gallery-yql', function(Y) {});\n// intrinsic YUI 2in3 support (since 3.1.0)\nYUI().use('yui2-datatable', function(Y) {});"}, "log": {"return": {"type": "YUI", "description": "YUI instance."}, "description": "If the 'debug' config is true, a 'yui:log' event will be\ndispatched, which the Console widget and anything else\ncan consume.  If the 'useBrowserConsole' config is true, it will\nwrite to the browser console if available.  YUI-specific log\nmessages will only be present in the -debug versions of the\nJS files.  The build system is supposed to remove log statements\nfrom the raw and minified versions of the files.", "param": "{String}  msg  The message to log.", "params": [{"type": "String", "name": "msg", "description": "  The message to log."}, {"type": "String", "name": "cat", "description": "  The log category for the message.  Default\ncategories are \"info\", \"warn\", \"error\", time\".\nCustom categories can be used as well. (opt)."}, {"type": "String", "name": "src", "description": "  The source of the the message (opt)."}, {"type": "boolean", "name": "silent", "description": " If true, the log event won't fire."}], "guessedname": "log", "guessedtype": "function"}, "_afterSelectDate": {"protected": "", "params": [{"type": "Event", "name": "event", "description": ""}], "description": "Fires when a date is selected on the Calendar.", "guessedname": "_afterSelectDate", "guessedtype": "function"}, "stamp": {"return": {"type": "String", "description": "The object's guid or null."}, "description": "Returns a `guid` associated with an object.  If the object\ndoes not have one, a new one is created unless `readOnly`\nis specified.", "param": "o {Object} The object to stamp.", "params": [{"type": "Object", "name": "o", "description": "  The object to stamp."}, {"type": "Boolean", "name": "readOnly", "description": "  if `true`, a valid guid will only\nbe returned if the object has one assigned to it."}], "guessedname": "stamp", "guessedtype": "function"}, "create": {"return": {"type": "HTMLElement|DocumentFragment", "description": "returns a single HTMLElement \nwhen creating one node, and a documentFragment when creating\nmultiple nodes."}, "description": "Creates a new dom node using the provided markup string.", "param": "{String} html The markup used to create the element", "params": [{"type": "String", "name": "html", "description": " The markup used to create the element"}, {"type": "HTMLDocument", "name": "doc", "description": " An optional document context"}], "guessedname": "create", "guessedtype": "function"}, "add": {"return": {"type": "YUI", "description": "the YUI instance."}, "description": "Registers a module with the YUI global.  The easiest way to create a\nfirst-class YUI module is to use the YUI component build tool.\nhttp://yuilibrary.com/projects/builder\nThe build system will produce the `YUI.add` wrapper for you module, along\nwith any configuration info required for the module.", "param": "name {String} module name.", "params": [{"type": "String", "name": "name", "description": "  module name."}, {"type": "Function", "name": "fn", "description": "  entry point into the module that is used to bind module to the YUI instance."}, {"type": "YUI", "name": "fn.Y", "description": " The YUI instance this module is executed in."}, {"type": "String", "name": "fn.name", "description": " The name of the module"}, {"type": "String", "name": "version", "description": "  version string."}, {"type": "Object", "name": "details", "description": "  optional config data:"}, {"type": "Array", "name": "details.requires", "description": "  features that must be present before this module can be attached."}, {"type": "Array", "name": "details.optional", "description": "  optional features that should be present if loadOptional\nis defined.  Note: modules are not often loaded this way in YUI 3,\nbut this field is still useful to inform the user that certain\nfeatures in the component will require additional dependencies."}, {"type": "Array", "name": "details.use", "description": "  features that are included within this module which need to\nbe attached automatically when this module is attached.  This\nsupports the YUI 3 rollup system -- a module with submodules\ndefined will need to have the submodules listed in the 'use'\nconfig.  The YUI component build tool does this for you."}], "guessedname": "add", "guessedtype": "function", "example": "YUI.add('davglass', function(Y, name) {\nY.davglass = function() {\nalert('Dav was here!');\n};\n}, '3.4.0', { requires: ['yui-base', 'harley-davidson', 'mt-dew'] });"}, "destructor": {"protected": "", "description": "Descructor lifecycle implementation for the Datepicker class.\nPurges events attached to the node (and all child nodes).", "guessedname": "destructor", "guessedtype": "function"}, "sort": {"params": [{"type": "", "name": "hints", "description": " array of hints"}], "description": "Loop over the array of hints finding the one we should display.", "guessedname": "sort", "guessedtype": "function"}, "compileFilter": {"return": {"type": "Function", "description": ""}, "description": "Compiles a selector string into a filter function to identify whether\nNodes along the parent axis of an event's target should trigger event\nnotification.\nThis function is memoized, so previously compiled filter functions are\nreturned if the same selector string is provided.\nThis function may be useful when defining synthetic events for delegate\nhandling.\nHosted as a property of the `delegate` method (e.g. `Y.delegate.compileFilter`).", "since": "3.2.0", "param": "selector {String} the selector string to base the filtration on", "static": "", "guessedname": "compileFilter", "guessedtype": "function", "params": [{"type": "String", "name": "selector", "description": "  the selector string to base the filtration on"}]}, "complete": {"description": "Basically <tt>setValue(conversion.predictions[0])</tt> done in a safe\nway.", "guessedname": "complete", "guessedtype": "function"}, "getWorstHint": {"description": "Returns the most severe status", "guessedname": "getWorstHint", "guessedtype": "function"}, "startup": {"description": "Normally type upgrade is done when the owning command is registered, but\nout commandParam isn't part of a command, so it misses out.", "guessedname": "startup", "guessedtype": "function"}, "assert": {"description": "Asserts that a given condition is true. If not, then a Y.Assert.Error object is thrown\nand the test fails.", "param": "{Boolean} condition The condition to test.", "static": "", "guessedname": "assert", "guessedtype": "function", "params": [{"type": "Boolean", "name": "condition", "description": " The condition to test."}, {"type": "String", "name": "message", "description": " The message to display if the assertion fails."}]}, "toCanonicalString": {"description": "Extract a canonical version of the input", "guessedname": "toCanonicalString", "guessedtype": "function"}, "jsonp": {"return": {"type": "JSONPRequest", "description": ""}, "param": "url {String} the url of the JSONP service with the {callback}\nplaceholder where the callback function name typically goes.", "static": "", "guessedname": "jsonp", "guessedtype": "function", "params": [{"type": "String} the url of the JSONP service with the {callback", "name": "url", "description": " \nplaceholder where the callback function name typically goes."}, {"type": "Function|Object", "name": "c", "description": "  Callback function accepting the JSON payload\nas its argument, or a configuration object (see above)."}, {"type": "any", "name": "args*", "description": "  additional arguments to pass to send()"}]}, "formatResult": {"return": {"type": "String", "description": ""}, "description": "An overridable method for formatting the result of the query before it's displayed in the overlay.", "param": "{Object} result The result data object", "params": [{"type": "Object", "name": "result", "description": " The result data object"}, {"type": "String", "name": "request", "description": " The current query string"}, {"type": "String", "name": "resultMatch", "description": " The string from the results that matches the query"}], "guessedname": "formatResult", "guessedtype": "function"}, "throttle": {"return": {"type": "function", "description": "Returns a wrapped function that calls fn throttled."}, "description": "Throttles a call to a method based on the time between calls.", "since": "3.1.0", "param": "fn {function} The function call to throttle.", "params": [{"type": "function", "name": "fn", "description": "  The function call to throttle."}, {"type": "int", "name": "ms", "description": "  The number of milliseconds to throttle the method call.\nCan set globally with Y.config.throttleTime or by call. Passing a -1 will\ndisable the throttle. Defaults to 150."}], "guessedname": "throttle", "guessedtype": "function"}, "augment": {"return": {"type": "Function", "description": "Augmented object."}, "description": "Augments the _receiver_ with prototype properties from the _supplier_. The\nreceiver may be a constructor function or an object. The supplier must be a\nconstructor function.\nIf the _receiver_ is an object, then the _supplier_ constructor will be called\nimmediately after _receiver_ is augmented, with _receiver_ as the `this` object.\nIf the _receiver_ is a constructor function, then all prototype methods of\n_supplier_ that are copied to _receiver_ will be sequestered, and the\n_supplier_ constructor will not be called immediately. The first time any\nsequestered method is called on the _receiver_'s prototype, all sequestered\nmethods will be immediately copied to the _receiver_'s prototype, the\n_supplier_'s constructor will be executed, and finally the newly unsequestered\nmethod that was called will be executed.\nThis sequestering logic sounds like a bunch of complicated voodoo, but it makes\nit cheap to perform frequent augmentation by ensuring that suppliers'\nconstructors are only called if a supplied method is actually used. If none of\nthe supplied methods is ever used, then there's no need to take the performance\nhit of calling the _supplier_'s constructor.", "param": "{Function|Object} receiver Object or function to be augmented.", "params": [{"type": "Function|Object", "name": "receiver", "description": " Object or function to be augmented."}, {"type": "Function", "name": "supplier", "description": " Function that supplies the prototype properties with\nwhich to augment the _receiver_."}, {"type": "Boolean", "name": "[overwrite=false]", "description": " If `true`, properties already on the receiver\nwill be overwritten if found on the supplier's prototype."}, {"type": "String[]", "name": "[whitelist]", "description": " An array of property names. If specified,\nonly the whitelisted prototype properties will be applied to the receiver, and\nall others will be ignored."}, {"type": "Array|any", "name": "[args]", "description": " Argument or array of arguments to pass to the\nsupplier's constructor when initializing."}], "guessedname": "augment", "guessedtype": "function"}, "_onTextboxKeyDown": {"description": "Handles the keydown events on the input element for functional keys.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onTextboxKeyDown", "guessedtype": "function"}, "setAttribute": {"param": "{HTMLElement} el The target element for the attribute.", "params": [{"type": "HTMLElement", "name": "el", "description": " The target element for the attribute."}, {"type": "String", "name": "attr", "description": " The attribute to set."}, {"type": "String", "name": "val", "description": " The value of the attribute."}], "description": "Provides a normalized attribute interface.", "guessedname": "setAttribute", "guessedtype": "function"}, "compile": {"description": "Return a unicode regex for the given group (under A.Text.Data.Unicode).", "param": "{String} group", "params": [{"type": "String", "name": "group", "description": ""}, {"type": "String", "name": "flags", "description": ""}], "private": "", "guessedname": "compile", "guessedtype": "function"}, "error": {"return": {"type": "YUI", "description": "this YUI instance."}, "description": "Report an error.  The reporting mechanism is controled by\nthe `throwFail` configuration attribute.  If throwFail is\nnot specified, the message is written to the Logger, otherwise\na JS error is thrown", "param": "msg {String} the error message.", "params": [{"type": "String", "name": "msg", "description": "  the error message."}, {"type": "Error|String", "name": "e", "description": "  Optional JS error that was caught, or an error string."}, {"type": "", "name": "data", "description": " Optional additional info\nand `throwFail` is specified, this error will be re-thrown."}], "guessedname": "error", "guessedtype": "function"}, "_onButtonMouseDown": {"description": "Called when the user mouses down on the button element in the combobox.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onButtonMouseDown", "guessedtype": "function"}, "increment": {"description": "Replace the current value with the higher value if such a concept\nexists.", "guessedname": "increment", "guessedtype": "function"}, "getString": {"param": "{String} key The key.", "params": [{"type": "String", "name": "key", "description": " The key."}, {"type": "String", "name": "locale", "description": " (optional) The locale for which the string value is required. Defaults to the current locale, if not provided."}], "description": "Gets the string for a particular key, for a particular locale, performing locale lookup.\n<p>\nIf no values if defined for the key, for the given locale, the value for the \ndefault locale (in initial locale set for the class) is returned.\n</p>", "guessedname": "getString", "guessedtype": "function"}, "notifySub": {"return": {"type": "Boolean", "description": "false if the event was stopped"}, "description": "Overrides the <code>_notify</code> method on the normal DOM subscription to\ninject the filtering logic and only proceed in the case of a match.\nThis method is hosted as a private property of the `delegate` method\n(e.g. `Y.delegate.notifySub`)", "since": "3.2.0", "private": "", "static": "", "param": "thisObj {Object} default 'this' object for the callback", "guessedname": "notifySub", "guessedtype": "function", "params": [{"type": "Object", "name": "thisObj", "description": "  default 'this' object for the callback"}, {"type": "Array", "name": "args", "description": "  arguments passed to the event's <code>fire()</code>"}, {"type": "CustomEvent", "name": "ce", "description": "  the custom event managing the DOM subscriptions for\nthe subscribed event on the subscribing node."}]}, "_bindUIInputTextControl": {"protected": "", "description": "Bind the events on the InputTextControl UI. Lifecycle.", "guessedname": "_bindUIInputTextControl", "guessedtype": "function"}, "addHTML": {"param": "{HTMLElement} node The node to insert into", "params": [{"type": "HTMLElement", "name": "node", "description": " The node to insert into"}, {"type": "HTMLElement | Array | HTMLCollection", "name": "content", "description": " The content to be inserted"}, {"type": "HTMLElement", "name": "where", "description": " Where to insert the content\nIf no \"where\" is given, content is appended to the node\nPossible values for \"where\"\n<dl>\n<dt>HTMLElement</dt>\n<dd>The element to insert before</dd>\n<dt>\"replace\"</dt>\n<dd>Replaces the existing HTML</dd>\n<dt>\"before\"</dt>\n<dd>Inserts before the existing HTML</dd>\n<dt>\"before\"</dt>\n<dd>Inserts content before the node</dd>\n<dt>\"after\"</dt>\n<dd>Inserts content after the node</dd>\n</dl>"}], "description": "Inserts content in a node at the given location", "guessedname": "addHTML", "guessedtype": "function"}, "onceAfter": {"return": {"type": "EventHandle", "description": "A subscription handle capable of detaching the\nsubscription"}, "see": "once", "params": [{"type": "String", "name": "type", "description": " The custom event name"}, {"type": "Function", "name": "fn", "description": " The callback to execute in response to the event"}, {"type": "Object", "name": "[context]", "description": " Override `this` object in callback"}, {"type": "Any", "name": "[arg*]", "description": " 0..n additional arguments to supply to the subscriber"}], "description": "Listen for an event one time.  Equivalent to `once`, except, like `after`,\nthe subscription callback executes after all `on` subscribers and the event's\n`defaultFn` (if configured) have executed.  Like `after` if any `on` phase\nsubscriber calls `e.preventDefault()`, neither the `defaultFn` nor the `after`\nsubscribers will execute.\nThe listener is immediately detached when executed.", "param": "{String} type The custom event name"}, "_attach": {"private": "", "description": "Executes the function associated with each required\nmodule, binding the module to the YUI instance.", "guessedname": "_attach", "guessedtype": "function"}, "io": {"return": {"type": "Object", "description": ""}, "description": "Method for initiating an ajax call.  The first argument is the url end\npoint for the call.  The second argument is an object to configure the\ntransaction and attach event subscriptions.  The configuration object\nsupports the following properties:\n<dl>\n<dt>method</dt>\n<dd>HTTP method verb (e.g., GET or POST). If this property is not\nnot defined, the default value will be GET.</dd>\n<dt>data</dt>\n<dd>This is the name-value string that will be sent as the\ntransaction data. If the request is HTTP GET, the data become\npart of querystring. If HTTP POST, the data are sent in the\nmessage body.</dd>\n<dt>xdr</dt>\n<dd>Defines the transport to be used for cross-domain requests.\nBy setting this property, the transaction will use the specified\ntransport instead of XMLHttpRequest. The properties of the\ntransport object are:\n<dl>\n<dt>use</dt>\n<dd>The transport to be used: 'flash' or 'native'</dd>\n<dt>dataType</dt>\n<dd>Set the value to 'XML' if that is the expected response\ncontent type.</dd>\n</dl></dd>\n<dt>form</dt>\n<dd>Form serialization configuration object.  Its properties are:\n<dl>\n<dt>id</dt>\n<dd>Node object or id of HTML form</dd>\n<dt>useDisabled</dt>\n<dd>`true` to also serialize disabled form field values\n(defaults to `false`)</dd>\n</dl></dd>\n<dt>on</dt>\n<dd>Assigns transaction event subscriptions. Available events are:\n<dl>\n<dt>start</dt>\n<dd>Fires when a request is sent to a resource.</dd>\n<dt>complete</dt>\n<dd>Fires when the transaction is complete.</dd>\n<dt>success</dt>\n<dd>Fires when the HTTP response status is within the 2xx\nrange.</dd>\n<dt>failure</dt>\n<dd>Fires when the HTTP response status is outside the 2xx\nrange, if an exception occurs, if the transation is aborted,\nor if the transaction exceeds a configured `timeout`.</dd>\n<dt>end</dt>\n<dd>Fires at the conclusion of the transaction\nlifecycle, after `success` or `failure`.</dd>\n</dl>\n<p>Callback functions for `start` and `end` receive the id of the\ntransaction as a first argument. For `complete`, `success`, and\n`failure`, callbacks receive the id and the response object\n(usually the XMLHttpRequest instance).  If the `arguments`\nproperty was included in the configuration object passed to\n`Y.io()`, the configured data will be passed to all callbacks as\nthe last argument.</p>\n</dd>\n<dt>sync</dt>\n<dd>Pass `true` to make a same-domain transaction synchronous.\n<strong>CAVEAT</strong>: This will negatively impact the user\nexperience. Have a <em>very</em> good reason if you intend to use\nthis.</dd>\n<dt>context</dt>\n<dd>The \"`this'\" object for all configured event handlers. If a\nspecific context is needed for individual callbacks, bind the\ncallback to a context using `Y.bind()`.</dd>\n<dt>headers</dt>\n<dd>Object map of transaction headers to send to the server. The\nobject keys are the header names and the values are the header\nvalues.</dd>\n<dt>timeout</dt>\n<dd>Millisecond threshold for the transaction before being\nautomatically aborted.</dd>\n<dt>arguments</dt>\n<dd>User-defined data passed to all registered event handlers.\nThis value is available as the second argument in the \"start\" and\n\"end\" event handlers. It is the third argument in the \"complete\",\n\"success\", and \"failure\" event handlers. <strong>Be sure to quote\nthis property name in the transaction configuration as\n\"arguments\" is a reserved word in JavaScript</strong> (e.g.\n`Y.io({ ..., \"arguments\": stuff })`).</dd>\n</dl>", "param": "{String} url - qualified path to transaction resource.", "static": "", "guessedname": "io", "guessedtype": "function", "params": [{"type": "String", "name": "url", "description": " - qualified path to transaction resource."}, {"type": "Object", "name": "config", "description": " - configuration object for the transaction."}]}, "Y.Event.defineOutside": {"description": "Defines a new outside event to correspond with the given DOM event.\nBy default, the created synthetic event name will be the name of the event\nwith \"outside\" appended (e.g. \"click\" becomes \"clickoutside\"). If you want\na different name for the created Event, pass it as a second argument like so:\n<code>Y.Event.defineOutside(eventType, \"yonderclick\")</code>.", "param": "{String} event DOM event", "static": "", "guessedname": "defineOutside", "guessedtype": "function", "params": [{"type": "String", "name": "event", "description": " DOM event"}, {"type": "String", "name": "name", "description": " (optional) custom outside event name"}]}, "getFlashVersion": {"description": "Returns the version of either the Flash Player plugin (in Mozilla/WebKit/Opera browsers),\nor the Flash Player ActiveX control (in IE), as a String of the form \"MM.mm.rr\", where\nMM is the major version, mm is the minor version, and rr is the revision.", "guessedname": "getFlashVersion", "guessedtype": "function"}, "getArgsObject": {"description": "Extract the names and values of all the assignments, and return as\nan object.", "guessedname": "getArgsObject", "guessedtype": "function"}, "namespace": {"return": {"type": "Object", "description": "A reference to the last namespace object created."}, "description": "Adds a namespace object onto the YUI global if called statically:\n// creates YUI.your.namespace.here as nested objects\nYUI.namespace(\"your.namespace.here\");\nIf called as an instance method on the YUI instance, it creates the\nnamespace on the instance:\n// creates Y.property.package\nY.namespace(\"property.package\");\nDots in the input string cause `namespace` to create nested objects for\neach token. If any part of the requested namespace already exists, the\ncurrent object will be left in place.  This allows multiple calls to\n`namespace` to preserve existing namespaced properties.\nIf the first token in the namespace string is \"YAHOO\", the token is\ndiscarded.\nBe careful when naming packages. Reserved words may work in some browsers\nand not others. For instance, the following will fail in some browsers:\nY.namespace(\"really.long.nested.namespace\");\nThis fails because `long` is a future reserved word in ECMAScript", "param": "{String[]} namespace* 1-n namespaces to create.", "params": [{"type": "String[]", "name": "namespace*", "description": " 1-n namespaces to create."}], "guessedname": "namespace", "guessedtype": "function"}, "_focus": {"protected": "", "description": "Focuses the input element.", "guessedname": "_focus", "guessedtype": "function"}, "getHint": {"description": "Create a list of the hints associated with this parameter assignment.\nGenerally there will be only one hint generated because we're currently\nonly displaying one hint at a time, ordering by distance from cursor\nand severity. Since distance from cursor will be the same for all hints\nfrom this assignment all but the most severe will ever be used. It might\nmake sense with more experience to alter this to function to be getHint()", "guessedname": "getHint", "guessedtype": "function"}, "mix": {"return": {"type": "Function|Object|YUI", "description": "The receiver, or the YUI instance if the\nspecified receiver is falsy."}, "description": "Mixes _supplier_'s properties into _receiver_. Properties will not be\noverwritten or merged unless the _overwrite_ or _merge_ parameters are `true`,\nrespectively.\nIn the default mode (0), only properties the supplier owns are copied (prototype\nproperties are not copied). The following copying modes are available:\n`0`: _Default_. Object to object.\n`1`: Prototype to prototype.\n`2`: Prototype to prototype and object to object.\n`3`: Prototype to object.\n`4`: Object to prototype.", "param": "{Function|Object} receiver The object or function to receive the mixed\nproperties.", "params": [{"type": "Function|Object", "name": "receiver", "description": " The object or function to receive the mixed\nproperties."}, {"type": "Function|Object", "name": "supplier", "description": " The object or function supplying the\nproperties to be mixed."}, {"type": "Boolean", "name": "[overwrite=false]", "description": " If `true`, properties that already exist\non the receiver will be overwritten with properties from the supplier."}, {"type": "String[]", "name": "[whitelist]", "description": " An array of property names to copy. If\nspecified, only the whitelisted properties will be copied, and all others\nwill be ignored."}, {"type": "Int", "name": "[mode=0]", "description": " Mix mode to use. See above for available modes."}, {"type": "Boolean", "name": "[merge=false]", "description": " If `true`, objects and arrays that already\nexist on the receiver will have the corresponding object/array from the\nsupplier merged into them, rather than being skipped or overwritten. When\nboth _overwrite_ and _merge_ are `true`, _merge_ takes precedence."}], "guessedname": "mix", "guessedtype": "function"}, "test": {"param": "{String} str", "params": [{"type": "String", "name": "str", "description": ""}, {"type": "String", "name": "group", "description": ""}, {"type": "String", "name": "flags", "description": ""}], "description": "Tests a string against an Unicode pattern. Returns true or false.", "guessedname": "test", "guessedtype": "function"}, "destroy": {"since": "3.3.0", "description": "Destroys the YUI instance", "guessedname": "destroy", "guessedtype": "function"}, "_renderCalendar": {"protected": "", "description": "Render the Calendar used inside the DatePicker.", "guessedname": "_renderCalendar", "guessedtype": "function"}, "_createEvents": {"private": "", "description": "Create the custom events used on the Resize.", "guessedname": "_createEvents", "guessedtype": "function"}, "stableSort": {"description": "Sorts an object array keeping the order of equal items. ECMA script\nstandard does not specify the behaviour when the compare function\nreturns the value 0;", "guessedname": "stableSort", "guessedtype": "function"}, "_sendQuery": {"description": "Makes a query request to the data source.", "param": "{String} query The query string", "protected": "", "params": [{"type": "String", "name": "query", "description": " The query string"}], "guessedname": "_sendQuery", "guessedtype": "function"}, "exec": {"description": "Helper to call canon.exec", "guessedname": "exec", "guessedtype": "function"}, "clone": {"return": {"type": "Array|Object", "description": "the cloned object."}, "description": "Deep object/array copy.  Function clones are actually\nwrappers around the original function.\nArray-like objects are treated as arrays.\nPrimitives are returned untouched.  Optionally, a\nfunction can be provided to handle other data types,\nfilter keys, validate values, etc.", "param": "{object} o what to clone.", "params": [{"type": "object", "name": "o", "description": " what to clone."}, {"type": "boolean", "name": "safe", "description": " if true, objects will not have prototype\nitems from the source.  If false, they will.  In this case, the\noriginal is initially protected, but the clone is not completely\nimmune from changes to the source object prototype.  Also, cloned\nprototype items that are deleted from the clone will result\nin the value of the source prototype being exposed.  If operating\non a non-safe clone, items should be nulled out rather than deleted."}, {"type": "function", "name": "f", "description": " optional function to apply to each item in a\ncollection; it will be executed prior to applying the value to\nthe new object.  Return false to prevent the copy."}, {"type": "object", "name": "c", "description": " optional execution context for f."}, {"type": "object", "name": "owner", "description": " Owner object passed when clone is iterating\nan object.  Used to set up context for cloned functions."}, {"type": "object", "name": "cloned", "description": " hash of previously cloned objects to avoid\nmultiple clones."}], "guessedname": "clone", "guessedtype": "function"}, "after": {"return": {"type": "", "description": "the event target or a detach handle per 'chain' config"}, "description": "after() is a unified interface for subscribing to\nmost events exposed by YUI.  This includes custom events,\nDOM events, and AOP events.  This works the same way as\nthe on() function, only it operates after any default\nbehavior for the event has executed. @see <code>on</code> for more\ninformation.", "param": "type event type (this parameter does not apply for function events)", "see": "on", "params": [{"type": "", "name": "type", "description": " event type (this parameter does not apply for function events)"}, {"type": "", "name": "fn", "description": " the callback"}, {"type": "", "name": "context", "description": " optionally change the value of 'this' in the callback"}, {"type": "", "name": "args*", "description": " 0..n additional arguments to pass to the callback."}], "guessedname": "requires", "guessedtype": "property"}, "handleResponse": {"param": "{EventFacade} event", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Handles the response for the display of the results. This is a callback method\nthat is fired by the sendRequest method so that results are ready to be accessed.", "guessedname": "handleResponse", "guessedtype": "function"}, "getIframeHash": {"static": "", "return": {"type": "String", "description": "current iframe hash"}, "description": "Gets the raw (not decoded) current location hash from the IE iframe,\nminus the preceding '#' character and the hashPrefix (if one is set).", "guessedname": "getIframeHash", "guessedtype": "function"}, "isPositionCaptured": {"description": "If the cursor is at 'position', do we have sufficient data to start\ndisplaying the next hint. This is both complex and important.\nFor example, if the user has just typed:<ul>\n<li>'set tabstop ' then they clearly want to know about the valid\nvalues for the tabstop setting, so the hint is based on the next\nparameter.\n<li>'set tabstop' (without trailing space) - they will probably still\nwant to know about the valid values for the tabstop setting because\nthere is no confusion about the setting in question.\n<li>'set tabsto' they've not finished typing a setting name so the hint\nshould be based on the current parameter.\n<li>'set tabstop' (when there is an additional tabstopstyle setting) we\ncan't make assumptions about the setting - we're not finished.\n</ul>\n<p>Note that the input for 2 and 4 is identical, only the configuration\nhas changed, so hint display is environmental.\n<p>This function works out if the cursor is before the end of this\nassignment (assuming that we've asked the same thing of the previous\nassignment) and then attempts to work out if we should use the hint from\nthe next assignment even though technically the cursor is still inside\nthis one due to the rules above.", "guessedname": "isPositionCaptured", "guessedtype": "function"}, "aggregate": {"return": {"type": "object", "description": "the extended object."}, "description": "Applies object properties from the supplier to the receiver.  If\nthe target has the property, and the property is an object, the target\nobject will be augmented with the supplier's value.  If the property\nis an array, the suppliers value will be appended to the target.", "param": "{function} r  the object to receive the augmentation.", "params": [{"type": "function", "name": "r", "description": "  the object to receive the augmentation."}, {"type": "function", "name": "s", "description": "  the object that supplies the properties to augment."}, {"type": "boolean", "name": "ov", "description": " if true, properties already on the receiver\nwill be overwritten if found on the supplier."}, {"type": "string[]", "name": "wl", "description": " a whitelist.  If supplied, only properties in\nthis list will be applied to the receiver."}], "guessedname": "aggregate", "guessedtype": "function"}, "_updateHints": {"description": "Collect the statuses from the Assignments.\nThe hints returned are sorted by severity", "guessedname": "_updateHints", "guessedtype": "function"}, "_clearSelection": {"protected": "", "description": "When <a href=\"Autocomplete.html#config_forceSelection\">forceSelection</a> is true and\nthe user tries to leave the input element without selecting an item from the results,\nthe user selection is cleared.", "guessedname": "_clearSelection", "guessedtype": "function"}, "doBeforeLoadData": {"return": {"type": "Boolean", "description": ""}, "description": "An overridable method that is executed before the result overlay is loaded with results.", "param": "{EventFacade} event", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "doBeforeLoadData", "guessedtype": "function"}, "setHeight": {"param": "{HTMLElement} element The DOM element.", "params": [{"type": "HTMLElement", "name": "element", "description": " The DOM element."}, {"type": "String|Int", "name": "size", "description": " The pixel height to size to"}], "description": "Sets the height of the element to the given size, regardless\nof box model, border, padding, etc.", "guessedname": "setHeight", "guessedtype": "function"}, "_config": {"description": "Old way to apply a config to the instance (calls `applyConfig` under the hood)", "param": "{Object} o The config to apply", "params": [{"type": "Object", "name": "o", "description": " The config to apply"}], "private": "", "guessedname": "_config", "guessedtype": "function"}, "bind": {"return": {"type": "function", "description": "the wrapped function."}, "description": "Returns a function that will execute the supplied function in the\nsupplied object's context, optionally adding any additional\nsupplied parameters to the beginning of the arguments collection the\nsupplied to the function.", "param": "{Function|String} f the function to bind, or a function name\nto execute on the context object.", "params": [{"type": "Function|String", "name": "f", "description": " the function to bind, or a function name\nto execute on the context object."}, {"type": "object", "name": "c", "description": " the execution context."}, {"type": "any", "name": "args*", "description": " 0..n arguments to include before the arguments the\nfunction is executed with."}], "guessedname": "bind", "guessedtype": "function"}, "setText": {"param": "{HTMLElement} element The html element.", "params": [{"type": "HTMLElement", "name": "element", "description": " The html element."}, {"type": "String", "name": "content", "description": " The content to add."}], "description": "Sets the text content of the HTMLElement.", "guessedname": "setText", "guessedtype": "property"}, "later": {"return": {"type": "object", "description": "a timer object. Call the cancel() method on this\nobject to stop the timer."}, "description": "Executes the supplied function in the context of the supplied\nobject 'when' milliseconds later.  Executes the function a\nsingle time unless periodic is set to true.", "param": "when {int} the number of milliseconds to wait until the fn\nis executed.", "params": [{"type": "int", "name": "when", "description": "  the number of milliseconds to wait until the fn\nis executed."}, {"type": "", "name": "o", "description": " the context object."}, {"type": "Function|String", "name": "fn", "description": "  the function to execute or the name of\nthe method in the 'o' object to execute."}, {"type": "", "name": "data", "description": " [Array] data that is provided to the function.  This\naccepts either a single item or an array.  If an array is provided,\nthe function is executed with one parameter for each array item.\nIf you need to pass a single array parameter, it needs to be wrapped\nin an array [myarray].\nNote: native methods in IE may not have the call and apply methods.\nIn this case, it will work, but you are limited to four arguments."}, {"type": "boolean", "name": "periodic", "description": "  if true, executes continuously at supplied\ninterval until canceled."}], "guessedname": "later", "guessedtype": "function"}, "_onTextboxKeyUp": {"description": "Handles the keyup events of the input element.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onTextboxKeyUp", "guessedtype": "function"}, "cloneAssignments": {"description": "A *shallow* clone of the assignments.\nThis is useful for systems that wish to go over all the assignments\nfinding values one way or another and wish to trim an array as they go.", "guessedname": "cloneAssignments", "guessedtype": "function"}, "_assignmentChanged": {"description": "When the command changes, we need to keep a bunch of stuff in sync", "guessedname": "_assignmentChanged", "guessedtype": "function"}, "once": {"return": {"type": "", "description": "the event target or a detach handle per 'chain' config"}, "see": "on", "params": [{"type": "", "name": "type", "description": " event type (this parameter does not apply for function events)"}, {"type": "", "name": "fn", "description": " the callback"}, {"type": "", "name": "context", "description": " optionally change the value of 'this' in the callback"}, {"type": "", "name": "args*", "description": " 0..n additional arguments to pass to the callback."}], "description": "Listen for an event one time.  Equivalent to <code>on</code>, except that\nthe listener is immediately detached when executed.", "param": "type event type (this parameter does not apply for function events)"}}}, "SVGShape": {"name": "SVGShape", "configs": {"node": {"readonly": "", "type": "HTMLElement", "description": "Dom node for the shape.", "guessedname": "node", "guessedtype": "property"}, "graphic": {"readonly": "", "type": "SVGGraphic", "description": "Reference to the parent graphic instance", "guessedname": "graphic", "guessedtype": "property"}, "visible": {"type": "Boolean", "description": "Indicates whether the shape is visible.", "guessedname": "visible", "guessedtype": "property"}, "gradientNode": {"guessedname": "gradientNode", "type": "HTMLElement", "description": "The node used for gradient fills.", "private": "", "guessedtype": "property"}, "transformOrigin": {"type": "Array", "description": "An array of x, y values which indicates the transformOrigin in which to rotate the shape. Valid values range between 0 and 1 representing a \nfraction of the shape's corresponding bounding box dimension. The default value is [0.5, 0.5].", "guessedname": "transformOrigin", "guessedtype": "property"}, "transform": {"type": "String", "description": "<p>A string containing, in order, transform operations applied to the shape instance. The `transform` string can contain the following values:\n<dl>\n<dt>rotate</dt><dd>Rotates the shape clockwise around it transformOrigin.</dd>\n<dt>translate</dt><dd>Specifies a 2d translation.</dd>\n<dt>skew</dt><dd>Skews the shape around the x-axis and y-axis.</dd>\n<dt>scale</dt><dd>Specifies a 2d scaling operation.</dd>\n<dt>translateX</dt><dd>Translates the shape along the x-axis.</dd>\n<dt>translateY</dt><dd>Translates the shape along the y-axis.</dd>\n<dt>skewX</dt><dd>Skews the shape around the x-axis.</dd>\n<dt>skewY</dt><dd>Skews the shape around the y-axis.</dd>\n</dl>\n</p>\n<p>Applying transforms through the transform attribute will reset the transform matrix and apply a new transform. The shape class also contains corresponding methods for each transform\nthat will apply the transform to the current matrix. The below code illustrates how you might use the `transform` attribute to instantiate a recangle with a rotation of 45 degrees.</p>\nvar myRect = new Y.Rect({\ntype:\"rect\",\nwidth: 50,\nheight: 40,\ntransform: \"rotate(45)\"\n};\n<p>The code below would apply `translate` and `rotate` to an existing shape.</p>\nmyRect.set(\"transform\", \"translate(40, 50) rotate(45)\");", "guessedname": "transform", "guessedtype": "property"}, "width": {"type": "Number", "description": "Indicates the width of the shape", "guessedname": "width", "guessedtype": "property"}, "stroke": {"type": "Object", "description": "Contains information about the stroke of the shape.\n<dl>\n<dt>color</dt><dd>The color of the stroke.</dd>\n<dt>weight</dt><dd>Number that indicates the width of the stroke.</dd>\n<dt>opacity</dt><dd>Number between 0 and 1 that indicates the opacity of the stroke. The default value is 1.</dd>\n<dt>dashstyle</dt>Indicates whether to draw a dashed stroke. When set to \"none\", a solid stroke is drawn. When set to an array, the first index indicates the\nlength of the dash. The second index indicates the length of gap.\n<dt>linecap</dt><dd>Specifies the linecap for the stroke. The following values can be specified:\n<dl>\n<dt>butt (default)</dt><dd>Specifies a butt linecap.</dd>\n<dt>square</dt><dd>Specifies a sqare linecap.</dd>\n<dt>round</dt><dd>Specifies a round linecap.</dd>\n</dl>\n</dd>\n<dt>linejoin</dt><dd>Specifies a linejoin for the stroke. The following values can be specified:\n<dl>\n<dt>round (default)</dt><dd>Specifies that the linejoin will be round.</dd>\n<dt>bevel</dt><dd>Specifies a bevel for the linejoin.</dd>\n<dt>miter limit</dt><dd>An integer specifying the miter limit of a miter linejoin. If you want to specify a linejoin of miter, you simply specify the limit as opposed to having\nseparate miter and miter limit values.</dd>\n</dl>\n</dd>\n</dl>", "guessedname": "stroke", "guessedtype": "property"}, "y": {"type": "Number", "description": "Indicates the y position of shape.", "guessedname": "y", "guessedtype": "property"}, "x": {"type": "Number", "description": "Indicates the x position of shape.", "guessedname": "x", "guessedtype": "property"}, "height": {"type": "Number", "description": "Indicates the height of the shape", "guessedname": "height", "guessedtype": "property"}, "id": {"type": "String", "description": "Unique id for class instance.", "guessedname": "id", "guessedtype": "property"}, "fill": {"type": "Object", "description": "Contains information about the fill of the shape. \n<dl>\n<dt>color</dt><dd>The color of the fill.</dd>\n<dt>opacity</dt><dd>Number between 0 and 1 that indicates the opacity of the fill. The default value is 1.</dd>\n<dt>type</dt><dd>Type of fill.\n<dl>\n<dt>solid</dt><dd>Solid single color fill. (default)</dd>\n<dt>linear</dt><dd>Linear gradient fill.</dd>\n<dt>radial</dt><dd>Radial gradient fill.</dd>\n</dl>\n</dd>\n</dl>\n<p>If a `linear` or `radial` is specified as the fill type. The following additional property is used:\n<dl>\n<dt>stops</dt><dd>An array of objects containing the following properties:\n<dl>\n<dt>color</dt><dd>The color of the stop.</dd>\n<dt>opacity</dt><dd>Number between 0 and 1 that indicates the opacity of the stop. The default value is 1. Note: No effect for IE 6 - 8</dd>\n<dt>offset</dt><dd>Number between 0 and 1 indicating where the color stop is positioned.</dd> \n</dl>\n</dd>\n<p>Linear gradients also have the following property:</p>\n<dt>rotation</dt><dd>Linear gradients flow left to right by default. The rotation property allows you to change the flow by rotation. (e.g. A rotation of 180 would make the gradient pain from right to left.)</dd>\n<p>Radial gradients have the following additional properties:</p>\n<dt>r</dt><dd>Radius of the gradient circle.</dd>\n<dt>fx</dt><dd>Focal point x-coordinate of the gradient.</dd>\n<dt>fy</dt><dd>Focal point y-coordinate of the gradient.</dd>\n<dt>cx</dt><dd>\n<p>The x-coordinate of the center of the gradient circle. Determines where the color stop begins. The default value 0.5.</p>\n<p><strong>Note: </strong>Currently, this property is not implemented for corresponding `CanvasShape` and `VMLShape` classes which are used on Android or IE 6 - 8.</p>\n</dd>\n<dt>cy</dt><dd>\n<p>The y-coordinate of the center of the gradient circle. Determines where the color stop begins. The default value 0.5.</p>\n<p><strong>Note: </strong>Currently, this property is not implemented for corresponding `CanvasShape` and `VMLShape` classes which are used on Android or IE 6 - 8.</p>\n</dd>\n</dl>", "guessedname": "fill", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "cfg", "description": " (optional) Attribute configs"}], "description": "<a href=\"http://www.w3.org/TR/SVG/\">SVG</a> implementation of the <a href=\"Shape.html\">`Shape`</a> class. \n`SVGShape` is not intended to be used directly. Instead, use the <a href=\"Shape.html\">`Shape`</a> class. \nIf the browser has <a href=\"http://www.w3.org/TR/SVG/\">SVG</a> capabilities, the <a href=\"Shape.html\">`Shape`</a> \nclass will point to the `SVGShape` class."}], "namespace": "", "module": "graphics", "guessedname": "SVGShape", "methods": {"set": {"params": [{"type": "String|Object", "name": "name", "description": " The name of the attribute. Alternatively, an object of key value pairs can \nbe passed in to set multiple attributes at once."}, {"type": "Any", "name": "value", "description": " The value to set the attribute to. This value is ignored if an object is received as \nthe name param."}], "description": "Sets the value of an attribute.", "guessedname": "set", "guessedtype": "function"}, "getBounds": {"return": {"type": "", "description": "Object"}, "description": "Returns the bounds for a shape.\nCalculates the a new bounding box from the original corner coordinates (base on size and position) and the transform matrix.\nThe calculated bounding box is used by the graphic instance to calculate its viewBox.", "guessedname": "getBounds", "guessedtype": "function"}, "createNode": {"guessedname": "createNode", "return": {"type": "", "description": "HTMLElement"}, "description": "Creates the dom node for the shape.", "private": "", "guessedtype": "function"}, "initializer": {"private": "", "description": "Initializes the shape", "guessedname": "initializer", "guessedtype": "function"}, "_setGradientFill": {"guessedname": "_setGradientFill", "params": [{"type": "String", "name": "type", "description": " gradient type"}], "description": "Creates a gradient fill", "private": "", "guessedtype": "function"}, "_getDefaultStroke": {"guessedname": "_getDefaultStroke", "return": {"type": "", "description": "Object"}, "description": "Value function for stroke attribute", "private": "", "guessedtype": "function"}, "_fillChangeHandler": {"private": "", "description": "Adds a fill to the shape node.", "guessedname": "_fillChangeHandler", "guessedtype": "function"}, "scale": {"params": [{"type": "Number", "name": "val", "description": ""}], "description": "Specifies a 2d scaling operation.", "guessedname": "scale", "guessedtype": "function"}, "_strokeChangeHandler": {"private": "", "description": "Adds a stroke to the shape node.", "guessedname": "_strokeChangeHandler", "guessedtype": "function"}, "skew": {"params": [{"type": "Number", "name": "x", "description": " The value to skew on the x-axis."}, {"type": "Number", "name": "y", "description": " The value to skew on the y-axis."}], "description": "Skews the shape around the x-axis and y-axis.", "guessedname": "skew", "guessedtype": "function"}, "contains": {"return": {"type": "", "description": "Boolean Whether or not this shape is the needle or its ancestor."}, "params": [{"type": "SVGShape | HTMLElement", "name": "needle", "description": " The possible node or descendent"}], "description": "Determines whether the node is an ancestor of another HTML element in the DOM hierarchy.", "guessedname": "contains", "guessedtype": "function"}, "init": {"protected": "", "description": "Init method, invoked during construction.\nCalls `initializer` method.", "guessedname": "init", "guessedtype": "function"}, "test": {"return": {"type": "", "description": "Boolean Wheter or not the shape matches the selector."}, "params": [{"type": "String", "name": "selector", "description": " The CSS selector to test against."}], "description": "Test if the supplied node matches the supplied selector.", "guessedname": "test", "guessedtype": "function"}, "destroy": {"description": "Destroys the instance.", "guessedname": "destroy", "guessedtype": "function"}, "translate": {"params": [{"type": "Number", "name": "x", "description": " The value to transate on the x-axis."}, {"type": "Number", "name": "y", "description": " The value to translate on the y-axis."}], "description": "Specifies a 2d translation.", "guessedname": "translate", "guessedtype": "function"}, "addClass": {"params": [{"type": "String", "name": "className", "description": " the class name to add to the node's class attribute"}], "description": "Add a class name to each node.", "guessedname": "addClass", "guessedtype": "function"}, "translateX": {"params": [{"type": "Number", "name": "x", "description": " The value to translate."}], "description": "Translates the shape along the x-axis. When translating x and y coordinates,\nuse the `translate` method.", "guessedname": "translateX", "guessedtype": "function"}, "translateY": {"params": [{"type": "Number", "name": "y", "description": " The value to translate."}], "description": "Translates the shape along the y-axis. When translating x and y coordinates,\nuse the `translate` method.", "guessedname": "translateY", "guessedtype": "function"}, "removeClass": {"params": [{"type": "String", "name": "className", "description": " the class name to remove from the node's class attribute"}], "description": "Removes a class name from each node.", "guessedname": "removeClass", "guessedtype": "function"}, "_draw": {"private": "", "description": "Draws the shape.", "guessedname": "_draw", "guessedtype": "function"}, "setXY": {"params": [{"type": "Array", "name": "Contains", "description": " x & y values for new position (coordinates are page-based)"}], "description": "Set the position of the shape in page coordinates, regardless of how the node is positioned.", "guessedname": "setXY", "guessedtype": "function"}, "_addTransform": {"guessedname": "_addTransform", "params": [{"type": "String", "name": "type", "description": " The transform being applied."}, {"type": "Array", "name": "args", "description": " The arguments for the transform."}], "description": "Adds a transform to the shape.", "private": "", "guessedtype": "function"}, "skewY": {"params": [{"type": "Number", "name": "y", "description": " y-coordinate"}], "description": "Skews the shape around the y-axis.", "guessedname": "skewY", "guessedtype": "function"}, "skewX": {"params": [{"type": "Number", "name": "x", "description": " x-coordinate"}], "description": "Skews the shape around the x-axis.", "guessedname": "skewX", "guessedtype": "function"}, "_updateHandler": {"private": "", "description": "Updates `Shape` based on attribute changes.", "guessedname": "_updateHandler", "guessedtype": "function"}, "getXY": {"return": {"type": "", "description": "Array The XY position of the shape."}, "description": "Gets the current position of the node in page coordinates.", "guessedname": "getXY", "guessedtype": "function"}, "on": {"guessedname": "on", "params": [{"type": "String", "name": "type", "description": " event type"}, {"type": "Object", "name": "callback", "description": " function"}], "description": "Overrides default `on` method. Checks to see if its a dom interaction event. If so, \nreturn an event attached to the `node` element. If not, return the normal functionality.", "private": "", "guessedtype": "function"}, "rotate": {"params": [{"type": "Number", "name": "deg", "description": " The degree of the rotation."}], "description": "Rotates the shape clockwise around it transformOrigin.", "guessedname": "rotate", "guessedtype": "function"}, "_getDefaultFill": {"guessedname": "_getDefaultFill", "return": {"type": "", "description": "Object"}, "description": "Value function for fill attribute", "private": "", "guessedtype": "function"}, "_getRotatedCornerY": {"return": {"type": "", "description": "Number"}, "description": "Returns the y coordinate for a bounding box's corner based on the corner's original x/y coordinates, rotation and transform origin of the rotation.", "private": "", "params": [{"type": "Number", "name": "x", "description": " original x-coordinate of corner"}, {"type": "Number", "name": "y", "description": " original y-coordinate of corner"}, {"type": "Number", "name": "tox", "description": " transform origin x-coordinate of rotation"}, {"type": "Number", "name": "toy", "description": " transform origin y-coordinate of rotation"}, {"type": "Number", "name": "cosRadians", "description": " cosine (in radians) of rotation"}, {"type": "Number", "name": "sinRadians", "description": " sin (in radians) or rotation"}], "guessedname": "_getRotatedCornerY", "guessedtype": "function"}, "_getRotatedCornerX": {"return": {"type": "", "description": "Number"}, "description": "Returns the x coordinate for a bounding box's corner based on the corner's original x/y coordinates, rotation and transform origin of the rotation.", "private": "", "params": [{"type": "Number", "name": "x", "description": " original x-coordinate of corner"}, {"type": "Number", "name": "y", "description": " original y-coordinate of corner"}, {"type": "Number", "name": "tox", "description": " transform origin x-coordinate of rotation"}, {"type": "Number", "name": "toy", "description": " transform origin y-coordinate of rotation"}, {"type": "Number", "name": "cosRadians", "description": " cosine (in radians) of rotation"}, {"type": "Number", "name": "sinRadians", "description": " sin (in radians) or rotation"}], "guessedname": "_getRotatedCornerX", "guessedtype": "function"}, "compareTo": {"return": {"type": "Boolean", "description": "True if the nodes match, false if they do not."}, "params": [{"type": "HTMLElement | Node", "name": "refNode", "description": " The reference node to compare to the node."}], "description": "Compares nodes to determine if they match.\nNode instances can be compared to each other and/or HTMLElements.", "guessedname": "compareTo", "guessedtype": "function"}, "_updateTransform": {"private": "", "description": "Applies all transforms.", "guessedname": "_updateTransform", "guessedtype": "function"}}, "file": "graphics-svg-debug.js", "guessedtype": "function", "shortname": "SVGShape", "properties": {"_transform": {"guessedname": "_transform", "type": "String", "description": "Storage for the transform attribute.", "private": "", "guessedtype": "property"}, "_rotation": {"guessedname": "_rotation", "type": "Number", "description": "Storage for `rotation` atribute.", "private": "", "guessedtype": "property"}, "_translateX": {"guessedname": "_translateX", "type": "Number", "description": "Storage for translateX", "private": "", "guessedtype": "property"}, "_translateY": {"guessedname": "_translateY", "type": "Number", "description": "Storage for translateY", "private": "", "guessedtype": "property"}}, "description": "<a href=\"http://www.w3.org/TR/SVG/\">SVG</a> implementation of the <a href=\"Shape.html\">`Shape`</a> class. \n`SVGShape` is not intended to be used directly. Instead, use the <a href=\"Shape.html\">`Shape`</a> class. \nIf the browser has <a href=\"http://www.w3.org/TR/SVG/\">SVG</a> capabilities, the <a href=\"Shape.html\">`Shape`</a> \nclass will point to the `SVGShape` class."}, "CartesianSeries": {"name": "CartesianSeries", "configs": {"xMarkerPlane": {"type": "Array", "description": "Collection of area maps along the xAxis. Used to determine mouseover for multiple\nseries.", "guessedname": "xMarkerPlane", "guessedtype": "property"}, "rendered": {"type": "Boolean", "description": "Indicates whether the Series has been through its initial set up.", "guessedname": "rendered", "guessedtype": "property"}, "categoryDisplayName": {"readonly": "", "type": "String", "description": "Name used for for displaying category data", "guessedname": "categoryDisplayName", "guessedtype": "property"}, "yAxis": {"type": "Axis", "description": "Reference to the `Axis` instance used for assigning \ny-values to the graph.", "guessedname": "yAxis", "guessedtype": "property"}, "height": {"type": "Number", "description": "Returns the height of the parent graph", "guessedname": "height", "guessedtype": "property"}, "visible": {"default": "true", "type": "Boolean", "description": "Indicates whether to show the series", "guessedname": "visible", "guessedtype": "property"}, "ycoords": {"type": "Array", "description": "y coordinates for the series", "guessedname": "ycoords", "guessedtype": "property"}, "xKey": {"type": "String", "description": "Indicates which array to from the hash of value arrays in \nthe x-axis `Axis` instance.", "guessedname": "xKey", "guessedtype": "property"}, "yMarkerPlane": {"type": "Array", "description": "Collection of area maps along the yAxis. Used to determine mouseover for multiple\nseries.", "guessedname": "yMarkerPlane", "guessedtype": "property"}, "graph": {"type": "Graph", "description": "Reference to the `Graph` in which the series is drawn into.", "guessedname": "graph", "guessedtype": "property"}, "xDisplayName": {"type": "String", "description": "Name used for for displaying data related to the x-coordinate.", "guessedname": "xDisplayName", "guessedtype": "property"}, "type": {"default": "cartesian", "type": "String", "description": "Read-only attribute indicating the type of series.", "guessedname": "type", "guessedtype": "property"}, "direction": {"type": "String", "description": "Direction of the series", "guessedname": "direction", "guessedtype": "property"}, "xcoords": {"type": "Array", "description": "x coordinates for the series.", "guessedname": "xcoords", "guessedtype": "property"}, "xAxis": {"type": "Axis", "description": "Reference to the `Axis` instance used for assigning \nx-values to the graph.", "guessedname": "xAxis", "guessedtype": "property"}, "xMarkerPlaneOffset": {"type": "Number", "description": "Distance from a data coordinate to the left/right for setting a hotspot.", "guessedname": "xMarkerPlaneOffset", "guessedtype": "property"}, "yDisplayName": {"type": "String", "description": "Name used for for displaying data related to the y-coordinate.", "guessedname": "yDisplayName", "guessedtype": "property"}, "yMarkerPlaneOffset": {"type": "Number", "description": "Distance from a data coordinate to the top/bottom for setting a hotspot.", "guessedname": "yMarkerPlaneOffset", "guessedtype": "property"}, "valueDisplayName": {"readonly": "", "type": "String", "description": "Name used for for displaying value data", "guessedname": "valueDisplayName", "guessedtype": "property"}, "graphOrder": {"type": "Number", "description": "Order of the instance", "guessedname": "graphOrder", "guessedtype": "property"}, "yKey": {"type": "String", "description": "Indicates which array to from the hash of value arrays in \nthe y-axis `Axis` instance.", "guessedname": "yKey", "guessedtype": "property"}, "yData": {"type": "Array", "description": "Array of y values for the series.", "guessedname": "yData", "guessedtype": "property"}, "xData": {"type": "Array", "description": "Array of x values for the series.", "guessedname": "xData", "guessedtype": "property"}, "order": {"type": "Number", "description": "Order of this instance of this `type`.", "guessedname": "order", "guessedtype": "property"}}, "constructors": [{"description": "The CartesianSeries class creates a chart with horizontal and vertical axes."}], "namespace": "", "module": "charts", "events": {"heightChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "heightChange", "description": "Fires when the value for the configuration attribute 'height' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "yDisplayNameChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "yDisplayNameChange", "description": "Fires when the value for the configuration attribute 'yDisplayName' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "yAxisChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "yAxisChange", "description": "Fires when the value for the configuration attribute 'yAxis' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "yMarkerPlaneChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "yMarkerPlaneChange", "description": "Fires when the value for the configuration attribute 'yMarkerPlane' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "xAxisChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "xAxisChange", "description": "Fires when the value for the configuration attribute 'xAxis' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "xcoordsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "xcoordsChange", "description": "Fires when the value for the configuration attribute 'xcoords' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "graphOrderChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "graphOrderChange", "description": "Fires when the value for the configuration attribute 'graphOrder' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "renderedChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "renderedChange", "description": "Fires when the value for the configuration attribute 'rendered' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "categoryDisplayNameChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "categoryDisplayNameChange", "description": "Fires when the value for the configuration attribute 'categoryDisplayName' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "directionChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "directionChange", "description": "Fires when the value for the configuration attribute 'direction' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "typeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "typeChange", "description": "Fires when the value for the configuration attribute 'type' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "graphChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "graphChange", "description": "Fires when the value for the configuration attribute 'graph' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "xKeyChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "xKeyChange", "description": "Fires when the value for the configuration attribute 'xKey' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "visibleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "visibleChange", "description": "Fires when the value for the configuration attribute 'visible' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "yMarkerPlaneOffsetChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "yMarkerPlaneOffsetChange", "description": "Fires when the value for the configuration attribute 'yMarkerPlaneOffset' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "xDataChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "xDataChange", "description": "Fires when the value for the configuration attribute 'xData' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "yDataChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "yDataChange", "description": "Fires when the value for the configuration attribute 'yData' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "yKeyChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "yKeyChange", "description": "Fires when the value for the configuration attribute 'yKey' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "xDisplayNameChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "xDisplayNameChange", "description": "Fires when the value for the configuration attribute 'xDisplayName' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "ycoordsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "ycoordsChange", "description": "Fires when the value for the configuration attribute 'ycoords' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "xMarkerPlaneOffsetChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "xMarkerPlaneOffsetChange", "description": "Fires when the value for the configuration attribute 'xMarkerPlaneOffset' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "valueDisplayNameChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "valueDisplayNameChange", "description": "Fires when the value for the configuration attribute 'valueDisplayName' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "orderChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "orderChange", "description": "Fires when the value for the configuration attribute 'order' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "xMarkerPlaneChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "xMarkerPlaneChange", "description": "Fires when the value for the configuration attribute 'xMarkerPlane' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "CartesianSeries", "methods": {"_updateAxisData": {"guessedname": "_updateAxisData", "return": {"type": "", "description": "Boolean"}, "description": "Checks to ensure that both xAxis and yAxis data are available. If so, set the `xData` and `yData` attributes and return `true`. Otherwise, return `false`.", "private": "", "guessedtype": "function"}, "_yAxisChangeHandler": {"description": "Event handler the yAxisChange event.", "param": "{Object} e Event object.", "params": [{"type": "Object", "name": "e", "description": " Event object."}], "private": "", "guessedname": "_yAxisChangeHandler", "guessedtype": "function"}, "addListeners": {"private": "", "description": "Adds event listeners.", "guessedname": "addListeners", "guessedtype": "function"}, "_xDataChangeHandler": {"description": "Event handler for xDataChange event.", "param": "{Object} event Event object.", "params": [{"type": "Object", "name": "event", "description": " Event object."}], "private": "", "guessedname": "_xDataChangeHandler", "guessedtype": "function"}, "render": {"private": "", "guessedname": "render", "guessedtype": "function"}, "_setCanvas": {"protected": "", "description": "Creates a `Graphic` instance.", "guessedname": "_setCanvas", "guessedtype": "function"}, "draw": {"protected": "", "description": "Draws the series.", "guessedname": "draw", "guessedtype": "function"}, "_getDefaultStyles": {"protected": "", "return": {"type": "", "description": "Object"}, "description": "Gets the default value for the `styles` attribute. Overrides\nbase implementation.", "guessedname": "_getDefaultStyles", "guessedtype": "function"}, "_getDefaultColor": {"return": {"type": "", "description": "String"}, "description": "Parses a color based on a series order and type.", "param": "{Number} index Index indicating the series order.", "protected": "", "params": [{"type": "Number", "name": "index", "description": " Index indicating the series order."}, {"type": "String", "name": "type", "description": " Indicates which type of object needs the color."}], "guessedname": "_getDefaultColor", "guessedtype": "function"}, "setAreaData": {"protected": "", "description": "Calculates the coordinates for the series.", "guessedname": "setAreaData", "guessedtype": "function"}, "_xAxisChangeHandler": {"description": "Event handler for the xAxisChange event.", "param": "{Object} e Event object.", "params": [{"type": "Object", "name": "e", "description": " Event object."}], "private": "", "guessedname": "_xAxisChangeHandler", "guessedtype": "function"}, "validate": {"private": "", "description": "Draws the series is the xAxis and yAxis data are both available.", "guessedname": "validate", "guessedtype": "function"}, "_yDataChangeHandler": {"description": "Event handler for yDataChange event.", "param": "{Object} event Event object.", "params": [{"type": "Object", "name": "event", "description": " Event object."}], "private": "", "guessedname": "_yDataChangeHandler", "guessedtype": "function"}, "_handleVisibleChange": {"description": "Shows/hides contents of the series.", "param": "{Object} e Event object.", "protected": "", "params": [{"type": "Object", "name": "e", "description": " Event object."}], "guessedname": "_handleVisibleChange", "guessedtype": "function"}}, "uses": ["Renderer"], "superclass": "Base", "file": "charts.js", "guessedtype": "property", "extends": "Base", "shortname": "CartesianSeries", "properties": {"_xDisplayName": {"guessedname": "_xDisplayName", "type": "String", "description": "Storage for `xDisplayName` attribute.", "private": "", "guessedtype": "property"}, "_defaultSliceColors": {"protected": "", "type": "Array", "description": "Collection of default colors used for area fills, histogram fills and pie fills in a series when not specified by user.", "guessedname": "_defaultSliceColors", "guessedtype": "property"}, "_bottomOrigin": {"guessedname": "_bottomOrigin", "type": "String", "description": "The y-coordinate for the bottom edge of the series.", "private": "", "guessedtype": "property"}, "_defaultPlaneOffset": {"guessedname": "_defaultPlaneOffset", "type": "Number", "description": "Default value for plane offsets when the parent chart's `interactiveType` is `planar`.", "private": "", "guessedtype": "property"}, "_defaultFillColors": {"protected": "", "type": "Array", "description": "Collection of default colors used for marker fills in a series when not specified by user.", "guessedname": "_defaultFillColors", "guessedtype": "property"}, "_defaultLineColors": {"protected": "", "type": "Array", "description": "Collection of default colors used for lines in a series when not specified by user.", "guessedname": "_defaultLineColors", "guessedtype": "property"}, "_leftOrigin": {"guessedname": "_leftOrigin", "type": "String", "description": "Th x-coordinate for the left edge of the series.", "private": "", "guessedtype": "property"}, "GUID": {"guessedname": "GUID", "type": "String", "description": "Constant used to generate unique id.", "private": "", "guessedtype": "property"}, "_defaultBorderColors": {"protected": "", "type": "Array", "description": "Collection of default colors used for marker borders in a series when not specified by user.", "guessedname": "_defaultBorderColors", "guessedtype": "property"}, "_yDisplayName": {"guessedname": "_yDisplayName", "type": "String", "description": "Storage for `yDisplayName` attribute.", "private": "", "guessedtype": "property"}}, "description": "The CartesianSeries class creates a chart with horizontal and vertical axes."}, "DataSource.Local": {"name": "DataSource.Local", "configs": {"source": {"default": "null", "type": "MIXED", "description": "Pointer to live data.", "guessedname": "source", "guessedtype": "property"}}, "constructors": [{"description": "Base class for the DataSource Utility."}], "namespace": "", "module": "datasource", "events": {"data": {"description": "Fired when raw data is received.", "param": "e {Event.Facade} Event Facade with the following properties:\n<dl>\n<dt>tId (Number)</dt> <dd>Unique transaction ID.</dd>\n<dt>request (Object)</dt> <dd>The request.</dd>\n<dt>callback (Object)</dt> <dd>Deprecated alias for the\n<strong>on</strong> property</dd>\n<dt>on (Object)</dt> <dd>The map of configured transaction\ncallbacks.  An object with the following properties:\n<dl>\n<dt>success (Function)</dt> <dd>Success handler.</dd>\n<dt>failure (Function)</dt> <dd>Failure handler.</dd>\n</dl>\n</dd>\n<dt>cfg (Object)</dt> <dd>Configuration object.</dd>\n<dt>data (Object)</dt> <dd>Raw data.</dd>\n</dl>", "params": [{"type": "Event.Facade", "name": "e", "description": "  Event Facade with the following properties:\n<dl>\n<dt>tId (Number)</dt> <dd>Unique transaction ID.</dd>\n<dt>request (Object)</dt> <dd>The request.</dd>\n<dt>callback (Object)</dt> <dd>Deprecated alias for the\n<strong>on</strong> property</dd>\n<dt>on (Object)</dt> <dd>The map of configured transaction\ncallbacks.  An object with the following properties:\n<dl>\n<dt>success (Function)</dt> <dd>Success handler.</dd>\n<dt>failure (Function)</dt> <dd>Failure handler.</dd>\n</dl>\n</dd>\n<dt>cfg (Object)</dt> <dd>Configuration object.</dd>\n<dt>data (Object)</dt> <dd>Raw data.</dd>\n</dl>"}], "guessedname": "defaultFn", "guessedtype": "property", "preventable": "_defDataFn"}, "sourceChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "sourceChange", "description": "Fires when the value for the configuration attribute 'source' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "request": {"description": "Fired when a data request is received.", "param": "e {Event.Facade} Event Facade with the following properties:\n<dl>                          \n<dt>tId (Number)</dt> <dd>Unique transaction ID.</dd>\n<dt>request (Object)</dt> <dd>The request.</dd>\n<dt>callback (Object)</dt> <dd>The callback object\n(deprecated, refer to <strong>on</strong></dd>\n<dt>on (Object)</dt> <dd>The map of configured callback\nfunctions.</dd>\n<dt>cfg (Object)</dt> <dd>Configuration object.</dd>\n</dl>", "params": [{"type": "Event.Facade", "name": "e", "description": "  Event Facade with the following properties:\n<dl>                          \n<dt>tId (Number)</dt> <dd>Unique transaction ID.</dd>\n<dt>request (Object)</dt> <dd>The request.</dd>\n<dt>callback (Object)</dt> <dd>The callback object\n(deprecated, refer to <strong>on</strong></dd>\n<dt>on (Object)</dt> <dd>The map of configured callback\nfunctions.</dd>\n<dt>cfg (Object)</dt> <dd>Configuration object.</dd>\n</dl>"}], "guessedname": "defaultFn", "guessedtype": "property", "preventable": "_defRequestFn"}, "response": {"description": "Fired when response is returned.", "param": "e {Event.Facade} Event Facade with the following properties:\n<dl>\n<dt>tId (Number)</dt> <dd>Unique transaction ID.</dd>\n<dt>request (Object)</dt> <dd>The request.</dd>\n<dt>callback (Object)</dt> <dd>Deprecated alias for the\n<strong>on</strong> property</dd>\n<dt>on (Object)</dt> <dd>The map of configured transaction\ncallbacks.  An object with the following properties:\n<dl>\n<dt>success (Function)</dt> <dd>Success handler.</dd>\n<dt>failure (Function)</dt> <dd>Failure handler.</dd>\n</dl>\n</dd>\n<dt>cfg (Object)</dt> <dd>Configuration object.</dd>\n<dt>data (Object)</dt> <dd>Raw data.</dd>\n<dt>response (Object)</dt>\n<dd>Normalized response object with the following properties:\n<dl>\n<dt>results (Object)</dt> <dd>Parsed results.</dd>\n<dt>meta (Object)</dt> <dd>Parsed meta data.</dd>\n<dt>error (Boolean)</dt> <dd>Error flag.</dd>\n</dl>\n</dd>\n<dt>error</dt>\n<dd>Any error that occurred along the transaction lifecycle.</dd>\n</dl>", "params": [{"type": "Event.Facade", "name": "e", "description": "  Event Facade with the following properties:\n<dl>\n<dt>tId (Number)</dt> <dd>Unique transaction ID.</dd>\n<dt>request (Object)</dt> <dd>The request.</dd>\n<dt>callback (Object)</dt> <dd>Deprecated alias for the\n<strong>on</strong> property</dd>\n<dt>on (Object)</dt> <dd>The map of configured transaction\ncallbacks.  An object with the following properties:\n<dl>\n<dt>success (Function)</dt> <dd>Success handler.</dd>\n<dt>failure (Function)</dt> <dd>Failure handler.</dd>\n</dl>\n</dd>\n<dt>cfg (Object)</dt> <dd>Configuration object.</dd>\n<dt>data (Object)</dt> <dd>Raw data.</dd>\n<dt>response (Object)</dt>\n<dd>Normalized response object with the following properties:\n<dl>\n<dt>results (Object)</dt> <dd>Parsed results.</dd>\n<dt>meta (Object)</dt> <dd>Parsed meta data.</dd>\n<dt>error (Boolean)</dt> <dd>Error flag.</dd>\n</dl>\n</dd>\n<dt>error</dt>\n<dd>Any error that occurred along the transaction lifecycle.</dd>\n</dl>"}], "guessedname": "defaultFn", "guessedtype": "property", "preventable": "_defResponseFn"}, "error": {"params": [{"type": "Event.Facade", "name": "e", "description": "  Event Facade with the following properties:\n<dl>\n<dt>tId (Number)</dt> <dd>Unique transaction ID.</dd>\n<dt>request (Object)</dt> <dd>The request.</dd>\n<dt>callback (Object)</dt> <dd>Deprecated alias for the\n<strong>on</strong> property</dd>\n<dt>on (Object)</dt> <dd>The map of configured transaction\ncallbacks.  An object with the following properties:\n<dl>\n<dt>success (Function)</dt> <dd>Success handler.</dd>\n<dt>failure (Function)</dt> <dd>Failure handler.</dd>\n</dl>\n</dd>\n<dt>cfg (Object)</dt> <dd>Configuration object.</dd>\n<dt>data (Object)</dt> <dd>Raw data.</dd>\n<dt>response (Object)</dt>\n<dd>Normalized response object with the following properties:\n<dl>\n<dt>results (Object)</dt> <dd>Parsed results.</dd>\n<dt>meta (Object)</dt> <dd>Parsed meta data.</dd>\n<dt>error (Object)</dt> <dd>Error object.</dd>\n</dl>\n</dd>\n<dt>error</dt>\n<dd>Any error that occurred along the transaction lifecycle.</dd>\n</dl>"}], "description": "Fired when an error is encountered.", "param": "e {Event.Facade} Event Facade with the following properties:\n<dl>\n<dt>tId (Number)</dt> <dd>Unique transaction ID.</dd>\n<dt>request (Object)</dt> <dd>The request.</dd>\n<dt>callback (Object)</dt> <dd>Deprecated alias for the\n<strong>on</strong> property</dd>\n<dt>on (Object)</dt> <dd>The map of configured transaction\ncallbacks.  An object with the following properties:\n<dl>\n<dt>success (Function)</dt> <dd>Success handler.</dd>\n<dt>failure (Function)</dt> <dd>Failure handler.</dd>\n</dl>\n</dd>\n<dt>cfg (Object)</dt> <dd>Configuration object.</dd>\n<dt>data (Object)</dt> <dd>Raw data.</dd>\n<dt>response (Object)</dt>\n<dd>Normalized response object with the following properties:\n<dl>\n<dt>results (Object)</dt> <dd>Parsed results.</dd>\n<dt>meta (Object)</dt> <dd>Parsed meta data.</dd>\n<dt>error (Object)</dt> <dd>Error object.</dd>\n</dl>\n</dd>\n<dt>error</dt>\n<dd>Any error that occurred along the transaction lifecycle.</dd>\n</dl>"}}, "guessedname": "LANG", "methods": {"_initEvents": {"private": "", "description": "This method creates all the events for this module.", "guessedname": "_initEvents", "guessedtype": "function"}, "issueCallback": {"description": "Returns data to callback.", "param": "e {EventFacade} Event Facade.", "static": "", "guessedname": "issueCallback", "guessedtype": "function", "params": [{"type": "EventFacade", "name": "e", "description": "  Event Facade."}, {"type": "DataSource", "name": "caller", "description": "  Calling DataSource instance."}]}, "_defResponseFn": {"description": "Sends data as a normalized response to callback.", "param": "e {Event.Facade} Event Facade with the following properties:\n<dl>\n<dt>tId (Number)</dt> <dd>Unique transaction ID.</dd>\n<dt>request (Object)</dt> <dd>The request.</dd>\n<dt>callback (Object)</dt> <dd>Deprecated alias for the\n<strong>on</strong> property</dd>\n<dt>on (Object)</dt> <dd>The map of configured transaction\ncallbacks.  An object with the following properties:\n<dl>\n<dt>success (Function)</dt> <dd>Success handler.</dd>\n<dt>failure (Function)</dt> <dd>Failure handler.</dd>\n</dl>\n</dd>\n<dt>cfg (Object)</dt> <dd>Configuration object.</dd>\n<dt>data (Object)</dt> <dd>Raw data.</dd>\n<dt>response (Object)</dt> <dd>Normalized response object with the following properties:\n<dl>\n<dt>results (Object)</dt> <dd>Parsed results.</dd>\n<dt>meta (Object)</dt> <dd>Parsed meta data.</dd>\n<dt>error (Boolean)</dt> <dd>Error flag.</dd>\n</dl>\n</dd>\n</dl>", "protected": "", "params": [{"type": "Event.Facade", "name": "e", "description": "  Event Facade with the following properties:\n<dl>\n<dt>tId (Number)</dt> <dd>Unique transaction ID.</dd>\n<dt>request (Object)</dt> <dd>The request.</dd>\n<dt>callback (Object)</dt> <dd>Deprecated alias for the\n<strong>on</strong> property</dd>\n<dt>on (Object)</dt> <dd>The map of configured transaction\ncallbacks.  An object with the following properties:\n<dl>\n<dt>success (Function)</dt> <dd>Success handler.</dd>\n<dt>failure (Function)</dt> <dd>Failure handler.</dd>\n</dl>\n</dd>\n<dt>cfg (Object)</dt> <dd>Configuration object.</dd>\n<dt>data (Object)</dt> <dd>Raw data.</dd>\n<dt>response (Object)</dt> <dd>Normalized response object with the following properties:\n<dl>\n<dt>results (Object)</dt> <dd>Parsed results.</dd>\n<dt>meta (Object)</dt> <dd>Parsed meta data.</dd>\n<dt>error (Boolean)</dt> <dd>Error flag.</dd>\n</dl>\n</dd>\n</dl>"}], "guessedname": "_defResponseFn", "guessedtype": "function"}, "_defRequestFn": {"description": "Manages request/response transaction. Must fire <code>response</code>\nevent when response is received. This method should be implemented by\nsubclasses to achieve more complex behavior such as accessing remote data.", "param": "e {Event.Facade} Event Facadewith the following properties:\n<dl>\n<dt>tId (Number)</dt> <dd>Unique transaction ID.</dd>\n<dt>request (Object)</dt> <dd>The request.</dd>\n<dt>callback (Object)</dt> <dd>Deprecated alias for the\n<strong>on</strong> property</dd>\n<dt>on (Object)</dt> <dd>The map of configured transaction\ncallbacks.  An object with the following properties:\n<dl>\n<dt>success (Function)</dt> <dd>Success handler.</dd>\n<dt>failure (Function)</dt> <dd>Failure handler.</dd>\n</dl>\n</dd>\n<dt>cfg (Object)</dt> <dd>Configuration object.</dd>\n</dl>", "protected": "", "params": [{"type": "Event.Facade", "name": "e", "description": "  Event Facadewith the following properties:\n<dl>\n<dt>tId (Number)</dt> <dd>Unique transaction ID.</dd>\n<dt>request (Object)</dt> <dd>The request.</dd>\n<dt>callback (Object)</dt> <dd>Deprecated alias for the\n<strong>on</strong> property</dd>\n<dt>on (Object)</dt> <dd>The map of configured transaction\ncallbacks.  An object with the following properties:\n<dl>\n<dt>success (Function)</dt> <dd>Success handler.</dd>\n<dt>failure (Function)</dt> <dd>Failure handler.</dd>\n</dl>\n</dd>\n<dt>cfg (Object)</dt> <dd>Configuration object.</dd>\n</dl>"}], "guessedname": "_defRequestFn", "guessedtype": "function"}, "_defDataFn": {"description": "Normalizes raw data into a response that includes results and meta properties.", "param": "e {Event.Facade} Event Facade with the following properties:\n<dl>\n<dt>tId (Number)</dt> <dd>Unique transaction ID.</dd>\n<dt>request (Object)</dt> <dd>The request.</dd>\n<dt>callback (Object)</dt> <dd>Deprecated alias for the\n<strong>on</strong> property</dd>\n<dt>on (Object)</dt> <dd>The map of configured transaction\ncallbacks.  An object with the following properties:\n<dl>\n<dt>success (Function)</dt> <dd>Success handler.</dd>\n<dt>failure (Function)</dt> <dd>Failure handler.</dd>\n</dl>\n</dd>\n<dt>cfg (Object)</dt> <dd>Configuration object.</dd>\n<dt>data (Object)</dt> <dd>Raw data.</dd>\n</dl>", "protected": "", "params": [{"type": "Event.Facade", "name": "e", "description": "  Event Facade with the following properties:\n<dl>\n<dt>tId (Number)</dt> <dd>Unique transaction ID.</dd>\n<dt>request (Object)</dt> <dd>The request.</dd>\n<dt>callback (Object)</dt> <dd>Deprecated alias for the\n<strong>on</strong> property</dd>\n<dt>on (Object)</dt> <dd>The map of configured transaction\ncallbacks.  An object with the following properties:\n<dl>\n<dt>success (Function)</dt> <dd>Success handler.</dd>\n<dt>failure (Function)</dt> <dd>Failure handler.</dd>\n</dl>\n</dd>\n<dt>cfg (Object)</dt> <dd>Configuration object.</dd>\n<dt>data (Object)</dt> <dd>Raw data.</dd>\n</dl>"}], "guessedname": "_defDataFn", "guessedtype": "function"}, "initializer": {"description": "Internal init() handler.", "param": "config {Object} Config object.", "params": [{"type": "Object", "name": "config", "description": "  Config object."}], "private": "", "guessedname": "initializer", "guessedtype": "function"}, "sendRequest": {"return": {"type": "Number", "description": "Transaction ID."}, "description": "Generates a unique transaction ID and fires <code>request</code> event.\n<strong>Note</strong>: the property <code>callback</code> is a\ndeprecated alias for the <code>on</code> transaction configuration\nproperty described below.", "param": "request {Object} An object literal with the following properties:\n<dl>\n<dt><code>request</code></dt>\n<dd>The request to send to the live data source, if any.</dd>\n<dt><code>on</code></dt>\n<dd>An object literal with the following properties:\n<dl>\n<dt><code>success</code></dt>\n<dd>The function to call when the data is ready.</dd>\n<dt><code>failure</code></dt>\n<dd>The function to call upon a response failure condition.</dd>\n<dt><code>argument</code></dt>\n<dd>Arbitrary data payload that will be passed back to the success and failure handlers.</dd>\n</dl>\n</dd>\n<dt><code>cfg</code></dt>\n<dd>Configuration object, if any.</dd>\n</dl>", "params": [{"type": "Object", "name": "request", "description": "  An object literal with the following properties:\n<dl>\n<dt><code>request</code></dt>\n<dd>The request to send to the live data source, if any.</dd>\n<dt><code>on</code></dt>\n<dd>An object literal with the following properties:\n<dl>\n<dt><code>success</code></dt>\n<dd>The function to call when the data is ready.</dd>\n<dt><code>failure</code></dt>\n<dd>The function to call upon a response failure condition.</dd>\n<dt><code>argument</code></dt>\n<dd>Arbitrary data payload that will be passed back to the success and failure handlers.</dd>\n</dl>\n</dd>\n<dt><code>cfg</code></dt>\n<dd>Configuration object, if any.</dd>\n</dl>"}], "guessedname": "sendRequest", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "datasource-local.js", "guessedtype": "property", "shortname": "DataSource.Local", "properties": {"NAME": {"description": "Class name.", "value": "\"dataSourceLocal\"", "static": "", "guessedname": "NAME", "guessedtype": "property", "type": "String", "final": ""}, "_tId": {"description": "Global transaction counter.", "default": "0", "private": "", "static": "", "guessedname": "_tId", "guessedtype": "property", "type": "Number"}, "transactions": {"type": "Object", "static": "", "description": "Global in-progress transaction objects.", "guessedname": "transactions", "guessedtype": "property"}}, "description": "Base class for the DataSource Utility."}, "CanvasGraphic": {"name": "CanvasGraphic", "constructors": [{"description": "<a href=\"http://www.w3.org/TR/html5/the-canvas-element.html\">Canvas</a> implementation of the `Graphic` class. \n`CanvasGraphic` is not intended to be used directly. Instead, use the <a href=\"Graphic.html\">`Graphic`</a> class. \nIf the browser lacks <a href=\"http://www.w3.org/TR/SVG/\">SVG</a> capabilities but has \n<a href=\"http://www.w3.org/TR/html5/the-canvas-element.html\">Canvas</a> capabilities, the <a href=\"Graphic.html\">`Graphic`</a> \nclass will point to the `CanvasGraphic` class."}], "namespace": "", "module": "graphics", "properties": {"_resizeDown": {"guessedname": "_resizeDown", "type": "Boolean", "description": "Storage for `resizeDown` attribute.", "private": "", "guessedtype": "property"}, "_shapeClass": {"guessedname": "_shapeClass", "type": "Object", "description": "Look up for shape classes. Used by `addShape` to retrieve a class for instantiation.", "private": "", "guessedtype": "property"}, "_y": {"guessedname": "_y", "type": "Number", "description": "Storage for `y` attribute.", "private": "", "guessedtype": "property"}, "_x": {"guessedname": "_x", "type": "Number", "description": "Storage for `x` attribute.", "private": "", "guessedtype": "property"}}, "methods": {"getXY": {"return": {"type": "", "description": "Array The XY position of the shape."}, "description": "Gets the current position of the graphic instance in page coordinates.", "guessedname": "getXY", "guessedtype": "function"}, "_appendShape": {"description": "Adds a shape instance to the graphic instance.", "param": "{Shape} shape The shape instance to be added to the graphic.", "params": [{"type": "Shape", "name": "shape", "description": " The shape instance to be added to the graphic."}], "private": "", "guessedname": "_appendShape", "guessedtype": "function"}, "addToRedrawQueue": {"description": "Adds a shape to the redraw queue and calculates the contentBounds. Used internally \nby `Shape` instances.", "param": "Shape shape The shape instance to add to the queue", "protected": "", "params": [{"type": "", "name": "Shape", "description": " shape The shape instance to add to the queue"}], "guessedname": "addToRedrawQueue", "guessedtype": "function"}, "_getUpdatedContentBounds": {"guessedname": "_getUpdatedContentBounds", "return": {"type": "Object", "description": ""}, "description": "Recalculates and returns the `contentBounds` for the `Graphic` instance.", "private": "", "guessedtype": "function"}, "render": {"param": "{HTMLElement} parentNode node in which to render the graphics node into.", "params": [{"type": "HTMLElement", "name": "parentNode", "description": " node in which to render the graphics node into."}], "description": "Adds the graphics node to the dom.", "guessedname": "render", "guessedtype": "function"}, "removeAllShapes": {"description": "Removes all shape instances from the dom.", "guessedname": "removeAllShapes", "guessedtype": "function"}, "_removeChildren": {"description": "Removes all child nodes.", "param": "{HTMLElement} node", "params": [{"type": "HTMLElement", "name": "node", "description": ""}], "private": "", "guessedname": "_removeChildren", "guessedtype": "function"}, "batch": {"param": "{Function} method Method to execute.", "params": [{"type": "Function", "name": "method", "description": " Method to execute."}], "description": "Allows for creating multiple shapes in order to batch appending and redraw operations.", "guessedname": "batch", "guessedtype": "function"}, "initializer": {"description": "Initializes the class.", "param": "{Object} config Optional attributes", "params": [{"type": "Object", "name": "config", "description": " Optional attributes"}], "private": "", "guessedname": "initializer", "guessedtype": "function"}, "getShapeById": {"return": {"type": "", "description": "Shape"}, "description": "Returns a shape based on the id of its dom node.", "param": "{String} id Dom id of the shape's node attribute.", "params": [{"type": "String", "name": "id", "description": " Dom id of the shape's node attribute."}], "guessedname": "getShapeById", "guessedtype": "function"}, "removeShape": {"param": "{Shape|String} shape The instance or id of the shape to be removed.", "params": [{"type": "Shape|String", "name": "shape", "description": " The instance or id of the shape to be removed."}], "description": "Removes a shape instance from from the graphic instance.", "guessedname": "removeShape", "guessedtype": "function"}, "_getDocFrag": {"guessedname": "_getDocFrag", "return": {"type": "", "description": "DocumentFragment"}, "description": "Returns a document fragment to for attaching shapes.", "private": "", "guessedtype": "function"}, "_redraw": {"private": "", "description": "Redraws all shapes.", "guessedname": "_redraw", "guessedtype": "function"}, "destroy": {"description": "Removes all nodes.", "guessedname": "destroy", "guessedtype": "function"}, "addShape": {"return": {"type": "", "description": "Shape"}, "description": "Generates a shape instance by type.", "param": "{Object} cfg attributes for the shape", "params": [{"type": "Object", "name": "cfg", "description": " attributes for the shape"}], "guessedname": "addShape", "guessedtype": "function"}, "_toggleVisible": {"description": "Toggles visibility", "param": "{Boolean} val indicates visibilitye", "params": [{"type": "Boolean", "name": "val", "description": " indicates visibilitye"}], "private": "", "guessedname": "_toggleVisible", "guessedtype": "function"}, "_getShapeClass": {"return": {"type": "", "description": "Function"}, "description": "Returns a shape class. Used by `addShape`.", "private": "", "params": [{"type": "Shape | String", "name": "val", "description": " Indicates which shape class."}], "param": "{Shape | String} val Indicates which shape class.", "guessedname": "_getShapeClass", "guessedtype": "function"}}, "file": "graphics-canvas.js", "shortname": "CanvasGraphic", "configs": {"node": {"readonly": "", "type": "HTMLElement", "description": "The outermost html element of the Graphic instance.", "guessedname": "node", "guessedtype": "property"}, "autoSize": {"default": "false", "type": "Boolean", "description": "Determines how the size of instance is calculated. If true, the width and height are determined by the size of the contents.\nIf false, the width and height values are either explicitly set or determined by the size of the parent node's dimensions.", "guessedname": "autoSize", "guessedtype": "property"}, "resizeDown": {"type": "Boolean", "description": "The contentBounds will resize to greater values but not smaller values. (for performance)\nWhen resizing the contentBounds down is desirable, set the resizeDown value to true.", "guessedname": "resizeDown", "guessedtype": "property"}, "render": {"type": "Node | String", "description": "Whether or not to render the `Graphic` automatically after to a specified parent node after init. This can be a Node instance or a CSS selector string.", "guessedname": "render", "guessedtype": "property"}, "visible": {"type": "Boolean", "description": "Indicates whether the `Graphic` and its children are visible.", "guessedname": "visible", "guessedtype": "property"}, "height": {"type": "Number", "description": "Indicates the height of the `Graphic`.", "guessedname": "height", "guessedtype": "property"}, "shapes": {"readonly": "", "type": "Object", "description": "Key value pairs in which a shape instance is associated with its id.", "guessedname": "shapes", "guessedtype": "property"}, "width": {"type": "Number", "description": "Indicates the width of the `Graphic`.", "guessedname": "width", "guessedtype": "property"}, "contentBounds": {"readonly": "", "type": "Object", "description": "Object containing size and coordinate data for the content of a Graphic in relation to the graphic instance's position.", "guessedname": "contentBounds", "guessedtype": "property"}, "y": {"type": "Number", "description": "Indicates the y-coordinate for the instance.", "guessedname": "y", "guessedtype": "property"}, "x": {"type": "Number", "description": "Indicates the x-coordinate for the instance.", "guessedname": "x", "guessedtype": "property"}, "autoDraw": {"description": "Indicates whether or not the instance will automatically redraw after a change is made to a shape.\nThis property will get set to false when batching operations.", "default": "true", "private": "", "guessedname": "autoDraw", "guessedtype": "property", "type": "Boolean"}, "id": {"type": "String", "description": "Unique id for class instance.", "guessedname": "id", "guessedtype": "property"}}, "description": "<a href=\"http://www.w3.org/TR/html5/the-canvas-element.html\">Canvas</a> implementation of the `Graphic` class. \n`CanvasGraphic` is not intended to be used directly. Instead, use the <a href=\"Graphic.html\">`Graphic`</a> class. \nIf the browser lacks <a href=\"http://www.w3.org/TR/SVG/\">SVG</a> capabilities but has \n<a href=\"http://www.w3.org/TR/html5/the-canvas-element.html\">Canvas</a> capabilities, the <a href=\"Graphic.html\">`Graphic`</a> \nclass will point to the `CanvasGraphic` class."}, "Easing": {"name": "Easing", "namespace": "", "module": "anim", "guessedname": "Easing", "methods": {"easeIn": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "description": "Begins slowly and accelerates towards end. (quadratic)", "param": "{Number} t Time value used to compute current value", "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "guessedname": "easeIn", "guessedtype": "function"}, "easeInStrong": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "description": "Begins slowly and accelerates towards end. (quartic)", "param": "{Number} t Time value used to compute current value", "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "guessedname": "easeInStrong", "guessedtype": "function"}, "bounceBoth": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "description": "Bounces off start and end.", "param": "{Number} t Time value used to compute current value", "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "guessedname": "bounceBoth", "guessedtype": "function"}, "backOut": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "description": "Overshoots end, then reverses and comes back to end.", "param": "{Number} t Time value used to compute current value", "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}, {"type": "Number", "name": "s", "description": " Overshoot (optional)"}], "guessedname": "backOut", "guessedtype": "function"}, "elasticBoth": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "description": "Snap both elastic effect.", "param": "{Number} t Time value used to compute current value", "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}, {"type": "Number", "name": "a", "description": " Amplitude (optional)"}, {"type": "Number", "name": "p", "description": " Period (optional)"}], "guessedname": "elasticBoth", "guessedtype": "function"}, "elasticOut": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "description": "Snap out elastic effect.", "param": "{Number} t Time value used to compute current value", "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}, {"type": "Number", "name": "a", "description": " Amplitude (optional)"}, {"type": "Number", "name": "p", "description": " Period (optional)"}], "guessedname": "elasticOut", "guessedtype": "function"}, "bounceOut": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "description": "Bounces off end.", "param": "{Number} t Time value used to compute current value", "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "guessedname": "bounceOut", "guessedtype": "function"}, "backBoth": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "description": "Backtracks slightly, then reverses direction, overshoots end, \nthen reverses and comes back to end.", "param": "{Number} t Time value used to compute current value", "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}, {"type": "Number", "name": "s", "description": " Overshoot (optional)"}], "guessedname": "backBoth", "guessedtype": "function"}, "easeBoth": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "description": "Begins slowly and decelerates towards end. (quadratic)", "param": "{Number} t Time value used to compute current value", "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "guessedname": "easeBoth", "guessedtype": "function"}, "bounceIn": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "description": "Bounce off of start.", "param": "{Number} t Time value used to compute current value", "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "guessedname": "bounceIn", "guessedtype": "function"}, "easeOutStrong": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "description": "Begins quickly and decelerates towards end.  (quartic)", "param": "{Number} t Time value used to compute current value", "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "guessedname": "easeOutStrong", "guessedtype": "function"}, "easeNone": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "description": "Uniform speed between points.", "param": "{Number} t Time value used to compute current value", "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "guessedname": "easeNone", "guessedtype": "function"}, "elasticIn": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "description": "Snap in elastic effect.", "param": "{Number} t Time value used to compute current value", "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}, {"type": "Number", "name": "a", "description": " Amplitude (optional)"}, {"type": "Number", "name": "p", "description": " Period (optional)"}], "guessedname": "elasticIn", "guessedtype": "function"}, "easeBothStrong": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "description": "Begins slowly and decelerates towards end. (quartic)", "param": "{Number} t Time value used to compute current value", "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "guessedname": "easeBothStrong", "guessedtype": "function"}, "easeOut": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "description": "Begins quickly and decelerates towards end.  (quadratic)", "param": "{Number} t Time value used to compute current value", "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "guessedname": "easeOut", "guessedtype": "function"}, "backIn": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "description": "Backtracks slightly, then reverses direction and moves to end.", "param": "{Number} t Time value used to compute current value", "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}, {"type": "Number", "name": "s", "description": " Overshoot (optional)"}], "guessedname": "backIn", "guessedtype": "function"}}, "file": "anim.js", "guessedtype": "property", "shortname": "Easing", "description": "The easing module provides methods for customizing\nhow an animation behaves during each run."}, "Plugin.Shim": {"name": "Plugin.Shim", "namespace": "", "module": "shim-plugin", "methods": {"destroy": {"description": "Removes the shim and destroys the plugin", "guessedname": "destroy", "guessedtype": "function"}, "sync": {"description": "Updates the size of the shim to fill its container", "guessedname": "sync", "guessedtype": "function"}}, "param": "{Object} User configuration object", "file": "shim-plugin.js", "shortname": "Plugin.Shim", "properties": {"CLASS_NAME": {"default": "\"yui-node-shim\"", "type": "String", "static": "", "description": "Default class used to mark the shim element"}, "TEMPLATE": {"type": "String", "static": "", "description": "Default markup template used to generate the shim element.", "guessedname": "TEMPLATE", "guessedtype": "property"}}, "description": "Node plugin which can be used to add shim support."}, "Plugin.CreateLinkBase": {"name": "Plugin.CreateLinkBase", "namespace": "", "module": "editor", "guessedname": "CreateLinkBase", "static": "", "file": "createlink-base.js", "guessedtype": "property", "shortname": "Plugin.CreateLinkBase", "properties": {"DEFAULT": {"static": "", "description": "String used as the default value of the Prompt", "guessedname": "DEFAULT", "guessedtype": "property"}, "PROMPT": {"static": "", "description": "String used for the Prompt", "guessedname": "PROMPT", "guessedtype": "property"}, "STRINGS": {"static": "", "description": "Strings used by the plugin", "guessedname": "STRINGS", "guessedtype": "property"}}, "description": "Adds prompt style link creation. Adds an override for the <a href=\"Plugin.ExecCommand.html#method_COMMANDS.createlink\">createlink execCommand</a>."}, "CalendarBase": {"guessedname": "getCN", "name": "CalendarBase", "configs": {"showNextMonth": {"default": "false", "type": "boolean", "description": "A setting specifying whether to shows days from the next\nmonth in the visible month's grid, if there are empty\ncells available at the end.", "guessedname": "showNextMonth", "guessedtype": "property"}, "enabledDatesRule": {"default": "null", "type": "String", "description": "The name of the rule which all enabled dates should match.\nEither disabledDatesRule or enabledDatesRule should be specified,\nor neither, but not both.", "guessedname": "enabledDatesRule", "guessedtype": "property"}, "disabledDatesRule": {"default": "null", "type": "String", "description": "The name of the rule which all disabled dates should match.\nEither disabledDatesRule or enabledDatesRule should be specified,\nor neither, but not both.", "guessedname": "disabledDatesRule", "guessedtype": "property"}, "customRenderer": {"description": "An object of the form {rules:Object, filterFunction:Function},\nproviding  set of rules and a custom rendering function for \ncustomizing specific calendar cells.", "default": "{}", "readonly": "", "guessedname": "customRenderer", "guessedtype": "property", "type": "Object"}, "showPrevMonth": {"default": "false", "type": "boolean", "description": "A setting specifying whether to shows days from the previous\nmonth in the visible month's grid, if there are empty preceding\ncells available.", "guessedname": "showPrevMonth", "guessedtype": "property"}, "headerRenderer": {"type": "String | Function", "description": "Custom header renderer for the calendar.", "guessedname": "headerRenderer", "guessedtype": "property"}, "date": {"default": "Today's date as set on the user's computer.", "type": "Date", "description": "The date corresponding to the current calendar view. Always\nnormalized to the first of the month that contains the date\nat assignment time. Used as the first date visible in the\ncalendar.", "guessedname": "date", "guessedtype": "property"}, "selectedDates": {"readonly": "", "type": "Array", "description": "A read-only attribute providing a list of currently selected dates.", "guessedname": "selectedDates", "guessedtype": "property"}, "strings": {"protected": "", "type": "Object", "description": "Strings and properties derived from the internationalization packages\nfor the calendar.", "guessedname": "strings", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Configuration object (see Configuration \nattributes)"}], "description": "Create a calendar view to represent a single or multiple\nmonth range of dates, rendered as a grid with date and\nweekday labels."}, {"params": [{"type": "Object", "name": "config", "description": "  Configuration object (see Configuration attributes)"}], "description": "Create a calendar view to represent a single or multiple\nmonth range of dates, rendered as a grid with date and\nweekday labels."}], "namespace": "", "module": "calendar", "events": {"enabledDatesRuleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "enabledDatesRuleChange", "description": "Fires when the value for the configuration attribute 'enabledDatesRule' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "stringsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "stringsChange", "description": "Fires when the value for the configuration attribute 'strings' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "customRendererChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "customRendererChange", "description": "Fires when the value for the configuration attribute 'customRenderer' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "showNextMonthChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "showNextMonthChange", "description": "Fires when the value for the configuration attribute 'showNextMonth' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "disabledDatesRuleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "disabledDatesRuleChange", "description": "Fires when the value for the configuration attribute 'disabledDatesRule' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "selectedDatesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "selectedDatesChange", "description": "Fires when the value for the configuration attribute 'selectedDates' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "dateChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "dateChange", "description": "Fires when the value for the configuration attribute 'date' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "showPrevMonthChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "showPrevMonthChange", "description": "Fires when the value for the configuration attribute 'showPrevMonth' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "headerRendererChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "headerRendererChange", "description": "Fires when the value for the configuration attribute 'headerRenderer' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "methods": {"_afterShowNextMonthChange": {"private": "", "description": "The handler for the change in the showNextMonth attribute.", "guessedname": "_afterShowNextMonthChange", "guessedtype": "function"}, "_getSelectedDatesList": {"protected": "", "return": {"type": "Array", "description": "The array of `Date`s that are currently selected."}, "description": "An internal utility method that generates a list of selected dates \nfrom the hash storage.", "guessedname": "_getSelectedDatesList", "guessedtype": "function"}, "_canBeSelected": {"return": {"type": "boolean", "description": "Returns true if the date can be selected; false otherwise."}, "description": "A utility method which checks whether a given date matches the `enabledDatesRule`\nor does not match the `disabledDatesRule` and therefore whether it can be selected.", "private": "", "params": [{"type": "Date", "name": "oDate", "description": " The date to check"}], "param": "{Date} oDate The date to check", "guessedname": "_canBeSelected", "guessedtype": "function"}, "_turnNextMonthOff": {"description": "A render assist method that turns off the view of the next month's dates \nin a given calendar pane.", "param": "{Node} pane The calendar pane that needs its next month's dates view\nmodified.", "protected": "", "params": [{"type": "Node", "name": "pane", "description": " The calendar pane that needs its next month's dates view\nmodified."}], "guessedname": "_turnNextMonthOff", "guessedtype": "function"}, "_getRulesForDate": {"return": {"type": "Array", "description": "Returns an array of `String`s, each containg the name of\na rule that the given date matches."}, "description": "Given a specific date, returns an array of rules (from the customRenderer rule set)\nthat the given date matches.", "private": "", "params": [{"type": "Date", "name": "oDate", "description": " The date for which an array of rules is needed"}], "param": "{Date} oDate The date for which an array of rules is needed", "guessedname": "_getRulesForDate", "guessedtype": "function"}, "_afterDateChange": {"private": "", "description": "The handler for the change in the date attribute. Modifies the calendar\nview by shifting the calendar grid mask and running custom rendering and\nselection rendering as necessary.", "guessedname": "_afterDateChange", "guessedtype": "function"}, "_addDateRangeToSelection": {"description": "A utility method that adds a given range of dates to selection.", "param": "{Date} startDate The first date of the given range.", "params": [{"type": "Date", "name": "startDate", "description": " The first date of the given range."}, {"type": "Date", "name": "endDate", "description": " The last date of the given range."}], "private": "", "guessedname": "_addDateRangeToSelection", "guessedtype": "function"}, "initializer": {"description": "Designated initializer", "guessedname": "initializer", "guessedtype": "function"}, "_initCalendarHTML": {"description": "A rendering assist method that initializes the calendar HTML \nbased on a given date.", "param": "{Date} baseDate The date with which to initialize the calendar.", "params": [{"type": "Date", "name": "baseDate", "description": " The date with which to initialize the calendar."}], "private": "", "guessedname": "_initCalendarHTML", "guessedtype": "function"}, "_fireSelectionChange": {"private": "", "description": "A utility method that fires a selectionChange event.", "guessedname": "_fireSelectionChange", "guessedtype": "function"}, "_getCutoffColumn": {"return": {"type": "Number", "description": "The number of the cutoff column."}, "description": "A render assist utility method that computes the cutoff column for the calendar \nrendering mask.", "private": "", "params": [{"type": "Date", "name": "date", "description": " The date of the month grid to compute the cutoff column for."}, {"type": "Number", "name": "firstday", "description": " The first day of the week (modified by internationalized calendars)"}], "param": "{Date} date The date of the month grid to compute the cutoff column for.", "guessedname": "_getCutoffColumn", "guessedtype": "function"}, "selectDates": {"param": "{Date|Array} dates A `Date` or `Array` of `Date`s.", "params": [{"type": "Date|Array", "name": "dates", "description": " A `Date` or `Array` of `Date`s."}], "description": "Selects a given date or array of dates.", "guessedname": "selectDates", "guessedtype": "function"}, "_rerenderCalendarPane": {"description": "A rendering assist method that rerenders a specified calendar pane, based\non a new Date.", "param": "{Date} newDate The date corresponding to the month of the given\ncalendar pane.", "params": [{"type": "Date", "name": "newDate", "description": " The date corresponding to the month of the given\ncalendar pane."}, {"type": "Node", "name": "pane", "description": " The node corresponding to the calendar pane to be rerenders."}], "private": "", "guessedname": "_rerenderCalendarPane", "guessedtype": "function"}, "_normalizeDate": {"return": {"type": "Date", "description": "The normalized date, set to the first of the month, with time\nset to noon."}, "description": "A utility method that normalizes a given date by converting it to the 1st\nday of the month the date is in, with the time set to noon.", "param": "{Date} oDate The date to normalize", "protected": "", "params": [{"type": "Date", "name": "oDate", "description": " The date to normalize"}], "guessedname": "_normalizeDate", "guessedtype": "function"}, "_turnPrevMonthOff": {"description": "A render assist method that turns off the view of the previous month's dates \nin a given calendar pane.", "param": "{Node} pane The calendar pane that needs its previous month's dates view\nmodified.", "protected": "", "params": [{"type": "Node", "name": "pane", "description": " The calendar pane that needs its previous month's dates view\nmodified."}], "guessedname": "_turnPrevMonthOff", "guessedtype": "function"}, "_renderSelectedDate": {"description": "An internal rendering method that modifies a date cell to have the\nselected CSS class if the date cell is visible.", "param": "{Date} oDate The date corresponding to a specific date cell.", "params": [{"type": "Date", "name": "oDate", "description": " The date corresponding to a specific date cell."}], "private": "", "guessedname": "_renderSelectedDate", "guessedtype": "function"}, "_getSelectedDatesInMonth": {"return": {"type": "Array", "description": "The array of `Date`s in a given month that are currently selected."}, "description": "A utility method that returns all dates selected in a specific month.", "param": "{Date} oDate corresponding to the month for which selected dates\nare requested.", "protected": "", "params": [{"type": "Date", "name": "oDate", "description": " corresponding to the month for which selected dates\nare requested."}], "guessedname": "_getSelectedDatesInMonth", "guessedtype": "function"}, "_removeDateFromSelection": {"description": "A utility method that removes a given date from selection..", "param": "{Date} oDate The date to remove from selection.", "params": [{"type": "Date", "name": "oDate", "description": " The date to remove from selection."}, {"type": "Number", "name": "[index]", "description": " An optional parameter that is used\nto differentiate between individual date selections and multiple\ndate selections."}], "private": "", "guessedname": "_removeDateFromSelection", "guessedtype": "function"}, "_matchesRule": {"return": {"type": "boolean", "description": "Returns true if the date matches the given rule."}, "description": "A utility method which, given a specific date and a name of the rule,\nchecks whether the date matches the given rule.", "private": "", "params": [{"type": "Date", "name": "oDate", "description": " The date to check"}, {"type": "String", "name": "rule", "description": " The name of the rule that the date should match."}], "param": "{Date} oDate The date to check", "guessedname": "_matchesRule", "guessedtype": "function"}, "_addDatesToSelection": {"description": "A utility method that adds a given list of dates to selection.", "param": "{Array} datesArray The list of dates to add to selection.", "params": [{"type": "Array", "name": "datesArray", "description": " The list of dates to add to selection."}], "private": "", "guessedname": "_addDatesToSelection", "guessedtype": "function"}, "_turnNextMonthOn": {"description": "A render assist method that turns on the view of the next month's dates \nin a given calendar pane.", "param": "{Node} pane The calendar pane that needs its next month's dates view\nmodified.", "protected": "", "params": [{"type": "Node", "name": "pane", "description": " The calendar pane that needs its next month's dates view\nmodified."}], "guessedname": "_turnNextMonthOn", "guessedtype": "function"}, "bindUI": {"description": "bindUI implementation\nAssigns listeners to relevant events that change the state\nof the calendar.", "guessedname": "bindUI", "guessedtype": "function"}, "_isNumInList": {"return": {"type": "boolean", "description": "Returns true if the given number is in the given list."}, "description": "An internal parsing method that receives a String list of numbers\nand number ranges (of the form \"1,2,3,4-6,7-9,10,11\" etc.) and checks\nwhether a specific number is included in this list. Used for looking\nup dates in the customRenderer rule set.", "private": "", "params": [{"type": "Number", "name": "num", "description": " The number to look for in a list."}, {"type": "String", "name": "strList", "description": " The list of numbers of the form \"1,2,3,4-6,7-8,9\", etc."}], "param": "{Number} num The number to look for in a list.", "guessedname": "_isNumInList", "guessedtype": "function"}, "_cleanUpNextMonthCells": {"description": "A render assist method that cleans up the last few cells in the month grid\nwhen the number of days in the month changes.", "param": "{Node} pane The calendar pane that needs the last date cells cleaned up.", "params": [{"type": "Node", "name": "pane", "description": " The calendar pane that needs the last date cells cleaned up."}], "private": "", "guessedname": "_cleanUpNextMonthCells", "guessedtype": "function"}, "_addDateToSelection": {"description": "A utility method that adds a given date to selection..", "param": "{Date} oDate The date to add to selection.", "params": [{"type": "Date", "name": "oDate", "description": " The date to add to selection."}, {"type": "Number", "name": "[index]", "description": " An optional parameter that is used\nto differentiate between individual date selections and multiple\ndate selections."}], "private": "", "guessedname": "_addDateToSelection", "guessedtype": "function"}, "_removeDateRangeFromSelection": {"description": "A utility method that removes a given range of dates from selection.", "param": "{Date} startDate The first date of the given range.", "params": [{"type": "Date", "name": "startDate", "description": " The first date of the given range."}, {"type": "Date", "name": "endDate", "description": " The last date of the given range."}], "private": "", "guessedname": "_removeDateRangeFromSelection", "guessedtype": "function"}, "_nodeToDate": {"return": {"type": "Date", "description": "The date corresponding to the DOM element that the given node wraps."}, "description": "A utility method that converts a node corresponding to the DOM element of\nthe cell for a particular date to that date.", "param": "{Node} oNode The Node wrapping the DOM element of a particular date cell.", "protected": "", "params": [{"type": "Node", "name": "oNode", "description": " The Node wrapping the DOM element of a particular date cell."}], "guessedname": "_nodeToDate", "guessedtype": "function"}, "_afterHeaderRendererChange": {"private": "", "description": "The handler for the change in the headerRenderer attribute.", "guessedname": "_afterHeaderRendererChange", "guessedtype": "function"}, "_updateCalendarHeader": {"description": "A rendering assist method that updates the calendar header based\non a given date and potentially the provided headerRenderer.", "param": "{Date} baseDate The date with which to initialize the calendar header.", "params": [{"type": "Date", "name": "baseDate", "description": " The date with which to update the calendar header."}], "private": "", "guessedname": "_updateCalendarHeader", "guessedtype": "function"}, "_renderUnelectedDate": {"description": "An internal rendering method that modifies a date cell to remove the\nselected CSS class if the date cell is visible.", "param": "{Date} oDate The date corresponding to a specific date cell.", "params": [{"type": "Date", "name": "oDate", "description": " The date corresponding to a specific date cell."}], "private": "", "guessedname": "_renderUnselectedDate", "guessedtype": "function"}, "_removeDatesFromSelection": {"description": "A utility method that removes a given list of dates from selection.", "param": "{Array} datesArray The list of dates to remove from selection.", "params": [{"type": "Array", "name": "datesArray", "description": " The list of dates to remove from selection."}], "private": "", "guessedname": "_removeDatesFromSelection", "guessedtype": "function"}, "_isDateVisible": {"return": {"type": "boolean", "description": "Returns true if the given date is in the current \nview of the calendar."}, "description": "An internal utility method that checks whether a particular date\nis in the current view of the calendar.", "private": "", "params": [{"type": "Date", "name": "oDate", "description": " The date corresponding to a specific date cell."}], "param": "{Date} oDate The date corresponding to a specific date cell.", "guessedname": "_isDateVisible", "guessedtype": "function"}, "_dateToNode": {"return": {"type": "Node", "description": "The node wrapping the DOM element of the cell the date \ncorresponds to."}, "description": "A utility method that converts a date to the node wrapping the calendar cell\nthe date corresponds to..", "param": "{Date} oDate The date to convert to Node", "protected": "", "params": [{"type": "Date", "name": "oDate", "description": " The date to convert to Node"}], "guessedname": "_dateToNode", "guessedtype": "function"}, "_afterCustomRendererChange": {"private": "", "description": "The handler for the change in the customRenderer attribute.", "guessedname": "_afterCustomRendererChange", "guessedtype": "function"}, "_renderCustomRules": {"private": "", "description": "A rendering assist method that renders all cells modified by the customRenderer\nrules, as well as the enabledDatesRule and disabledDatesRule.", "guessedname": "_renderCustomRules", "guessedtype": "function"}, "_clearSelection": {"description": "A utility method that removes all dates from selection.", "param": "{boolean} noevent A Boolean specifying whether a selectionChange\nevent should be fired.", "params": [{"type": "boolean", "name": "noevent", "description": " A Boolean specifying whether a selectionChange\nevent should be fired."}], "private": "", "guessedname": "_clearSelection", "guessedtype": "function"}, "_bindCalendarEvents": {"protected": "", "description": "A placeholder method, called from bindUI, to bind the Calendar events.", "guessedname": "_bindCalendarEvents", "guessedtype": "function"}, "syncUI": {"description": "syncUI implementation\nUpdate the scroll position, based on the current value of scrollY", "guessedname": "syncUI", "guessedtype": "function"}, "_restoreModifiedCells": {"private": "", "description": "A utility method that restores cells modified by custom formatting.", "guessedname": "_restoreModifiedCells", "guessedtype": "function"}, "_turnPrevMonthOn": {"description": "A render assist method that turns on the view of the previous month's dates \nin a given calendar pane.", "param": "{Node} pane The calendar pane that needs its previous month's dates view\nmodified.", "protected": "", "params": [{"type": "Node", "name": "pane", "description": " The calendar pane that needs its previous month's dates view\nmodified."}], "guessedname": "_turnPrevMonthOn", "guessedtype": "function"}, "deselectDates": {"param": "{Date|Array} [dates] A `Date` or `Array` of `Date`s, or no\nargument if all dates should be deselected.", "params": [{"type": "Date|Array", "name": "[dates]", "description": " A `Date` or `Array` of `Date`s, or no\nargument if all dates should be deselected."}], "description": "Deselects a given date or array of dates, or deselects\nall dates if no argument is specified.", "guessedname": "deselectDates", "guessedtype": "function"}, "_afterShowPrevMonthChange": {"private": "", "description": "The handler for the change in the showPrevMonth attribute.", "guessedname": "_afterShowPrevMonthChange", "guessedtype": "function"}, "_renderSelectedDates": {"private": "", "description": "A rendering assist method that renders all cells that are currently selected.", "guessedname": "_renderSelectedDates", "guessedtype": "function"}, "_initCalendarPane": {"description": "A rendering assist method that initializes the HTML for a single\ncalendar pane.", "param": "{Date} baseDate The date corresponding to the month of the given\ncalendar pane.", "params": [{"type": "Date", "name": "baseDate", "description": " The date corresponding to the month of the given\ncalendar pane."}, {"type": "String", "name": "pane_id", "description": " The id of the pane, to be used as a prefix for\nelement ids in the given pane."}], "private": "", "guessedname": "_initCalendarPane", "guessedtype": "function"}, "renderUI": {"description": "renderUI implementation\nCreates a visual representation of the calendar based on existing parameters.", "guessedname": "renderUI", "guessedtype": "function"}}, "extends": "Widget", "superclass": "Widget", "file": "calendar-base.js", "guessedtype": "property", "shortname": "CalendarBase", "properties": {"CONTENT_TEMPLATE": {"description": "The main content template for calendar.", "protected": "", "static": "", "guessedname": "CONTENT_TEMPLATE", "guessedtype": "property", "type": "String"}, "_paneProperties": {"guessedname": "_paneProperties", "type": "Object", "description": "A storage for various properties of individual month\npanes.", "private": "", "guessedtype": "property"}, "NAME": {"description": "The identity of the widget.", "default": "'calendarBase'", "readonly": "", "protected": "", "static": "", "guessedname": "NAME", "guessedtype": "property", "type": "String"}, "_selectedDates": {"guessedname": "_selectedDates", "type": "Object", "description": "The hash map of selected dates, populated with\nselectDates() and deselectDates() methods", "private": "", "guessedtype": "property"}, "THREE_PANE_TEMPLATE": {"description": "A three pane template for calendar.", "readonly": "", "protected": "", "static": "", "guessedname": "THREE_PANE_TEMPLATE", "guessedtype": "property", "type": "String"}, "CALENDAR_GRID_TEMPLATE": {"description": "A template for the calendar grid.", "protected": "", "static": "", "guessedname": "CALENDAR_GRID_TEMPLATE", "guessedtype": "property", "type": "String"}, "_filterFunction": {"guessedname": "_filterFunction", "type": "Function", "description": "A private copy of the filterFunction, populated\nby setting the customRenderer attribute.", "private": "", "guessedtype": "property"}, "CALDAY_ROW_TEMPLATE": {"description": "A template for a single row of calendar days.", "protected": "", "static": "", "guessedname": "CALDAY_ROW_TEMPLATE", "guessedtype": "property", "type": "String"}, "CALDAY_TEMPLATE": {"description": "A template for a single cell with a calendar day.", "protected": "", "static": "", "guessedname": "CALDAY_TEMPLATE", "guessedtype": "property", "type": "String"}, "_rules": {"guessedname": "_rules", "type": "Object", "description": "A private copy of the rules object, populated\nby setting the customRenderer attribute.", "private": "", "guessedtype": "property"}, "CALENDAR_STRINGS": {"description": "The CSS classnames for the calendar templates.", "readonly": "", "protected": "", "static": "", "guessedname": "CALENDAR_STRINGS", "guessedtype": "property", "type": "Object"}, "WEEKDAY_ROW_TEMPLATE": {"description": "A template for the row of weekday names.", "protected": "", "static": "", "guessedname": "WEEKDAY_ROW_TEMPLATE", "guessedtype": "property", "type": "String"}, "_storedDateCells": {"guessedname": "_storedDateCells", "type": "Object", "description": "Storage for calendar cells modified by any custom\nformatting. The storage is cleared, used to restore\ncells to the original state, and repopulated accordingly\nwhen the calendar is rerendered.", "private": "", "guessedtype": "property"}, "ATTRS": {"description": "Static property used to define the default attribute configuration of\nthe Widget.", "protected": "", "static": "", "guessedname": "ATTRS", "guessedtype": "property", "type": "{Object}"}, "_calendarId": {"guessedname": "_calendarId", "type": "String", "description": "The unique id used to prefix various elements of this\ncalendar instance.", "private": "", "guessedtype": "property"}, "ONE_PANE_TEMPLATE": {"description": "A single pane template for calendar (same as default CONTENT_TEMPLATE)", "readonly": "", "protected": "", "static": "", "guessedname": "ONE_PANE_TEMPLATE", "guessedtype": "property", "type": "String"}, "HEADER_TEMPLATE": {"description": "A template for the calendar header.", "protected": "", "static": "", "guessedname": "HEADER_TEMPLATE", "guessedtype": "property", "type": "String"}, "_paneNumber": {"guessedname": "_paneNumber", "type": "Number", "description": "The number of month panes in the calendar, deduced\nfrom the CONTENT_TEMPLATE's number of {calendar_grid}\ntokens.", "private": "", "guessedtype": "property"}, "TWO_PANE_TEMPLATE": {"description": "A two pane template for calendar.", "readonly": "", "protected": "", "static": "", "guessedname": "TWO_PANE_TEMPLATE", "guessedtype": "property", "type": "String"}}, "description": "Create a calendar view to represent a single or multiple\nmonth range of dates, rendered as a grid with date and\nweekday labels."}, "TimeAxis": {"properties": {"GUID": {"guessedname": "GUID", "type": "String", "description": "Constant used to generate unique id.", "private": "", "guessedtype": "property"}, "_dataType": {"guessedname": "_dataType", "readonly": "", "description": "Type of data used in `Axis`.", "private": "", "guessedtype": "property"}}, "name": "TimeAxis", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " (optional) Configuration parameters for the Chart."}], "description": "TimeAxis manages time data on an axis."}], "namespace": "", "module": "charts", "events": {"setMinChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "setMinChange", "description": "Fires when the value for the configuration attribute 'setMin' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "labelFunctionChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "labelFunctionChange", "description": "Fires when the value for the configuration attribute 'labelFunction' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "setMaxChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "setMaxChange", "description": "Fires when the value for the configuration attribute 'setMax' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "maximumChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "maximumChange", "description": "Fires when the value for the configuration attribute 'maximum' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "labelFormatChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "labelFormatChange", "description": "Fires when the value for the configuration attribute 'labelFormat' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "minimumChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "minimumChange", "description": "Fires when the value for the configuration attribute 'minimum' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "methods": {"_getNumber": {"return": {"type": "", "description": "Number"}, "description": "Parses value into a number.", "private": "", "params": [{"type": "Object", "name": "val", "description": "  Value to parse into a number"}], "param": "val {Object} Value to parse into a number", "guessedname": "_getNumber", "guessedtype": "function"}, "_getKeyArray": {"return": {"type": "", "description": "Array"}, "description": "Gets an array of values based on a key.", "private": "", "params": [{"type": "String", "name": "key", "description": " Value key associated with the data array."}, {"type": "Array", "name": "data", "description": " Array in which the data resides."}], "param": "{String} key Value key associated with the data array.", "guessedname": "_getKeyArray", "guessedtype": "function"}, "_setDataByKey": {"description": "Sets data by key", "param": "{String} key Key value to use.", "params": [{"type": "String", "name": "key", "description": " Key value to use."}, {"type": "Array", "name": "data", "description": " Array to use."}], "private": "", "guessedname": "_setDataByKey", "guessedtype": "function"}, "getLabelByIndex": {"return": {"type": "", "description": "String"}, "description": "Calculates and returns a value based on the number of labels and the index of\nthe current label.", "param": "{Number} i Index of the label.", "params": [{"type": "Number", "name": "i", "description": " Index of the label."}, {"type": "Number", "name": "l", "description": " Total number of labels."}], "guessedname": "getLabelByIndex", "guessedtype": "function"}}, "extends": "AxisType", "superclass": "AxisType", "file": "charts.js", "shortname": "TimeAxis", "configs": {"setMin": {"description": "Indicates whether the minimum is calculated or explicitly set.", "private": "", "readonly": "", "guessedname": "setMin", "guessedtype": "property", "type": "Boolean"}, "labelFormat": {"type": "String", "description": "Pattern used by the `labelFunction` to format a label.", "guessedname": "labelFormat", "guessedtype": "property"}, "setMax": {"description": "Indicates whether the maximum is calculated or explicitly set.", "private": "", "readonly": "", "guessedname": "setMax", "guessedtype": "property", "type": "Boolean"}, "maximum": {"type": "Number", "description": "The maximum value that will appear on an axis. Unless explicitly set, this value is calculated by the `Axis`.", "guessedname": "maximum", "guessedtype": "property"}, "minimum": {"type": "Number", "description": "The minimum value that will appear on an axis. Unless explicitly set, this value is calculated by the `Axis`.", "guessedname": "minimum", "guessedtype": "property"}, "labelFunction": {"type": "Function", "description": "Method used for formatting a label. This attribute allows for the default label formatting method to overridden. The method use would need\nto implement the arguments below and return a `String`.\n<dl>\n<dt>val</dt><dd>Label to be formatted. (`String`)</dd>\n<dt>format</dt><dd>STRFTime string used to format the label. (optional)</dd>\n</dl>", "guessedname": "labelFunction", "guessedtype": "property"}}, "description": "TimeAxis manages time data on an axis."}, "Widget": {"name": "Widget", "description": "A base class for widgets, providing:\n<ul>\n<li>The render lifecycle method, in addition to the init and destroy \nlifecycle methods provide by Base</li>\n<li>Abstract methods to support consistent MVC structure across \nwidgets: renderer, renderUI, bindUI, syncUI</li>\n<li>Support for common widget attributes, such as boundingBox, contentBox, visible, \ndisabled, focused, strings</li>\n</ul>", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "A base class for widgets, providing:\n<ul>\n<li>The render lifecycle method, in addition to the init and destroy \nlifecycle methods provide by Base</li>\n<li>Abstract methods to support consistent MVC structure across \nwidgets: renderer, renderUI, bindUI, syncUI</li>\n<li>Support for common widget attributes, such as boundingBox, contentBox, visible, \ndisabled, focused, strings</li>\n</ul>"}], "namespace": "", "module": "widget", "properties": {"DEF_PARENT_NODE": {"type": "String | Node", "description": "Default node to render the bounding box to. If not set,\nwill default to the current document body.", "guessedname": "DEF_PARENT_NODE", "guessedtype": "property"}, "CONTENT_TEMPLATE": {"type": "String", "description": "Property defining the markup template for content box. If your Widget doesn't\nneed the dual boundingBox/contentBox structure, set CONTENT_TEMPLATE to null,\nand contentBox and boundingBox will both point to the same Node.", "guessedname": "CONTENT_TEMPLATE", "guessedtype": "property"}, "NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.\n<p>\nCurrently used to apply class identifiers to the bounding box \nand to classify events fired by the widget.\n</p>", "guessedname": "NAME", "guessedtype": "property"}, "DEF_UNIT": {"type": "String", "description": "Default unit to use for dimension values", "guessedname": "DEF_UNIT", "guessedtype": "property"}, "_UI_ATTRS": {"guessedname": "_UI_ATTRS", "type": "Object", "description": "The lists of UI attributes to bind and sync for widget's _bindUI and _syncUI implementations", "private": "", "guessedtype": "property"}, "BOUNDING_TEMPLATE": {"type": "String", "description": "Property defining the markup template for bounding box.", "guessedname": "BOUNDING_TEMPLATE", "guessedtype": "property"}, "_buildCfg": {"description": "The build configuration for the Widget class.\n<p>\nDefines the static fields which need to be aggregated,\nwhen this class is used as the main class passed to \nthe <a href=\"Base.html#method_build\">Base.build</a> method.\n</p>", "private": "", "static": "", "guessedname": "_buildCfg", "guessedtype": "property", "type": "Object", "final": ""}, "ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute \nconfiguration for the Widget.", "guessedname": "ATTRS", "guessedtype": "property"}, "CSS_PREFIX": {"description": "The css prefix which the static Widget.getClassName method should use when constructing class names", "default": "Widget.NAME.toLowerCase()", "private": "", "static": "", "guessedname": "CSS_PREFIX", "guessedtype": "property", "type": "String"}, "HTML_PARSER": {"type": "Object", "static": "", "description": "Object hash, defining how attribute values are to be parsed from\nmarkup contained in the widget's content box. e.g.:\n<pre>\n{\n// Set single Node references using selector syntax \n// (selector is run through node.one)\ntitleNode: \"span.yui-title\",\n// Set NodeList references using selector syntax \n// (array indicates selector is to be run through node.all)\nlistNodes: [\"li.yui-item\"],\n// Set other attribute types, using a parse function. \n// Context is set to the widget instance.\nlabel: function(contentBox) {\nreturn contentBox.one(\"span.title\").get(\"innerHTML\");\n}\n}\n</pre>", "guessedname": "HTML_PARSER", "guessedtype": "property"}, "UI_EVENTS": {"type": "Object", "description": "Map of DOM events that should be fired as Custom Events by the  \nWidget instance.", "guessedname": "UI_EVENTS", "guessedtype": "property"}, "UI_SRC": {"description": "Constant used to identify state changes originating from\nthe DOM (as opposed to the JavaScript model).", "static": "", "guessedname": "UI", "guessedtype": "property", "type": "String", "final": ""}}, "extends": "Base", "superclass": "Base", "file": "widget-base.js", "events": {"widget:render": {"preventable": "_defRenderFn", "params": [{"type": "EventFacade", "name": "e", "description": " The Event Facade"}], "description": "Lifecycle event for the render phase, fired prior to rendering the UI \nfor the widget (prior to invoking the widget's renderer method).\n<p>\nSubscribers to the \"on\" moment of this event, will be notified \nbefore the widget is rendered.\n</p>\n<p>\nSubscribers to the \"after\" moment of this event, will be notified\nafter rendering is complete.\n</p>", "param": "{EventFacade} e The Event Facade"}, "tabIndexChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "tabIndexChange", "description": "Fires when the value for the configuration attribute 'tabIndex' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "stringsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "stringsChange", "description": "Fires when the value for the configuration attribute 'strings' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "widthChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "widthChange", "description": "Fires when the value for the configuration attribute 'width' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "heightChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "heightChange", "description": "Fires when the value for the configuration attribute 'height' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "widget:contentUpdate": {"preventable": "false", "params": [{"type": "EventFacade", "name": "e", "description": " The Event Facade"}], "description": "Notification event, which widget implementations can fire, when\nthey change the content of the widget. This event has no default\nbehavior and cannot be prevented, so the \"on\" or \"after\"\nmoments are effectively equivalent (with on listeners being invoked before \nafter listeners).", "param": "{EventFacade} e The Event Facade"}, "boundingBoxChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "boundingBoxChange", "description": "Fires when the value for the configuration attribute 'boundingBox' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "focusedChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "focusedChange", "description": "Fires when the value for the configuration attribute 'focused' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "visibleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "visibleChange", "description": "Fires when the value for the configuration attribute 'visible' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "contentBoxChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "contentBoxChange", "description": "Fires when the value for the configuration attribute 'contentBox' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "renderChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "renderChange", "description": "Fires when the value for the configuration attribute 'render' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "renderedChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "renderedChange", "description": "Fires when the value for the configuration attribute 'rendered' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "srcNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "srcNodeChange", "description": "Fires when the value for the configuration attribute 'srcNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "disabledChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "disabledChange", "description": "Fires when the value for the configuration attribute 'disabled' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "idChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "idChange", "description": "Fires when the value for the configuration attribute 'id' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "configs": {"srcNode": {"type": "String | Node", "description": "The DOM node to parse for configuration values, passed to the Widget's HTML_PARSER definition", "writeonce": ""}, "rendered": {"default": "false", "readonly": "", "type": "boolean", "description": "Flag indicating whether or not this Widget\nhas been through the render lifecycle phase."}, "render": {"type": "boolean | Node", "description": "Whether or not to render the widget automatically after init, and optionally, to which parent node.", "writeonce": ""}, "width": {"default": "EMPTY_STR", "type": "{String | Number}", "description": "String with units, or number, representing the width of the Widget. If a number is provided,\nthe default unit, defined by the Widgets DEF_UNIT, property is used."}, "strings": {"default": "null", "type": "Object", "description": "Collection of strings used to label elements of the Widget's UI."}, "height": {"default": "EMPTY_STR", "type": "{String | Number}", "description": "String with units, or number, representing the height of the Widget. If a number is provided,\nthe default unit, defined by the Widgets DEF_UNIT, property is used."}, "disabled": {"default": "false", "type": "boolean", "description": "Boolean indicating if the Widget should be disabled. The disabled implementation\nis left to the specific classes extending widget."}, "visible": {"default": "TRUE", "type": "boolean", "description": "Boolean indicating weather or not the Widget is visible."}, "focused": {"default": "false", "readonly": "", "type": "boolean", "description": "Boolean indicating if the Widget, or one of its descendants, \nhas focus."}, "boundingBox": {"type": "String | Node", "description": "The outermost DOM node for the Widget, used for sizing and positioning \nof a Widget as well as a containing element for any decorator elements used \nfor skinning.", "writeonce": ""}, "contentBox": {"type": "String | Node", "description": "A DOM node that is a direct descendant of a Widget's bounding box that \nhouses its content.", "writeonce": ""}, "id": {"default": "Generated using guid()", "type": "String", "writeonce": ""}, "tabIndex": {"default": "null", "type": "Number", "description": "Number (between -32767 to 32767) indicating the widget's \nposition in the default tab flow.  The value is used to set the \n\"tabIndex\" attribute on the widget's bounding box.  Negative values allow\nthe widget to receive DOM focus programmatically (by calling the focus\nmethod), while being removed from the default tab flow.  A value of \nnull removes the \"tabIndex\" attribute from the widget's bounding box."}}, "shortname": "Widget", "methods": {"_uiSetVisible": {"description": "Sets the visible state for the UI", "param": "{boolean} val", "protected": "", "params": [{"type": "boolean", "name": "val", "description": ""}], "guessedname": "_uiSetVisible", "guessedtype": "function"}, "_destroyBox": {"protected": "", "description": "Removes and destroys the widgets rendered boundingBox, contentBox,\nand detaches bound UI events.", "guessedname": "_destroyBox", "guessedtype": "function"}, "render": {"description": "Establishes the initial DOM for the widget. Invoking this\nmethod will lead to the creating of all DOM elements for\nthe widget (or the manipulation of existing DOM elements \nfor the progressive enhancement use case).\n<p>\nThis method should only be invoked once for an initialized\nwidget.\n</p>\n<p>\nIt delegates to the widget specific renderer method to do\nthe actual work.\n</p>", "chainable": "", "param": "parentNode {Object | String} Optional. The Node under which the \nWidget is to be rendered. This can be a Node instance or a CSS selector string. \n<p>\nIf the selector string returns more than one Node, the first node will be used \nas the parentNode. NOTE: This argument is required if both the boundingBox and contentBox\nare not currently in the document. If it's not provided, the Widget will be rendered\nto the body of the current document in this case.\n</p>", "params": [{"type": "Object | String", "name": "parentNode", "description": "  Optional. The Node under which the \nWidget is to be rendered. This can be a Node instance or a CSS selector string. \n<p>\nIf the selector string returns more than one Node, the first node will be used \nas the parentNode. NOTE: This argument is required if both the boundingBox and contentBox\nare not currently in the document. If it's not provided, the Widget will be rendered\nto the body of the current document in this case.\n</p>"}], "guessedname": "render", "guessedtype": "function", "final": ""}, "show": {"chainable": "", "description": "Shows the Widget by setting the \"visible\" attribute to \"true\".", "guessedname": "show", "guessedtype": "function"}, "_filterUIEvent": {"return": {"type": "boolean", "description": "true if it's OK to fire the custom UI event, false if not."}, "description": "This method is used to determine if we should fire\nthe UI Event or not. The default implementation makes sure\nthat for nested delegates (nested unrelated widgets), we don't \nfire the UI event listener more than once at each level.\n<p>For example, without the additional filter, if you have nested \nwidgets, each widget will have a delegate listener. If you \nclick on the inner widget, the inner delegate listener's \nfilter will match once, but the outer will match twice \n(based on delegate's design) - once for the inner widget, \nand once for the outer.</p>", "private": "", "params": [{"type": "DOMEventFacade", "name": "evt", "description": ""}], "param": "{DOMEventFacade} evt", "guessedname": "_filterUIEvent", "guessedtype": "function"}, "_uiSetTabIndex": {"description": "Set the tabIndex on the widget's rendered UI", "param": "Number", "protected": "", "params": [{"type": "", "name": "Number", "description": ""}], "guessedname": "_uiSetTabIndex", "guessedtype": "function"}, "focus": {"chainable": "", "description": "Causes the Widget to receive the focus by setting the \"focused\" \nattribute to \"true\".", "guessedname": "focus", "guessedtype": "function"}, "initializer": {"description": "Initializer lifecycle implementation for the Widget class. Registers the \nwidget instance, and runs through the Widget's HTML_PARSER definition.", "param": "config {Object} Configuration object literal for the widget", "protected": "", "params": [{"type": "Object", "name": "config", "description": "  Configuration object literal for the widget"}], "guessedname": "initializer", "guessedtype": "function"}, "_renderUI": {"protected": "", "description": "Initializes the UI state for the Widget's bounding/content boxes.", "guessedname": "_renderUI", "guessedtype": "function"}, "_destroyUIEvents": {"guessedname": "_destroyUIEvents", "description": "Destructor logic for UI event infrastructure,\ninvoked during Widget destruction.", "private": "", "guessedtype": "function"}, "_uiSetChildSelected": {"description": "Updates the UI to reflect the <code>selected</code> attribute value.", "param": "{number} selected The selected value to be reflected in the UI.", "protected": "", "params": [{"type": "number", "name": "selected", "description": " The selected value to be reflected in the UI."}], "guessedname": "_uiSetChildSelected", "guessedtype": "function"}, "renderer": {"protected": "", "description": "Creates DOM (or manipulates DOM for progressive enhancement)\nThis method is invoked by render() and is not chained \nautomatically for the class hierarchy (unlike initializer, destructor) \nso it should be chained manually for subclasses if required.", "guessedname": "renderer", "guessedtype": "function"}, "getString": {"return": {"type": "String", "description": "The string"}, "description": "Helper method to get a specific string value", "deprecated": "Used by deprecated WidgetLocale implementations.", "param": "{String} key", "params": [{"type": "String", "name": "key", "description": ""}], "guessedname": "getString", "guessedtype": "function"}, "_applyParser": {"description": "Utilitity method used to apply the <code>HTML_PARSER</code> configuration for the \ninstance, to retrieve config data values.", "param": "config {Object} User configuration object (will be populated with values from Node)", "protected": "", "params": [{"type": "Object", "name": "config", "description": "  User configuration object (will be populated with values from Node)"}], "guessedname": "_applyParser", "guessedtype": "function"}, "_removeLoadingClassNames": {"protected": "", "description": "Removes class names representative of the widget's loading state from \nthe boundingBox.", "guessedname": "_removeLoadingClassNames", "guessedtype": "function"}, "_syncUIChild": {"protected": "", "description": "Synchronizes the UI to match the WidgetChild state.\n<p>\nThis method is invoked after bindUI is invoked for the Widget class\nusing YUI's aop infrastructure.\n</p>", "guessedname": "_syncUIChild", "guessedtype": "function"}, "destructor": {"protected": "", "description": "Destructor lifecycle implementation for the Widget class. Purges events attached\nto the bounding box (and all child nodes) and removes the Widget from the \nlist of registered widgets.", "guessedname": "destructor", "guessedtype": "function"}, "_createUIEvent": {"description": "Binds a delegated DOM event listener of the specified type to the \nWidget's outtermost DOM element to facilitate the firing of a Custom\nEvent of the same type for the Widget instance.", "param": "type {String} String representing the name of the event", "params": [{"type": "String", "name": "type", "description": "  String representing the name of the event"}], "private": "", "guessedname": "_createUIEvent", "guessedtype": "function"}, "_bindUIChild": {"protected": "", "description": "Binds event listeners responsible for updating the UI state in response \nto WidgetChild related state changes.\n<p>\nThis method is invoked after bindUI is invoked for the Widget class\nusing YUI's aop infrastructure.\n</p>", "guessedname": "_bindUIChild", "guessedtype": "function"}, "previous": {"return": {"type": "Widget", "description": "Widget instance."}, "description": "Returns the Widget's previous sibling.", "param": "{Boolean} circular Boolean indicating if the parent's last child \nshould be returned if the child has no previous sibling.", "params": [{"type": "Boolean", "name": "circular", "description": " Boolean indicating if the parent's last child \nshould be returned if the child has no previous sibling."}], "guessedname": "previous", "guessedtype": "function"}, "_isUIEvent": {"return": {"type": "String", "description": "Event Returns the name of the UI Event, otherwise \nundefined."}, "description": "Determines if the specified event is a UI event.", "private": "", "params": [{"type": "String", "name": "type", "description": "  String representing the name of the event"}], "param": "type {String} String representing the name of the event", "guessedname": "_getUIEvent", "guessedtype": "function"}, "_bindAttrUI": {"description": "Binds after listeners for the list of attributes provided", "param": "{Array} attrs", "params": [{"type": "Array", "name": "attrs", "description": ""}], "private": "", "guessedname": "_bindAttrUI", "guessedtype": "function"}, "_syncUI": {"protected": "", "description": "Updates the widget UI to reflect the attribute state.", "guessedname": "_syncUI", "guessedtype": "function"}, "hide": {"chainable": "", "description": "Hides the Widget by setting the \"visible\" attribute to \"false\".", "guessedname": "hide", "guessedtype": "function"}, "_uiSetDim": {"param": "{String} dim The dimension - \"width\" or \"height\"", "params": [{"type": "String", "name": "dim", "description": " The dimension - \"width\" or \"height\""}, {"type": "Number | String", "name": "val", "description": " The value to set"}], "private": "", "guessedname": "_uiSetDim", "guessedtype": "function"}, "_setBox": {"return": {"type": "Node", "description": "The node"}, "description": "Helper method to set the bounding/content box, or create it from\nthe provided template if not found.", "private": "", "params": [{"type": "String", "name": "id", "description": " The node's id attribute"}, {"type": "Node|String", "name": "node", "description": " The node reference"}, {"type": "String", "name": "template", "description": " HTML string template for the node"}], "param": "{String} id The node's id attribute", "guessedname": "_setBox", "guessedtype": "function"}, "_bindUI": {"protected": "", "description": "Sets up DOM and CustomEvent listeners for the widget.", "guessedname": "_bindUI", "guessedtype": "function"}, "_unbindUI": {"protected": "", "guessedname": "_unbindUI", "guessedtype": "function"}, "next": {"return": {"type": "Widget", "description": "Widget instance."}, "description": "Returns the Widget's next sibling.", "param": "{Boolean} circular Boolean indicating if the parent's first child \nshould be returned if the child has no next sibling.", "params": [{"type": "Boolean", "name": "circular", "description": " Boolean indicating if the parent's first child \nshould be returned if the child has no next sibling."}], "guessedname": "next", "guessedtype": "function"}, "getSkinName": {"return": {"type": "String", "description": "the name of the skin, or null (yui3-skin-sam => sam)"}, "description": "Returns the name of the skin that's currently applied to the widget.\nThis is only really useful after the widget's DOM structure is in the\ndocument, either by render or by progressive enhancement.  Searches up\nthe Widget's ancestor axis for a class yui3-skin-(name), and returns the\n(name) portion.  Otherwise, returns null.", "guessedname": "getSkinName", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "The default string value for the widget [ displays the NAME of the instance, and the unique id ]"}, "description": "Generic toString implementation for all widgets.", "guessedname": "toString", "guessedtype": "function"}, "_uiSetHeight": {"description": "Sets the height on the widget's bounding box element", "param": "{String | Number} val", "protected": "", "params": [{"type": "String | Number", "name": "val", "description": ""}], "guessedname": "_uiSetHeight", "guessedtype": "function"}, "blur": {"chainable": "", "description": "Causes the Widget to lose focus by setting the \"focused\" attribute \nto \"false\"", "guessedname": "blur", "guessedtype": "function"}, "_uiSizeCB": {"protected": "", "params": [{"type": "boolean", "name": "expand", "description": ""}], "param": "{boolean} expand", "guessedname": "_uiSizeCB", "guessedtype": "function"}, "destroy": {"return": {"type": "Widget", "description": "A reference to this object"}, "description": "<p>\nDestroy lifecycle method. Fires the destroy\nevent, prior to invoking destructors for the\nclass hierarchy.\nOverrides Base's implementation, to support arguments to destroy\n</p>\n<p>\nSubscribers to the destroy\nevent can invoke preventDefault on the event object, to prevent destruction\nfrom proceeding.\n</p>", "chainable": "", "param": "destroyAllNodes {Boolean} If true, all nodes contained within the Widget are removd and destroyed. Defaults to false due to potentially high run-time cost.", "params": [{"type": "Boolean", "name": "destroyAllNodes", "description": "  If true, all nodes contained within the Widget are removd and destroyed. Defaults to false due to potentially high run-time cost."}], "guessedname": "destroy", "guessedtype": "function"}, "ancestor": {"return": {"type": "Widget", "description": "Widget instance."}, "description": "Returns the Widget instance at the specified depth.", "param": "{number} depth Number representing the depth of the ancestor.", "params": [{"type": "number", "name": "depth", "description": " Number representing the depth of the ancestor."}], "guessedname": "ancestor", "guessedtype": "function"}, "_renderBox": {"description": "Helper method to collect the boundingBox and contentBox, set styles and append to the provided parentNode, if not\nalready a child. The owner document of the boundingBox, or the owner document of the contentBox will be used \nas the document into which the Widget is rendered if a parentNode is node is not provided. If both the boundingBox and\nthe contentBox are not currently in the document, and no parentNode is provided, the widget will be rendered \nto the current document's body.", "param": "{Node} parentNode The parentNode to render the widget to. If not provided, and both the boundingBox and\nthe contentBox are not currently in the document, the widget will be rendered to the current document's body.", "params": [{"type": "Node", "name": "parentNode", "description": " The parentNode to render the widget to. If not provided, and both the boundingBox and\nthe contentBox are not currently in the document, the widget will be rendered to the current document's body."}], "private": "", "guessedname": "_renderBox", "guessedtype": "function"}, "_setBB": {"return": {"type": "", "description": "Node"}, "description": "Setter for the boundingBox attribute", "private": "", "params": [{"type": "", "name": "Node/String", "description": ""}], "param": "Node/String", "guessedname": "_setBB", "guessedtype": "function"}, "_onDocMouseDown": {"description": "\"mousedown\" event handler for the owner document of the \nwidget's bounding box.", "param": "{EventFacade} evt The event facade for the DOM focus event", "protected": "", "params": [{"type": "EventFacade", "name": "evt", "description": " The event facade for the DOM focus event"}], "guessedname": "_onDocMouseDown", "guessedtype": "function"}, "_afterChildSelectedChange": {"description": "Default attribute change listener for the <code>selected</code> \nattribute, responsible for updating the UI, in response to \nattribute changes.", "param": "{EventFacade} event The event facade for the attribute change.", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " The event facade for the attribute change."}], "guessedname": "_afterChildSelectedChange", "guessedtype": "function"}, "getByNode": {"return": {"type": "Widget", "description": "Widget instance, or null if not found."}, "description": "Returns the widget instance whose bounding box contains, or is, the given node. \n<p>\nIn the case of nested widgets, the nearest bounding box ancestor is used to\nreturn the widget instance.\n</p>", "param": "node {Node | String} The node for which to return a Widget instance. If a selector\nstring is passed in, which selects more than one node, the first node found is used.", "static": "", "guessedname": "getByNode", "guessedtype": "function", "params": [{"type": "Node | String", "name": "node", "description": "  The node for which to return a Widget instance. If a selector\nstring is passed in, which selects more than one node, the first node found is used."}]}, "enable": {"chainable": "", "description": "Set the Widget's \"disabled\" attribute to \"false\".", "guessedname": "enable", "guessedtype": "function"}, "isRoot": {"return": {"type": "Boolean", "description": "Boolean indicating if Widget is the root Widget in the \nobject hierarchy."}, "description": "Determines if the Widget is the root Widget in the \nobject hierarchy.", "guessedname": "isRoot", "guessedtype": "function"}, "_uiSetFocused": {"description": "Sets the focused state for the UI", "param": "{boolean} val", "protected": "", "params": [{"type": "boolean", "name": "val", "description": ""}, {"type": "string", "name": "src", "description": " String representing the source that triggered an update to \nthe UI."}], "guessedname": "_uiSetFocused", "guessedtype": "function"}, "_guid": {"protected": "", "guessedname": "_guid", "guessedtype": "function"}, "_validTabIndex": {"protected": "", "params": [{"type": "Number", "name": "tabIndex", "description": ""}], "param": "{Number} tabIndex", "guessedname": "_validTabIndex", "guessedtype": "function"}, "_unbindDOM": {"protected": "", "guessedname": "_unbindDOM", "guessedtype": "function"}, "_renderBoxClassNames": {"protected": "", "description": "Applies standard class names to the boundingBox and contentBox", "guessedname": "_renderBoxClassNames", "guessedtype": "function"}, "_setAttrUI": {"param": "{EventFacade} e", "params": [{"type": "EventFacade", "name": "e", "description": ""}], "private": "", "guessedname": "_setAttrUI", "guessedtype": "function"}, "_applyParsedConfig": {"protected": "", "return": {"type": "Object", "description": "The merged configuration literal"}, "guessedname": "_applyParsedConfig", "guessedtype": "function"}, "disable": {"chainable": "", "description": "Set the Widget's \"disabled\" attribute to \"true\".", "guessedname": "disable", "guessedtype": "function"}, "_bindDOM": {"protected": "", "description": "Sets up DOM listeners, on elements rendered by the widget.", "guessedname": "_bindDOM", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Configures/Sets up listeners to bind Widget State to UI/DOM\nThis method is not called by framework and is not chained \nautomatically for the class hierarchy.", "guessedname": "bindUI", "guessedtype": "property"}, "_getSrcNode": {"protected": "", "return": {"type": "Node", "description": "The Node to apply HTML_PARSER to"}, "guessedname": "_getSrcNode", "guessedtype": "function"}, "_syncAttrUI": {"description": "Invokes the _uiSet&#61;ATTR NAME&#62; method for the list of attributes provided", "param": "{Array} attrs", "params": [{"type": "Array", "name": "attrs", "description": ""}], "private": "", "guessedname": "_syncAttrUI", "guessedtype": "function"}, "_onDocFocus": {"description": "DOM focus event handler, used to sync the state of the Widget with the DOM", "param": "{EventFacade} evt The event facade for the DOM focus event", "protected": "", "params": [{"type": "EventFacade", "name": "evt", "description": " The event facade for the DOM focus event"}], "guessedname": "_onDocFocus", "guessedtype": "function"}, "_uiSetWidth": {"description": "Sets the width on the widget's bounding box element", "param": "{String | Number} val", "protected": "", "params": [{"type": "String | Number", "name": "val", "description": ""}], "guessedname": "_uiSetWidth", "guessedtype": "function"}, "syncUI": {"protected": "", "description": "Refreshes the rendered UI, based on Widget State\nThis method is not called by framework and is not chained\nautomatically for the class hierarchy.", "guessedname": "syncUI", "guessedtype": "property"}, "_getHtmlParser": {"guessedname": "_getHtmlParser", "return": {"type": "Object", "description": "HTML_PARSER definition for this instance"}, "description": "Gets the HTML_PARSER definition for this instance, by merging HTML_PARSER\ndefinitions across the class hierarchy.", "private": "", "guessedtype": "function"}, "_getUIEventNode": {"protected": "", "description": "Returns the node on which to bind delegate listeners.", "guessedname": "_getUIEventNode", "guessedtype": "function"}, "_strSetter": {"return": {"type": "String", "description": "The full set of strings to set"}, "description": "The default setter for the strings attribute. Merges partial sets\ninto the full string set, to allow users to partial sets of strings", "param": "{Object} strings", "protected": "", "params": [{"type": "Object", "name": "strings", "description": ""}], "guessedname": "_strSetter", "guessedtype": "function"}, "_initUIEvent": {"return": {"type": "String", "description": ""}, "description": "Sets up infrastructure required to fire a UI event.", "private": "", "params": [{"type": "String", "name": "type", "description": "  String representing the name of the event"}], "param": "type {String} String representing the name of the event", "guessedname": "_initUIEvent", "guessedtype": "function"}, "_defaultCB": {"protected": "", "description": "Returns the default value for the contentBox attribute. \nFor the Widget class, this will be the srcNode if provided, otherwise null (resulting in\na new contentBox node instance being created)", "guessedname": "_defaultCB", "guessedtype": "function"}, "getClassName": {"param": "{String}+ One or more classname bits to be joined and prefixed", "params": [{"type": "String*", "name": "args*", "description": " 0..n strings which should be concatenated, using the default separator defined by ClassNameManager, to create the class name"}], "description": "Generate a standard prefixed classname for the Widget, prefixed by the default prefix defined\nby the <code>Y.config.classNamePrefix</code> attribute used by <code>ClassNameManager</code> and \n<code>Widget.NAME.toLowerCase()</code> (e.g. \"yui-widget-xxxxx-yyyyy\", based on default values for \nthe prefix and widget class name).\n<p>\nThe instance based version of this method can be used to generate standard prefixed classnames,\nbased on the instances NAME, as opposed to Widget.NAME. This method should be used when you\nneed to use a constant class name across different types instances.\n</p>", "guessedname": "getClassName", "guessedtype": "function"}, "_setCB": {"return": {"type": "", "description": "Node"}, "description": "Setter for the contentBox attribute", "private": "", "params": [{"type": "Node|String", "name": "node", "description": ""}], "param": "{Node|String} node", "guessedname": "_setCB", "guessedtype": "function"}, "_defRenderFn": {"description": "Default render handler", "param": "{EventFacade} e The Event object", "protected": "", "params": [{"type": "EventFacade", "name": "e", "description": " The Event object"}, {"type": "Node", "name": "parentNode", "description": " The parent node to render to, if passed in to the <code>render</code> method"}], "guessedname": "_defRenderFn", "guessedtype": "function"}, "renderUI": {"protected": "", "description": "å\nAdds nodes to the DOM \nThis method is not called by framework and is not chained \nautomatically for the class hierarchy.", "guessedname": "renderUI", "guessedtype": "property"}, "_uiSetDisabled": {"description": "Sets the disabled state for the UI", "param": "{boolean} val", "protected": "", "params": [{"type": "boolean", "name": "val", "description": ""}], "guessedname": "_uiSetDisabled", "guessedtype": "function"}}}, "Plugin.ExecCommand": {"name": "Plugin.ExecCommand", "constructors": [{"description": "Plugin for the frame module to handle execCommands for Editor"}], "namespace": "", "module": "editor", "guessedname": "ExecCommand", "methods": {"COMMANDS.insertunorderedlist": {"description": "Overload for COMMANDS.list", "param": "{String} cmd The command executed: list, ol", "static": "", "guessedname": "insertorderedlist", "guessedtype": "function", "params": [{"type": "String", "name": "cmd", "description": " The command executed: list, ol"}]}, "COMMANDS.hilitecolor": {"return": {"type": "NodeList", "description": "NodeList of the items touched by this command."}, "description": "Sugar method, calles backcolor", "param": "{String} cmd The command executed: backcolor", "static": "", "guessedname": "hilitecolor", "guessedtype": "function", "params": [{"type": "String", "name": "cmd", "description": " The command executed: backcolor"}, {"type": "String", "name": "val", "description": " The color value to apply"}]}, "COMMANDS.insertimage": {"return": {"type": "Node", "description": "Node instance of the item touched by this command."}, "description": "Inserts an image at the cursor position", "param": "{String} cmd The command executed: insertimage", "static": "", "guessedname": "insertimage", "guessedtype": "function", "params": [{"type": "String", "name": "cmd", "description": " The command executed: insertimage"}, {"type": "String", "name": "img", "description": " The url of the image to be inserted"}]}, "COMMANDS.insertbr": {"description": "Inserts a BR at the current cursor position", "param": "{String} cmd The command executed: insertbr", "static": "", "guessedname": "insertbr", "guessedtype": "function", "params": [{"type": "String", "name": "cmd", "description": " The command executed: insertbr"}]}, "COMMANDS.insertandfocus": {"return": {"type": "Node", "description": "Node instance of the item touched by this command."}, "description": "Inserts the provided HTML at the cursor, and focuses the cursor afterwards.", "param": "{String} cmd The command executed: insertandfocus", "static": "", "guessedname": "insertandfocus", "guessedtype": "function", "params": [{"type": "String", "name": "cmd", "description": " The command executed: insertandfocus"}, {"type": "String", "name": "html", "description": " The html to insert"}]}, "COMMANDS.removeclass": {"return": {"type": "NodeList", "description": "NodeList of the items touched by this command."}, "description": "Remove a class from all of the elements in the selection", "param": "{String} cmd The command executed: removeclass", "static": "", "guessedname": "removeclass", "guessedtype": "function", "params": [{"type": "String", "name": "cmd", "description": " The command executed: removeclass"}, {"type": "String", "name": "cls", "description": " The className to remove"}]}, "COMMANDS.insertorderedlist": {"description": "Overload for COMMANDS.list", "param": "{String} cmd The command executed: list, ul", "static": "", "guessedname": "insertunorderedlist", "guessedtype": "function", "params": [{"type": "String", "name": "cmd", "description": " The command executed: list, ul"}]}, "fixIETags": {"description": "This method is meant to normalize IE's in ability to exec the proper command on elements with CSS styling.", "param": "{String} cmd The command to execute", "protected": "", "params": [{"type": "String", "name": "cmd", "description": " The command to execute"}, {"type": "String", "name": "tag", "description": " The tag to create"}, {"type": "String", "name": "rule", "description": " The rule that we are looking for."}], "guessedname": "fixIETags", "guessedtype": "function"}, "COMMANDS.inserthtml": {"return": {"type": "Node", "description": "Node instance of the item touched by this command."}, "description": "Inserts the provided HTML at the cursor, should be a single element.", "param": "{String} cmd The command executed: inserthtml", "static": "", "guessedname": "inserthtml", "guessedtype": "function", "params": [{"type": "String", "name": "cmd", "description": " The command executed: inserthtml"}, {"type": "String", "name": "html", "description": " The html to insert"}]}, "getInstance": {"return": {"type": "YUI", "description": "The YUI instance bound to the parent frame"}, "description": "Get's the instance of YUI bound to the parent frame", "guessedname": "getInstance", "guessedtype": "function"}, "COMMANDS.justifyleft": {"static": "", "description": "Override method for COMMANDS.justify", "guessedname": "justifyleft", "guessedtype": "function"}, "COMMANDS.list": {"description": "Noramlizes lists creation/destruction for IE. All others pass through to native calls", "param": "{String} cmd The command executed: list (not used)", "static": "", "guessedname": "list", "guessedtype": "function", "params": [{"type": "String", "name": "cmd", "description": " The command executed: list (not used)"}, {"type": "String", "name": "tag", "description": " The tag to deal with"}]}, "COMMANDS.addclass": {"return": {"type": "NodeList", "description": "NodeList of the items touched by this command."}, "description": "Add a class to all of the elements in the selection", "param": "{String} cmd The command executed: addclass", "static": "", "guessedname": "addclass", "guessedtype": "function", "params": [{"type": "String", "name": "cmd", "description": " The command executed: addclass"}, {"type": "String", "name": "cls", "description": " The className to add"}]}, "COMMANDS.justify": {"description": "Noramlizes alignment for Webkit Browsers", "param": "{String} cmd The command executed: justify (not used)", "static": "", "guessedname": "justify", "guessedtype": "function", "params": [{"type": "String", "name": "cmd", "description": " The command executed: justify (not used)"}, {"type": "String} val The actual command from the justify{center,all,left,right", "name": "stubs", "description": ""}]}, "COMMANDS.forecolor": {"return": {"type": "NodeList", "description": "NodeList of the items touched by this command."}, "description": "Adds a forecolor to the current selection, or creates a new element and applies it", "param": "{String} cmd The command executed: forecolor", "static": "", "guessedname": "forecolor", "guessedtype": "function", "params": [{"type": "String", "name": "cmd", "description": " The command executed: forecolor"}, {"type": "String", "name": "val", "description": " The color value to apply"}]}, "COMMANDS.wrap": {"return": {"type": "NodeList", "description": "NodeList of the items touched by this command."}, "description": "Wraps the content with a new element of type (tag)", "param": "{String} cmd The command executed: wrap", "static": "", "guessedname": "wrap", "guessedtype": "function", "params": [{"type": "String", "name": "cmd", "description": " The command executed: wrap"}, {"type": "String", "name": "tag", "description": " The tag to wrap the selection with"}]}, "COMMANDS.fontsize2": {"return": {"type": "NodeList", "description": "NodeList of the items touched by this command."}, "description": "Adds a fontsize to the current selection, or creates a new element and applies it", "deprecated": "", "param": "{String} cmd The command executed: fontsize", "static": "", "guessedname": "fontsize2", "guessedtype": "function", "params": [{"type": "String", "name": "cmd", "description": " The command executed: fontsize"}, {"type": "String", "name": "val", "description": " The font size to apply"}]}, "_command": {"description": "The private version of execCommand that doesn't filter for overrides.", "param": "{String} action The action to perform (bold, italic, fontname)", "params": [{"type": "String", "name": "action", "description": " The action to perform (bold, italic, fontname)"}, {"type": "String", "name": "value", "description": " The optional value (helvetica)"}], "private": "", "guessedname": "_command", "guessedtype": "function"}, "COMMANDS.justifyfull": {"static": "", "description": "Override method for COMMANDS.justify", "guessedname": "justifyfull", "guessedtype": "function"}, "COMMANDS.backcolor": {"return": {"type": "NodeList", "description": "NodeList of the items touched by this command."}, "description": "Adds a background color to the current selection, or creates a new element and applies it", "param": "{String} cmd The command executed: backcolor", "static": "", "guessedname": "backcolor", "guessedtype": "function", "params": [{"type": "String", "name": "cmd", "description": " The command executed: backcolor"}, {"type": "String", "name": "val", "description": " The color value to apply"}]}, "COMMANDS.justifyright": {"static": "", "description": "Override method for COMMANDS.justify", "guessedname": "justifyright", "guessedtype": "function"}, "COMMANDS.justifycenter": {"static": "", "description": "Override method for COMMANDS.justify", "guessedname": "justifycenter", "guessedtype": "function"}, "COMMANDS.fontname2": {"return": {"type": "NodeList", "description": "NodeList of the items touched by this command."}, "description": "Adds a font name to the current selection, or creates a new element and applies it", "deprecated": "", "param": "{String} cmd The command executed: fontname", "static": "", "guessedname": "fontname2", "guessedtype": "function", "params": [{"type": "String", "name": "cmd", "description": " The command executed: fontname"}, {"type": "String", "name": "val", "description": " The font name to apply"}]}, "command": {"return": {"type": "Node/NodeList", "description": "Should return the Node/Nodelist affected"}, "description": "Execute a command on the frame's document.", "param": "{String} action The action to perform (bold, italic, fontname)", "params": [{"type": "String", "name": "action", "description": " The action to perform (bold, italic, fontname)"}, {"type": "String", "name": "value", "description": " The optional value (helvetica)"}], "guessedname": "command", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "editor.js", "guessedtype": "function", "shortname": "Plugin.ExecCommand", "properties": {"COMMANDS": {"static": "", "description": "Static object literal of execCommand overrides", "guessedname": "COMMANDS", "guessedtype": "property"}, "NAME": {"static": "", "description": "execCommand", "guessedname": "NAME", "guessedtype": "property"}, "_lastKey": {"private": "", "description": "An internal reference to the keyCode of the last key that was pressed.", "guessedname": "_lastKey", "guessedtype": "property"}, "bidi": {"description": "bidi execCommand override for setting the text direction of a node.\nThis property is added to the `Y.Plugin.ExecCommands.COMMANDS`\ncollection."}, "NS": {"static": "", "description": "exec", "guessedname": "NS", "guessedtype": "property"}, "_inst": {"private": "", "description": "An internal reference to the instance of the frame plugged into.", "guessedname": "_inst", "guessedtype": "property"}}, "description": "Plugin for the frame module to handle execCommands for Editor"}, "ParseContent": {"name": "ParseContent", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "A base class for ParseContent, providing:\n<ul>\n<li>After plug ParseContent on a A.Node instance the javascript chunks will be executed (remote and inline scripts)</li>\n<li>All the javascripts within a content will be executed according to the order of apparition</li>\n</ul>\n<p><strong>NOTE:</strong> For performance reasons on DOM manipulation,\nParseContent only parses the content passed to the\n<a href=\"Node.html#method_setContent\">setContent</a>,\n<a href=\"Node.html#method_prepend\">prepend</a> and\n<a href=\"Node.html#method_append\">append</a> methods.</p>\nQuick Example:<br/>\n<pre><code>node.plug(A.Plugin.ParseContent);</code></pre>\nCheck the list of <a href=\"ParseContent.html#configattributes\">Configuration Attributes</a> available for\nParseContent."}], "namespace": "", "module": "aui-parse-content", "guessedname": "ParseContent", "methods": {"parseContent": {"return": {"type": "String", "description": ""}, "description": "Extract the <code>script</code> tags from the string content and\nevaluate the chunks.", "param": "{String} content HTML string", "params": [{"type": "String", "name": "content", "description": " HTML string"}], "guessedname": "parseContent", "guessedtype": "function"}, "_bindAOP": {"protected": "", "description": "Bind listeners on the <code>insert</code> and <code>setContent</code>\nmethods of the Node instance where you are plugging the ParseContent.\nThese listeners are responsible for intercept the HTML passed and parse\nthem.", "guessedname": "_bindAOP", "guessedtype": "function"}, "initializer": {"protected": "", "description": "Construction logic executed during ParseContent instantiation. Lifecycle.", "guessedname": "initializer", "guessedtype": "function"}, "globalEval": {"param": "{String} data JavaScript String.", "params": [{"type": "String", "name": "data", "description": " JavaScript String."}], "description": "Global eval the <data>data</data> passed.", "guessedname": "globalEval", "guessedtype": "function"}, "clean": {"return": {"type": "Object", "description": ""}, "description": "Create an HTML fragment with the String passed, extract all the script\ntags and return an Object with a reference for the extracted scripts and\nthe fragment.", "param": "{String} content HTML content.", "protected": "", "params": [{"type": "String", "name": "content", "description": " HTML content."}], "guessedname": "_clean", "guessedtype": "function"}, "_dispatch": {"return": {"type": "String", "description": ""}, "description": "Loop trough all extracted <code>script</code> tags and evaluate them.", "param": "{Object} output Object containing the reference for the fragment and the extracted <code>script</code> tags.", "protected": "", "params": [{"type": "Object", "name": "output", "description": " Object containing the reference for the fragment and the extracted <code>script</code> tags."}], "guessedname": "_dispatch", "guessedtype": "function"}}, "extends": "Plugin.Base", "superclass": "Plugin.Base", "file": "aui-parse-content.js", "guessedtype": "property", "shortname": "ParseContent", "properties": {"ParseContent.NS": {"type": "String", "static": "", "description": "Static property provides a string to identify the namespace.", "guessedname": "NS", "guessedtype": "property"}, "ParseContent.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the ParseContent.", "guessedname": "ATTRS", "guessedtype": "property"}, "ParseContent.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}}, "description": "A base class for ParseContent, providing:\n<ul>\n<li>After plug ParseContent on a A.Node instance the javascript chunks will be executed (remote and inline scripts)</li>\n<li>All the javascripts within a content will be executed according to the order of apparition</li>\n</ul>\n<p><strong>NOTE:</strong> For performance reasons on DOM manipulation,\nParseContent only parses the content passed to the\n<a href=\"Node.html#method_setContent\">setContent</a>,\n<a href=\"Node.html#method_prepend\">prepend</a> and\n<a href=\"Node.html#method_append\">append</a> methods.</p>\nQuick Example:<br/>\n<pre><code>node.plug(A.Plugin.ParseContent);</code></pre>\nCheck the list of <a href=\"ParseContent.html#configattributes\">Configuration Attributes</a> available for\nParseContent."}, "AttributeLite": {"name": "AttributeLite", "constructors": [{"description": "AttributeLite provides Attribute-like getters and setters for shape classes in the Graphics module. It provides a get/set API without the event infastructure.\nThis class is temporary and a work in progress."}], "namespace": "", "module": "graphics", "guessedname": "AttributeLite", "methods": {"get": {"return": {"type": "Any", "description": "The value of the supplied property."}, "description": "For a given item, returns the value of the property requested, or undefined if not found.", "param": "name {String} The name of the item", "params": [{"type": "String", "name": "name", "description": "  The name of the item"}], "guessedname": "get", "guessedtype": "function"}, "set": {"param": "{String|Object} name The name of the attribute. Alternatively, an object of key value pairs can \nbe passed in to set multiple attributes at once.", "params": [{"type": "String|Object", "name": "name", "description": " The name of the attribute. Alternatively, an object of key value pairs can \nbe passed in to set multiple attributes at once."}, {"type": "Any", "name": "value", "description": " The value to set the attribute to. This value is ignored if an object is received as \nthe name param."}], "description": "Sets the value of an attribute.", "guessedname": "set", "guessedtype": "function"}, "_set": {"description": "Provides setter logic. Used by `set`.", "param": "{String|Object} name The name of the attribute. Alternatively, an object of key value pairs can \nbe passed in to set multiple attributes at once.", "protected": "", "params": [{"type": "String|Object", "name": "name", "description": " The name of the attribute. Alternatively, an object of key value pairs can \nbe passed in to set multiple attributes at once."}, {"type": "Any", "name": "value", "description": " The value to set the attribute to. This value is ignored if an object is received as \nthe name param."}], "guessedname": "_set", "guessedtype": "function"}, "addAttrs": {"param": "{Object} cfg Optional object containing attributes key value pairs to be set.", "params": [{"type": "Object", "name": "cfg", "description": " Optional object containing attributes key value pairs to be set."}], "description": "Initializes the attributes for a shape. If an attribute config is passed into the constructor of the host, \nthe initial values will be overwritten.", "guessedname": "addAttrs", "guessedtype": "function"}}, "file": "graphics.js", "guessedtype": "function", "shortname": "AttributeLite", "description": "AttributeLite provides Attribute-like getters and setters for shape classes in the Graphics module. It provides a get/set API without the event infastructure.\nThis class is temporary and a work in progress."}, "TreeNodeRadio": {"name": "TreeNodeRadio", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "<p><img src=\"assets/images/aui-treeNodeRadio/main.png\"/></p>\nA base class for TreeNodeRadio, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>3 states checkbox support</li>\n<li>Automatic check/uncheck the parent status based on the children checked status</li>\n</ul>\nCheck the list of <a href=\"TreeNodeRadio.html#configattributes\">Configuration Attributes</a> available for\nTreeNodeRadio."}], "namespace": "", "module": "aui-tree", "guessedname": "TreeNodeRadio", "extends": "TreeNodeTask", "superclass": "TreeNodeTask", "file": "aui-tree.js", "guessedtype": "property", "shortname": "TreeNodeRadio", "properties": {"TreeNode.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}}, "description": "<p><img src=\"assets/images/aui-treeNodeRadio/main.png\"/></p>\nA base class for TreeNodeRadio, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>3 states checkbox support</li>\n<li>Automatic check/uncheck the parent status based on the children checked status</li>\n</ul>\nCheck the list of <a href=\"TreeNodeRadio.html#configattributes\">Configuration Attributes</a> available for\nTreeNodeRadio."}, "TabView": {"name": "TabView", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying tabview configuration properties."}], "description": "Provides a tabbed widget interface"}], "namespace": "", "module": "tabview", "guessedname": "TabView", "uses": ["WidgetParent"], "superclass": "Widget", "file": "tabview.js", "guessedtype": "property", "extends": "Widget", "shortname": "TabView", "description": "Provides a tabbed widget interface"}, "ArraySort": {"name": "ArraySort", "namespace": "", "module": "arraysort", "guessedname": "ArraySort", "methods": {"compare": {"return": {"type": "Boolean", "description": "Return -1 when a < b. Return 0 when a = b.\nReturn 1 when a > b."}, "description": "Comparator function for simple case-insensitive string sorting.", "param": "a {Object} First sort argument.", "params": [{"type": "Object", "name": "a", "description": "  First sort argument."}, {"type": "Object", "name": "b", "description": "  Second sort argument."}, {"type": "Boolean", "name": "desc", "description": "  True if sort direction is descending, false if\nsort direction is ascending."}], "guessedname": "compare", "guessedtype": "function"}}, "file": "arraysort.js", "guessedtype": "property", "shortname": "ArraySort", "description": "Provides a case-insenstive comparator which can be used for array sorrting."}, "Object": {"name": "Object", "namespace": "", "module": "yui", "guessedname": "hasOwn", "methods": {"setValue": {"return": {"type": "Object", "description": "The modified object, with the new sub value set, or\nundefined, if the path was invalid."}, "description": "Sets the sub-attribute value at the provided path on the\nvalue object.  Returns the modified value object, or\nundefined if the path is invalid.", "param": "o             The object on which to set the sub value.", "static": "", "guessedname": "setValue", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": "             The object on which to set the sub value."}, {"type": "Array", "name": "path", "description": "   A path array, specifying the object traversal path\nat which to set the sub value."}, {"type": "Any", "name": "val", "description": "      The new value for the sub-attribute."}]}, "keys": {"return": {"type": "String[]", "description": "Array of keys."}, "description": "Returns an array containing the object's enumerable keys. Does not include\nprototype keys or non-enumerable keys.\nNote that keys are returned in enumeration order (that is, in the same order\nthat they would be enumerated by a `for-in` loop), which may not be the same\nas the order in which they were defined.\nThis method is an alias for the native ES5 `Object.keys()` method if\navailable.", "param": "{Object} obj An object.", "static": "", "guessedname": "keys", "guessedtype": "function", "params": [{"type": "Object", "name": "obj", "description": " An object."}], "example": "Y.Object.keys({a: 'foo', b: 'bar', c: 'baz'});\n// => ['a', 'b', 'c']"}, "hasValue": {"return": {"type": "Boolean", "description": "`true` if _obj_ contains _value_, `false` otherwise."}, "description": "Returns `true` if the object owns an enumerable property with the specified\nvalue.", "param": "{Object} obj An object.", "static": "", "guessedname": "hasValue", "guessedtype": "function", "params": [{"type": "Object", "name": "obj", "description": " An object."}, {"type": "any", "name": "value", "description": " The value to search for."}]}, "some": {"return": {"type": "Boolean", "description": "`true` if any execution of _fn_ returns a truthy value,\n`false` otherwise."}, "description": "Executes a function on each enumerable property in _obj_, but halts if the\nfunction returns a truthy value. The function receives the value, the key,\nand the object itself as paramters (in that order).\nBy default, only properties owned by _obj_ are enumerated. To include\nprototype properties, set the _proto_ parameter to `true`.", "param": "{Object} obj Object to enumerate.", "static": "", "guessedname": "some", "guessedtype": "function", "params": [{"type": "Object", "name": "obj", "description": " Object to enumerate."}, {"type": "Function", "name": "fn", "description": " Function to execute on each enumerable property."}, {"type": "mixed", "name": "fn.value", "description": " Value of the current property."}, {"type": "String", "name": "fn.key", "description": " Key of the current property."}, {"type": "Object", "name": "fn.obj", "description": " Object being enumerated."}, {"type": "Object", "name": "[thisObj]", "description": " `this` object to use when calling _fn_."}, {"type": "Boolean", "name": "[proto=false]", "description": " Include prototype properties."}]}, "getValue": {"return": {"type": "Any", "description": "The value stored in the path, undefined if not found,\nundefined if the source is not an object.  Returns the source object\nif an empty path is provided."}, "description": "Retrieves the sub value at the provided path,\nfrom the value object provided.", "param": "o The object from which to extract the property value.", "static": "", "guessedname": "getValue", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " The object from which to extract the property value."}, {"type": "Array", "name": "path", "description": "  A path array, specifying the object traversal path\nfrom which to obtain the sub value."}]}, "each": {"return": {"type": "YUI", "description": "the YUI instance."}, "description": "Executes a function on each enumerable property in _obj_. The function\nreceives the value, the key, and the object itself as parameters (in that\norder).\nBy default, only properties owned by _obj_ are enumerated. To include\nprototype properties, set the _proto_ parameter to `true`.", "chainable": "", "param": "{Object} obj Object to enumerate.", "params": [{"type": "Object", "name": "obj", "description": " Object to enumerate."}, {"type": "Function", "name": "fn", "description": " Function to execute on each enumerable property."}, {"type": "mixed", "name": "fn.value", "description": " Value of the current property."}, {"type": "String", "name": "fn.key", "description": " Key of the current property."}, {"type": "Object", "name": "fn.obj", "description": " Object being enumerated."}, {"type": "Object", "name": "[thisObj]", "description": " `this` object to use when calling _fn_."}, {"type": "Boolean", "name": "[proto=false]", "description": " Include prototype properties."}], "guessedname": "each", "guessedtype": "function", "static": ""}, "()": {"return": {"type": "Object", "description": "New object using _obj_ as its prototype."}, "description": "Returns a new object that uses _obj_ as its prototype. This method wraps the\nnative ES5 `Object.create()` method if available, but doesn't currently\npass through `Object.create()`'s second argument (properties) in order to\nensure compatibility with older browsers.", "param": "{Object} obj Prototype object.", "static": "", "guessedname": "O", "guessedtype": "function", "params": [{"type": "Object", "name": "obj", "description": " Prototype object."}]}, "values": {"return": {"type": "Array", "description": "Array of values."}, "description": "Returns an array containing the values of the object's enumerable keys.\nNote that values are returned in enumeration order (that is, in the same\norder that they would be enumerated by a `for-in` loop), which may not be the\nsame as the order in which they were defined.", "param": "{Object} obj An object.", "static": "", "guessedname": "values", "guessedtype": "function", "params": [{"type": "Object", "name": "obj", "description": " An object."}], "example": "Y.Object.values({a: 'foo', b: 'bar', c: 'baz'});\n// => ['foo', 'bar', 'baz']"}, "owns": {"return": {"type": "Boolean", "description": "`true` if _key_ exists on _obj_, `false` otherwise."}, "description": "Returns `true` if _key_ exists on _obj_, `false` if _key_ doesn't exist or\nexists only on _obj_'s prototype. This is essentially a safer version of\n`obj.hasOwnProperty()`.", "param": "{Object} obj Object to test.", "static": "", "guessedname": "owns", "guessedtype": "function", "params": [{"type": "Object", "name": "obj", "description": " Object to test."}, {"type": "String", "name": "key", "description": " Property name to look for."}]}, "isEmpty": {"return": {"type": "Boolean", "description": "`true` if the object is empty."}, "description": "Returns `true` if the object has no enumerable properties of its own.", "since": "3.2.0", "param": "{Object} obj An object.", "static": "", "guessedname": "isEmpty", "guessedtype": "function", "params": [{"type": "Object", "name": "obj", "description": " An object."}]}, "hasKey": {"return": {"type": "Boolean", "description": "`true` if _key_ exists on _obj_, `false` otherwise."}, "description": "Alias for `owns()`.", "param": "{Object} obj Object to test.", "static": "", "guessedname": "hasKey", "guessedtype": "property", "params": [{"type": "Object", "name": "obj", "description": " Object to test."}, {"type": "String", "name": "key", "description": " Property name to look for."}]}, "size": {"return": {"type": "Number", "description": "The object's size."}, "description": "Returns the number of enumerable keys owned by an object.", "param": "{Object} obj An object.", "static": "", "guessedname": "size", "guessedtype": "function", "params": [{"type": "Object", "name": "obj", "description": " An object."}]}}, "file": "aui.js", "guessedtype": "property", "shortname": "Object", "properties": {"_forceEnum": {"description": "Property names that IE doesn't enumerate in for..in loops, even when they\nshould be enumerable. When `_hasEnumBug` is `true`, it's necessary to\nmanually enumerate these properties.", "protected": "", "static": "", "guessedname": "forceEnum", "guessedtype": "property", "type": "String[]"}, "_hasEnumBug": {"description": "`true` if this browser has the JScript enumeration bug that prevents\nenumeration of the properties named in the `_forceEnum` array, `false`\notherwise.\nSee:\n- <https://developer.mozilla.org/en/ECMAScript_DontEnum_attribute#JScript_DontEnum_Bug>\n- <http://whattheheadsaid.com/2010/10/a-safer-object-keys-compatibility-implementation>", "protected": "", "static": "", "guessedname": "hasEnumBug", "guessedtype": "property", "type": "{Boolean}"}}, "description": "Adds utilities to the YUI instance for working with objects."}, "plugin.NodeMenuNav": {"name": "plugin.NodeMenuNav", "configs": {"submenuHideDelay": {"description": "Number indicating the time (in milliseconds) that should expire before a \nsubmenu is hidden when the user mouses out of a menu label heading in the \ndirection of a submenu.", "writeonce": "", "default": "250", "readonly": "", "guessedname": "submenuHideDelay", "guessedtype": "property", "type": "Number"}, "useARIA": {"description": "Boolean indicating if use of the WAI-ARIA Roles and States should be \nenabled for the menu.", "writeonce": "", "default": "true", "readonly": "", "guessedname": "useARIA", "guessedtype": "property", "type": "boolean"}, "autoSubmenuDisplay": {"description": "Boolean indicating if submenus are automatically made visible when the \nuser mouses over the menu's items.", "writeonce": "", "default": "true", "readonly": "", "guessedname": "autoSubmenuDisplay", "guessedtype": "property", "type": "boolean"}, "mouseOutHideDelay": {"description": "Number indicating the time (in milliseconds) that should expire before a \nsubmenu is hidden when the user mouses out of it.", "writeonce": "", "default": "750", "readonly": "", "guessedname": "mouseOutHideDelay", "guessedtype": "property", "type": "Number"}, "submenuShowDelay": {"description": "Number indicating the time (in milliseconds) that should expire before a \nsubmenu is made visible when the user mouses over the menu's label.", "writeonce": "", "default": "250", "readonly": "", "guessedname": "submenuShowDelay", "guessedtype": "property", "type": "Number"}}, "namespace": "plugin", "module": "node-menunav", "events": {"mouseOutHideDelayChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "mouseOutHideDelayChange", "description": "Fires when the value for the configuration attribute 'mouseOutHideDelay' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "autoSubmenuDisplayChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "autoSubmenuDisplayChange", "description": "Fires when the value for the configuration attribute 'autoSubmenuDisplay' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "submenuShowDelayChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "submenuShowDelayChange", "description": "Fires when the value for the configuration attribute 'submenuShowDelay' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "submenuHideDelayChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "submenuHideDelayChange", "description": "Fires when the value for the configuration attribute 'submenuHideDelay' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "useARIAChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "useARIAChange", "description": "Fires when the value for the configuration attribute 'useARIA' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "NodeMenuNav", "methods": {"_showMenu": {"description": "Shows the specified menu.", "param": "{Node} menu Node instance representing a menu.", "protected": "", "params": [{"type": "Node", "name": "menu", "description": " Node instance representing a menu."}], "guessedname": "_showMenu", "guessedtype": "function"}, "_hideAndFocusLabel": {"protected": "", "description": "Hides all of the submenus of the root menu and focuses the \nlabel of the topmost submenu", "guessedname": "_hideAndFocusLabel", "guessedtype": "function"}, "_onMouseOut": {"description": "\"mouseout\" event handler for the menu.", "param": "{Object} event Object representing the DOM event.", "protected": "", "params": [{"type": "Object", "name": "event", "description": " Object representing the DOM event."}], "guessedname": "_onMouseOut", "guessedtype": "function"}, "_hideMenu": {"description": "Hides the specified menu.", "param": "{Node} menu Node instance representing a menu.", "protected": "", "params": [{"type": "Node", "name": "menu", "description": " Node instance representing a menu."}, {"type": "Boolean", "name": "activateAndFocusLabel", "description": " Boolean indicating if the label \nfor the specified \nmenu should be focused and set as active."}], "guessedname": "_hideMenu", "guessedtype": "function"}, "_toggleSubmenuDisplay": {"description": "\"mousedown,\" \"keydown,\" and \"click\" event handler for the \nmenu used to toggle the display of a submenu.", "param": "{Object} event Object representing the DOM event.", "protected": "", "params": [{"type": "Object", "name": "event", "description": " Object representing the DOM event."}], "guessedname": "_toggleSubmenuDisplay", "guessedtype": "function"}, "_onHorizontalMenuKeyDown": {"description": "\"keydown\" event handler for horizontal menus.", "param": "{Object} event Object representing the DOM event.", "protected": "", "params": [{"type": "Object", "name": "event", "description": " Object representing the DOM event."}], "guessedname": "_onHorizontalMenuKeyDown", "guessedtype": "function"}, "_onVerticalMenuKeyDown": {"description": "\"keydown\" event handler for vertical menus.", "param": "{Object} event Object representing the DOM event.", "protected": "", "params": [{"type": "Object", "name": "event", "description": " Object representing the DOM event."}], "guessedname": "_onVerticalMenuKeyDown", "guessedtype": "function"}, "_onMouseOver": {"description": "\"mouseover\" event handler for the menu.", "param": "{Object} event Object representing the DOM event.", "protected": "", "params": [{"type": "Object", "name": "event", "description": " Object representing the DOM event."}], "guessedname": "_onMouseOver", "guessedtype": "function"}, "_focusItem": {"description": "Focuses the specified menuitem or menu label.", "param": "{Node} item Node instance representing a menuitem or menu label.", "protected": "", "params": [{"type": "Node", "name": "item", "description": " Node instance representing a menuitem or menu label."}], "guessedname": "_focusItem", "guessedtype": "function"}, "_cancelHideSubmenuTimer": {"protected": "", "description": "Cancels the timer used to hide a submenu.", "guessedname": "_cancelHideSubmenuTimer", "guessedtype": "function"}, "_onActiveDescendantChange": {"description": "\"activeDescendantChange\" event handler for menu's \nFocus Manager.", "param": "{Object} event Object representing the Attribute change event.", "protected": "", "params": [{"type": "Object", "name": "event", "description": " Object representing the Attribute change event."}, {"type": "NodeMenuNav", "name": "menuNav", "description": " Object representing the NodeMenuNav instance."}], "guessedname": "_onActiveDescendantChange", "guessedtype": "function"}, "_onMenuLabelMouseOver": {"description": "\"mouseover\" event handler for a menu label.", "param": "{Node} menuLabel Node instance representing a menu label.", "protected": "", "params": [{"type": "Node", "name": "menuLabel", "description": " Node instance representing a menu label."}, {"type": "Object", "name": "event", "description": " Object representing the DOM event."}], "guessedname": "_onMenuLabelMouseOver", "guessedtype": "function"}, "_onDocMouseDown": {"description": "\"mousedown\" event handler for the owner document of \nthe menu.", "param": "{Object} event Object representing the DOM event.", "protected": "", "params": [{"type": "Object", "name": "event", "description": " Object representing the DOM event."}], "guessedname": "_onDocMouseDown", "guessedtype": "function"}, "_onMenuLabelMouseOut": {"description": "\"mouseout\" event handler for a menu label.", "param": "{Node} menuLabel Node instance representing a menu label.", "protected": "", "params": [{"type": "Node", "name": "menuLabel", "description": " Node instance representing a menu label."}, {"type": "Object", "name": "event", "description": " Object representing the DOM event."}], "guessedname": "_onMenuLabelMouseOut", "guessedtype": "function"}, "_afterActiveDescendantChange": {"description": "\"activeDescendantChange\" event handler for menu's \nFocus Manager.", "param": "{Object} event Object representing the Attribute change event.", "protected": "", "params": [{"type": "Object", "name": "event", "description": " Object representing the Attribute change event."}, {"type": "NodeMenuNav", "name": "menuNav", "description": " Object representing the NodeMenuNav instance."}], "guessedname": "_afterActiveDescendantChange", "guessedtype": "function"}, "_onMenuItemMouseOver": {"description": "\"mouseover\" event handler for a menuitem.", "param": "{Node} menuItem Node instance representing a menuitem.", "protected": "", "params": [{"type": "Node", "name": "menuItem", "description": " Node instance representing a menuitem."}, {"type": "Object", "name": "event", "description": " Object representing the DOM event."}], "guessedname": "_onMenuItemMouseOver", "guessedtype": "function"}, "_cancelShowSubmenuTimer": {"protected": "", "description": "Cancels the timer used to show a submenu.", "guessedname": "_cancelShowSubmenuTimer", "guessedtype": "function"}, "_isRoot": {"return": {"type": "Boolean", "description": "Boolean indicating if the specified menu is the root \nmenu in the menu."}, "description": "Returns a boolean indicating if the specified menu is the \nroot menu in the menu.", "param": "{Node} menu Node instance representing a menu.", "protected": "", "params": [{"type": "Node", "name": "menu", "description": " Node instance representing a menu."}], "guessedname": "_isRoot", "guessedtype": "function"}, "_getTopmostSubmenu": {"return": {"type": "Node", "description": "Node instance representing a menu."}, "description": "Returns the topmost submenu of a submenu hierarchy.", "param": "{Node} menu Node instance representing a menu.", "protected": "", "params": [{"type": "Node", "name": "menu", "description": " Node instance representing a menu."}], "guessedname": "_getTopmostSubmenu", "guessedtype": "function"}, "_clearActiveItem": {"protected": "", "description": "Clears the menu's active descendent.", "guessedname": "_clearActiveItem", "guessedtype": "function"}, "_onMouseMove": {"description": "\"mousemove\" event handler for the menu.", "param": "{Object} event Object representing the DOM event.", "protected": "", "params": [{"type": "Object", "name": "event", "description": " Object representing the DOM event."}], "guessedname": "_onMouseMove", "guessedtype": "function"}, "_onMenuItemMouseOut": {"description": "\"mouseout\" event handler for a menuitem.", "param": "{Node} menuItem Node instance representing a menuitem.", "protected": "", "params": [{"type": "Node", "name": "menuItem", "description": " Node instance representing a menuitem."}, {"type": "Object", "name": "event", "description": " Object representing the DOM event."}], "guessedname": "_onMenuItemMouseOut", "guessedtype": "function"}, "_onDocFocus": {"description": "\"focus\" event handler for the owner document of the MenuNav.", "param": "{Object} event Object representing the DOM event.", "protected": "", "params": [{"type": "Object", "name": "event", "description": " Object representing the DOM event."}], "guessedname": "_onDocFocus", "guessedtype": "function"}, "_onMenuMouseOver": {"description": "\"mouseover\" event handler for a menu.", "param": "{Node} menu Node instance representing a menu.", "protected": "", "params": [{"type": "Node", "name": "menu", "description": " Node instance representing a menu."}, {"type": "Object", "name": "event", "description": " Object representing the DOM event."}], "guessedname": "_onMenuMouseOver", "guessedtype": "function"}, "_hideAllSubmenus": {"description": "Hides all submenus of the specified menu.", "param": "{Node} menu Node instance representing a menu.", "protected": "", "params": [{"type": "Node", "name": "menu", "description": " Node instance representing a menu."}], "guessedname": "_hideAllSubmenus", "guessedtype": "function"}, "_setActiveItem": {"description": "Sets the specified menuitem or menu label as the menu's \nactive descendent.", "param": "{Node} item Node instance representing a menuitem or menu label.", "protected": "", "params": [{"type": "Node", "name": "item", "description": " Node instance representing a menuitem or menu label."}], "guessedname": "_setActiveItem", "guessedtype": "function"}, "_initFocusManager": {"protected": "", "description": "Initializes and updates the Focus Manager so that is is \nalways managing descendants of the active menu.", "guessedname": "_initFocusManager", "guessedtype": "function"}, "_onKeyPress": {"description": "\"keypress\" event handler for the menu.", "param": "{Object} event Object representing the DOM event.", "protected": "", "params": [{"type": "Object", "name": "event", "description": " Object representing the DOM event."}], "guessedname": "_onKeyPress", "guessedtype": "function"}, "_onMenuMouseOut": {"description": "\"mouseout\" event handler for a menu.", "param": "{Node} menu Node instance representing a menu.", "protected": "", "params": [{"type": "Node", "name": "menu", "description": " Node instance representing a menu."}, {"type": "Object", "name": "event", "description": " Object representing the DOM event."}], "guessedname": "_onMenuMouseOut", "guessedtype": "function"}, "_onKeyDown": {"description": "\"keydown\" event handler for the menu.", "param": "{Object} event Object representing the DOM event.", "protected": "", "params": [{"type": "Object", "name": "event", "description": " Object representing the DOM event."}], "guessedname": "_onKeyDown", "guessedtype": "function"}}, "file": "node-menunav.js", "guessedtype": "function", "shortname": "NodeMenuNav", "properties": {"_hideAllSubmenusTimer": {"description": "Timer used to hide a all submenus.", "default": "null", "protected": "", "guessedname": "_hideAllSubmenusTimer", "guessedtype": "property", "type": "Object"}, "_blockMouseEvent": {"description": "Boolean indicating whether or not to handle the \n\"mouseover\" event.", "default": "false", "protected": "", "guessedname": "_blockMouseEvent", "guessedtype": "property", "type": "Boolean"}, "_activeMenu": {"description": "Node instance representing the menu that is the parent of \nthe menu's active descendent.", "default": "null", "protected": "", "guessedname": "_activeMenu", "guessedtype": "property", "type": "Node"}, "_movingToSubmenu": {"description": "Boolean indicating if the mouse is moving from a menu \nlabel to its corresponding submenu.", "default": "false", "protected": "", "guessedname": "_movingToSubmenu", "guessedtype": "property", "type": "Boolean"}, "_hasFocus": {"description": "Boolean indicating if the menu has focus.", "default": "false", "protected": "", "guessedname": "_hasFocus", "guessedtype": "property", "type": "Boolean"}, "_currentMouseX": {"description": "Number representing the current x coordinate of the mouse \ninside the menu.", "default": "0", "protected": "", "guessedname": "_currentMouseX", "guessedtype": "property", "type": "Number"}, "_hideSubmenuTimer": {"description": "Timer used to hide a submenu.", "default": "null", "protected": "", "guessedname": "_hideSubmenuTimer", "guessedtype": "property", "type": "Object"}, "_firstItem": {"description": "Node instance representing the first item (menuitem or menu \nlabel) in the root menu of a menu.", "default": "null", "protected": "", "guessedname": "_firstItem", "guessedtype": "property", "type": "Node"}, "SHIM_TEMPLATE": {"default": "&#34;&#60;iframe frameborder=&#34;0&#34; tabindex=&#34;-1&#34; \nclass=&#34;yui-shim&#34; title=&#34;Menu Stacking Shim&#34; \nsrc=&#34;javascript:false;&#34;&#62;&#60;/iframe&#62;&#34;", "type": "String", "description": "String representing the HTML used to create the \n<code>&#60;iframe&#62;</code> shim used to prevent \n<code>&#60;select&#62;</code> elements from poking through menus in IE 6."}, "_showSubmenuTimer": {"description": "Timer used to show a submenu.", "default": "null", "protected": "", "guessedname": "_showSubmenuTimer", "guessedtype": "property", "type": "Object"}, "_activeItem": {"description": "Node instance representing the menu's active descendent: \nthe menuitem or menu label the user is currently interacting with.", "default": "null", "protected": "", "guessedname": "_activeItem", "guessedtype": "property", "type": "Node"}, "SHIM_TEMPLATE_TITLE": {"default": "\"Menu Stacking Shim\"", "type": "String", "description": "String representing the value for the <code>title</code> \nattribute for the shim used to prevent <code>&#60;select&#62;</code> elements \nfrom poking through menus in IE 6.", "guessedname": "SHIM_TEMPLATE_TITLE", "guessedtype": "property"}, "_rootMenu": {"description": "Node instance representing the root menu in the menu.", "default": "null", "protected": "", "guessedname": "_rootMenu", "guessedtype": "property", "type": "Node"}}, "description": "The NodeMenuNav class is a plugin for a Node instance.  The class is used via  \nthe <a href=\"Node.html#method_plug\"><code>plug</code></a> method of Node and \nshould not be instantiated directly."}, "TextCellEditor": {"name": "TextCellEditor", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "TextCellEditor class.\nCheck the list of <a href=\"TextCellEditor.html#configattributes\">Configuration Attributes</a> available for\nTextCellEditor."}], "namespace": "", "module": "aui-component", "guessedname": "TextCellEditor", "extends": "A.BaseCellEditor", "superclass": "A.BaseCellEditor", "file": "aui-datatable.js", "guessedtype": "property", "shortname": "TextCellEditor", "description": "TextCellEditor class.\nCheck the list of <a href=\"TextCellEditor.html#configattributes\">Configuration Attributes</a> available for\nTextCellEditor."}, "Histogram": {"name": "Histogram", "constructors": [{"description": "Histogram is the base class for Column and Bar series."}], "namespace": "", "module": "charts", "methods": {"drawSeries": {"protected": "", "description": "Draws the series.", "guessedname": "drawSeries", "guessedtype": "function"}, "_getPlotDefaults": {"guessedname": "_getPlotDefaults", "return": {"type": "", "description": "Object"}, "description": "Gets the default style values for the markers.", "private": "", "guessedtype": "function"}}, "file": "charts.js", "shortname": "Histogram", "properties": {"_defaultFillColors": {"protected": "", "type": "Array", "description": "Collection of default colors used for marker fills in a series when not specified by user.", "guessedname": "_defaultFillColors", "guessedtype": "property"}}, "description": "Histogram is the base class for Column and Bar series."}, "Base": {"name": "Base", "description": "<p>\nA base class which objects requiring attributes and custom event support can \nextend. Base also handles the chaining of initializer and destructor methods across \nthe hierarchy as part of object construction and destruction. Additionally, attributes configured \nthrough the static <a href=\"#property_Base.ATTRS\">ATTRS</a> property for each class \nin the hierarchy will be initialized by Base.\n</p>\n<p>\nThe static <a href=\"#property_Base.NAME\">NAME</a> property of each class extending \nfrom Base will be used as the identifier for the class, and is used by Base to prefix \nall events fired by instances of that class.\n</p>", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Object with configuration property name/value pairs. The object can be \nused to provide default values for the objects published attributes.\n<p>\nThe config object can also contain the following non-attribute properties, providing a convenient \nway to configure events listeners and plugins for the instance, as part of the constructor call:\n</p>\n<dl>\n<dt>on</dt>\n<dd>An event name to listener function map, to register event listeners for the \"on\" moment of the event. A constructor convenience property for the <a href=\"Base.html#method_on\">on</a> method.</dd>\n<dt>after</dt>\n<dd>An event name to listener function map, to register event listeners for the \"after\" moment of the event. A constructor convenience property for the <a href=\"Base.html#method_after\">after</a> method.</dd>\n<dt>bubbleTargets</dt>\n<dd>An object, or array of objects, to register as bubble targets for bubbled events fired by this instance. A constructor convenience property for the <a href=\"EventTarget.html#method_addTarget\">addTarget</a> method.</dd>\n<dt>plugins</dt>\n<dd>A plugin, or array of plugins to be plugged into the instance (see PluginHost's plug method for signature details). A constructor convenience property for the <a href=\"Plugin.Host.html#method_plug\">plug</a> method.</dd>\n</dl>"}], "description": "<p>\nA base class which objects requiring attributes and custom event support can \nextend. Base also handles the chaining of initializer and destructor methods across \nthe hierarchy as part of object construction and destruction. Additionally, attributes configured \nthrough the static <a href=\"#property_Base.ATTRS\">ATTRS</a> property for each class \nin the hierarchy will be initialized by Base.\n</p>\n<p>\nThe static <a href=\"#property_Base.NAME\">NAME</a> property of each class extending \nfrom Base will be used as the identifier for the class, and is used by Base to prefix \nall events fired by instances of that class.\n</p>"}], "namespace": "", "module": "base", "events": {"destroy": {"preventable": "_defDestroyFn", "params": [{"type": "EventFacade", "name": "e", "description": " Event object"}], "description": "<p>\nLifecycle event for the destroy phase, \nfired prior to destruction. Invoking the preventDefault \nmethod on the event object provided to subscribers will \nprevent destruction from proceeding.\n</p>\n<p>\nSubscribers to the \"after\" moment of this event, will be notified\nafter destruction is complete (and as a result cannot prevent\ndestruction).\n</p>", "param": "{EventFacade} e Event object"}, "destroyedChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "destroyedChange", "description": "Fires when the value for the configuration attribute 'destroyed' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "init": {"preventable": "_defInitFn", "params": [{"type": "EventFacade", "name": "e", "description": " Event object, with a cfg property which \nrefers to the configuration object passed to the constructor."}], "description": "<p>\nLifecycle event for the init phase, fired prior to initialization. \nInvoking the preventDefault() method on the event object provided \nto subscribers will prevent initialization from occuring.\n</p>\n<p>\nSubscribers to the \"after\" momemt of this event, will be notified\nafter initialization of the object is complete (and therefore\ncannot prevent initialization).\n</p>", "param": "{EventFacade} e Event object, with a cfg property which \nrefers to the configuration object passed to the constructor."}, "initializedChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "initializedChange", "description": "Fires when the value for the configuration attribute 'initialized' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "configs": {"destroyed": {"description": "Flag indicating whether or not this object\nhas been through the destroy lifecycle phase.", "default": "false", "readonly": "", "guessedname": "destroyed", "guessedtype": "property", "type": "boolean"}, "initialized": {"description": "Flag indicating whether or not this object\nhas been through the init lifecycle phase.", "default": "false", "readonly": "", "guessedname": "initialized", "guessedtype": "property", "type": "boolean"}}, "uses": ["Attribute", "Plugin.Host"], "file": "base-base.js", "shortname": "Base", "properties": {"_ATTR_CFG": {"description": "The list of properties which can be configured for \neach attribute (e.g. setter, getter, writeOnce, readOnly etc.)", "private": "", "static": "", "guessedname": "_ATTR_CFG", "guessedtype": "property", "type": "Array"}, "ATTRS": {"type": "Object", "static": "", "description": "The default set of attributes which will be available for instances of this class, and \ntheir configuration. In addition to the configuration properties listed by \nAttribute's <a href=\"Attribute.html#method_addAttr\">addAttr</a> method, the attribute \ncan also be configured with a \"cloneDefaultValue\" property, which defines how the statically\ndefined value field should be protected (\"shallow\", \"deep\" and false are supported values). \nBy default if the value is an object literal or an array it will be \"shallow\" cloned, to \nprotect the default value.", "guessedname": "ATTRS", "guessedtype": "property"}, "_buildCfg": {"description": "The build configuration for the Base class.\nDefines the static fields which need to be aggregated\nwhen the Base class is used as the main class passed to\nthe <a href=\"#method_Base.build\">Base.build</a> method.", "private": "", "static": "", "guessedname": "_buildCfg", "guessedtype": "property", "type": "Object", "final": ""}, "name": {"deprecated": "Use this.constructor.NAME", "type": "String", "description": "The string used to identify the class of this object.", "guessedname": "name", "guessedtype": "property"}, "NAME": {"type": "String", "static": "", "description": "<p>\nThe string to be used to identify instances of \nthis class, for example in prefixing events.\n</p>\n<p>\nClasses extending Base, should define their own\nstatic NAME property, which should be camelCase by\nconvention (e.g. MyClass.NAME = \"myClass\";).\n</p>", "guessedname": "NAME", "guessedtype": "property"}}, "methods": {"plug": {"static": "", "description": "Alias for <a href=\"Plugin.Host.html#method_Plugin.Host.plug\">Plugin.Host.plug</a>. See aliased \nmethod for argument and return value details.", "guessedname": "plug", "guessedtype": "property"}, "toString": {"return": {"type": "String", "description": "String representation for this object"}, "description": "Default toString implementation. Provides the constructor NAME\nand the instance guid, if set.", "guessedname": "toString", "guessedtype": "function"}, "_defInitFn": {"description": "Default init event handler", "param": "{EventFacade} e Event object, with a cfg property which \nrefers to the configuration object passed to the constructor.", "protected": "", "params": [{"type": "EventFacade", "name": "e", "description": " Event object, with a cfg property which \nrefers to the configuration object passed to the constructor."}], "guessedname": "_defInitFn", "guessedtype": "function"}, "_destroyHierarchy": {"private": "", "description": "Destroys the class hierarchy for this instance by invoking\nthe destructor method on the prototype of each class in the hierarchy.", "guessedname": "_destroyHierarchy", "guessedtype": "function"}, "_initHierarchyData": {"private": "", "description": "A helper method used by _getClasses and _getAttrCfgs, which determines both\nthe array of classes and aggregate set of attribute configurations\nacross the class hierarchy for the instance.", "guessedname": "_initHierarchyData", "guessedtype": "function"}, "create": {"return": {"type": "Function", "description": "The newly created class."}, "description": "<p>Creates a new class (constructor function) which extends the base class passed in as the second argument, \nand mixes in the array of extensions provided.</p>\n<p>Prototype properties or methods can be added to the new class, using the px argument (similar to Y.extend).</p>\n<p>Static properties or methods can be added to the new class, using the sx argument (similar to Y.extend).</p>\n<p>\n</p>", "param": "{Function} name The name of the newly created class. Used to defined the NAME property for the new class.", "static": "", "guessedname": "create", "guessedtype": "function", "params": [{"type": "Function", "name": "name", "description": " The name of the newly created class. Used to defined the NAME property for the new class."}, {"type": "Function", "name": "main", "description": " The base class which the new class should extend. This class needs to be Base or a class derived from base (e.g. Widget)."}, {"type": "Function[]", "name": "extensions", "description": " The list of extensions which will be mixed into the built class."}, {"type": "Object", "name": "px", "description": " The set of prototype properties/methods to add to the built class."}, {"type": "Object", "name": "sx", "description": " The set of static properties/methods to add to the built class."}]}, "unplug": {"static": "", "description": "Alias for <a href=\"Plugin.Host.html#method_Plugin.Host.unplug\">Plugin.Host.unplug</a>. See the \naliased method for argument and return value details.", "guessedname": "unplug", "guessedtype": "property"}, "mix": {"return": {"type": "Function", "description": "The modified main class, with extensions mixed in."}, "description": "<p>Mixes in a list of extensions to an existing class.</p>", "param": "{Function} main The existing class into which the extensions should be mixed.  The class needs to be Base or a class derived from Base (e.g. Widget)", "static": "", "guessedname": "mix", "guessedtype": "function", "params": [{"type": "Function", "name": "main", "description": " The existing class into which the extensions should be mixed.  The class needs to be Base or a class derived from Base (e.g. Widget)"}, {"type": "Function[]", "name": "extensions", "description": " The set of extension classes which will mixed into the existing main class."}]}, "init": {"return": {"type": "Base", "description": "A reference to this object"}, "description": "Init lifecycle method, invoked during construction.\nFires the init event prior to setting up attributes and \ninvoking initializers for the class hierarchy.", "chainable": "", "param": "{Object} config Object with configuration property name/value pairs", "params": [{"type": "Object", "name": "config", "description": " Object with configuration property name/value pairs"}], "guessedname": "init", "guessedtype": "function"}, "_defDestroyFn": {"description": "Default destroy event handler", "param": "{EventFacade} e Event object", "protected": "", "params": [{"type": "EventFacade", "name": "e", "description": " Event object"}], "guessedname": "_defDestroyFn", "guessedtype": "function"}, "_getClasses": {"protected": "", "return": {"type": "Function[]", "description": "An array of classes (constructor functions), making up the class hierarchy for this object.\nThis value is cached the first time the method, or _getAttrCfgs, is invoked. Subsequent invocations return the \ncached value."}, "description": "Returns the class hierarchy for this object, with Base being the last class in the array.", "guessedname": "_getClasses", "guessedtype": "function"}, "build": {"return": {"type": "Function", "description": "A custom class, created from the provided main and extension classes"}, "description": "<p>\nBuilds a custom constructor function (class) from the\nmain function, and array of extension functions (classes)\nprovided. The NAME field for the constructor function is \ndefined by the first argument passed in.\n</p>\n<p>\nThe cfg object supports the following properties\n</p>\n<dl>\n<dt>dynamic &#60;boolean&#62;</dt>\n<dd>\n<p>If true (default), a completely new class\nis created which extends the main class, and acts as the \nhost on which the extension classes are augmented.</p>\n<p>If false, the extensions classes are augmented directly to\nthe main class, modifying the main class' prototype.</p>\n</dd>\n<dt>aggregates &#60;String[]&#62;</dt>\n<dd>An array of static property names, which will get aggregated\non to the built class, in addition to the default properties build \nwill always aggregate as defined by the main class' static _buildCfg\nproperty.\n</dd>\n</dl>", "deprecated": "Use the more convenient Base.create and Base.mix methods instead", "param": "{Function} name The name of the new class. Used to defined the NAME property for the new class.", "static": "", "guessedname": "build", "guessedtype": "function", "params": [{"type": "Function", "name": "name", "description": " The name of the new class. Used to defined the NAME property for the new class."}, {"type": "Function", "name": "main", "description": " The main class on which to base the built class"}, {"type": "Function[]", "name": "extensions", "description": " The set of extension classes which will be\naugmented/aggregated to the built class."}, {"type": "Object", "name": "cfg", "description": " Optional. Build configuration for the class (see description)."}]}, "_preInitEventCfg": {"description": "Handles the special on, after and target properties which allow the user to\neasily configure on and after listeners as well as bubble targets during \nconstruction, prior to init.", "param": "{Object} config The user configuration object", "params": [{"type": "Object", "name": "config", "description": " The user configuration object"}], "private": "", "guessedname": "_preInitEventCfg", "guessedtype": "function"}, "_getAttrCfgs": {"protected": "", "return": {"type": "Object", "description": "The hash of attribute configurations, aggregated across classes in the hierarchy\nThis value is cached the first time the method, or _getClasses, is invoked. Subsequent invocations return\nthe cached value."}, "description": "Returns an aggregated set of attribute configurations, by traversing the class hierarchy.", "guessedname": "_getAttrCfgs", "guessedtype": "function"}, "_filterAttrCfs": {"return": {"type": "Object", "description": "The set of attributes belonging to the class passed in, in the form\nof an object with attribute name/configuration pairs."}, "description": "A helper method used when processing ATTRS across the class hierarchy during \ninitialization. Returns a disposable object with the attributes defined for \nthe provided class, extracted from the set of all attributes passed in .", "private": "", "params": [{"type": "Function", "name": "clazz", "description": " The class for which the desired attributes are required."}, {"type": "Object", "name": "allCfgs", "description": " The set of all attribute configurations for this instance. \nAttributes will be removed from this set, if they belong to the filtered class, so\nthat by the time all classes are processed, allCfgs will be empty."}], "param": "{Function} clazz The class for which the desired attributes are required.", "guessedname": "_filterAttrCfgs", "guessedtype": "function"}, "destroy": {"chainable": "", "return": {"type": "Base", "description": "A reference to this object"}, "description": "<p>\nDestroy lifecycle method. Fires the destroy\nevent, prior to invoking destructors for the\nclass hierarchy.\n</p>\n<p>\nSubscribers to the destroy\nevent can invoke preventDefault on the event object, to prevent destruction\nfrom proceeding.\n</p>", "guessedname": "destroy", "guessedtype": "function"}, "_aggregateAttrs": {"return": {"type": "Object", "description": "The aggregate set of ATTRS definitions for the instance"}, "description": "A helper method, used by _initHierarchyData to aggregate \nattribute configuration across the instances class hierarchy.\nThe method will protect the attribute configuration value to protect the statically defined \ndefault value in ATTRS if required (if the value is an object literal, array or the \nattribute configuration has cloneDefaultValue set to shallow or deep).", "private": "", "params": [{"type": "Array", "name": "allAttrs", "description": " An array of ATTRS definitions across classes in the hierarchy \n(subclass first, Base last)"}], "param": "{Array} allAttrs An array of ATTRS definitions across classes in the hierarchy \n(subclass first, Base last)", "guessedname": "_aggregateAttrs", "guessedtype": "function"}, "_initHierarchy": {"description": "Initializes the class hierarchy for the instance, which includes \ninitializing attributes for each class defined in the class's \nstatic <a href=\"#property_Base.ATTRS\">ATTRS</a> property and \ninvoking the initializer method on the prototype of each class in the hierarchy.", "param": "{Object} userVals Object with configuration property name/value pairs", "params": [{"type": "Object", "name": "userVals", "description": " Object with configuration property name/value pairs"}], "private": "", "guessedname": "_initHierarchy", "guessedtype": "function"}}}, "CartesianChart": {"name": "CartesianChart", "configs": {"styles": {"type": "Object", "description": "Style properties for the chart. Contains a key indexed hash of the following:\n<dl>\n<dt>series</dt><dd>A key indexed hash containing references to the `styles` attribute for each series in the chart.\nSpecific style attributes vary depending on the series:\n<ul>\n<li><a href=\"AreaSeries.html#attr_styles\">AreaSeries</a></li>\n<li><a href=\"BarSeries.html#attr_styles\">BarSeries</a></li>\n<li><a href=\"ColumnSeries.html#attr_styles\">ColumnSeries</a></li>\n<li><a href=\"ComboSeries.html#attr_styles\">ComboSeries</a></li>\n<li><a href=\"LineSeries.html#attr_styles\">LineSeries</a></li>\n<li><a href=\"MarkerSeries.html#attr_styles\">MarkerSeries</a></li>\n<li><a href=\"SplineSeries.html#attr_styles\">SplineSeries</a></li>\n</ul>\n</dd>\n<dt>axes</dt><dd>A key indexed hash containing references to the `styles` attribute for each axes in the chart. Specific\nstyle attributes can be found in the <a href=\"Axis.html#attr_styles\">Axis</a> class.</dd>\n<dt>graph</dt><dd>A reference to the `styles` attribute in the chart. Specific style attributes can be found in the\n<a href=\"Graph.html#attr_styles\">Graph</a> class.</dd>\n</dl>", "guessedname": "styles", "guessedtype": "property"}, "graphStyles": {"guessedname": "graphStyles", "type": "Object", "description": "Styles for the graph.", "private": "", "guessedtype": "property"}, "direction": {"type": "String", "description": "Direction of chart's category axis when there is no series collection specified. Charts can\nbe horizontal or vertical. When the chart type is column, the chart is horizontal.\nWhen the chart type is bar, the chart is vertical.", "guessedname": "direction", "guessedtype": "property"}, "topAxesCollection": {"guessedname": "topAxesCollection", "type": "Array", "description": "Reference to the top-aligned axes for the chart.", "private": "", "guessedtype": "property"}, "categoryAxisName": {"type": "String", "description": "Indicates the key value used to identify a category axis in the `axes` hash. If\nnot specified, the categoryKey attribute value will be used.", "guessedname": "categoryAxisName", "guessedtype": "property"}, "showAreaFill": {"type": "Boolean", "description": "Indicates whether or not an area is filled in a combo chart.", "guessedname": "showAreaFill", "guessedtype": "property"}, "showLines": {"type": "Boolean", "description": "Indicates whether to display lines in a combo chart.", "guessedname": "showLines", "guessedtype": "property"}, "rightAxesCollection": {"guessedname": "rightAxesCollection", "type": "Array", "description": "Reference to the right-aligned axes for the chart.", "private": "", "guessedtype": "property"}, "axes": {"type": "Object", "description": "Axes to appear in the chart. This can be a key indexed hash of axis instances or object literals\nused to construct the appropriate axes.", "guessedname": "axes", "guessedtype": "property"}, "verticalGridlines": {"type": "Gridlines", "description": "Reference to the verticalGridlines for the chart.", "guessedname": "verticalGridlines", "guessedtype": "property"}, "showMarkers": {"type": "Boolean", "description": "Indicates whether to display markers in a combo chart.", "guessedname": "showMarkers", "guessedtype": "property"}, "seriesStyles": {"guessedname": "seriesStyles", "type": "Object", "description": "Style object for the series", "private": "", "guessedtype": "property"}, "leftAxesCollection": {"guessedname": "leftAxesCollection", "type": "Array", "description": "Reference to the left-aligned axes for the chart.", "private": "", "guessedtype": "property"}, "seriesCollection": {"type": "Array", "description": "Collection of series to appear on the chart. This can be an array of Series instances or object literals\nused to construct the appropriate series.", "guessedname": "seriesCollection", "guessedtype": "property"}, "type": {"type": "String", "description": "Type of chart when there is no series collection specified.", "guessedname": "type", "guessedtype": "property"}, "axesStyles": {"guessedname": "axesStyles", "type": "Object", "description": "Style object for the axes.", "private": "", "guessedtype": "property"}, "stacked": {"type": "Boolean", "description": "Indicates whether or not the chart is stacked.", "guessedname": "stacked", "guessedtype": "property"}, "bottomAxesCollection": {"guessedname": "bottomAxesCollection", "type": "Array", "description": "Reference to the bottom-aligned axes for the chart.", "private": "", "guessedtype": "property"}, "categoryAxis": {"type": "Axis", "description": "Reference to the category axis used by the chart.", "guessedname": "categoryAxis", "guessedtype": "property"}, "valueAxisName": {"type": "String", "description": "Indicates the key value used to identify a the series axis when an axis not generated.", "guessedname": "valueAxisName", "guessedtype": "property"}, "horizontalGridlines": {"type": "Gridlines", "description": "Reference to the horizontalGridlines for the chart.", "guessedname": "horizontalGridlines", "guessedtype": "property"}}, "constructors": [{"description": "The CartesianChart class creates a chart with horizontal and vertical axes."}], "namespace": "", "module": "charts", "properties": {"_type": {"guessedname": "_type", "type": "{String}", "description": "Indicates the default series type for the chart.", "private": "", "guessedtype": "property"}, "_axesRenderQueue": {"guessedname": "_axesRenderQueue", "type": "Array", "description": "Queue of axes instances that will be updated. This method is used internally to determine when all axes have been updated.", "private": "", "guessedtype": "property"}}, "guessedname": "CartesianChart", "methods": {"_planarEventDispatcher": {"description": "When `interactionType` is set to `planar`, listens for mouse move events and fires `planarEvent:mouseover` or `planarEvent:mouseout` depending on the position of the mouse in relation to \ndata points on the `Chart`.", "param": "{Object} e Event object.", "params": [{"type": "Object", "name": "e", "description": " Event object."}], "private": "", "guessedname": "_planarEventDispatcher", "guessedtype": "function"}, "_addGridlines": {"private": "", "description": "Adds gridlines to the chart.", "guessedname": "_addGridlines", "guessedtype": "function"}, "_axisRendered": {"description": "Handler for axisRendered event.", "param": "{Object} e Event object.", "params": [{"type": "Object", "name": "e", "description": " Event object."}], "private": "", "guessedname": "_axisRendered", "guessedtype": "function"}, "_addAxes": {"private": "", "description": "Adds axes to the chart.", "guessedname": "_addAxes", "guessedtype": "function"}, "_parseSeriesAxes": {"description": "Parse and sets the axes for a series instance.", "param": "{CartesianSeries} series A `CartesianSeries` instance.", "params": [{"type": "CartesianSeries", "name": "series", "description": " A `CartesianSeries` instance."}], "private": "", "guessedname": "_parseSeriesAxes", "guessedtype": "function"}, "_getSeriesAxis": {"return": {"type": "", "description": "Axis"}, "description": "Returns the value axis for a series.", "private": "", "params": [{"type": "String", "name": "key", "description": " The key value used to determine the axis instance."}], "param": "{String} key The key value used to determine the axis instance.", "guessedname": "_getSeriesAxis", "guessedtype": "function"}, "_setBaseAttribute": {"description": "Sets an attribute on an object, using a setter of Base objects and a property for object\nliterals. Used for setting attributes on a Base class, either directly or to be stored in an object literal\nfor use at instantiation.", "param": "{Object} item Object or instance in which the attribute resides.", "params": [{"type": "Object", "name": "item", "description": " Object or instance in which the attribute resides."}, {"type": "String", "name": "key", "description": " Attribute whose value will be assigned."}, {"type": "Object", "name": "value", "description": " Value to be assigned to the attribute."}], "private": "", "guessedname": "_setBaseAttribute", "guessedtype": "function"}, "_getCategoryAxis": {"guessedname": "_getCategoryAxis", "return": {"type": "", "description": "Axis"}, "description": "Returns the category axis instance for the chart.", "private": "", "guessedtype": "function"}, "_getBaseAttribute": {"return": {"type": "", "description": "Object"}, "description": "Gets an attribute from an object, using a getter for Base objects and a property for object\nliterals. Used for determining attributes from series/axis references which can be an actual class instance\nor a hash of properties that will be used to create a class instance.", "private": "", "params": [{"type": "Object", "name": "item", "description": " Object or instance in which the attribute resides."}, {"type": "String", "name": "key", "description": " Attribute whose value will be returned."}], "param": "{Object} item Object or instance in which the attribute resides.", "guessedname": "_getBaseAttribute", "guessedtype": "function"}, "_getDefaultSeriesCollection": {"return": {"type": "", "description": "Array"}, "description": "Returns the default value for the `seriesCollection` attribute.", "private": "", "params": [{"type": "Array", "name": "val", "description": " Array containing either `CartesianSeries` instances or objects containing data to construct series instances."}], "param": "{Array} val Array containing either `CartesianSeries` instances or objects containing data to construct series instances.", "guessedname": "_getDefaultSeriesCollection", "guessedtype": "function"}, "_getDefaultAxes": {"return": {"type": "", "description": "Object"}, "description": "Generates and returns a key-indexed object containing `Axis` instances or objects used to create `Axis` instances.", "private": "", "params": [{"type": "Object", "name": "axes", "description": " Object containing `Axis` instances or `Axis` attributes."}], "param": "{Object} axes Object containing `Axis` instances or `Axis` attributes.", "guessedname": "_getDefaultAxes", "guessedtype": "function"}, "_redraw": {"private": "", "description": "Redraws and position all the components of the chart instance.", "guessedname": "_redraw", "guessedtype": "function"}, "getSeriesItem": {"return": {"type": "", "description": "Object"}, "description": "Returns an object literal containing a categoryItem and a valueItem for a given series index.", "param": "{CartesianSeries} series Reference to a series.", "params": [{"type": "CartesianSeries", "name": "series", "description": " Reference to a series."}, {"type": "Number", "name": "index", "description": " Index of the specified item within a series."}], "guessedname": "getSeriesItems", "guessedtype": "function"}, "_parseAxes": {"return": {"type": "", "description": "Object"}, "description": "Creates `Axis` instances.", "private": "", "params": [{"type": "Object", "name": "val", "description": " Object containing `Axis` instances or objects in which to construct `Axis` instances."}], "param": "{Object} val Object containing `Axis` instances or objects in which to construct `Axis` instances.", "guessedname": "_parseAxes", "guessedtype": "function"}, "_addToAxesRenderQueue": {"description": "Adds an `Axis` instance to the `_axesRenderQueue`.", "param": "{Axis} axis An `Axis` instance.", "params": [{"type": "Axis", "name": "axis", "description": " An `Axis` instance."}], "private": "", "guessedname": "_addToAxesRenderQueue", "guessedtype": "function"}, "_addSeries": {"private": "", "description": "Renders the Graph.", "guessedname": "_addSeries", "guessedtype": "function"}, "_sizeChanged": {"description": "Handler for sizeChanged event.", "param": "{Object} e Event object.", "params": [{"type": "Object", "name": "e", "description": " Event object."}], "private": "", "guessedname": "_sizeChanged", "guessedtype": "function"}, "_getDefaultAxisPosition": {"return": {"type": "", "description": "String"}, "description": "Determines the position of an axis when one is not specified.", "private": "", "params": [{"type": "Axis", "name": "axis", "description": " `Axis` instance."}, {"type": "Array", "name": "valueAxes", "description": " Array of `Axis` instances."}, {"type": "String", "name": "position", "description": " Default position depending on the direction of the chart and type of axis."}], "param": "{Axis} axis `Axis` instance.", "guessedname": "_getDefaultAxisPosition", "guessedtype": "function"}, "renderUI": {"private": "", "guessedname": "renderUI", "guessedtype": "function"}}, "extends": "ChartBase", "superclass": "ChartBase", "file": "charts.js", "guessedtype": "property", "shortname": "CartesianChart", "events": {"bottomAxesCollectionChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "bottomAxesCollectionChange", "description": "Fires when the value for the configuration attribute 'bottomAxesCollection' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "seriesCollectionChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "seriesCollectionChange", "description": "Fires when the value for the configuration attribute 'seriesCollection' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "stylesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "stylesChange", "description": "Fires when the value for the configuration attribute 'styles' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "planarEvent:mouseover": {"preventable": "false", "params": [{"type": "EventFacade", "name": "e", "description": " Event facade with the following additional\nproperties:\n<dl>\n<dt>categoryItem</dt><dd>An array of hashes, each containing information about the category `Axis` of each marker whose plane has been intersected.</dd>\n<dt>valueItem</dt><dd>An array of hashes, each containing information about the value `Axis` of each marker whose plane has been intersected.</dd>\n<dt>x</dt><dd>The x-coordinate of the mouse in relation to the Chart.</dd>\n<dt>y</dt><dd>The y-coordinate of the mouse in relation to the Chart.</dd>\n<dt>items</dt><dd>An array including all the series which contain a marker whose plane has been intersected.</dd>\n<dt>index</dt><dd>Index of the markers in their respective series.</dd>\n</dl>"}], "description": "Broadcasts when `interactionType` is set to `planar` and a series' marker plane has received a mouseover event.", "param": "{EventFacade} e Event facade with the following additional\nproperties:\n<dl>\n<dt>categoryItem</dt><dd>An array of hashes, each containing information about the category `Axis` of each marker whose plane has been intersected.</dd>\n<dt>valueItem</dt><dd>An array of hashes, each containing information about the value `Axis` of each marker whose plane has been intersected.</dd>\n<dt>x</dt><dd>The x-coordinate of the mouse in relation to the Chart.</dd>\n<dt>y</dt><dd>The y-coordinate of the mouse in relation to the Chart.</dd>\n<dt>items</dt><dd>An array including all the series which contain a marker whose plane has been intersected.</dd>\n<dt>index</dt><dd>Index of the markers in their respective series.</dd>\n</dl>"}, "showLinesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "showLinesChange", "description": "Fires when the value for the configuration attribute 'showLines' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "horizontalGridlinesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "horizontalGridlinesChange", "description": "Fires when the value for the configuration attribute 'horizontalGridlines' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "rightAxesCollectionChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "rightAxesCollectionChange", "description": "Fires when the value for the configuration attribute 'rightAxesCollection' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "graphStylesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "graphStylesChange", "description": "Fires when the value for the configuration attribute 'graphStyles' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "seriesStylesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "seriesStylesChange", "description": "Fires when the value for the configuration attribute 'seriesStyles' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "categoryAxisNameChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "categoryAxisNameChange", "description": "Fires when the value for the configuration attribute 'categoryAxisName' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "directionChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "directionChange", "description": "Fires when the value for the configuration attribute 'direction' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "typeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "typeChange", "description": "Fires when the value for the configuration attribute 'type' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "valueAxisNameChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "valueAxisNameChange", "description": "Fires when the value for the configuration attribute 'valueAxisName' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "leftAxesCollectionChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "leftAxesCollectionChange", "description": "Fires when the value for the configuration attribute 'leftAxesCollection' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "categoryAxisChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "categoryAxisChange", "description": "Fires when the value for the configuration attribute 'categoryAxis' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "planarEvent:mouseout": {"preventable": "false", "params": [{"type": "EventFacade", "name": "e", "description": ""}], "description": "Broadcasts when `interactionType` is set to `planar` and a series' marker plane has received a mouseout event.", "param": "{EventFacade} e"}, "showAreaFillChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "showAreaFillChange", "description": "Fires when the value for the configuration attribute 'showAreaFill' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "axesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "axesChange", "description": "Fires when the value for the configuration attribute 'axes' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "axesStylesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "axesStylesChange", "description": "Fires when the value for the configuration attribute 'axesStyles' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "showMarkersChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "showMarkersChange", "description": "Fires when the value for the configuration attribute 'showMarkers' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "topAxesCollectionChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "topAxesCollectionChange", "description": "Fires when the value for the configuration attribute 'topAxesCollection' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "verticalGridlinesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "verticalGridlinesChange", "description": "Fires when the value for the configuration attribute 'verticalGridlines' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "stackedChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "stackedChange", "description": "Fires when the value for the configuration attribute 'stacked' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "description": "The CartesianChart class creates a chart with horizontal and vertical axes."}, "YQLRequest": {"name": "YQLRequest", "constructors": [{"params": [{"type": "String", "name": "sql", "description": " The SQL statement to execute"}, {"type": "Function/Object", "name": "callback", "description": " The callback to execute after the query (Falls through to JSONP)."}, {"type": "Object", "name": "params", "description": " An object literal of extra parameters to pass along (optional)."}, {"type": "Object", "name": "opts", "description": " An object literal of configuration options (optional): proto (http|https), base (url)"}], "description": "Utility Class used under the hood my the YQL class"}], "namespace": "", "module": "yql", "guessedname": "YQLRequest", "methods": {"send": {"chainable": "", "returns": "{YQLRequest}", "description": "The method that executes the YQL Request.", "guessedname": "send", "guessedtype": "function"}}, "file": "yql.js", "guessedtype": "function", "shortname": "YQLRequest", "properties": {"_callback": {"private": "", "description": "Holder for the callback argument", "guessedname": "_callback", "guessedtype": "property"}, "_opts": {"private": "", "description": "Holder for the opts argument", "guessedname": "_opts", "guessedtype": "property"}, "PROTO": {"static": "", "description": "Default protocol to use: http", "guessedname": "PROTO", "guessedtype": "property"}, "FORMAT": {"static": "", "description": "Default format to use: json", "guessedname": "FORMAT", "guessedtype": "property"}, "_jsonp": {"private": "", "description": "Reference to the JSONP instance used to make the queries", "guessedname": "_jsonp", "guessedtype": "property"}, "BASE_URL": {"static": "", "description": "The base URL to query: query.yahooapis.com/v1/public/yql?", "guessedname": "BASE_URL", "guessedtype": "property"}, "ENV": {"static": "", "description": "The environment file to load: http://datatables.org/alltables.env", "guessedname": "ENV", "guessedtype": "property"}, "_params": {"private": "", "description": "Holder for the params argument", "guessedname": "_params", "guessedtype": "property"}}, "description": "Utility Class used under the hood my the YQL class"}, "A.Plugin.IO": {"name": "A.Plugin.IO", "configs": {"node": {"default": "null", "type": "Node | String", "description": "Plug IO in any object we want, the setContent will use the node to\nset the content.", "guessedname": "node", "guessedtype": "property"}, "showLoading": {"default": "true", "type": "boolean", "description": "Show the <a href=\"LoadingMask.html\">LoadingMask</a> covering the <a\nhref=\"A.Plugin.IO.html#config_node\">node</a> while loading.", "guessedname": "showLoading", "guessedtype": "property"}, "parseContent": {"default": "true", "type": "boolean", "description": "If true the <a href=\"ParseContent.html\">ParseContent</a> plugin\nwill be plugged to the <a href=\"A.Plugin.IO.html#config_node\">node</a>.", "guessedname": "parseContent", "guessedtype": "property"}, "where": {"default": "StdMod.REPLACE", "type": "String", "description": "Where to insert the content, AFTER, BEFORE or REPLACE. If you're plugging a Node, there is a fourth option called OUTER that will not only replace the entire node itself. This is different from REPLACE, in that REPLACE will replace the *contents* of the node, OUTER will replace the entire Node itself.", "guessedname": "where", "guessedtype": "property"}, "section": {"default": "StdMod.BODY", "type": "String", "description": "Section where the content will be set in case you are plugging it\non a instace of <a href=\"WidgetStdMod.html\">WidgetStdMod</a>.", "guessedname": "section", "guessedtype": "property"}, "failureMessage": {"default": "'Failed to retrieve content'", "type": "String", "description": "Message to be set on the content when the transaction fails.", "guessedname": "failureMessage", "guessedtype": "property"}, "type": {"description": "Type of the <code>instance</code> we are pluggin the A.Plugin.IO.\nCould be a Node, or a Widget.", "default": "'Node'", "readonly": "", "guessedname": "type", "guessedtype": "property", "type": "String"}, "loadingMask": {"default": "{}", "type": "Object", "description": "Options passed to the <a href=\"LoadingMask.html\">LoadingMask</a>.", "guessedname": "loadingMask", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "A base class for IOPlugin, providing:\n<ul>\n<li>Loads the content of a URI as content of a Node or Widget</li>\n<li>Use <a href=\"ParseContent.html\">ParseContent</a> to parse the JavaScript tags from the content and evaluate them</li>\n</ul>\nQuick Example:<br/>\n<pre><code>A.one('#content').plug(A.Plugin.IO, { uri: 'assets/content.html', method: 'GET' });</code></pre>\nCheck the list of <a href=\"A.Plugin.IO.html#configattributes\">Configuration Attributes</a> available for\nIOPlugin."}], "namespace": "", "module": "aui-io", "events": {"loadingMaskChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "loadingMaskChange", "description": "Fires when the value for the configuration attribute 'loadingMask' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "failureMessageChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "failureMessageChange", "description": "Fires when the value for the configuration attribute 'failureMessage' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "nodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "nodeChange", "description": "Fires when the value for the configuration attribute 'node' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "parseContentChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "parseContentChange", "description": "Fires when the value for the configuration attribute 'parseContent' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "showLoadingChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "showLoadingChange", "description": "Fires when the value for the configuration attribute 'showLoading' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "typeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "typeChange", "description": "Fires when the value for the configuration attribute 'type' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "sectionChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "sectionChange", "description": "Fires when the value for the configuration attribute 'section' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "whereChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "whereChange", "description": "Fires when the value for the configuration attribute 'where' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "IOPlugin", "methods": {"showLoading": {"description": "Invoke the <a href=\"OverlayMask.html#method_show\">OverlayMask show</a> method.", "guessedname": "showLoading", "guessedtype": "function"}, "_successHandler": {"description": "Internal success callback for the IO transaction.", "param": "{EventFavade} event", "protected": "", "params": [{"type": "EventFavade", "name": "event", "description": ""}, {"type": "String", "name": "id", "description": " Id of the IO transaction."}, {"type": "Object", "name": "obj", "description": " XHR transaction Object."}], "guessedname": "_successHandler", "guessedtype": "function"}, "_failureHandler": {"description": "Internal failure callback for the IO transaction.", "param": "{EventFavade} event", "protected": "", "params": [{"type": "EventFavade", "name": "event", "description": ""}, {"type": "String", "name": "id", "description": " Id of the IO transaction."}, {"type": "Object", "name": "obj", "description": " XHR transaction Object."}], "guessedname": "_failureHandler", "guessedtype": "function"}, "_bindParseContent": {"protected": "", "description": "Bind the ParseContent plugin on the <code>instance</code>.", "guessedname": "_bindParseContent", "guessedtype": "function"}, "_setLoadingUI": {"description": "Whether the <code>show</code> is true show the LoadingMask.", "param": "{boolean} show", "protected": "", "params": [{"type": "boolean", "name": "show", "description": ""}], "guessedname": "_setLoadingUI", "guessedtype": "function"}, "_getContentSetterByType": {"protected": "", "return": {"type": "function", "description": ""}, "description": "Get the appropriated <a\nhref=\"A.Plugin.IO.html#method_setContent\">setContent</a> function\nimplementation for each <a href=\"A.Plugin.IO.html#config_type\">type</a>.", "guessedname": "_getContentSetterByType", "guessedtype": "function"}, "hideLoading": {"description": "Invoke the <a href=\"OverlayMask.html#method_hide\">OverlayMask hide</a> method.", "guessedname": "hideLoading", "guessedtype": "function"}, "_autoStart": {"protected": "", "description": "Invoke the <code>start</code> method (autoLoad attribute).", "guessedname": "_autoStart", "guessedtype": "function"}, "start": {"description": "Overload to the <a href=\"IORequest.html#method_start\">IORequest\nstart</a> method. Check if the <code>host</code> is already rendered,\notherwise wait to after render phase and to show the LoadingMask.", "guessedname": "start", "guessedtype": "function"}, "_syncLoadingMaskUI": {"protected": "", "description": "Sync the loading mask UI.", "guessedname": "_syncLoadingMaskUI", "guessedtype": "function"}, "_onActiveChange": {"description": "Fires after the value of the\n<a href=\"A.Plugin.IO.html#config_active\">active</a> attribute change.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onActiveChange", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Bind the events on the A.Plugin.IO UI. Lifecycle.", "guessedname": "bindUI", "guessedtype": "function"}, "setContent": {"description": "Set the content of the <a href=\"A.Plugin.IO.html#config_node\">node</a>.", "guessedname": "setContent", "guessedtype": "function"}}, "extends": "IORequest", "superclass": "IORequest", "file": "aui-io.js", "guessedtype": "property", "shortname": "A.Plugin.IO", "properties": {"A.Plugin.IO.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the A.Plugin.IO.", "guessedname": "ATTRS", "guessedtype": "property"}, "A.Plugin.IO.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}, "A.Plugin.IO.NS": {"type": "String", "static": "", "description": "Static property provides a string to identify the namespace.", "guessedname": "NS", "guessedtype": "property"}}, "description": "A base class for IOPlugin, providing:\n<ul>\n<li>Loads the content of a URI as content of a Node or Widget</li>\n<li>Use <a href=\"ParseContent.html\">ParseContent</a> to parse the JavaScript tags from the content and evaluate them</li>\n</ul>\nQuick Example:<br/>\n<pre><code>A.one('#content').plug(A.Plugin.IO, { uri: 'assets/content.html', method: 'GET' });</code></pre>\nCheck the list of <a href=\"A.Plugin.IO.html#configattributes\">Configuration Attributes</a> available for\nIOPlugin."}, "Path": {"name": "Path", "constructors": [{"description": "<p>The `Path` class creates a shape through the use of drawing methods. The `Path` class has the following drawing methods available:</p>\n<ul>\n<li><a href=\"#method_clear\">`clear`</a></li>\n<li><a href=\"#method_curveTo\">`curveTo`</a></li>\n<li><a href=\"#method_drawRect\">`drawRect`</a></li>\n<li><a href=\"#method_drawRoundRect\">`drawRoundRect`</a></li>\n<li><a href=\"#method_end\">`end`</a></li>\n<li><a href=\"#method_lineTo\">`lineTo`</a></li>\n<li><a href=\"#method_moveTo\">`moveTo`</a></li>\n<li><a href=\"#method_quadraticCurveTo\">`quadraticCurveTo`</a></li>\n</ul>\n<p>Like other shapes, `Path` elements are created using the <a href=\"Graphic.html#method_addShape\">`addShape`</a> method of the <a href=\"Graphic.html\">`Graphic`</a> \nclass. The method's `cfg` argument contains a `type` attribute. Assigning \"path\" or `Y.Path` to this attribute will create a `Path` instance.\nAfter instantiation, a series of drawing operations must be performed in order to render a shape. The below code instantiates a path element by defining the `type` \nattribute as \"path\":</p>\nvar myPath = myGraphic.addShape({\ntype: \"path\",\nfill: {\ncolor: \"#9aa\"\n},\nstroke: {\nweight: 1,\ncolor: \"#000\"\n}\n});\nBelow a `Path` element with the same properties is instantiated by defining the `type` attribute with a class reference:\nvar myPath = myGraphic.addShape({\ntype: Y.Path,\nfill: {\ncolor: \"#9aa\"\n},\nstroke: {\nweight: 1,\ncolor: \"#000\"\n}\n});\nAfter instantiation, a shape or segment needs to be drawn for an element to render. After all draw operations are performed, the <a href=\"#method_end\">`end`</a>\nmethod will render the shape. The code below will draw a triangle:\nmyPath.moveTo(35, 5);\nmyPath.lineTo(65, 65);\nmyPath.lineTo(5, 65);\nmyPath.lineTo(35, 5);\nmyPath.end();\n<p>`Path` has the following implementations based on browser capability.\n<ul>\n<li><a href=\"SVGPath.html\">`SVGPath`</a></li>\n<li><a href=\"VMLPath.html\">`VMLPath`</a></li>\n<li><a href=\"CanvasPath.html\">`CanvasPath`</a></li>\n</ul> \nIt is not necessary to interact with these classes directly. `Path` will point to the appropriate implemention.</p>"}], "namespace": "", "module": "graphics", "uses": ["Drawing"], "superclass": "Shape", "file": "graphics.js", "extends": "Shape", "shortname": "Path", "configs": {"path": {"readonly": "", "type": "String", "description": "Indicates the path used for the node."}}, "description": "<p>The `Path` class creates a shape through the use of drawing methods. The `Path` class has the following drawing methods available:</p>\n<ul>\n<li><a href=\"#method_clear\">`clear`</a></li>\n<li><a href=\"#method_curveTo\">`curveTo`</a></li>\n<li><a href=\"#method_drawRect\">`drawRect`</a></li>\n<li><a href=\"#method_drawRoundRect\">`drawRoundRect`</a></li>\n<li><a href=\"#method_end\">`end`</a></li>\n<li><a href=\"#method_lineTo\">`lineTo`</a></li>\n<li><a href=\"#method_moveTo\">`moveTo`</a></li>\n<li><a href=\"#method_quadraticCurveTo\">`quadraticCurveTo`</a></li>\n</ul>\n<p>Like other shapes, `Path` elements are created using the <a href=\"Graphic.html#method_addShape\">`addShape`</a> method of the <a href=\"Graphic.html\">`Graphic`</a> \nclass. The method's `cfg` argument contains a `type` attribute. Assigning \"path\" or `Y.Path` to this attribute will create a `Path` instance.\nAfter instantiation, a series of drawing operations must be performed in order to render a shape. The below code instantiates a path element by defining the `type` \nattribute as \"path\":</p>\nvar myPath = myGraphic.addShape({\ntype: \"path\",\nfill: {\ncolor: \"#9aa\"\n},\nstroke: {\nweight: 1,\ncolor: \"#000\"\n}\n});\nBelow a `Path` element with the same properties is instantiated by defining the `type` attribute with a class reference:\nvar myPath = myGraphic.addShape({\ntype: Y.Path,\nfill: {\ncolor: \"#9aa\"\n},\nstroke: {\nweight: 1,\ncolor: \"#000\"\n}\n});\nAfter instantiation, a shape or segment needs to be drawn for an element to render. After all draw operations are performed, the <a href=\"#method_end\">`end`</a>\nmethod will render the shape. The code below will draw a triangle:\nmyPath.moveTo(35, 5);\nmyPath.lineTo(65, 65);\nmyPath.lineTo(5, 65);\nmyPath.lineTo(35, 5);\nmyPath.end();\n<p>`Path` has the following implementations based on browser capability.\n<ul>\n<li><a href=\"SVGPath.html\">`SVGPath`</a></li>\n<li><a href=\"VMLPath.html\">`VMLPath`</a></li>\n<li><a href=\"CanvasPath.html\">`CanvasPath`</a></li>\n</ul> \nIt is not necessary to interact with these classes directly. `Path` will point to the appropriate implemention.</p>"}, "SVGCircle": {"name": "SVGCircle", "configs": {"width": {"type": "Number", "description": "Indicates the width of the shape", "guessedname": "width", "guessedtype": "property"}, "radius": {"type": "Number", "description": "Radius of the circle", "guessedname": "radius", "guessedtype": "property"}, "height": {"type": "Number", "description": "Indicates the height of the shape", "guessedname": "height", "guessedtype": "property"}}, "constructors": [{"description": "<a href=\"http://www.w3.org/TR/SVG/\">SVG</a> implementation of the <a href=\"Circle.html\">`Circle`</a> class. \n`SVGCircle` is not intended to be used directly. Instead, use the <a href=\"Circle.html\">`Circle`</a> class. \nIf the browser has <a href=\"http://www.w3.org/TR/SVG/\">SVG</a> capabilities, the <a href=\"Circle.html\">`Circle`</a> \nclass will point to the `SVGCircle` class."}], "namespace": "", "module": "graphics", "guessedname": "SVGCircle", "methods": {"_draw": {"private": "", "description": "Updates the shape.", "guessedname": "_draw", "guessedtype": "function"}}, "file": "graphics-svg-debug.js", "guessedtype": "function", "shortname": "SVGCircle", "properties": {"_type": {"guessedname": "_type", "type": "String", "description": "Indicates the type of shape", "private": "", "guessedtype": "property"}}, "description": "<a href=\"http://www.w3.org/TR/SVG/\">SVG</a> implementation of the <a href=\"Circle.html\">`Circle`</a> class. \n`SVGCircle` is not intended to be used directly. Instead, use the <a href=\"Circle.html\">`Circle`</a> class. \nIf the browser has <a href=\"http://www.w3.org/TR/SVG/\">SVG</a> capabilities, the <a href=\"Circle.html\">`Circle`</a> \nclass will point to the `SVGCircle` class."}, "DataType.Date.Locale": {"name": "DataType.Date.Locale", "deprecated": "- use Y.config.lang to request one of many built-in languages instead.", "namespace": "", "module": "datatype", "guessedname": "YDateEn", "static": "", "file": "datatype-date-format-min.js", "guessedtype": "property", "shortname": "DataType.Date.Locale", "requires": "oop", "description": "The Date.Locale class is a container for all localised date strings\nused by Y.DataType.Date. It is used internally, but may be extended\nto provide new date localisations.\nTo create your own Locale, follow these steps:\n<ol>\n<li>Find an existing locale that matches closely with your needs</li>\n<li>Use this as your base class.  Use Y.DataType.Date.Locale[\"en\"] if nothing\nmatches.</li>\n<li>Create your own class as an extension of the base class using\nY.merge, and add your own localisations where needed.</li>\n</ol>\nSee the Y.DataType.Date.Locale[\"en-US\"] and Y.DataType.Date.Locale[\"en-GB\"]\nclasses which extend Y.DataType.Date.Locale[\"en\"].\nFor example, to implement locales for French french and Canadian french,\nwe would do the following:\n<ol>\n<li>For French french, we have no existing similar locale, so use\nY.DataType.Date.Locale[\"en\"] as the base, and extend it:\n<pre>\nY.DataType.Date.Locale[\"fr\"] = Y.merge(Y.DataType.Date.Locale[\"en\"], {\na: [\"dim\", \"lun\", \"mar\", \"mer\", \"jeu\", \"ven\", \"sam\"],\nA: [\"dimanche\", \"lundi\", \"mardi\", \"mercredi\", \"jeudi\", \"vendredi\", \"samedi\"],\nb: [\"jan\", \"f&eacute;v\", \"mar\", \"avr\", \"mai\", \"jun\", \"jui\", \"ao&ucirc;\", \"sep\", \"oct\", \"nov\", \"d&eacute;c\"],\nB: [\"janvier\", \"f&eacute;vrier\", \"mars\", \"avril\", \"mai\", \"juin\", \"juillet\", \"ao&ucirc;t\", \"septembre\", \"octobre\", \"novembre\", \"d&eacute;cembre\"],\nc: \"%a %d %b %Y %T %Z\",\np: [\"\", \"\"],\nP: [\"\", \"\"],\nx: \"%d.%m.%Y\",\nX: \"%T\"\n});\n</pre>\n</li>\n<li>For Canadian french, we start with French french and change the meaning of \\%x:\n<pre>\nY.DataType.Date.Locale[\"fr-CA\"] = Y.merge(Y.DataType.Date.Locale[\"fr\"], {\nx: \"%Y-%m-%d\"\n});\n</pre>\n</li>\n</ol>\nWith that, you can use your new locales:\n<pre>\nvar d = new Date(\"2008/04/22\");\nY.DataType.Date.format(d, { format: \"%A, %d %B == %x\", locale: \"fr\" });\n</pre>\nwill return:\n<pre>\nmardi, 22 avril == 22.04.2008\n</pre>\nAnd\n<pre>\nY.DataType.Date.format(d, {format: \"%A, %d %B == %x\", locale: \"fr-CA\" });\n</pre>\nWill return:\n<pre>\nmardi, 22 avril == 2008-04-22\n</pre>"}, "Rect": {"name": "Rect", "constructors": [{"description": "<p>Creates an rectangle shape with editable attributes.</p>\n<p>`Rect` instances can be created using the <a href=\"Graphic.html#method_addShape\">`addShape`</a> method of the <a href=\"Graphic.html\">`Graphic`</a> \nclass. The method's `cfg` argument contains a `type` attribute. Assigning \"rect\" or `Y.Rect` to this attribute will create a `Rect` instance. \nRequired attributes for instantiating a `Rect` are `type`, `width` and `height`. Optional attributes include:\n<ul>\n<li><a href=\"#attr_fill\">fill</a></li>\n<li><a href=\"#attr_id\">id</a></li>\n<li><a href=\"#attr_stroke\">stroke</a></li>\n<li><a href=\"#attr_transform\">transform</a></li>\n<li><a href=\"#attr_transformOrigin\">transformOrigin</a></li>\n<li><a href=\"#attr_visible\">visible</a></li>\n<li><a href=\"#attr_x\">x</a></li>\n<li><a href=\"#attr_y\">y</a></li>\n</ul>\nThe below code creates a rectangle by defining the `type` attribute as \"rect\":</p>\nvar myRect = myGraphic.addShape({\ntype: \"rect\",\nwidth: 20,\nheight: 10,\nfill: {\ncolor: \"#9aa\"\n},\nstroke: {\nweight: 1,\ncolor: \"#000\"\n}\n});\nBelow, the same rectangle is created by defining the `type` attribute with a class reference:\nvar myRect = myGraphic.addShape({\ntype: Y.Rect,\nwidth: 20,\nheight: 10,\nfill: {\ncolor: \"#9aa\"\n},\nstroke: {\nweight: 1,\ncolor: \"#000\"\n}\n});\n<p>`Rect` has the following implementations based on browser capability.\n<ul>\n<li><a href=\"SVGRect.html\">`SVGRect`</a></li>\n<li><a href=\"VMLRect.html\">`VMLRect`</a></li>\n<li><a href=\"CanvasRect.html\">`CanvasRect`</a></li>\n</ul>\nIt is not necessary to interact with these classes directly. `Rect` will point to the appropriate implemention.</p>"}], "namespace": "", "module": "graphics", "extends": "Shape", "superclass": "Shape", "file": "graphics.js", "shortname": "Rect", "description": "<p>Creates an rectangle shape with editable attributes.</p>\n<p>`Rect` instances can be created using the <a href=\"Graphic.html#method_addShape\">`addShape`</a> method of the <a href=\"Graphic.html\">`Graphic`</a> \nclass. The method's `cfg` argument contains a `type` attribute. Assigning \"rect\" or `Y.Rect` to this attribute will create a `Rect` instance. \nRequired attributes for instantiating a `Rect` are `type`, `width` and `height`. Optional attributes include:\n<ul>\n<li><a href=\"#attr_fill\">fill</a></li>\n<li><a href=\"#attr_id\">id</a></li>\n<li><a href=\"#attr_stroke\">stroke</a></li>\n<li><a href=\"#attr_transform\">transform</a></li>\n<li><a href=\"#attr_transformOrigin\">transformOrigin</a></li>\n<li><a href=\"#attr_visible\">visible</a></li>\n<li><a href=\"#attr_x\">x</a></li>\n<li><a href=\"#attr_y\">y</a></li>\n</ul>\nThe below code creates a rectangle by defining the `type` attribute as \"rect\":</p>\nvar myRect = myGraphic.addShape({\ntype: \"rect\",\nwidth: 20,\nheight: 10,\nfill: {\ncolor: \"#9aa\"\n},\nstroke: {\nweight: 1,\ncolor: \"#000\"\n}\n});\nBelow, the same rectangle is created by defining the `type` attribute with a class reference:\nvar myRect = myGraphic.addShape({\ntype: Y.Rect,\nwidth: 20,\nheight: 10,\nfill: {\ncolor: \"#9aa\"\n},\nstroke: {\nweight: 1,\ncolor: \"#000\"\n}\n});\n<p>`Rect` has the following implementations based on browser capability.\n<ul>\n<li><a href=\"SVGRect.html\">`SVGRect`</a></li>\n<li><a href=\"VMLRect.html\">`VMLRect`</a></li>\n<li><a href=\"CanvasRect.html\">`CanvasRect`</a></li>\n</ul>\nIt is not necessary to interact with these classes directly. `Rect` will point to the appropriate implemention.</p>"}, "TextAreaCellEditor": {"name": "TextAreaCellEditor", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "TextAreaCellEditor class.\nCheck the list of <a href=\"TextAreaCellEditor.html#configattributes\">Configuration Attributes</a> available for\nTextAreaCellEditor."}], "namespace": "", "module": "aui-component", "guessedname": "TextAreaCellEditor", "extends": "A.TextAreaCellEditor", "superclass": "A.TextAreaCellEditor", "file": "aui-datatable.js", "guessedtype": "property", "shortname": "TextAreaCellEditor", "description": "TextAreaCellEditor class.\nCheck the list of <a href=\"TextAreaCellEditor.html#configattributes\">Configuration Attributes</a> available for\nTextAreaCellEditor."}, "Graphic": {"name": "Graphic", "constructors": [{"description": "`Graphic` acts a factory and container for shapes. You need at least one `Graphic` instance to create shapes for your application. \n<p>The code block below creates a `Graphic` instance and appends it to an HTMLElement with the id 'mygraphiccontainer'.</p>\nvar myGraphic = new Y.Graphic({render:\"#mygraphiccontainer\"});\n<p>Alternatively, you can add a `Graphic` instance to the DOM using the <a href=\"#method_render\">`render`</a> method.</p>\nvar myGraphic = new Y.Graphic();\nmyGraphic.render(\"#mygraphiccontainer\");\n`Graphic` has the following implementations based on browser capability.\n<ul>\n<li><a href=\"SVGGraphic.html\">`SVGGraphic`</a></li>\n<li><a href=\"VMLGraphic.html\">`VMLGraphic`</a></li>\n<li><a href=\"CanvasGraphic.html\">`CanvasGraphic`</a></li>\n</ul>\nIt is not necessary to interact with these classes directly. `Graphic` will point to the appropriate implemention.</p>"}], "namespace": "", "module": "graphics", "methods": {"getXY": {"return": {"type": "", "description": "Array The XY position of the shape."}, "description": "Gets the current position of the graphic instance in page coordinates."}, "render": {"params": [{"type": "Node|String", "name": "parentNode", "description": " node in which to render the graphics node into."}], "description": "Adds the graphics node to the dom.", "param": "{Node|String} parentNode node in which to render the graphics node into."}, "removeAllShapes": {"description": "Removes all shape instances from the dom."}, "batch": {"param": "{Function} method Method to execute.", "params": [{"type": "Function", "name": "method", "description": " Method to execute."}], "description": "Allows for creating multiple shapes in order to batch appending and redraw operations.", "guessedname": "requires", "guessedtype": "property"}, "getShapeById": {"return": {"type": "", "description": "Shape"}, "params": [{"type": "String", "name": "id", "description": " Dom id of the shape's node attribute."}], "description": "Returns a shape based on the id of its dom node.", "param": "{String} id Dom id of the shape's node attribute."}, "removeShape": {"params": [{"type": "Shape|String", "name": "shape", "description": " The instance or id of the shape to be removed."}], "description": "Removes a shape instance from from the graphic instance.", "param": "{Shape|String} shape The instance or id of the shape to be removed."}, "destroy": {"description": "Removes all nodes."}, "addShape": {"return": {"type": "", "description": "Shape"}, "params": [{"type": "Object", "name": "cfg", "description": " Object containing the shape's type and attributes."}], "description": "<p>Generates a shape instance by type. The method accepts an object that contain's the shape's\ntype and attributes to be customized. For example, the code below would create a rectangle:</p>\nvar myRect = myGraphic.addShape({\ntype: \"rect\",\nwidth: 40,\nheight: 30,\nfill: {\ncolor: \"#9aa\"\n},\nstroke: {\nweight: 1,\ncolor: \"#000\"\n}\n});\n<p>The `Graphics` module includes a few basic shapes. More information on their creation \ncan be found in each shape's documentation:\n<ul>\n<li><a href=\"Circle.html\">`Circle`</a></li>\n<li><a href=\"Ellipse.html\">`Ellipse`</a></li>\n<li><a href=\"Rect.html\">`Rect`</a></li>\n<li><a href=\"Path.html\">`Path`</a></li>\n</ul>\nThe `Graphics` module also allows for the creation of custom shapes. If a custom shape\nhas been created, it can be instantiated with the `addShape` method as well. The attributes,\nrequired and optional, would need to be defined in the custom shape.\nvar myCustomShape = myGraphic.addShape({\ntype: Y.MyCustomShape,\nwidth: 50,\nheight: 50,\nfill: {\ncolor: \"#9aa\"\n},\nstroke: {\nweight: 1,\ncolor: \"#000\"\n}\n});", "param": "{Object} cfg Object containing the shape's type and attributes."}}, "file": "graphics.js", "shortname": "Graphic", "configs": {"node": {"readonly": "", "type": "HTMLElement", "description": "The html element that represents to coordinate system of the Graphic instance."}, "autoSize": {"default": "false", "type": "Boolean", "description": "Determines how the size of instance is calculated. If true, the width and height are determined by the size of the contents.\nIf false, the width and height values are either explicitly set or determined by the size of the parent node's dimensions."}, "resizeDown": {"type": "Boolean", "description": "The contentBounds will resize to greater values but not to smaller values. (for performance)\nWhen resizing the contentBounds down is desirable, set the resizeDown value to true."}, "render": {"type": "Node | String", "description": "Whether or not to render the `Graphic` automatically after to a specified parent node after init. This can be a Node instance or a CSS selector string."}, "visible": {"type": "Boolean", "description": "Indicates whether the `Graphic` and its children are visible."}, "height": {"type": "Number", "description": "Indicates the height of the `Graphic`."}, "shapes": {"readonly": "", "type": "Object", "description": "Key value pairs in which a shape instance is associated with its id."}, "width": {"type": "Number", "description": "Indicates the width of the `Graphic`."}, "contentBounds": {"readonly": "", "type": "Object", "description": "Object containing size and coordinate data for the content of a Graphic in relation to the coordSpace node."}, "y": {"type": "Number", "description": "Indicates the y-coordinate for the instance."}, "x": {"type": "Number", "description": "Indicates the x-coordinate for the instance."}, "autoDraw": {"default": "true", "type": "Boolean", "description": "Indicates whether or not the instance will automatically redraw after a change is made to a shape.\nThis property will get set to false when batching operations.", "private": ""}, "id": {"type": "String", "description": "Unique id for class instance."}}, "description": "`Graphic` acts a factory and container for shapes. You need at least one `Graphic` instance to create shapes for your application. \n<p>The code block below creates a `Graphic` instance and appends it to an HTMLElement with the id 'mygraphiccontainer'.</p>\nvar myGraphic = new Y.Graphic({render:\"#mygraphiccontainer\"});\n<p>Alternatively, you can add a `Graphic` instance to the DOM using the <a href=\"#method_render\">`render`</a> method.</p>\nvar myGraphic = new Y.Graphic();\nmyGraphic.render(\"#mygraphiccontainer\");\n`Graphic` has the following implementations based on browser capability.\n<ul>\n<li><a href=\"SVGGraphic.html\">`SVGGraphic`</a></li>\n<li><a href=\"VMLGraphic.html\">`VMLGraphic`</a></li>\n<li><a href=\"CanvasGraphic.html\">`CanvasGraphic`</a></li>\n</ul>\nIt is not necessary to interact with these classes directly. `Graphic` will point to the appropriate implemention.</p>"}, "Test.Suite": {"name": "Test.Suite", "constructors": [{"params": [{"type": "String|Object", "name": "data", "description": " The name of the test suite or an object containing\na name property as well as setUp and tearDown methods."}], "description": "A test suite that can contain a collection of TestCase and TestSuite objects."}], "namespace": "Test", "module": "test", "guessedname": "Suite", "methods": {"tearDown": {"return": {"type": "Void", "description": ""}, "description": "Function to run after each test is executed.", "guessedname": "tearDown", "guessedtype": "function"}, "add": {"return": {"type": "Void", "description": ""}, "description": "Adds a test suite or test case to the test suite.", "param": "{Test.Suite|Test.Case} testObject The test suite or test case to add.", "params": [{"type": "Test.Suite|Test.Case", "name": "testObject", "description": " The test suite or test case to add."}], "guessedname": "add", "guessedtype": "function"}, "setUp": {"return": {"type": "Void", "description": ""}, "description": "Function to run before each test is executed.", "guessedname": "setUp", "guessedtype": "function"}}, "file": "test.js", "guessedtype": "function", "shortname": "Suite", "properties": {"items": {"guessedname": "items", "type": "Array", "description": "Array of test suites and", "private": "", "guessedtype": "property"}, "name": {"type": "String", "description": "The name of the test suite.", "guessedname": "name", "guessedtype": "property"}}, "description": "A test suite that can contain a collection of TestCase and TestSuite objects."}, "Plugin.Base": {"name": "Plugin.Base", "namespace": "", "module": "plugin", "events": {"hostChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "hostChange", "description": "Fires when the value for the configuration attribute 'host' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "configs": {"host": {"guessedtype": "property", "type": "Plugin.Host", "description": "The plugin's host object.", "guessedname": "host", "writeonce": ""}}, "methods": {"beforeHostMethod": {"return": {"type": "EventHandle", "description": "handle  The detach handle for the injected function."}, "description": "Injects a function to be executed before a given method on host object.\nThe function will be detached when the plugin is unplugged.", "param": "{String} method The name of the method to inject the function before.", "params": [{"type": "String", "name": "method", "description": " The name of the method to inject the function before."}, {"type": "Function", "name": "fn", "description": " The function to inject."}, {"type": "Object", "name": "context", "description": " The execution context. Defaults to the plugin instance."}], "guessedname": "beforeHostMethod", "guessedtype": "function"}, "doBefore": {"return": {"type": "EventHandle", "description": "handle  The detach handle for the handler."}, "description": "Listens for the \"on\" moment of events fired by the host, \nor injects code \"before\" a given method on the host.", "param": "strMethod {String} The event to listen for, or method to inject logic before.", "params": [{"type": "String", "name": "strMethod", "description": "  The event to listen for, or method to inject logic before."}, {"type": "Function", "name": "fn", "description": "  The handler function. For events, the \"on\" moment listener. For methods, the function to execute before the given method is executed."}, {"type": "Object", "name": "context", "description": "  An optional context to call the handler with. The default context is the plugin instance."}], "guessedname": "doBefore", "guessedtype": "function"}, "destructor": {"description": "Destructor lifecycle implementation.\nRemoves any event listeners or injected methods applied by the Plugin", "guessedname": "destructor", "guessedtype": "function"}, "onHostEvent": {"return": {"type": "EventHandle", "description": "handle  The detach handle for the listener."}, "description": "Listens for the \"on\" moment of events fired by the host object.\nListeners attached through this method will be detached when the plugin is unplugged.", "param": "{String | Object} type The event type.", "params": [{"type": "String | Object", "name": "type", "description": " The event type."}, {"type": "Function", "name": "fn", "description": " The listener."}, {"type": "Object", "name": "context", "description": " The execution context. Defaults to the plugin instance."}], "guessedname": "onHostEvent", "guessedtype": "function"}, "doAfter": {"return": {"type": "EventHandle", "description": "handle  The detach handle for the listener."}, "description": "Listens for the \"after\" moment of events fired by the host, \nor injects code \"after\" a given method on the host.", "param": "strMethod {String} The event to listen for, or method to inject logic after.", "params": [{"type": "String", "name": "strMethod", "description": "  The event to listen for, or method to inject logic after."}, {"type": "Function", "name": "fn", "description": "  The handler function. For events, the \"after\" moment listener. For methods, the function to execute after the given method is executed."}, {"type": "Object", "name": "context", "description": "  An optional context to call the handler with. The default context is the plugin instance."}], "guessedname": "doAfter", "guessedtype": "function"}, "afterHostMethod": {"return": {"type": "EventHandle", "description": "handle  The detach handle for the injected function."}, "description": "Injects a function to be executed after a given method on host object.\nThe function will be detached when the plugin is unplugged.", "param": "{String} method The name of the method to inject the function after.", "params": [{"type": "String", "name": "method", "description": " The name of the method to inject the function after."}, {"type": "Function", "name": "fn", "description": " The function to inject."}, {"type": "Object", "name": "context", "description": " The execution context. Defaults to the plugin instance."}], "guessedname": "afterHostMethod", "guessedtype": "function"}, "afterHostEvent": {"return": {"type": "EventHandle", "description": "handle  The detach handle for the listener."}, "description": "Listens for the \"after\" moment of events fired by the host object.\nListeners attached through this method will be detached when the plugin is unplugged.", "param": "{String | Object} type The event type.", "params": [{"type": "String | Object", "name": "type", "description": " The event type."}, {"type": "Function", "name": "fn", "description": " The listener."}, {"type": "Object", "name": "context", "description": " The execution context. Defaults to the plugin instance."}], "guessedname": "afterHostEvent", "guessedtype": "function"}, "initializer": {"param": "{Object} config Configuration object with property name/value pairs.", "params": [{"type": "Object", "name": "config", "description": " Configuration object with property name/value pairs."}], "description": "Initializer lifecycle implementation.", "guessedname": "initializer", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "plugin.js", "shortname": "Plugin.Base", "param": "{Object} config Configuration object with property name/value pairs.", "properties": {"_handles": {"description": "The list of event handles for event listeners or AOP injected methods\napplied by the plugin to the host object.", "private": "", "value": "null", "guessedname": "_handles", "guessedtype": "property", "type": "Array"}, "NS": {"type": "String", "static": "", "description": "The name of the property the the plugin will be attached to\nwhen plugged into a Plugin Host. Plugins extending Plugin.Base,\nshould set their own NS value.", "guessedname": "NS", "guessedtype": "property"}, "ATTRS": {"type": "Object", "static": "", "description": "Object defining the set of attributes supported by the Plugin.Base class", "guessedname": "ATTRS", "guessedtype": "property"}, "NAME": {"type": "String", "static": "", "description": "The string identifying the Plugin.Base class. Plugins extending\nPlugin.Base should set their own NAME value.", "guessedname": "NAME", "guessedtype": "property"}}, "description": "The base class for all Plugin instances."}, "Do.AlterArgs": {"name": "Do.AlterArgs", "constructors": [{"params": [{"type": "String", "name": "msg", "description": "  (optional) Explanation of the altered return value"}, {"type": "Array", "name": "newArgs", "description": "  Call parameters to be used for the original method\ninstead of the arguments originally passed in."}], "description": "Return an AlterArgs object when you want to change the arguments that\nwere passed into the function.  Useful for Do.before subscribers.  An\nexample would be a service that scrubs out illegal characters prior to\nexecuting the core business logic."}], "namespace": "", "module": "event-custom", "guessedname": "AlterArgs", "file": "event-custom-base.js", "guessedtype": "function", "shortname": "Do.AlterArgs", "description": "Return an AlterArgs object when you want to change the arguments that\nwere passed into the function.  Useful for Do.before subscribers.  An\nexample would be a service that scrubs out illegal characters prior to\nexecuting the core business logic."}, "WidgetStack": {"name": "WidgetStack", "namespace": "", "module": "widget-stack", "events": {"shimChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "shimChange", "description": "Fires when the value for the configuration attribute 'shim' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "zIndexChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "zIndexChange", "description": "Fires when the value for the configuration attribute 'zIndex' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "configs": {"zIndex": {"default": "0", "type": "number", "description": "The z-index to apply to the Widgets boundingBox. Non-numerical values for \nzIndex will be converted to 0", "guessedname": "zIndex", "guessedtype": "property"}, "shim": {"default": "false, for all browsers other than IE6, for which a shim is enabled by default.", "type": "boolean", "description": "Boolean flag to indicate whether or not a shim should be added to the Widgets\nboundingBox, to protect it from select box bleedthrough.", "guessedname": "shim", "guessedtype": "property"}}, "methods": {"sizeShim": {"description": "For IE6, synchronizes the size and position of iframe shim to that of \nWidget bounding box which it is protecting. For all other browsers,\nthis method does not do anything.", "guessedname": "sizeShim", "guessedtype": "function"}, "_renderShim": {"private": "", "description": "Creates the shim element and adds it to the DOM", "guessedname": "_renderShim", "guessedtype": "function"}, "_detachStackHandles": {"description": "Detaches any handles stored for the provided key", "param": "String handleKey The key defining the group of handles which should be detached", "params": [{"type": "", "name": "String", "description": " handleKey The key defining the group of handles which should be detached"}], "private": "", "guessedname": "_detachStackHandles", "guessedtype": "function"}, "_uiSetZIndex": {"description": "Updates the UI to reflect the zIndex value passed in.", "param": "{number} zIndex The zindex to be reflected in the UI", "protected": "", "params": [{"type": "number", "name": "zIndex", "description": " The zindex to be reflected in the UI"}], "guessedname": "_uiSetZIndex", "guessedtype": "function"}, "_syncUIStack": {"protected": "", "description": "Synchronizes the UI to match the Widgets stack state. This method in \ninvoked after syncUI is invoked for the Widget class using YUI's aop infrastructure.", "guessedname": "_syncUIStack", "guessedtype": "function"}, "_setZIndex": {"return": {"type": "Number", "description": "Normalized zIndex"}, "description": "Default setter for zIndex attribute changes. Normalizes zIndex values to \nnumbers, converting non-numerical values to 0.", "param": "{String | Number} zIndex", "protected": "", "params": [{"type": "String | Number", "name": "zIndex", "description": ""}], "guessedname": "_setZIndex", "guessedtype": "function"}, "_destroyShim": {"private": "", "description": "Removes the shim from the DOM, and detaches any related event\nlisteners.", "guessedname": "_destroyShim", "guessedtype": "function"}, "_uiSetShim": {"description": "Updates the UI to enable/disable the shim. If the widget is not currently visible,\ncreation of the shim is deferred until it is made visible, for performance reasons.", "param": "{boolean} enable If true, creates/renders the shim, if false, removes it.", "protected": "", "params": [{"type": "boolean", "name": "enable", "description": " If true, creates/renders the shim, if false, removes it."}], "guessedname": "_uiSetShim", "guessedtype": "function"}, "_getShimTemplate": {"guessedname": "_getShimTemplate", "return": {"type": "Node", "description": "node A new shim Node instance."}, "description": "Creates a cloned shim node, using the SHIM_TEMPLATE html template, for use on a new instance.", "private": "", "guessedtype": "function"}, "_renderUIStack": {"protected": "", "description": "Creates/Initializes the DOM to support stackability.\n<p>\nThis method in invoked after renderUI is invoked for the Widget class\nusing YUI's aop infrastructure.\n</p>", "guessedname": "_renderUIStack", "guessedtype": "function"}, "_renderShimDeferred": {"private": "", "description": "Sets up change handlers for the visible attribute, to defer shim creation/rendering \nuntil the Widget is made visible.", "guessedname": "_renderShimDeferred", "guessedtype": "function"}, "_afterZIndexChange": {"description": "Default attribute change listener for the zIndex attribute, responsible\nfor updating the UI, in response to attribute changes.", "param": "{EventFacade} e The event facade for the attribute change", "protected": "", "params": [{"type": "EventFacade", "name": "e", "description": " The event facade for the attribute change"}], "guessedname": "_afterZIndexChange", "guessedtype": "function"}, "_afterShimChange": {"description": "Default attribute change listener for the shim attribute, responsible\nfor updating the UI, in response to attribute changes.", "param": "{EventFacade} e The event facade for the attribute change", "protected": "", "params": [{"type": "EventFacade", "name": "e", "description": " The event facade for the attribute change"}], "guessedname": "_afterShimChange", "guessedtype": "function"}, "_bindUIStack": {"protected": "", "description": "Binds event listeners responsible for updating the UI state in response to \nWidget stack related state changes.\n<p>\nThis method is invoked after bindUI is invoked for the Widget class\nusing YUI's aop infrastructure.\n</p>", "guessedname": "_bindUIStack", "guessedtype": "function"}, "_addShimResizeHandlers": {"private": "", "description": "Sets up event listeners to resize the shim when the size of the Widget changes.\n<p>\nNOTE: This method is only used for IE6 currently, since IE6 doesn't support a way to\nresize the shim purely through CSS, when the Widget does not have an explicit width/height \nset.\n</p>", "guessedname": "_addShimResizeHandlers", "guessedtype": "function"}}, "param": "{Object} User configuration object", "file": "widget-stack.js", "shortname": "WidgetStack", "properties": {"HTML_PARSER": {"type": "Object", "static": "", "description": "The HTML parsing rules for the WidgetStack class.", "guessedname": "HTML_PARSER", "guessedtype": "property"}, "SHIM_TEMPLATE": {"type": "String", "static": "", "description": "Default markup template used to generate the shim element.", "guessedname": "SHIM_TEMPLATE", "guessedtype": "property"}, "SHIM_CLASS_NAME": {"description": "Default class used to mark the shim element", "default": "\"yui-widget-shim\"", "static": "", "guessedname": "SHIM_CLASS_NAME", "guessedtype": "property", "type": "String"}, "ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute \nconfiguration introduced by WidgetStack.", "guessedname": "ATTRS", "guessedtype": "property"}, "STACKED_CLASS_NAME": {"description": "Default class used to mark the boundingBox of a stacked widget.", "default": "\"yui-widget-stacked\"", "static": "", "guessedname": "STACKED_CLASS_NAME", "guessedtype": "property", "type": "String"}}, "description": "Widget extension, which can be used to add stackable (z-index) support to the \nbase Widget class along with a shimming solution, through the \n<a href=\"Base.html#method_build\">Base.build</a> method."}, "BottomAxisLayout": {"name": "BottomAxisLayout", "constructors": [{"description": "Contains algorithms for rendering a bottom axis."}], "namespace": "", "module": "charts", "guessedname": "BottomAxisLayout", "methods": {"setSizeAndPosition": {"protected": "", "description": "Calculates the size and positions the content elements.", "guessedname": "setSizeAndPosition", "guessedtype": "function"}, "getLineStart": {"protected": "", "description": "Calculates the coordinates for the first point on an axis.", "guessedname": "getLineStart", "guessedtype": "function"}, "_getDefaultMargins": {"guessedname": "_getDefaultMargins", "return": {"type": "", "description": "Object"}, "description": "Default margins for text fields.", "private": "", "guessedtype": "function"}, "setCalculatedSize": {"protected": "", "description": "Assigns a height based on the size of the contents.", "guessedname": "setCalculatedSize", "guessedtype": "function"}, "positionTitle": {"description": "Rotate and position title.", "param": "{HTMLElement} label to rotate position", "protected": "", "params": [{"type": "HTMLElement", "name": "label", "description": " to rotate position"}], "guessedname": "positionTitle", "guessedtype": "function"}, "offsetNodeForTick": {"description": "Adjusts position for inner ticks.", "param": "{Node} cb contentBox of the axis", "protected": "", "params": [{"type": "Node", "name": "cb", "description": " contentBox of the axis"}], "guessedname": "offsetNodeForTick", "guessedtype": "function"}, "positionLabel": {"description": "Rotate and position labels.", "param": "{HTMLElement} label to rotate position", "protected": "", "params": [{"type": "HTMLElement", "name": "label", "description": " to rotate position"}, {"type": "Object", "name": "pt", "description": " hash containing the x and y coordinates in which the label will be positioned\nagainst."}], "guessedname": "positionLabel", "guessedtype": "function"}, "drawTick": {"description": "Draws a tick", "param": "{Object} pt hash containing x and y coordinates", "protected": "", "params": [{"type": "Object", "name": "pt", "description": " hash containing x and y coordinates"}, {"type": "Object", "name": "tickStyles", "description": " hash of properties used to draw the tick"}], "guessedname": "drawTick", "guessedtype": "function"}, "getLabelPoint": {"return": {"type": "", "description": "Object"}, "description": "Calculates the point for a label.", "param": "{Object} pt Object containing x and y coordinates", "protected": "", "params": [{"type": "Object", "name": "pt", "description": " Object containing x and y coordinates"}], "guessedname": "getLabelPoint", "guessedtype": "function"}, "updateMaxLabelSize": {"description": "Updates the value for the `maxLabelSize` for use in calculating total size.", "param": "{HTMLElement} label to measure", "protected": "", "params": [{"type": "HTMLElement", "name": "label", "description": " to measure"}], "guessedname": "updateMaxLabelSize", "guessedtype": "function"}, "setTickOffsets": {"protected": "", "description": "Sets the length of the tick on either side of the axis line.", "guessedname": "setTickOffsets", "guessedtype": "function"}}, "file": "charts.js", "guessedtype": "function", "shortname": "BottomAxisLayout", "description": "Contains algorithms for rendering a bottom axis."}, "DD.Delegate": {"name": "DD.Delegate", "configs": {"dragNode": {"type": "Node", "description": "Y.Node instance of the dd dragNode.", "guessedname": "dragNode", "guessedtype": "property"}, "container": {"type": "String", "description": "A selector query to get the container to listen for mousedown events on. All \"nodes\" should be a child of this container.", "guessedname": "container", "guessedtype": "property"}, "target": {"type": "Boolean", "description": "Should the items also be a drop target.", "guessedname": "target", "guessedtype": "property"}, "over": {"type": "Boolean", "description": "Is the mouse currently over the container", "guessedname": "over", "guessedtype": "property"}, "lastNode": {"type": "Node", "description": "Y.Node instance of the last item dragged.", "guessedname": "lastNode", "guessedtype": "property"}, "invalid": {"type": "String", "description": "A selector query to test a node to see if it's an invalid item.", "guessedname": "invalid", "guessedtype": "property"}, "handles": {"type": "Array", "description": "The handles config option added to the temp DD instance.", "guessedname": "handles", "guessedtype": "property"}, "dragConfig": {"type": "Object", "description": "The default config to be used when creating the DD instance.", "guessedname": "dragConfig", "guessedtype": "property"}, "currentNode": {"type": "Node", "description": "Y.Node instance of the dd node.", "guessedname": "currentNode", "guessedtype": "property"}, "nodes": {"type": "String", "description": "A selector query to get the children of the \"container\" to make draggable elements from.", "guessedname": "nodes", "guessedtype": "property"}}, "constructors": [{"description": "Provides the ability to drag multiple nodes under a container element using only one Y.DD.Drag instance as a delegate."}], "namespace": "DD", "module": "dd", "events": {"overChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "overChange", "description": "Fires when the value for the configuration attribute 'over' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "invalidChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "invalidChange", "description": "Fires when the value for the configuration attribute 'invalid' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "lastNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "lastNodeChange", "description": "Fires when the value for the configuration attribute 'lastNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "dragNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "dragNodeChange", "description": "Fires when the value for the configuration attribute 'dragNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "dragConfigChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "dragConfigChange", "description": "Fires when the value for the configuration attribute 'dragConfig' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "currentNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "currentNodeChange", "description": "Fires when the value for the configuration attribute 'currentNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "handlesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "handlesChange", "description": "Fires when the value for the configuration attribute 'handles' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "nodesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "nodesChange", "description": "Fires when the value for the configuration attribute 'nodes' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "containerChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "containerChange", "description": "Fires when the value for the configuration attribute 'container' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "targetChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "targetChange", "description": "Fires when the value for the configuration attribute 'target' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "Delegate", "methods": {"_delMouseDown": {"description": "The callback for the Y.DD.Delegate instance used", "param": "{Event} e The MouseDown Event.", "params": [{"type": "Event", "name": "e", "description": " The MouseDown Event."}], "private": "", "guessedname": "_delMouseDown", "guessedtype": "function"}, "syncTargets": {"chainable": "", "return": {"type": "Self", "description": ""}, "description": "Applies the Y.Plugin.Drop to all nodes matching the cont + nodes selector query.", "guessedname": "syncTargets", "guessedtype": "function"}, "createDrop": {"return": {"type": "", "description": "Node"}, "description": "Apply the Drop plugin to this node", "param": "{Node} node The Node to apply the plugin to", "params": [{"type": "Node", "name": "node", "description": " The Node to apply the plugin to"}, {"type": "Array", "name": "groups", "description": " The default groups to assign this target to."}], "guessedname": "createDrop", "guessedtype": "function"}, "_afterDragEnd": {"description": "Listens for the drag:end event and updates the temp dd instance.", "param": "{Event} e The Event.", "params": [{"type": "Event", "name": "e", "description": " The Event."}], "private": "", "guessedname": "_afterDragEnd", "guessedtype": "function"}, "_onMouseEnter": {"description": "Sets the target shim state", "param": "{Event} e The MouseEnter Event", "params": [{"type": "Event", "name": "e", "description": " The MouseEnter Event"}], "private": "", "guessedname": "_onMouseEnter", "guessedtype": "function"}, "_onNodeChange": {"description": "Listens to the nodeChange event and sets the dragNode on the temp dd instance.", "param": "{Event} e The Event.", "params": [{"type": "Event", "name": "e", "description": " The Event."}], "private": "", "guessedname": "_onNodeChange", "guessedtype": "function"}, "_onMouseLeave": {"description": "Resets the target shim state", "param": "{Event} e The MouseLeave Event", "params": [{"type": "Event", "name": "e", "description": " The MouseLeave Event"}], "private": "", "guessedname": "_onMouseLeave", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "dd.js", "guessedtype": "function", "shortname": "Delegate", "properties": {"_handles": {"private": "", "description": "Array of event handles to be destroyed", "guessedname": "_handles", "guessedtype": "property"}, "dd": {"description": "A reference to the temporary dd instance used under the hood.", "guessedname": "dd", "guessedtype": "property"}, "_shimState": {"private": "", "description": "The state of the Y.DD.DDM._noShim property to it can be reset.", "guessedname": "_shimState", "guessedtype": "property"}, "_bubbleTargets": {"private": "", "description": "The default bubbleTarget for this object. Default: Y.DD.DDM", "guessedname": "_bubbleTargets", "guessedtype": "property"}}, "description": "Provides the ability to drag multiple nodes under a container element using only one Y.DD.Drag instance as a delegate."}, "Component": {"name": "Component", "configs": {"useARIA": {"description": "Boolean indicating if use of the WAI-ARIA Roles and States should be\nenabled for the Widget.", "writeonce": "", "default": "true", "readonly": "", "guessedname": "useARIA", "guessedtype": "property", "type": "boolean"}, "cssClass": {"default": "null", "type": "String", "description": "CSS class to be automatically added to the <code>boundingBox</code>.", "guessedname": "cssClass", "guessedtype": "property"}, "render": {"default": "false", "type": "boolean | Node", "description": "If <code>true</code> the render phase will be autimatically invoked\npreventing the <code>.render()</code> manual call.", "guessedname": "render", "guessedtype": "property"}, "hideClass": {"default": "'aui-helper-hidden'", "type": "String", "description": "css class added to hide the <code>boundingBox</code> when\n<a href=\"Component.html#config_visible\">visible</a> is set to\n<code>false</code>.", "guessedname": "hideClass", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "A base class for Component, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li></li>\n</ul>\nCheck the list of <a href=\"Component.html#configattributes\">Configuration Attributes</a> available for\nComponent."}], "namespace": "", "module": "aui-component", "events": {"hideClassChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "hideClassChange", "description": "Fires when the value for the configuration attribute 'hideClass' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "renderChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "renderChange", "description": "Fires when the value for the configuration attribute 'render' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "cssClassChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "cssClassChange", "description": "Fires when the value for the configuration attribute 'cssClass' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "useARIAChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "useARIAChange", "description": "Fires when the value for the configuration attribute 'useARIA' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "Component", "methods": {"_setComponentClassNames": {"protected": "", "description": "Set the class names on the Component <code>contentBox</code>.", "guessedname": "_setComponentClassNames", "guessedtype": "function"}, "_afterComponentVisibleChange": {"description": "Fires after the value of the\n<a href=\"Component.html#config_visible\">visible</a> attribute change.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_afterComponentVisibleChange", "guessedtype": "function"}, "clone": {"return": {"type": "Widget", "description": "Cloned instance."}, "description": "Clone the current Component.", "param": "{Object} config", "params": [{"type": "Object", "name": "config", "description": ""}], "guessedname": "clone", "guessedtype": "function"}, "_renderInteraction": {"protected": "", "description": "Renders the Component based upon a passed in interaction.", "guessedname": "_renderInteraction", "guessedtype": "function"}, "initializer": {"protected": "", "description": "Construction logic executed during Component instantiation. Lifecycle.", "guessedname": "initializer", "guessedtype": "function"}, "_afterCssClassChange": {"description": "Fires after the value of the\n<a href=\"Component.html#config_cssClass\">cssClass</a> attribute change.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_afterCssClassChange", "guessedtype": "function"}, "toggle": {"param": "visible Force the visibility of the component to this state.", "params": [{"type": "", "name": "visible", "description": " Force the visibility of the component to this state."}], "description": "Toggle the visibility of the Panel toggling the value of the\n<a href=\"Widget.html#config_visible\">visible</a> attribute.", "guessedname": "toggle", "guessedtype": "function"}, "_setRender": {"protected": "", "description": "Set the interaction and render behavior based upon an object\n(intercepts the default rendering behavior).", "guessedname": "_setRender", "guessedtype": "function"}, "_uiSetCssClass": {"description": "Applies the CSS classes to the <code>boundingBox</code> and\n<code>contentBox</code>.", "param": "{String} newVal", "protected": "", "params": [{"type": "String", "name": "newVal", "description": ""}, {"type": "String", "name": "prevVal", "description": ""}], "guessedname": "_uiSetCssClass", "guessedtype": "function"}}, "extends": "Widget", "superclass": "Widget", "file": "aui-component.js", "guessedtype": "function", "shortname": "Component", "properties": {"Component.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the Component.", "guessedname": "ATTRS", "guessedtype": "property"}, "Component.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}}, "description": "A base class for Component, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li></li>\n</ul>\nCheck the list of <a href=\"Component.html#configattributes\">Configuration Attributes</a> available for\nComponent."}, "Text.AccentFold": {"name": "Text.AccentFold", "namespace": "", "module": "text", "guessedname": "YArray", "methods": {"filter": {"return": {"type": "Array", "description": "Filtered copy of <em>haystack</em>."}, "description": "<p>\nReturns a copy of <em>haystack</em> containing only the strings for which\nthe supplied function returns <code>true</code>.\n</p>\n<p>\nWhile comparisons will be made using accent-folded strings, the returned\narray of matches will contain the original strings that were passed in.\n</p>", "param": "{Array} haystack Array of strings to filter.", "static": "", "guessedname": "filter", "guessedtype": "function", "params": [{"type": "Array", "name": "haystack", "description": " Array of strings to filter."}, {"type": "Function", "name": "func", "description": " Comparison function. Will receive an accent-folded\nhaystack string as an argument, and should return a truthy or falsy\nvalue."}]}, "fold": {"return": {"type": "String|Array", "description": "Folded string or array of strings."}, "description": "Accent-folds the specified string or array of strings and returns a copy\nin which common accented letters have been converted to their closest\nnon-accented, lowercase forms.", "param": "{String|Array} input String or array of strings to be folded.", "static": "", "guessedname": "fold", "guessedtype": "function", "params": [{"type": "String|Array", "name": "input", "description": " String or array of strings to be folded."}]}, "compare": {"return": {"type": "Boolean", "description": "Results of the comparison."}, "description": "Compares the accent-folded versions of two strings and returns\n<code>true</code> if they're the same, <code>false</code> otherwise. If\na custom comparison function is supplied, the accent-folded strings will\nbe passed to that function for comparison.", "param": "{String} a First string to compare.", "static": "", "guessedname": "compare", "guessedtype": "function", "params": [{"type": "String", "name": "a", "description": " First string to compare."}, {"type": "String", "name": "b", "description": " Second string to compare."}, {"type": "Function", "name": "func", "description": " (optional) Custom comparison function. Should\nreturn a truthy or falsy value."}]}, "canFold": {"return": {"type": "Boolean", "description": ""}, "description": "Returns <code>true</code> if the specified string contains one or more\ncharacters that can be folded, <code>false</code> otherwise.", "param": "{String} string String to test.", "static": "", "guessedname": "canFold", "guessedtype": "function", "params": [{"type": "String", "name": "string", "description": " String to test."}]}}, "static": "", "file": "text-accentfold.js", "guessedtype": "property", "shortname": "Text.AccentFold", "description": "<p>\nProvides a basic accent folding implementation that converts common accented\nletters (like \"á\") to their non-accented forms (like \"a\").\n</p>\n<p>\nThis implementation is not comprehensive, and should only be used as a last\nresort when accent folding can't be done on the server. A comprehensive\naccent folding implementation would require much more character data to be\nsent to the browser, resulting in a significant performance penalty. This\nimplementation strives for a compromise between usefulness and performance.\n</p>\n<p>\nAccent folding is a destructive operation that can't be reversed, and may\nchange or destroy the actual meaning of the text depending on the language.\nIt should not be used on strings that will later be displayed to a user,\nunless this is done with the understanding that linguistic meaning may be\nlost and that you may in fact confuse or insult the user by doing so.\n</p>\n<p>\nWhen used for matching, accent folding is likely to produce erroneous matches\nfor languages in which characters with diacritics are considered different\nfrom their base characters, or where correct folding would map to other\ncharacter sequences than just stripped characters. For example, in German\n\"ü\" is a character that's clearly different from \"u\" and should match \"ue\"\ninstead. The word \"betrügen\" means \"to defraud\", while \"betrugen\" is the past\ntense of \"to behave\". The name \"Müller\" is expected to match \"Mueller\", but\nnot \"Muller\". On the other hand, accent folding falls short for languages\nwhere different base characters are expected to match. In Japanese, for\nexample, hiragana and katakana characters with the same pronunciation (\"あ\"\nand \"ア\") are commonly treated as equivalent for lookups, but accent folding\ntreats them as different.\n</p>"}, "ClassNameManager": {"name": "ClassNameManager", "namespace": "", "module": "classnamemanager", "methods": {"getClassName": {"param": "{String}+ classnameSection one or more classname sections to be joined", "params": [{"type": "String", "name": "+", "description": " classnameSection one or more classname sections to be joined"}, {"type": "Boolean", "name": "skipPrefix", "description": " If set to true, the classname will not be prefixed with the default Y.config.classNameDelimiter value."}], "description": "Returns a class name prefixed with the the value of the \n<code>Y.config.classNamePrefix</code> attribute + the provided strings.\nUses the <code>Y.config.classNameDelimiter</code> attribute to delimit the \nprovided strings. E.g. Y.ClassNameManager.getClassName('foo','bar'); // yui-foo-bar", "guessedname": "getClassName", "guessedtype": "function"}}, "static": "", "file": "classnamemanager.js", "shortname": "ClassNameManager", "properties": {"classNamePrefix": {"default": "\"yui\"", "type": "{String}", "static": "", "description": "Configuration property indicating the prefix for all CSS class names in this YUI instance."}, "classNameDelimiter": {"default": "\"-\"", "type": "{String}", "static": "", "description": "Configuration property indicating the delimiter used to compose all CSS class names in\nthis YUI instance."}}, "description": "A singleton class providing: \n<ul>\n<li>Easy creation of prefixed class names</li>\n<li>Caching of previously created class names for improved performance.</li>\n</ul>"}, "DatePickerSelect": {"name": "DatePickerSelect", "configs": {"nullableYear": {"default": "false", "type": "boolean", "description": "If true the select element for the year will be nullable", "guessedname": "nullableYear", "guessedtype": "property"}, "populateYear": {"default": "true", "type": "boolean", "description": "If true the select element for the year will be automatic\npopulated.", "guessedname": "populateYear", "guessedtype": "property"}, "formatter": {"default": "function(dates) { return dates.formatted.join(','); }", "type": "function", "description": "Function to format the array of the selected dates before set the\nvalue of the input.", "guessedname": "formatter", "guessedtype": "property"}, "yearNode": {"default": "Generated div element.", "type": "String | Node", "description": "DOM Node to display the year of the DatePickerSelect. If not\nspecified try to query using HTML_PARSER an element inside\ncontentBox which matches <code>aui-datepicker-year</code>.", "guessedname": "yearNode", "guessedtype": "property"}, "setValue": {"default": "true", "type": "boolean", "description": "If true set the selected date with the correct\n<a href=\"Calendar.html#config_dateFormat\">dateFormat</a> to the\nvalue of the input field which is hosting the Calendar.", "guessedname": "setValue", "guessedtype": "property"}, "monthNode": {"default": "Generated div element.", "type": "String | Node", "description": "DOM Node to display the month of the DatePickerSelect. If not\nspecified try to query using HTML_PARSER an element inside\ncontentBox which matches <code>aui-datepicker-year</code>.", "guessedname": "monthNode", "guessedtype": "property"}, "trigger": {"default": "Generated HTLM div element", "type": "{Node | String}", "description": "Trigger element to open the calendar. Inherited from\n<a href=\"OverlayContext.html#config_trigger\">OverlayContext</a>.", "guessedname": "trigger", "guessedtype": "property"}, "buttonNode": {"default": "Generated div element.", "type": "String", "description": "DOM Node to display the button of the DatePickerSelect. If not\nspecified try to query using HTML_PARSER an element inside\ncontentBox which matches <code>aui-buttonitem</code>.", "guessedname": "buttonNode", "guessedtype": "property"}, "yearRange": {"default": "[ year - 10, year + 10 ]", "type": "Array", "description": "Year range to be displayed on the year select element. By default\nit displays from -10 to +10 years from the current year.", "guessedname": "yearRange", "guessedtype": "property"}, "dayNodeName": {"default": "day", "type": "String", "description": "Name attribute used on the\n<a href=\"DatePickerSelect.html#config_dayNode\">dayNode</a>.", "guessedname": "dayNodeName", "guessedtype": "property"}, "yearNodeName": {"default": "year", "type": "String", "description": "Name attribute used on the\n<a href=\"DatePickerSelect.html#config_yearNode\">yearNode</a>.", "guessedname": "yearNodeName", "guessedtype": "property"}, "selectWrapperNode": {"default": "Generated div element.", "type": "String", "description": "DOM Node to display the selects of the DatePickerSelect. If not\nspecified try to query using HTML_PARSER an element inside\ncontentBox which matches <code>aui-datepicker-select-wrapper</code>.", "guessedname": "selectWrapperNode", "guessedtype": "property"}, "nullableMonth": {"default": "false", "type": "boolean", "description": "If true the select element for the month will be nullable", "guessedname": "nullableMonth", "guessedtype": "property"}, "populateDay": {"default": "true", "type": "boolean", "description": "If true the select element for the days will be automatic\npopulated.", "guessedname": "populateDay", "guessedtype": "property"}, "dayNode": {"default": "Generated div element.", "type": "String | Node", "description": "DOM Node to display the day of the DatePickerSelect. If not\nspecified try to query using HTML_PARSER an element inside\ncontentBox which matches <code>aui-datepicker-year</code>.", "guessedname": "dayNode", "guessedtype": "property"}, "monthNodeName": {"default": "month", "type": "String", "description": "Name attribute used on the\n<a href=\"DatePickerSelect.html#config_monthNode\">monthNode</a>.", "guessedname": "monthNodeName", "guessedtype": "property"}, "populateMonth": {"default": "true", "type": "boolean", "description": "If true the select element for the month will be automatic\npopulated.", "guessedname": "populateMonth", "guessedtype": "property"}, "calendar": {"default": "{}", "type": "Object", "description": "<a href=\"Calendar.html\">Calendar</a> configuration Object.</a>", "guessedname": "calendar", "guessedtype": "property"}, "appendOrder": {"default": "[ 'm', 'd', 'y' ]", "type": "Array", "description": "The order the selects elements are appended to the\n<a href=\"DatePickerSelect.html#config_srcNode\">srcNode</a>.", "guessedname": "appendOrder", "guessedtype": "property"}, "nullableDay": {"default": "false", "type": "boolean", "description": "If true the select element for the day will be nullable", "guessedname": "nullableDay", "guessedtype": "property"}, "stack": {"default": "true", "type": "boolean", "description": "If true is able to do stacking with another overlays.", "guessedname": "stack", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "<p><img src=\"assets/images/aui-calendar-datepicker-select/main.png\"/></p>\nA base class for DatePickerSelect, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Select a date from Calendar to select elements</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.DatePickerSelect({\nsrcNode: '#srcNodeId',\ncalendar: {\n// locale: 'pt-br',\ndateFormat: '%m/%d/%y',\nyearRange: [ 1970, 2009 ]\n}\n}).render();\n</code></pre>\nCheck the list of <a href=\"DatePickerSelect.html#configattributes\">Configuration Attributes</a> available for\nDatePickerSelect."}], "namespace": "", "module": "aui-calendar", "events": {"populateDayChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "populateDayChange", "description": "Fires when the value for the configuration attribute 'populateDay' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "yearRangeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "yearRangeChange", "description": "Fires when the value for the configuration attribute 'yearRange' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "populateYearChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "populateYearChange", "description": "Fires when the value for the configuration attribute 'populateYear' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "nullableMonthChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "nullableMonthChange", "description": "Fires when the value for the configuration attribute 'nullableMonth' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "populateMonthChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "populateMonthChange", "description": "Fires when the value for the configuration attribute 'populateMonth' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "buttonNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "buttonNodeChange", "description": "Fires when the value for the configuration attribute 'buttonNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "formatterChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "formatterChange", "description": "Fires when the value for the configuration attribute 'formatter' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "selectWrapperNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "selectWrapperNodeChange", "description": "Fires when the value for the configuration attribute 'selectWrapperNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "dayNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "dayNodeChange", "description": "Fires when the value for the configuration attribute 'dayNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "dayNodeNameChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "dayNodeNameChange", "description": "Fires when the value for the configuration attribute 'dayNodeName' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "setValueChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "setValueChange", "description": "Fires when the value for the configuration attribute 'setValue' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "calendarChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "calendarChange", "description": "Fires when the value for the configuration attribute 'calendar' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "nullableYearChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "nullableYearChange", "description": "Fires when the value for the configuration attribute 'nullableYear' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "monthNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "monthNodeChange", "description": "Fires when the value for the configuration attribute 'monthNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "yearNodeNameChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "yearNodeNameChange", "description": "Fires when the value for the configuration attribute 'yearNodeName' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "triggerChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "triggerChange", "description": "Fires when the value for the configuration attribute 'trigger' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "monthNodeNameChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "monthNodeNameChange", "description": "Fires when the value for the configuration attribute 'monthNodeName' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "appendOrderChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "appendOrderChange", "description": "Fires when the value for the configuration attribute 'appendOrder' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "stackChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "stackChange", "description": "Fires when the value for the configuration attribute 'stack' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "nullableDayChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "nullableDayChange", "description": "Fires when the value for the configuration attribute 'nullableDay' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "yearNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "yearNodeChange", "description": "Fires when the value for the configuration attribute 'yearNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "DatePickerSelect", "methods": {"_onShowOverlay": {"protected": "", "params": [{"type": "Event", "name": "event", "description": ""}], "description": "Fires before the DatePicker overlay show. Responsible to invoke the\nrender phase of the Calendar.", "guessedname": "_onShowOverlay", "guessedtype": "function"}, "_setStack": {"return": {"type": "boolean", "description": ""}, "description": "Setter for the <a href=\"Calendar.html#config_stack\">stack</a> attribute.", "protected": "", "params": [{"type": "boolean", "name": "value", "description": ""}], "guessedname": "_setStack", "guessedtype": "function"}, "_renderTriggerButton": {"protected": "", "description": "Render DOM element for the trigger button of the DatePickerSelect.", "guessedname": "_renderTriggerButton", "guessedtype": "function"}, "initializer": {"protected": "", "description": "Construction logic executed during Datepicker instantiation. Lifecycle.", "guessedname": "initializer", "guessedtype": "function"}, "_onSelectChange": {"description": "Fired on any select change.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onSelectChange", "guessedtype": "function"}, "_selectCurrentDay": {"protected": "", "description": "Select the current day on the respective input field.", "guessedname": "_selectCurrentDay", "guessedtype": "function"}, "_setCalendar": {"return": {"type": "", "description": ""}, "description": "Setter for the <a href=\"DatePicker.html#calendar\">calendar</a>\nattribute.", "protected": "", "params": [{"type": "String", "name": "eventType", "description": " Event type"}], "guessedname": "_setCalendar", "guessedtype": "function"}, "_afterSelectDate": {"description": "Fires when a date is selected on the Calendar.", "param": "{Event} event", "protected": "", "params": [{"type": "Event", "name": "event", "description": ""}], "guessedname": "_afterSelectDate", "guessedtype": "function"}, "_populateSelects": {"protected": "", "description": "Populate each select element with the correct data for the day, month\nand year.", "guessedname": "_populateSelects", "guessedtype": "function"}, "destructor": {"protected": "", "description": "Descructor lifecycle implementation for the Datepicker class.\nPurges events attached to the node (and all child nodes).", "guessedname": "destructor", "guessedtype": "function"}, "_afterDisabledChangeDatePicker": {"description": "Fired after\n<a href=\"DatePickerSelect.html#config_disabled\">disabled</a> is set.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_uiSetDisabled", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Bind the events on the DatePickerSelect UI. Lifecycle.", "guessedname": "bindUI", "guessedtype": "function"}, "_renderCalendar": {"protected": "", "description": "Render the Calendar used inside the DatePicker.", "guessedname": "_renderCalendar", "guessedtype": "function"}, "_syncSelectsUI": {"protected": "", "description": "Sync the UI of each DOM Select element.", "guessedname": "_syncSelectsUI", "guessedtype": "function"}, "_populateMonths": {"protected": "", "description": "Populate the month select element with the correct data.", "guessedname": "_populateMonths", "guessedtype": "function"}, "_uiSetCurrentMonth": {"description": "Fired after\n<a href=\"DatePickerSelect.html#config_currentMonth\">currentMonth</a> is set.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_uiSetCurrentMonth", "guessedtype": "function"}, "_populateYears": {"protected": "", "description": "Populate the year select element with the correct data.", "guessedname": "_populateYears", "guessedtype": "function"}, "_populateSelect": {"return": {"type": "String", "description": ""}, "description": "Populate a select element with the data passed on the params.", "param": "{HTMLSelectElement} select Select to be populated", "protected": "", "params": [{"type": "HTMLSelectElement", "name": "select", "description": " Select to be populated"}, {"type": "Number", "name": "fromIndex", "description": " Index to start"}, {"type": "Number", "name": "toIndex", "description": " Index to end"}, {"type": "Object", "name": "values", "description": " Object with labels to be used as content of each\noption. Optional."}], "guessedname": "_populateSelect", "guessedtype": "function"}, "_selectCurrentYear": {"protected": "", "description": "Select the current year on the respective input field.", "guessedname": "_selectCurrentYear", "guessedtype": "function"}, "_getAppendOrder": {"protected": "", "return": {"type": "Array", "description": ""}, "description": "Gets an Array with the field elements in the correct order defined\non <a href=\"DatePickerSelect.html#config_appendOrder\">appendOrder</a>.", "guessedname": "_getAppendOrder", "guessedtype": "function"}, "_setTriggerValue": {"protected": "", "params": [{"type": "Object", "name": "dateObj", "description": " Object containing date information"}], "description": "Set the value of the trigger input with the date information.", "guessedname": "_setTriggerValue", "guessedtype": "function"}, "syncUI": {"protected": "", "description": "Sync the DatePickerSelect UI. Lifecycle.", "guessedname": "syncUI", "guessedtype": "function"}, "_populateDays": {"protected": "", "description": "Populate the day select element with the correct data.", "guessedname": "_populateDays", "guessedtype": "function"}, "_renderElements": {"protected": "", "description": "Render DOM elements for the DatePickerSelect.", "guessedname": "_renderElements", "guessedtype": "function"}, "_selectCurrentMonth": {"protected": "", "description": "Select the current month on the respective input field.", "guessedname": "_selectCurrentMonth", "guessedtype": "function"}, "_bindSelectEvents": {"protected": "", "description": "Bind events on each select element (change, keypress, etc).", "guessedname": "_bindSelectEvents", "guessedtype": "function"}, "renderUI": {"protected": "", "description": "Create the DOM structure for the DatePickerSelect. Lifecycle.", "guessedname": "renderUI", "guessedtype": "function"}}, "extends": "Component", "superclass": "Component", "file": "aui-datepicker.js", "guessedtype": "property", "shortname": "DatePickerSelect", "properties": {"DatePickerSelect.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}, "DatePickerSelect.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the DatePickerSelect.", "guessedname": "ATTRS", "guessedtype": "property"}, "DatePickerSelect.HTML_PARSER": {"type": "Object", "static": "", "description": "Object hash, defining how attribute values are to be parsed from\nmarkup contained in the widget's content box.", "guessedname": "HTML_PARSER", "guessedtype": "property"}}, "description": "<p><img src=\"assets/images/aui-calendar-datepicker-select/main.png\"/></p>\nA base class for DatePickerSelect, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Select a date from Calendar to select elements</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.DatePickerSelect({\nsrcNode: '#srcNodeId',\ncalendar: {\n// locale: 'pt-br',\ndateFormat: '%m/%d/%y',\nyearRange: [ 1970, 2009 ]\n}\n}).render();\n</code></pre>\nCheck the list of <a href=\"DatePickerSelect.html#configattributes\">Configuration Attributes</a> available for\nDatePickerSelect."}, "Plugin.Align": {"name": "Plugin.Align", "namespace": "", "module": "align-plugin", "methods": {"to": {"parm": "region {String || Node || HTMLElement || Object} The node or\nregion to align with. Defaults to the viewport region.", "description": "Aligns node with a point on another node or region.\nPossible alignment points are:\n<dl>\n<dt>tl</dt>\n<dd>top left</dd>\n<dt>tr</dt>\n<dd>top right</dd>\n<dt>bl</dt>\n<dd>bottom left</dd>\n<dt>br</dt>\n<dd>bottom right</dd>\n<dt>tc</dt>\n<dd>top center</dd>\n<dt>bc</dt>\n<dd>bottom center</dd>\n<dt>rc</dt>\n<dd>right center</dd>\n<dt>lc</dt>\n<dd>left center</dd>\n<dt>cc</dt>\n<dd>center center</dd>\n</dl>", "guessedname": "to", "guessedtype": "function"}, "center": {"parm": "region {Node || HTMLElement || Object} optional The node or\nregion to align with. Defaults to the viewport region.\nthe window is resized. If centering to viewport, this defaults\nto true, otherwise default is false.", "description": "Aligns the center of a node to the center of another node or region.", "guessedname": "center", "guessedtype": "function"}, "destroy": {"description": "Removes the resize handler, if any. This is called automatically\nwhen unplugged from the host node.", "guessedname": "destroy", "guessedtype": "function"}}, "param": "{Object} User configuration object", "file": "align-plugin.js", "shortname": "Plugin.Align", "description": "Node plugin which can be used to align a node with another node,\nregion, or the viewport."}, "OverlayMask": {"name": "OverlayMask", "configs": {"opacity": {"default": ".5", "type": "Number", "description": "CSS opacity of the mask.", "guessedname": "opacity", "guessedtype": "property"}, "alignPoints": {"default": "[ 'tl', 'tl' ]", "type": "Array", "description": "Points to align the <a href=\"Overlay.html\">Overlay</a> used as\nmask.", "guessedname": "alignPoints", "guessedtype": "property"}, "target": {"default": "document", "type": "Node | String", "description": "Node where the mask will be positioned and re-dimensioned. The\ndefault is the document, which means that if not specified the mask\ntakes the full screen.", "guessedname": "target", "guessedtype": "property"}, "shim": {"default": "True on IE.", "type": "boolean", "description": "Use shim option.", "guessedname": "shim", "guessedtype": "property"}, "zIndex": {"default": "1000", "type": "Number", "description": "zIndex of the OverlayMask.", "guessedname": "zIndex", "guessedtype": "property"}, "visible": {"default": "false", "type": "boolean", "description": "If true the Overlay is visible by default after the render phase.\nInherited from <a href=\"Overlay.html\">Overlay</a>.", "guessedname": "visible", "guessedtype": "property"}, "background": {"default": "null", "type": "String", "description": "Background color of the mask.", "guessedname": "background", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "A base class for OverlayMask, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Cross browser mask functionality to cover an element or the entire page</li>\n<li>Customizable mask (i.e., background, opacity)</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.OverlayMask().render();</code></pre>\nCheck the list of <a href=\"OverlayMask.html#configattributes\">Configuration Attributes</a> available for\nOverlayMask."}], "namespace": "", "module": "aui-overlay", "events": {"backgroundChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "backgroundChange", "description": "Fires when the value for the configuration attribute 'background' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "zIndexChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "zIndexChange", "description": "Fires when the value for the configuration attribute 'zIndex' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "visibleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "visibleChange", "description": "Fires when the value for the configuration attribute 'visible' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "opacityChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "opacityChange", "description": "Fires when the value for the configuration attribute 'opacity' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "shimChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "shimChange", "description": "Fires when the value for the configuration attribute 'shim' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "alignPointsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "alignPointsChange", "description": "Fires when the value for the configuration attribute 'alignPoints' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "targetChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "targetChange", "description": "Fires when the value for the configuration attribute 'target' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "OverlayMask", "methods": {"_uiSetVisible": {"description": "Invoke the <code>OverlayMask.superclass._uiSetVisible</code>. Used to\nreset the <code>opacity</code> to work around IE bugs when set opacity\nof hidden elements.", "param": "{boolean} val", "protected": "", "params": [{"type": "boolean", "name": "val", "description": ""}], "guessedname": "_uiSetVisible", "guessedtype": "function"}, "syncUI": {"protected": "", "description": "Sync the OverlayMask UI. Lifecycle.", "guessedname": "syncUI", "guessedtype": "function"}, "getTargetSize": {"return": {"type": "Object} Object containing the { height: height, width: width ", "description": "."}, "description": "Get the size of the\n<a href=\"OverlayMask.html#config_target\">target</a>. Used to dimension\nthe mask node.", "guessedname": "getTargetSize", "guessedtype": "function"}, "_uiSetXY": {"description": "UI Setter for the \n<a href=\"Paginator.html#config_xy\">XY</a> attribute.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_uiSetXY", "guessedtype": "function"}, "refreshMask": {"description": "Repaint the OverlayMask UI, respecting the\n<a href=\"OverlayMask.html#config_target\">target</a> size and the\n<a href=\"OverlayMask.html#config_alignPoints\">alignPoints</a>.", "guessedname": "refreshMask", "guessedtype": "function"}, "_afterVisibleChange": {"description": "Fires after the value of the\n<a href=\"Paginator.html#config_visible\">visible</a> attribute change.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_afterVisibleChange", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Bind the events on the OverlayMask UI. Lifecycle.", "guessedname": "bindUI", "guessedtype": "function"}, "_setOpacity": {"return": {"type": "Number", "description": ""}, "description": "Setter for <a href=\"Paginator.html#config_opacity\">opacity</a>.", "param": "{Number} v", "protected": "", "params": [{"type": "Number", "name": "v", "description": ""}], "guessedname": "_setOpacity", "guessedtype": "function"}, "_afterTargetChange": {"description": "Fires after the value of the\n<a href=\"Paginator.html#config_target\">target</a> attribute change.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_afterTargetChange", "guessedtype": "function"}}, "extends": "OverlayBase", "superclass": "OverlayBase", "file": "aui-overlay.js", "guessedtype": "property", "shortname": "OverlayMask", "properties": {"OverlayMask.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the OverlayMask.", "guessedname": "ATTRS", "guessedtype": "property"}, "OverlayMask.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}}, "description": "A base class for OverlayMask, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Cross browser mask functionality to cover an element or the entire page</li>\n<li>Customizable mask (i.e., background, opacity)</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.OverlayMask().render();</code></pre>\nCheck the list of <a href=\"OverlayMask.html#configattributes\">Configuration Attributes</a> available for\nOverlayMask."}, "SVGRect": {"name": "SVGRect", "constructors": [{"description": "<a href=\"http://www.w3.org/TR/SVG/\">SVG</a> implementation of the <a href=\"Rect.html\">`Rect`</a> class. \n`SVGRect` is not intended to be used directly. Instead, use the <a href=\"Rect.html\">`Rect`</a> class. \nIf the browser has <a href=\"http://www.w3.org/TR/SVG/\">SVG</a> capabilities, the <a href=\"Rect.html\">`Rect`</a> \nclass will point to the `SVGRect` class."}], "namespace": "", "module": "graphics", "guessedname": "SVGRect", "file": "graphics-svg-debug.js", "guessedtype": "function", "shortname": "SVGRect", "properties": {"_type": {"guessedname": "_type", "type": "String", "description": "Indicates the type of shape", "private": "", "guessedtype": "property"}}, "description": "<a href=\"http://www.w3.org/TR/SVG/\">SVG</a> implementation of the <a href=\"Rect.html\">`Rect`</a> class. \n`SVGRect` is not intended to be used directly. Instead, use the <a href=\"Rect.html\">`Rect`</a> class. \nIf the browser has <a href=\"http://www.w3.org/TR/SVG/\">SVG</a> capabilities, the <a href=\"Rect.html\">`Rect`</a> \nclass will point to the `SVGRect` class."}, "DataSourceCache": {"name": "DataSourceCache", "namespace": "", "module": "datasource", "uses": ["Plugin.Base, DataSourceCachePlugin"], "superclass": "Cache", "file": "datasource-cache.js", "extends": "Cache", "shortname": "DataSourceCache", "properties": {"NS": {"description": "The namespace for the plugin. This will be the property on the host which\nreferences the plugin instance.", "value": "\"cache\"", "static": "", "guessedname": "NS", "guessedtype": "property", "type": "String", "final": ""}, "NAME": {"description": "Class name.", "value": "\"dataSourceCache\"", "static": "", "guessedname": "NAME", "guessedtype": "property", "type": "String", "final": ""}}, "description": "DataSource plugin adds cache functionality."}, "CheckboxCellEditor": {"name": "CheckboxCellEditor", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "CheckboxCellEditor class.\nCheck the list of <a href=\"DropDownCellEditor.html#configattributes\">Configuration Attributes</a> available for\nCheckboxCellEditor."}], "namespace": "", "module": "aui-component", "guessedname": "CheckboxCellEditor", "extends": "A.CheckboxCellEditor", "superclass": "A.CheckboxCellEditor", "file": "aui-datatable.js", "guessedtype": "property", "shortname": "CheckboxCellEditor", "description": "CheckboxCellEditor class.\nCheck the list of <a href=\"DropDownCellEditor.html#configattributes\">Configuration Attributes</a> available for\nCheckboxCellEditor."}, "Plugin.DDWindowScroll": {"properties": {"NS": {"description": "The Scroll instance will be placed on the Drag instance under the winscroll namespace.", "default": "winscroll", "readonly": "", "protected": "", "static": "", "guessedname": "NAME", "guessedtype": "property", "type": "{String}"}}, "name": "Plugin.DDWindowScroll", "constructors": [{"description": "Extends the Scroll class to make the window scroll while dragging."}], "namespace": "Plugin", "module": "dd", "events": {"windowScrollChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "windowScrollChange", "description": "Fires when the value for the configuration attribute 'windowScroll' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "WS", "extends": "Scroll", "superclass": "Scroll", "file": "dd.js", "guessedtype": "function", "shortname": "DDWindowScroll", "configs": {"windowScroll": {"type": "Boolean", "description": "Turn on window scroll support, default: true", "guessedname": "windowScroll", "guessedtype": "property"}}, "description": "Extends the Scroll class to make the window scroll while dragging."}, "BarSeries": {"name": "BarSeries", "constructors": [{"description": "The BarSeries class renders bars positioned vertically along a category or time axis. The bars'\nlengths are proportional to the values they represent along a horizontal axis.\nand the relevant data points."}], "namespace": "", "module": "charts", "events": {"typeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "typeChange", "description": "Fires when the value for the configuration attribute 'type' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "directionChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "directionChange", "description": "Fires when the value for the configuration attribute 'direction' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "stylesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "stylesChange", "description": "Fires when the value for the configuration attribute 'styles' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "BarSeries", "methods": {"_getMarkerDimensions": {"return": {"type": "", "description": "Object"}, "description": "Helper method for calculating the size of markers.", "private": "", "params": [{"type": "Number", "name": "xcoord", "description": " The x-coordinate representing the data point for the marker."}, {"type": "Number", "name": "ycoord", "description": " The y-coordinate representing the data point for the marker."}, {"type": "Number", "name": "calculatedSize", "description": " The calculated size for the marker. For a `BarSeries` is it the width. For a `ColumnSeries` it is the height."}, {"type": "Number", "name": "offset", "description": " Distance of position offset dictated by other marker series in the same graph."}], "param": "{Number} xcoord The x-coordinate representing the data point for the marker.", "guessedname": "_getMarkerDimensions", "guessedtype": "function"}, "updateMarkerState": {"description": "Resizes and positions markers based on a mouse interaction.", "param": "{String} type state of the marker", "protected": "", "params": [{"type": "String", "name": "type", "description": " state of the marker"}, {"type": "Number", "name": "i", "description": " index of the marker"}], "guessedname": "updateMarkerState", "guessedtype": "function"}}, "uses": ["Histogram"], "superclass": "MarkerSeries", "file": "charts.js", "guessedtype": "property", "extends": "MarkerSeries", "shortname": "BarSeries", "configs": {"styles": {"type": "Object", "description": "Style properties used for drawing markers. This attribute is inherited from `MarkerSeries`. Below are the default values:\n<dl>\n<dt>fill</dt><dd>A hash containing the following values:\n<dl>\n<dt>color</dt><dd>Color of the fill. The default value is determined by the order of the series on the graph. The color\nwill be retrieved from the below array:<br/>\n`[\"#66007f\", \"#a86f41\", \"#295454\", \"#996ab2\", \"#e8cdb7\", \"#90bdbd\",\"#000000\",\"#c3b8ca\", \"#968373\", \"#678585\"]`\n</dd>\n<dt>alpha</dt><dd>Number from 0 to 1 indicating the opacity of the marker fill. The default value is 1.</dd>\n</dl>\n</dd>\n<dt>border</dt><dd>A hash containing the following values:\n<dl>\n<dt>color</dt><dd>Color of the border. The default value is determined by the order of the series on the graph. The color\nwill be retrieved from the below array:<br/>\n`[\"#205096\", \"#b38206\", \"#000000\", \"#94001e\", \"#9d6fa0\", \"#e55b00\", \"#5e85c9\", \"#adab9e\", \"#6ac291\", \"#006457\"]`\n<dt>alpha</dt><dd>Number from 0 to 1 indicating the opacity of the marker border. The default value is 1.</dd>\n<dt>weight</dt><dd>Number indicating the width of the border. The default value is 1.</dd>\n</dl>\n</dd>\n<dt>height</dt><dd>indicates the width of the marker. The default value is 12.</dd>\n<dt>over</dt><dd>hash containing styles for markers when highlighted by a `mouseover` event. The default \nvalues for each style is null. When an over style is not set, the non-over value will be used. For example,\nthe default value for `marker.over.fill.color` is equivalent to `marker.fill.color`.</dd>\n</dl>"}, "direction": {"type": "String", "description": "Indicates the direction of the category axis that the bars are plotted against.", "guessedname": "direction", "guessedtype": "property"}, "type": {"default": "bar", "type": "String", "description": "Read-only attribute indicating the type of series.", "guessedname": "type", "guessedtype": "property"}}, "description": "The BarSeries class renders bars positioned vertically along a category or time axis. The bars'\nlengths are proportional to the values they represent along a horizontal axis.\nand the relevant data points."}, "AUI~event~input": {"name": "AUI~event~input", "namespace": "", "module": "aui-event", "properties": {"A.Node.DOM_EVENTS.input": {"type": "Event.Handle", "static": "", "description": "A.Node.DOM_EVENTS.input event.", "guessedname": "input", "guessedtype": "property"}}, "guessedname": "L", "methods": {"void();": {"guessedname": "requires", "guessedtype": "property"}}, "file": "aui-event.js", "guessedtype": "property", "shortname": "AUI~event~input", "events": {"input": {"return": "{Event.Handle} the detach handle", "description": "This event fires when the value of the element changes, either as a result of\na keystroke, or from an input event.", "param": "type {String} 'input'", "params": [{"type": "String", "name": "type", "description": "  'input'"}, {"type": "Function", "name": "fn", "description": "  the callback function"}, {"type": "String|Node|etc", "name": "el", "description": "  the element to bind (typically document)"}, {"type": "Object", "name": "o", "description": "  optional context object"}, {"type": "", "name": "args", "description": " 0..n additional arguments that should be provided\nto the listener."}], "guessedname": "on", "guessedtype": "function"}}, "description": "An object that encapsulates text changed events for textareas and input\nelement of type text and password. This event only occurs when the element\nis focused."}, "A.io": {"name": "A.io", "namespace": "", "module": "aui-io", "methods": {"A.io.request": {"return": {"type": "IORequest", "description": ""}, "description": "Static method to invoke the <a href=\"IORequest.html\">IORequest</a>. Likewise <a href=\"io.html#method_io\">io</a>.", "param": "{String} uri URI to be requested.", "params": [{"type": "String", "name": "uri", "description": " URI to be requested."}, {"type": "Object", "name": "config", "description": " Configuration Object for the <a href=\"io.html\">IO</a>."}], "guessedname": "request", "guessedtype": "function"}}, "static": "", "file": "aui-io.js", "shortname": "A.io", "description": "Alloy IO extension"}, "Gridlines": {"name": "Gridlines", "configs": {"graph": {"type": "Graph", "description": "Indicates the `Graph` in which the gridlines \nare drawn.", "guessedname": "graph", "guessedtype": "property"}, "direction": {"type": "String", "description": "Indicates the direction of the gridline.", "guessedname": "direction", "guessedtype": "property"}, "axis": {"type": "Axis", "description": "Indicate the `Axis` in which to bind\nthe gridlines.", "guessedname": "axis", "guessedtype": "property"}}, "constructors": [{"description": "Gridlines draws gridlines on a Graph."}], "namespace": "", "module": "charts", "events": {"axisChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "axisChange", "description": "Fires when the value for the configuration attribute 'axis' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "directionChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "directionChange", "description": "Fires when the value for the configuration attribute 'direction' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "graphChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "graphChange", "description": "Fires when the value for the configuration attribute 'graph' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "Gridlines", "methods": {"_drawGridlines": {"private": "", "description": "Algorithm for drawing gridlines", "guessedname": "_drawGridlines", "guessedtype": "function"}, "draw": {"protected": "", "description": "Draws the gridlines", "guessedname": "draw", "guessedtype": "function"}, "_horizontalLine": {"description": "Algorithm for horizontal lines.", "param": "{Path} path Reference to path element", "params": [{"type": "Path", "name": "path", "description": " Reference to path element"}, {"type": "Object", "name": "pt", "description": " Coordinates corresponding to a major unit of an axis."}, {"type": "Number", "name": "w", "description": " Width of the Graph"}, {"type": "Number", "name": "h", "description": " Height of the Graph"}], "private": "", "guessedname": "_horizontalLine", "guessedtype": "function"}, "remove": {"private": "", "description": "Removes the Gridlines.", "guessedname": "remove", "guessedtype": "function"}, "_getDefaultStyles": {"protected": "", "return": {"type": "", "description": "Object"}, "description": "Gets the default value for the `styles` attribute. Overrides\nbase implementation.", "guessedname": "_getDefaultStyles", "guessedtype": "function"}, "_verticalLine": {"description": "Algorithm for vertical lines.", "param": "{Path} path Reference to path element", "params": [{"type": "Path", "name": "path", "description": " Reference to path element"}, {"type": "Object", "name": "pt", "description": " Coordinates corresponding to a major unit of an axis."}, {"type": "Number", "name": "w", "description": " Width of the Graph"}, {"type": "Number", "name": "h", "description": " Height of the Graph"}], "private": "", "guessedname": "_verticalLine", "guessedtype": "function"}}, "uses": ["Renderer"], "superclass": "Base", "file": "charts.js", "guessedtype": "property", "extends": "Base", "shortname": "Gridlines", "properties": {"_path": {"guessedname": "_path", "type": "Path", "description": "Reference to the `Path` element used for drawing Gridlines.", "private": "", "guessedtype": "property"}}, "description": "Gridlines draws gridlines on a Graph."}, "CanvasPieSlice": {"name": "CanvasPieSlice", "configs": {"arc": {"type": "Number", "description": "Arc of the slice.", "guessedname": "arc", "guessedtype": "property"}, "radius": {"type": "Number", "description": "Radius of the circle in which the pie slice is drawn", "guessedname": "radius", "guessedtype": "property"}, "startAngle": {"type": "Number", "description": "Starting angle in relation to a circle in which to begin the pie slice drawing.", "guessedname": "startAngle", "guessedtype": "property"}}, "constructors": [{"description": "Draws pie slices"}], "namespace": "", "module": "graphics", "guessedname": "CanvasPieSlice", "methods": {"_updateHandler": {"private": "", "description": "Change event listener", "guessedname": "_draw", "guessedtype": "function"}}, "file": "graphics-canvas.js", "guessedtype": "function", "shortname": "CanvasPieSlice", "properties": {"_type": {"guessedname": "_type", "type": "String", "description": "Indicates the type of shape", "private": "", "guessedtype": "property"}}, "description": "Draws pie slices"}, "NestedList": {"name": "NestedList", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "A base class for NestedList, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Nested sortable utility</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var nl = new A.NestedList({\nnodes: '#demo li',\ndropContainer: 'ul.droppable'\n});\n</code></pre>\nCheck the list of <a href=\"NestedList.html#configattributes\">Configuration Attributes</a> available for\nNestedList."}], "namespace": "", "module": "aui-nested-list", "guessedname": "NestedList", "methods": {"initializer": {"protected": "", "description": "Construction logic executed during NestedList instantiation. Lifecycle.", "guessedname": "initializer", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "aui-nested-list.js", "guessedtype": "property", "shortname": "NestedList", "properties": {"NestedList.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the NestedList.", "guessedname": "ATTRS", "guessedtype": "property"}, "NestedList.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}}, "description": "A base class for NestedList, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Nested sortable utility</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var nl = new A.NestedList({\nnodes: '#demo li',\ndropContainer: 'ul.droppable'\n});\n</code></pre>\nCheck the list of <a href=\"NestedList.html#configattributes\">Configuration Attributes</a> available for\nNestedList."}, "StackedBarSeries": {"name": "StackedBarSeries", "constructors": [{"description": "The StackedBarSeries renders bar chart in which series are stacked horizontally to show\ntheir contribution to the cumulative total."}], "namespace": "", "module": "charts", "events": {"negativeBaseValuesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "negativeBaseValuesChange", "description": "Fires when the value for the configuration attribute 'negativeBaseValues' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "positiveBaseValuesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "positiveBaseValuesChange", "description": "Fires when the value for the configuration attribute 'positiveBaseValues' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "typeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "typeChange", "description": "Fires when the value for the configuration attribute 'type' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "directionChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "directionChange", "description": "Fires when the value for the configuration attribute 'direction' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "stylesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "stylesChange", "description": "Fires when the value for the configuration attribute 'styles' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "StackedBarSeries", "methods": {"drawSeries": {"protected": "", "description": "Draws the series.", "guessedname": "drawSeries", "guessedtype": "function"}, "updateMarkerState": {"description": "Resizes and positions markers based on a mouse interaction.", "param": "{String} type state of the marker", "protected": "", "params": [{"type": "String", "name": "type", "description": " state of the marker"}, {"type": "Number", "name": "i", "description": " index of the marker"}], "guessedname": "updateMarkerState", "guessedtype": "function"}, "_getPlotDefaults": {"protected": "", "return": {"type": "", "description": "Object"}, "description": "Returns default values for the `styles` attribute.", "guessedname": "_getPlotDefaults", "guessedtype": "function"}}, "uses": ["StackingUtil"], "superclass": "BarSeries", "file": "charts.js", "guessedtype": "property", "extends": "BarSeries", "shortname": "StackedBarSeries", "configs": {"styles": {"type": "Object", "description": "Style properties used for drawing markers. This attribute is inherited from `BarSeries`. Below are the default values:\n<dl>\n<dt>fill</dt><dd>A hash containing the following values:\n<dl>\n<dt>color</dt><dd>Color of the fill. The default value is determined by the order of the series on the graph. The color\nwill be retrieved from the below array:<br/>\n`[\"#66007f\", \"#a86f41\", \"#295454\", \"#996ab2\", \"#e8cdb7\", \"#90bdbd\",\"#000000\",\"#c3b8ca\", \"#968373\", \"#678585\"]`\n</dd>\n<dt>alpha</dt><dd>Number from 0 to 1 indicating the opacity of the marker fill. The default value is 1.</dd>\n</dl>\n</dd>\n<dt>border</dt><dd>A hash containing the following values:\n<dl>\n<dt>color</dt><dd>Color of the border. The default value is determined by the order of the series on the graph. The color\nwill be retrieved from the below array:<br/>\n`[\"#205096\", \"#b38206\", \"#000000\", \"#94001e\", \"#9d6fa0\", \"#e55b00\", \"#5e85c9\", \"#adab9e\", \"#6ac291\", \"#006457\"]`\n<dt>alpha</dt><dd>Number from 0 to 1 indicating the opacity of the marker border. The default value is 1.</dd>\n<dt>weight</dt><dd>Number indicating the width of the border. The default value is 1.</dd>\n</dl>\n</dd>\n<dt>height</dt><dd>indicates the width of the marker. The default value is 24.</dd>\n<dt>over</dt><dd>hash containing styles for markers when highlighted by a `mouseover` event. The default \nvalues for each style is null. When an over style is not set, the non-over value will be used. For example,\nthe default value for `marker.over.fill.color` is equivalent to `marker.fill.color`.</dd>\n</dl>"}, "direction": {"default": "vertical", "type": "String", "description": "Direction of the series", "guessedname": "direction", "guessedtype": "property"}, "type": {"default": "stackedBar", "type": "String", "description": "Read-only attribute indicating the type of series.", "guessedname": "type", "guessedtype": "property"}, "negativeBaseValues": {"default": "null", "type": "Array", "guessedname": "negativeBaseValues", "private": "", "guessedtype": "property"}, "positiveBaseValues": {"default": "null", "type": "Array", "guessedname": "positiveBaseValues", "private": "", "guessedtype": "property"}}, "description": "The StackedBarSeries renders bar chart in which series are stacked horizontally to show\ntheir contribution to the cumulative total."}, "Test.Assert": {"name": "Test.Assert", "namespace": "Test", "module": "test", "guessedname": "Assert", "methods": {"isTrue": {"description": "Asserts that a value is true. This uses the triple equals sign\nso no type cohersion may occur.", "param": "{Object} actual The actual value to test.", "static": "", "guessedname": "isTrue", "guessedtype": "function", "params": [{"type": "Object", "name": "actual", "description": " The actual value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "isFalse": {"description": "Asserts that a value is false. This uses the triple equals sign\nso no type cohersion may occur.", "param": "{Object} actual The actual value to test.", "static": "", "guessedname": "isFalse", "guessedtype": "function", "params": [{"type": "Object", "name": "actual", "description": " The actual value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "isNotNull": {"description": "Asserts that a value is not null. This uses the triple equals sign\nso no type cohersion may occur.", "param": "{Object} actual The actual value to test.", "static": "", "guessedname": "isNotNull", "guessedtype": "function", "params": [{"type": "Object", "name": "actual", "description": " The actual value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "fail": {"description": "Forces an assertion error to occur.", "param": "{String} message (Optional) The message to display with the failure.", "static": "", "guessedname": "fail", "guessedtype": "function", "params": [{"type": "String", "name": "message", "description": " (Optional) The message to display with the failure."}]}, "isFunction": {"description": "Asserts that a value is a function.", "param": "{Object} actual The value to test.", "static": "", "guessedname": "isFunction", "guessedtype": "function", "params": [{"type": "Object", "name": "actual", "description": " The value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "isNaN": {"description": "Asserts that a value is not a number.", "param": "{Object} actual The value to test.", "static": "", "guessedname": "isNaN", "guessedtype": "function", "params": [{"type": "Object", "name": "actual", "description": " The value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "isBoolean": {"description": "Asserts that a value is a Boolean.", "param": "{Object} actual The value to test.", "static": "", "guessedname": "isBoolean", "guessedtype": "function", "params": [{"type": "Object", "name": "actual", "description": " The value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "areNotSame": {"description": "Asserts that a value is not the same as another. This uses the triple equals sign\nso no type cohersion may occur.", "param": "{Object} unexpected The unexpected value.", "static": "", "guessedname": "areNotSame", "guessedtype": "function", "params": [{"type": "Object", "name": "unexpected", "description": " The unexpected value."}, {"type": "Object", "name": "actual", "description": " The actual value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "isNotNaN": {"description": "Asserts that a value is not the special NaN value.", "param": "{Object} actual The value to test.", "static": "", "guessedname": "isNotNaN", "guessedtype": "function", "params": [{"type": "Object", "name": "actual", "description": " The value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "areNotEqual": {"description": "Asserts that a value is not equal to another. This uses the double equals sign\nso type cohersion may occur.", "param": "{Object} unexpected The unexpected value.", "static": "", "guessedname": "areNotEqual", "guessedtype": "function", "params": [{"type": "Object", "name": "unexpected", "description": " The unexpected value."}, {"type": "Object", "name": "actual", "description": " The actual value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "areSame": {"description": "Asserts that a value is the same as another. This uses the triple equals sign\nso no type cohersion may occur.", "param": "{Object} expected The expected value.", "static": "", "guessedname": "areSame", "guessedtype": "function", "params": [{"type": "Object", "name": "expected", "description": " The expected value."}, {"type": "Object", "name": "actual", "description": " The actual value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "_getCount": {"protected": "", "static": "", "description": "Returns the number of assertions that have been performed.", "guessedname": "_getCount", "guessedtype": "function"}, "isUndefined": {"description": "Asserts that a value is undefined. This uses the triple equals sign\nso no type cohersion may occur.", "param": "{Object} actual The actual value to test.", "static": "", "guessedname": "isUndefined", "guessedtype": "function", "params": [{"type": "Object", "name": "actual", "description": " The actual value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "isArray": {"description": "Asserts that a value is an array.", "param": "{Object} actual The value to test.", "static": "", "guessedname": "isArray", "guessedtype": "function", "params": [{"type": "Object", "name": "actual", "description": " The value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "isTypeOf": {"description": "Asserts that a value is of a particular type.", "param": "{String} expectedType The expected type of the variable.", "static": "", "guessedname": "isTypeOf", "guessedtype": "function", "params": [{"type": "String", "name": "expectedType", "description": " The expected type of the variable."}, {"type": "Object", "name": "actualValue", "description": " The actual value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "_formatMessage": {"return": {"type": "String", "description": "The final error message, containing either or both."}, "description": "Formats a message so that it can contain the original assertion message\nin addition to the custom message.", "param": "{String} customMessage The message passed in by the developer.", "protected": "", "static": "", "guessedname": "_formatMessage", "guessedtype": "function", "params": [{"type": "String", "name": "customMessage", "description": " The message passed in by the developer."}, {"type": "String", "name": "defaultMessage", "description": " The message created by the error by default."}]}, "_increment": {"protected": "", "static": "", "description": "Increments the number of assertions that have been performed.", "guessedname": "_increment", "guessedtype": "function"}, "areEqual": {"description": "Asserts that a value is equal to another. This uses the double equals sign\nso type cohersion may occur.", "param": "{Object} expected The expected value.", "static": "", "guessedname": "areEqual", "guessedtype": "function", "params": [{"type": "Object", "name": "expected", "description": " The expected value."}, {"type": "Object", "name": "actual", "description": " The actual value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "isNumber": {"description": "Asserts that a value is a number.", "param": "{Object} actual The value to test.", "static": "", "guessedname": "isNumber", "guessedtype": "function", "params": [{"type": "Object", "name": "actual", "description": " The value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "isObject": {"description": "Asserts that a value is an object.", "param": "{Object} actual The value to test.", "static": "", "guessedname": "isObject", "guessedtype": "function", "params": [{"type": "Object", "name": "actual", "description": " The value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "isString": {"description": "Asserts that a value is a string.", "param": "{Object} actual The value to test.", "static": "", "guessedname": "isString", "guessedtype": "function", "params": [{"type": "Object", "name": "actual", "description": " The value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "isNotUndefined": {"description": "Asserts that a value is not undefined. This uses the triple equals sign\nso no type cohersion may occur.", "param": "{Object} actual The actual value to test.", "static": "", "guessedname": "isNotUndefined", "guessedtype": "function", "params": [{"type": "Object", "name": "actual", "description": " The actual value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "isNull": {"description": "Asserts that a value is null. This uses the triple equals sign\nso no type cohersion may occur.", "param": "{Object} actual The actual value to test.", "static": "", "guessedname": "isNull", "guessedtype": "function", "params": [{"type": "Object", "name": "actual", "description": " The actual value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "_reset": {"protected": "", "static": "", "description": "Resets the number of assertions that have been performed to 0.", "guessedname": "_reset", "guessedtype": "function"}, "isInstanceOf": {"description": "Asserts that a value is an instance of a particular object. This may return\nincorrect results when comparing objects from one frame to constructors in\nanother frame. For best results, don't use in a cross-frame manner.", "param": "{Function} expected The function that the object should be an instance of.", "static": "", "guessedname": "isInstanceOf", "guessedtype": "function", "params": [{"type": "Function", "name": "expected", "description": " The function that the object should be an instance of."}, {"type": "Object", "name": "actual", "description": " The object to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}}, "static": "", "file": "test.js", "guessedtype": "property", "shortname": "Assert", "properties": {"_asserts": {"guessedname": "_asserts", "type": "int", "description": "The number of assertions performed.", "private": "", "guessedtype": "property"}}, "description": "The Assert object provides functions to test JavaScript values against\nknown and expected results. Whenever a comparison (assertion) fails,\nan error is thrown."}, "AutoCompleteHighlighters": {"name": "AutoCompleteHighlighters", "description": "Provides pre-built result highlighters for AutoComplete.", "namespace": "", "module": "autocomplete", "guessedname": "Highlight", "static": "", "file": "autocomplete-highlighters.js", "guessedtype": "property", "shortname": "AutoCompleteHighlighters", "methods": {"phraseMatchFold": {"return": {"type": "Array", "description": "Highlighted results"}, "description": "Accent-folding version of <code>phraseMatch()</code>.", "param": "{String} query Query to match", "static": "", "guessedname": "phraseMatchFold", "guessedtype": "function", "params": [{"type": "String", "name": "query", "description": " Query to match"}, {"type": "Array", "name": "results", "description": " Results to highlight"}]}, "phraseMatch": {"return": {"type": "Array", "description": "Highlighted results"}, "description": "Highlights the complete query as a phrase anywhere within a result.\nCase-insensitive.", "param": "{String} query Query to match", "static": "", "guessedname": "phraseMatch", "guessedtype": "function", "params": [{"type": "String", "name": "query", "description": " Query to match"}, {"type": "Array", "name": "results", "description": " Results to highlight"}]}, "charMatchFold": {"return": {"type": "Array", "description": "Highlighted results"}, "description": "Accent-folding version of <code>charMatch()</code>.", "param": "{String} query Query to match", "static": "", "guessedname": "charMatchFold", "guessedtype": "function", "params": [{"type": "String", "name": "query", "description": " Query to match"}, {"type": "Array", "name": "results", "description": " Results to highlight"}]}, "subWordMatchFold": {"return": {"type": "Array", "description": "Highlighted results"}, "description": "Accent-folding version of <code>subWordMatch()</code>.", "param": "{String} query Query to match", "static": "", "guessedname": "subWordMatchFold", "guessedtype": "function", "params": [{"type": "String", "name": "query", "description": " Query to match"}, {"type": "Array", "name": "results", "description": " Results to highlight"}]}, "charMatchCase": {"return": {"type": "Array", "description": "Highlighted results"}, "description": "Case-sensitive version of <code>charMatch()</code>.", "param": "{String} query Query to match", "static": "", "guessedname": "charMatchCase", "guessedtype": "function", "params": [{"type": "String", "name": "query", "description": " Query to match"}, {"type": "Array", "name": "results", "description": " Results to highlight"}]}, "startsWith": {"return": {"type": "Array", "description": "Highlighted results"}, "description": "Highlights the complete query as a phrase at the beginning of a result.\nCase-insensitive.", "param": "{String} query Query to match", "static": "", "guessedname": "startsWith", "guessedtype": "function", "params": [{"type": "String", "name": "query", "description": " Query to match"}, {"type": "Array", "name": "results", "description": " Results to highlight"}]}, "subWordMatch": {"return": {"type": "Array", "description": "Highlighted results"}, "description": "Highlights portions of results in which words from the query match either\nwhole words or parts of words in the result. Non-word characters like\nwhitespace and certain punctuation are ignored. Case-insensitive.", "param": "{String} query Query to match", "static": "", "guessedname": "subWordMatch", "guessedtype": "function", "params": [{"type": "String", "name": "query", "description": " Query to match"}, {"type": "Array", "name": "results", "description": " Results to highlight"}]}, "wordMatchCase": {"return": {"type": "Array", "description": "Highlighted results"}, "description": "Case-sensitive version of <code>wordMatch()</code>.", "param": "{String} query Query to match", "static": "", "guessedname": "wordMatchCase", "guessedtype": "function", "params": [{"type": "String", "name": "query", "description": " Query to match"}, {"type": "Array", "name": "results", "description": " Results to highlight"}]}, "startsWithFold": {"return": {"type": "Array", "description": "Highlighted results"}, "description": "Accent-folding version of <code>startsWith()</code>.", "param": "{String} query Query to match", "static": "", "guessedname": "startsWithFold", "guessedtype": "function", "params": [{"type": "String", "name": "query", "description": " Query to match"}, {"type": "Array", "name": "results", "description": " Results to highlight"}]}, "charMatch": {"return": {"type": "Array", "description": "Highlighted results"}, "description": "Highlights any individual query character that occurs anywhere in a\nresult. Case-insensitive.", "param": "{String} query Query to match", "static": "", "guessedname": "charMatch", "guessedtype": "function", "params": [{"type": "String", "name": "query", "description": " Query to match"}, {"type": "Array", "name": "results", "description": " Results to highlight"}]}, "wordMatch": {"return": {"type": "Array", "description": "Highlighted results"}, "description": "Highlights individual words in results that are also in the query.\nNon-word characters like punctuation are ignored. Case-insensitive.", "param": "{String} query Query to match", "static": "", "guessedname": "wordMatch", "guessedtype": "function", "params": [{"type": "String", "name": "query", "description": " Query to match"}, {"type": "Array", "name": "results", "description": " Results to highlight"}]}, "startsWithCase": {"return": {"type": "Array", "description": "Highlighted results"}, "description": "Case-sensitive version of <code>startsWith()</code>.", "param": "{String} query Query to match", "static": "", "guessedname": "startsWithCase", "guessedtype": "function", "params": [{"type": "String", "name": "query", "description": " Query to match"}, {"type": "Array", "name": "results", "description": " Results to highlight"}]}, "phraseMatchCase": {"return": {"type": "Array", "description": "Highlighted results"}, "description": "Case-sensitive version of <code>phraseMatch()</code>.", "param": "{String} query Query to match", "static": "", "guessedname": "phraseMatchCase", "guessedtype": "function", "params": [{"type": "String", "name": "query", "description": " Query to match"}, {"type": "Array", "name": "results", "description": " Results to highlight"}]}, "subWordMatchCase": {"return": {"type": "Array", "description": "Highlighted results"}, "description": "Case-sensitive version of <code>subWordMatch()</code>.", "param": "{String} query Query to match", "static": "", "guessedname": "subWordMatchCase", "guessedtype": "function", "params": [{"type": "String", "name": "query", "description": " Query to match"}, {"type": "Array", "name": "results", "description": " Results to highlight"}]}, "wordMatchFold": {"return": {"type": "Array", "description": "Highlighted results"}, "description": "Accent-folding version of <code>wordMatch()</code>.", "param": "{String} query Query to match", "static": "", "guessedname": "wordMatchFold", "guessedtype": "function", "params": [{"type": "String", "name": "query", "description": " Query to match"}, {"type": "Array", "name": "results", "description": " Results to highlight"}]}}}, "LeftAxisLayout": {"name": "LeftAxisLayout", "constructors": [{"description": "Algorithmic strategy for rendering a left axis."}], "namespace": "", "module": "charts", "guessedname": "LeftAxisLayout", "methods": {"getLineStart": {"protected": "", "return": {"type": "Object", "description": ""}, "description": "Calculates the coordinates for the first point on an axis.", "guessedname": "getLineStart", "guessedtype": "function"}, "_getDefaultMargins": {"guessedname": "_getDefaultMargins", "return": {"type": "", "description": "Object"}, "description": "Default margins for text fields.", "private": "", "guessedtype": "function"}, "setCalculatedSize": {"protected": "", "description": "Sets the width of the axis based on its contents.", "guessedname": "setCalculatedSize", "guessedtype": "function"}, "positionTitle": {"description": "Rotate and position title.", "param": "{HTMLElement} label to rotate position", "protected": "", "params": [{"type": "HTMLElement", "name": "label", "description": " to rotate position"}], "guessedname": "positionTitle", "guessedtype": "function"}, "offsetNodeForTick": {"description": "Adjust the position of the Axis widget's content box for internal axes.", "param": "{Node} cb Content box of the Axis.", "protected": "", "params": [{"type": "Node", "name": "cb", "description": " Content box of the Axis."}], "guessedname": "offsetNodeForTick", "guessedtype": "function"}, "positionLabel": {"description": "Rotate and position labels.", "param": "{HTMLElement} label to rotate position", "protected": "", "params": [{"type": "HTMLElement", "name": "label", "description": " to rotate position"}, {"type": "Object", "name": "pt", "description": " hash containing the x and y coordinates in which the label will be positioned\nagainst."}], "guessedname": "positionLabel", "guessedtype": "function"}, "drawTick": {"description": "Draws a tick", "param": "{Object} pt Point on the axis in which the tick will intersect.", "protected": "", "params": [{"type": "Object", "name": "pt", "description": " Point on the axis in which the tick will intersect."}, {"type": "Object", "name": "tickStyle", "description": " Hash of properties to apply to the tick."}], "guessedname": "drawTick", "guessedtype": "function"}, "getLabelPoint": {"return": {"type": "Object", "description": ""}, "description": "Calculates the point for a label.", "param": "{Object} point Point on the axis in which the tick will intersect.", "protected": "", "params": [{"type": "Object", "name": "point", "description": " Point on the axis in which the tick will intersect."}], "guessedname": "getLabelPoint", "guessedtype": "function"}, "setTickOffset": {"protected": "", "description": "Sets the length of the tick on either side of the axis line.", "guessedname": "setTickOffsets", "guessedtype": "function"}, "updateMaxLabelSize": {"description": "Updates the value for the `maxLabelSize` for use in calculating total size.", "param": "{HTMLElement} label to measure", "protected": "", "params": [{"type": "HTMLElement", "name": "label", "description": " to measure"}], "guessedname": "updateMaxLabelSize", "guessedtype": "function"}, "setSizeAndPosition": {"protected": "", "description": "Calculates the size and positions the content elements.", "guessedname": "setSizeAndPosition", "guessedtype": "function"}}, "file": "charts.js", "guessedtype": "function", "shortname": "LeftAxisLayout", "description": "Algorithmic strategy for rendering a left axis."}, "Loader": {"name": "Loader", "constructors": [{"params": [{"type": "object", "name": "o", "description": " an optional set of configuration options.  Valid options:\n<ul>\n<li>base:\nThe base dir</li>\n<li>comboBase:\nThe YUI combo service base dir. Ex: http://yui.yahooapis.com/combo?</li>\n<li>root:\nThe root path to prepend to module names for the combo service.\nEx: 2.5.2/build/</li>\n<li>filter:.\nA filter to apply to result urls.  This filter will modify the default\npath for all modules.  The default path for the YUI library is the\nminified version of the files (e.g., event-min.js).  The filter property\ncan be a predefined filter or a custom filter.  The valid predefined\nfilters are:\n<dl>\n<dt>DEBUG</dt>\n<dd>Selects the debug versions of the library (e.g., event-debug.js).\nThis option will automatically include the Logger widget</dd>\n<dt>RAW</dt>\n<dd>Selects the non-minified version of the library (e.g., event.js).\n</dd>\n</dl>\nYou can also define a custom filter, which must be an object literal\ncontaining a search expression and a replace string:\n<pre>\nmyFilter: &#123;\n'searchExp': \"-min\\\\.js\",\n'replaceStr': \"-debug.js\"\n&#125;\n</pre>\n</li>\n<li>filters: per-component filter specification.  If specified\nfor a given component, this overrides the filter config. _Note:_ This does not work on combo urls, use the filter property instead.</li>\n<li>combine:\nUse the YUI combo service to reduce the number of http connections\nrequired to load your dependencies</li>\n<li>ignore:\nA list of modules that should never be dynamically loaded</li>\n<li>force:\nA list of modules that should always be loaded when required, even if\nalready present on the page</li>\n<li>insertBefore:\nNode or id for a node that should be used as the insertion point for\nnew nodes</li>\n<li>charset:\ncharset for dynamic nodes (deprecated, use jsAttributes or cssAttributes)\n</li>\n<li>jsAttributes: object literal containing attributes to add to script\nnodes</li>\n<li>cssAttributes: object literal containing attributes to add to link\nnodes</li>\n<li>timeout:\nThe number of milliseconds before a timeout occurs when dynamically\nloading nodes.  If not set, there is no timeout</li>\n<li>context:\nexecution context for all callbacks</li>\n<li>onSuccess:\ncallback for the 'success' event</li>\n<li>onFailure: callback for the 'failure' event</li>\n<li>onCSS: callback for the 'CSSComplete' event.  When loading YUI\ncomponents with CSS the CSS is loaded first, then the script.  This\nprovides a moment you can tie into to improve\nthe presentation of the page while the script is loading.</li>\n<li>onTimeout:\ncallback for the 'timeout' event</li>\n<li>onProgress:\ncallback executed each time a script or css file is loaded</li>\n<li>modules:\nA list of module definitions.  See Loader.addModule for the supported\nmodule metadata</li>\n<li>groups:\nA list of group definitions.  Each group can contain specific definitions\nfor base, comboBase, combine, and accepts a list of modules.  See above\nfor the description of these properties.</li>\n<li>2in3: the version of the YUI 2 in 3 wrapper to use.  The intrinsic\nsupport for YUI 2 modules in YUI 3 relies on versions of the YUI 2\ncomponents inside YUI 3 module wrappers.  These wrappers\nchange over time to accomodate the issues that arise from running YUI 2\nin a YUI 3 sandbox.</li>\n<li>yui2: when using the 2in3 project, you can select the version of\nYUI 2 to use.  Valid values *  are 2.2.2, 2.3.1, 2.4.1, 2.5.2, 2.6.0,\n2.7.0, 2.8.0, and 2.8.1 [default] -- plus all versions of YUI 2\ngoing forward.</li>\n</ul>"}], "description": "Loader dynamically loads script and css files.  It includes the dependency\ninfo for the version of the library in use, and will automatically pull in\ndependencies for the modules requested.  It supports rollup files and will\nautomatically use these when appropriate in order to minimize the number of\nhttp connections required to load all of the dependencies.  It can load the\nfiles from the Yahoo! CDN, and it can utilize the combo service provided on\nthis network to reduce the number of http connections required to download\nYUI files.\nWhile the loader can be instantiated by the end user, it normally is not."}], "namespace": "", "module": "loader", "guessedname": "Loader", "see": "YUI.use for the normal use case.  The use function automatically will\npull in missing dependencies.", "methods": {"partial": {"unimplemented": "", "description": "(Unimplemented)", "guessedname": "partial", "guessedtype": "function"}, "getRequires": {"return": {"type": "array", "description": "the expanded requirement list."}, "description": "Returns an object containing properties for all modules required\nin order to load the requested module", "param": "{object}  mod The module definition from moduleInfo.", "params": [{"type": "object", "name": "mod", "description": " The module definition from moduleInfo."}], "guessedname": "getRequires", "guessedtype": "function"}, "formatSkin": {"return": {"type": "string", "description": "the full skin module name."}, "description": "Returns the skin module name for the specified skin name.  If a\nmodule name is supplied, the returned skin module name is\nspecific to the module passed in.", "param": "{string} skin the name of the skin.", "params": [{"type": "string", "name": "skin", "description": " the name of the skin."}, {"type": "string", "name": "mod", "description": " optional: the name of a module to skin."}], "guessedname": "formatSkin", "guessedtype": "function"}, "filterRequires": {"return": {"type": "Array", "description": "The new array of exploded requirements"}, "description": "Explodes the required array to remove aliases and replace them with real modules", "param": "{Array} r The original requires array", "params": [{"type": "Array", "name": "r", "description": " The original requires array"}], "guessedname": "filterRequires", "guessedtype": "function"}, "onCSS": {"type": "function", "description": "Callback for the 'CSSComplete' event.  When loading YUI components\nwith CSS the CSS is loaded first, then the script.  This provides\na moment you can tie into to improve the presentation of the page\nwhile the script is loading."}, "onTimeout": {"type": "function", "description": "Callback that will be executed if a timeout occurs"}, "getProvides": {"return": {"type": "object", "description": "what this module provides."}, "description": "Returns a hash of module names the supplied module satisfies.", "param": "{string} name The name of the module.", "params": [{"type": "string", "name": "name", "description": " The name of the module."}], "guessedname": "getProvides", "guessedtype": "function"}, "_continue": {"private": "", "description": "Once a loader operation is completely finished, process any additional queued items.", "guessedname": "_continue", "guessedtype": "function"}, "_reduce": {"guessedname": "_reduce", "return": {"type": "object", "description": "the reduced dependency hash."}, "description": "Remove superceded modules and loaded modules.  Called by\ncalculate() after we have the mega list of all dependencies", "private": "", "guessedtype": "function"}, "calculate": {"param": "{object} o optional options object.", "params": [{"type": "object", "name": "o", "description": " optional options object."}, {"type": "string", "name": "type", "description": " optional argument to prune modules."}], "description": "Calculates the dependency tree, the result is stored in the sorted\nproperty.", "guessedname": "calculate", "guessedtype": "function"}, "_finish": {"description": "Handles the queue when a module has been loaded for all cases", "param": "{String} msg The message from Loader", "params": [{"type": "String", "name": "msg", "description": " The message from Loader"}, {"type": "Boolean", "name": "success", "description": " A boolean denoting success or failure"}], "private": "", "guessedname": "_finish", "guessedtype": "function"}, "_filter": {"return": {"type": "string", "description": "the filtered string."}, "description": "Apply filter defined for this instance to a url/path", "private": "", "params": [{"type": "string", "name": "u", "description": " the string to filter."}, {"type": "string", "name": "name", "description": " the name of the module, if we are processing\na single module as opposed to a combined url."}], "param": "{string} u the string to filter.", "guessedname": "_filter", "guessedtype": "function"}, "_addSkin": {"return": {"type": "string", "description": "the module name for the skin."}, "description": "Adds the skin def to the module info", "private": "", "params": [{"type": "string", "name": "skin", "description": " the name of the skin."}, {"type": "string", "name": "mod", "description": " the name of the module."}, {"type": "string", "name": "parent", "description": " parent module if this is a skin of a\nsubmodule or plugin."}], "param": "{string} skin the name of the skin.", "guessedname": "_addSkin", "guessedtype": "function"}, "_explode": {"private": "", "description": "Inspects the required modules list looking for additional\ndependencies.  Expands the required list to include all\nrequired modules.  Called by calculate()", "guessedname": "_explode", "guessedtype": "function"}, "_onSuccess": {"private": "", "description": "The default Loader onSuccess handler, calls this.onSuccess with a payload", "guessedname": "_onSuccess", "guessedtype": "function"}, "hash": {"return": {"type": "Object", "description": "Object hash (js and css) of two object hashes of file lists, with the module name as the key"}, "description": "Returns an Object hash of hashes built from `loader.sorted` or from an arbitrary list of sorted modules.", "private": "", "params": [{"type": "Boolean", "name": "[calc=false]", "description": " Perform a loader.calculate() before anything else"}, {"type": "Array", "name": "[s=loader.sorted]", "description": " An override for the loader.sorted array"}], "param": "{Boolean} [calc=false] Perform a loader.calculate() before anything else", "guessedname": "hash", "guessedtype": "function", "example": "This method can be used as an off-line dep calculator\nvar Y = YUI();\nvar loader = new Y.Loader({\nfilter: 'debug',\nbase: '../../',\nroot: 'build/',\ncombine: true,\nrequire: ['node', 'dd', 'console']\n});\nvar out = loader.hash(true);"}, "_addLangPack": {"return": {"type": "Object", "description": "The module definition"}, "description": "Creates a \"psuedo\" package for languages provided in the lang array", "param": "{String} lang The language to create", "params": [{"type": "String", "name": "lang", "description": " The language to create"}, {"type": "Object", "name": "m", "description": " The module definition to create the language pack around"}, {"type": "String", "name": "packName", "description": " The name of the package (e.g: lang/datatype-date-en-US)"}], "guessedname": "_addLangPack", "guessedtype": "function"}, "onProgress": {"type": "function", "description": "Callback executed each time a script or css file is loaded"}, "addModule": {"return": {"type": "object", "description": "the module definition or null if\nthe object passed in did not provide all required attributes."}, "description": "Add a new module to the component metadata.\n<dl>\n<dt>name:</dt>       <dd>required, the component name</dd>\n<dt>type:</dt>       <dd>required, the component type (js or css)\n</dd>\n<dt>path:</dt>       <dd>required, the path to the script from\n\"base\"</dd>\n<dt>requires:</dt>   <dd>array of modules required by this\ncomponent</dd>\n<dt>optional:</dt>   <dd>array of optional modules for this\ncomponent</dd>\n<dt>supersedes:</dt> <dd>array of the modules this component\nreplaces</dd>\n<dt>after:</dt>      <dd>array of modules the components which, if\npresent, should be sorted above this one</dd>\n<dt>after_map:</dt>  <dd>faster alternative to 'after' -- supply\na hash instead of an array</dd>\n<dt>rollup:</dt>     <dd>the number of superseded modules required\nfor automatic rollup</dd>\n<dt>fullpath:</dt>   <dd>If fullpath is specified, this is used\ninstead of the configured base + path</dd>\n<dt>skinnable:</dt>  <dd>flag to determine if skin assets should\nautomatically be pulled in</dd>\n<dt>submodules:</dt> <dd>a hash of submodules</dd>\n<dt>group:</dt>      <dd>The group the module belongs to -- this\nis set automatically when it is added as part of a group\nconfiguration.</dd>\n<dt>lang:</dt>\n<dd>array of BCP 47 language tags of languages for which this\nmodule has localized resource bundles,\ne.g., [\"en-GB\",\"zh-Hans-CN\"]</dd>\n<dt>condition:</dt>\n<dd>Specifies that the module should be loaded automatically if\na condition is met.  This is an object with up to three fields:\n[trigger] - the name of a module that can trigger the auto-load\n[test] - a function that returns true when the module is to be\nloaded.\n[when] - specifies the load order of the conditional module\nwith regard to the position of the trigger module.\nThis should be one of three values: 'before', 'after', or\n'instead'.  The default is 'after'.\n</dd>\n<dt>testresults:</dt><dd>a hash of test results from Y.Features.all()</dd>\n</dl>", "param": "{object} o An object containing the module data.", "params": [{"type": "object", "name": "o", "description": " An object containing the module data."}, {"type": "string", "name": "name", "description": " the module name (optional), required if not\nin the module data."}], "guessedname": "addModule", "guessedtype": "function"}, "loadNext": {"param": "{string} mname optional the name of the module that has\nbeen loaded (which is usually why it is time to load the next\none).", "params": [{"type": "string", "name": "mname", "description": " optional the name of the module that has\nbeen loaded (which is usually why it is time to load the next\none)."}], "description": "Executed every time a module is loaded, and if we are in a load\ncycle, we attempt to load the next script.  Public so that it\nis possible to call this if using a method other than\nY.register to determine when scripts are fully loaded", "guessedname": "loadNext", "guessedtype": "function"}, "resolve": {"return": {"type": "Object", "description": "Object hash (js and css) of two arrays of file lists"}, "description": "Returns an Object hash of file arrays built from `loader.sorted` or from an arbitrary list of sorted modules.", "param": "{Boolean} [calc=false] Perform a loader.calculate() before anything else", "params": [{"type": "Boolean", "name": "[calc=false]", "description": " Perform a loader.calculate() before anything else"}, {"type": "Array", "name": "[s=loader.sorted]", "description": " An override for the loader.sorted array"}], "guessedname": "resolve", "guessedtype": "function", "example": "This method can be used as an off-line dep calculator\nvar Y = YUI();\nvar loader = new Y.Loader({\nfilter: 'debug',\nbase: '../../',\nroot: 'build/',\ncombine: true,\nrequire: ['node', 'dd', 'console']\n});\nvar out = loader.resolve(true);"}, "_onFailure": {"private": "", "description": "The default Loader onFailure handler, calls this.onFailure with a payload", "guessedname": "_onFailure", "guessedtype": "function"}, "getModule": {"return": {"type": "Object", "description": "The module metadata"}, "description": "Get's the loader meta data for the requested module", "param": "{String} mname The module name to get", "params": [{"type": "String", "name": "mname", "description": " The module name to get"}], "guessedname": "getModule", "guessedtype": "function"}, "addGroup": {"param": "{object} o An object containing the module data.", "params": [{"type": "object", "name": "o", "description": " An object containing the module data."}, {"type": "string", "name": "name", "description": " the group name."}], "description": "Add a new module group\n<dl>\n<dt>name:</dt>      <dd>required, the group name</dd>\n<dt>base:</dt>      <dd>The base dir for this module group</dd>\n<dt>root:</dt>      <dd>The root path to add to each combo\nresource path</dd>\n<dt>combine:</dt>   <dd>combo handle</dd>\n<dt>comboBase:</dt> <dd>combo service base path</dd>\n<dt>modules:</dt>   <dd>the group of modules</dd>\n</dl>", "guessedname": "addGroup", "guessedtype": "function"}, "insert": {"param": "{object} o optional options object.", "params": [{"type": "object", "name": "o", "description": " optional options object."}, {"type": "string", "name": "type", "description": " the type of dependency to insert."}], "description": "inserts the requested modules and their dependencies.\n<code>type</code> can be \"js\" or \"css\".  Both script and\ncss are inserted if type is not provided.", "guessedname": "insert", "guessedtype": "function"}, "_explodeRollups": {"private": "", "description": "Grab all the items that were asked for, check to see if the Loader\nmeta-data contains a \"use\" array. If it doesm remove the asked item and replace it with \nthe content of the \"use\".\nThis will make asking for: \"dd\"\nActually ask for: \"dd-ddm-base,dd-ddm,dd-ddm-drop,dd-drag,dd-proxy,dd-constrain,dd-drop,dd-scroll,dd-drop-plugin\"", "guessedname": "_explodeRollups", "guessedtype": "function"}, "_rollup": {"guessedname": "_rollup", "description": "Look for rollup packages to determine if all of the modules a\nrollup supersedes are required.  If so, include the rollup to\nhelp reduce the total number of connections required.  Called\nby calculate().  This is an optional feature, and requires the\nappropriate submodule to function.", "private": "", "guessedtype": "function"}, "getLangPackName": {"return": {"type": "string", "description": "the language pack module name."}, "description": "Builds a module name for a language pack", "param": "{string} lang the language code.", "params": [{"type": "string", "name": "lang", "description": " the language code."}, {"type": "string", "name": "mname", "description": " the module to build it for."}], "guessedname": "getLangPackName", "guessedtype": "function"}, "_config": {"param": "{Object} o The new configuration", "params": [{"type": "Object", "name": "o", "description": " The new configuration"}], "description": "Apply a new config to the Loader instance", "guessedname": "_config", "guessedtype": "function"}, "_onTimeout": {"private": "", "description": "The default Loader onTimeout handler, calls this.onTimeout with a payload", "guessedname": "_onTimeout", "guessedtype": "function"}, "_sort": {"private": "", "description": "Sorts the dependency tree.  The last step of calculate()", "guessedname": "_sort", "guessedtype": "function"}, "onFailure": {"type": "function", "description": "Callback that will be executed if there is a failure"}, "require": {"param": "{string[] | string*} what the modules to load.", "params": [{"type": "string[] | string*", "name": "what", "description": " the modules to load."}], "description": "Add a requirement for one or more module", "guessedname": "require", "guessedtype": "function"}, "_setup": {"private": "", "description": "Investigates the current YUI configuration on the page.  By default,\nmodules already detected will not be loaded again unless a force\noption is encountered.  Called by calculate()", "guessedname": "_setup", "guessedtype": "function"}, "onSuccess": {"type": "function", "description": "Callback that will be executed when the loader is finished\nwith an insert"}, "_url": {"return": {"type": "string", "description": "the full url."}, "description": "Generates the full url for a module", "private": "", "params": [{"type": "string", "name": "path", "description": " the path fragment."}, {"type": "String", "name": "name", "description": " The name of the module"}], "param": "{string} path the path fragment.", "guessedname": "_url", "guessedtype": "function", "pamra": "{String} [base=self.base] The base url to use"}, "_insert": {"param": "{Object} source The YUI instance the request came from", "params": [{"type": "Object", "name": "source", "description": " The YUI instance the request came from"}, {"type": "Object", "name": "o", "description": " The metadata to include"}, {"type": "String", "name": "type", "description": " JS or CSS"}, {"type": "Boolean", "name": "[skipcalc=false]", "description": " Do a Loader.calculate on the meta"}], "description": "Handles the actual insertion of script/link tags", "guessedname": "_insert", "guessedtype": "function"}}, "file": "loader.js", "guessedtype": "function", "shortname": "Loader", "properties": {"cssAttributes": {"type": "object", "description": "An object literal containing attributes to add to link nodes"}, "force": {"type": "string[]", "description": "A list of modules that should always be loaded, even\nif they have already been inserted into the page."}, "allowRollup": {"default": "false", "type": "boolean", "description": "Should we allow rollups", "guessedname": "allowRollup", "guessedtype": "property"}, "maxURLLength": {"type": "int", "description": "Max url length for combo urls.  The default is 2048. This is the URL\nlimit for the Yahoo! hosted combo servers.  If consuming\na different combo service that has a different URL limit\nit is possible to override this default by supplying\nthe maxURLLength config option.  The config option will\nonly take effect if lower than the default.", "guessedname": "maxURLLength", "guessedtype": "property"}, "rollups": {"description": "List of rollup files found in the library metadata"}, "filters": {"type": "object", "description": "per-component filter specification.  If specified for a given\ncomponent, this overrides the filter config.", "guessedname": "filters", "guessedtype": "property"}, "skin": {"description": "Provides the information used to skin the skinnable components.\nThe following skin definition would result in 'skin1' and 'skin2'\nbeing loaded for calendar (if calendar was requested), and\n'sam' for all other skinnable components:\n<code>\nskin: {\n// The default skin, which is automatically applied if not\n// overriden by a component-specific skin definition.\n// Change this in to apply a different skin globally\ndefaultSkin: 'sam',\n// This is combined with the loader base property to get\n// the default root directory for a skin. ex:\n// http://yui.yahooapis.com/2.3.0/build/assets/skins/sam/\nbase: 'assets/skins/',\n// Any component-specific overrides can be specified here,\n// making it possible to load different skins for different\n// components.  It is possible to load more than one skin\n// for a given component as well.\noverrides: {\ncalendar: ['skin1', 'skin2']\n}\n}\n</code>", "guessedname": "skin", "guessedtype": "property"}, "loaded": {"type": "{string: boolean}", "description": "Set when beginning to compute the dependency tree.\nComposed of what YUI reports to be loaded combined\nwith what has been loaded by any instance on the page\nwith the version number specified in the metadata.", "guessedname": "loaded", "guessedtype": "property"}, "_internalCallback": {"description": "Internal callback to handle multiple internal insert() calls\nso that css is inserted prior to js", "private": ""}, "insertBefore": {"type": "string|HTMLElement", "description": "Node reference or id where new nodes should be inserted before"}, "inserted": {"type": "{string: boolean}", "description": "List of modules inserted by the utility", "guessedname": "inserted", "guessedtype": "property"}, "charset": {"deprecated": ", use cssAttributes or jsAttributes.", "type": "string", "description": "The charset attribute for inserted nodes"}, "loadOptional": {"default": "false", "type": "boolean", "description": "Whether or not to load optional dependencies for\nthe requested modules"}, "ignoreRegistered": {"default": "false", "description": "Ignore modules registered on the YUI global"}, "combine": {"default": "true if a base dir isn't in the config", "type": "boolean", "description": "If configured, the loader will attempt to use the combo\nservice for YUI resources and configured external resources.", "guessedname": "combine", "guessedtype": "property"}, "moduleInfo": {"description": "The library metadata"}, "filter": {"type": "string| {searchExp: string, replaceStr: string}", "description": "A filter to apply to result urls.  This filter will modify the default\npath for all modules.  The default path for the YUI library is the\nminified version of the files (e.g., event-min.js).  The filter property\ncan be a predefined filter or a custom filter.  The valid predefined\nfilters are:\n<dl>\n<dt>DEBUG</dt>\n<dd>Selects the debug versions of the library (e.g., event-debug.js).\nThis option will automatically include the Logger widget</dd>\n<dt>RAW</dt>\n<dd>Selects the non-minified version of the library (e.g., event.js).\n</dd>\n</dl>\nYou can also define a custom filter, which must be an object literal\ncontaining a search expression and a replace string:\n<pre>\nmyFilter: &#123;\n'searchExp': \"-min\\\\.js\",\n'replaceStr': \"-debug.js\"\n&#125;\n</pre>"}, "comboBase": {"default": "http://yui.yahooapis.com/combo?", "type": "string", "description": "Base path for the combo service", "guessedname": "comboBase", "guessedtype": "property"}, "skipped": {"description": "List of skipped modules during insert() because the module\nwas not defined", "guessedname": "skipped", "guessedtype": "property"}, "context": {"default": "{YUI} the YUI instance", "description": "The execution context for all callbacks", "guessedname": "context", "guessedtype": "property"}, "comboSep": {"default": "Ampersand", "type": "{String}", "description": "The default seperator to use between files in a combo URL", "guessedname": "comboSep", "guessedtype": "property"}, "jsAttributes": {"type": "object", "description": "An object literal containing attributes to add to script nodes"}, "base": {"default": "http://yui.yahooapis.com/[YUI VERSION]/build/", "type": "string", "description": "The base directory.", "guessedname": "base", "guessedtype": "property"}, "sorted": {"type": "string[]", "description": "All of the derived dependencies in sorted order, which\nwill be populated when either calculate() or insert()\nis called", "guessedname": "sorted", "guessedtype": "property"}, "data": {"description": "Data that is passed to all callbacks"}, "required": {"type": "{string: boolean}", "description": "The list of requested modules", "guessedname": "required", "guessedtype": "property"}, "ignore": {"type": "string[]", "description": "A list of modules that should not be loaded, even if\nthey turn up in the dependency tree"}, "patterns": {"type": "Object", "description": "If a module name is predefined when requested, it is checked againsts\nthe patterns provided in this property.  If there is a match, the\nmodule is added with the default configuration.\nAt the moment only supporting module prefixes, but anticipate\nsupporting at least regular expressions."}, "dirty": {"default": "true", "type": "boolean", "description": "Flag to indicate the dependency tree needs to be recomputed\nif insert is called again.", "guessedname": "dirty", "guessedtype": "property"}, "timeout": {"type": "int", "description": "Timeout value in milliseconds.  If set, self value will be used by\nthe get utility.  the timeout event will fire if\na timeout occurs.", "guessedname": "timeout", "guessedtype": "property"}, "root": {"default": "[YUI VERSION]/build/", "type": "string", "description": "Root path to prepend to module path for the combo\nservice", "guessedname": "root", "guessedtype": "property"}}, "description": "Loader dynamically loads script and css files.  It includes the dependency\ninfo for the version of the library in use, and will automatically pull in\ndependencies for the modules requested.  It supports rollup files and will\nautomatically use these when appropriate in order to minimize the number of\nhttp connections required to load all of the dependencies.  It can load the\nfiles from the Yahoo! CDN, and it can utilize the combo service provided on\nthis network to reduce the number of http connections required to download\nYUI files.\nWhile the loader can be instantiated by the end user, it normally is not."}, "Plugin.DDConstrained": {"name": "Plugin.DDConstrained", "configs": {"tickX": {"type": "Number/false", "description": "The X tick offset the drag node should snap to on each drag move. False for no ticks. Default: false", "guessedname": "tickX", "guessedtype": "property"}, "tickY": {"type": "Number/false", "description": "The Y tick offset the drag node should snap to on each drag move. False for no ticks. Default: false", "guessedname": "tickY", "guessedtype": "property"}, "gutter": {"type": "String", "description": "CSS style string for the gutter of a region (supports negative values): '5 0' (sets top and bottom to 5px, left and right to 0px), '1 2 3 4' (top 1px, right 2px, bottom 3px, left 4px)", "guessedname": "gutter", "guessedtype": "property"}, "tickYArray": {"type": "Array", "description": "An array of page coordinates to use as Y ticks for drag movement.", "guessedname": "tickYArray", "guessedtype": "property"}, "constrain2node": {"deprecated": "", "type": "Object", "description": "Will attempt to constrain the drag node to the boundaries of this node.", "guessedname": "constrain2node", "guessedtype": "property"}, "stickX": {"type": "Boolean", "description": "Stick the drag movement to the X-Axis. Default: false", "guessedname": "stickX", "guessedtype": "property"}, "stickY": {"type": "Boolean", "description": "Stick the drag movement to the Y-Axis", "guessedname": "stickY", "guessedtype": "property"}, "constrain2region": {"deprecated": "", "type": "Object", "description": "An Object Literal containing a valid region (top, right, bottom, left) of page positions to constrain the drag node to.", "guessedname": "constrain2region", "guessedtype": "property"}, "cacheRegion": {"type": "Boolean", "description": "Should the region be cached for performace. Default: true", "guessedname": "cacheRegion", "guessedtype": "property"}, "constrain": {"type": "{String/Object/Node}", "description": "Will attempt to constrain the drag node to the boundaries. Arguments:<br>\n'view': Contrain to Viewport<br>\n'#selector_string': Constrain to this node<br>\n'{Region Object}': An Object Literal containing a valid region (top, right, bottom, left) of page positions", "guessedname": "constrain", "guessedtype": "property"}, "constrain2view": {"deprecated": "", "type": "Object", "description": "Will attempt to constrain the drag node to the boundaries of the viewport region.", "guessedname": "constrain2view", "guessedtype": "property"}, "tickXArray": {"type": "Array", "description": "An array of page coordinates to use as X ticks for drag movement.", "guessedname": "tickXArray", "guessedtype": "property"}}, "constructors": [{"description": "Plugin for the dd-drag module to add the constraining methods to it. It supports constraining to a node or viewport. It supports tick based moves and XY axis constraints."}], "namespace": "Plugin", "module": "dd", "properties": {"_regionCache": {"guessedname": "_regionCache", "type": "Object", "description": "Store a cache of the region that we are constraining to", "private": "", "guessedtype": "property"}, "NS": {"description": "The Constrained instance will be placed on the Drag instance under the con namespace.", "default": "con", "readonly": "", "protected": "", "static": "", "guessedname": "NS", "guessedtype": "property", "type": "{String}"}}, "guessedname": "DRAG_NODE", "methods": {"_createEvents": {"description": "This method creates all the events for this Event Target and publishes them so we get Event Bubbling.", "private": "", "guessedname": "_createEvents", "guessedtype": "function"}, "_getConstraint": {"description": "Standardizes the 'constraint' attribute", "private": "", "guessedname": "_getConstraint", "guessedtype": "function"}, "_tickAlignY": {"description": "Fires when the actXY[1] reach a new value respecting the tickY gap.", "private": "", "guessedname": "_tickAlignY", "guessedtype": "function"}, "_checkTicks": {"return": {"type": "Array", "description": "The calced XY coords"}, "description": "This method delegates the proper helper method for tick calculations", "private": "", "params": [{"type": "Array", "name": "xy", "description": " The XY coords for the Drag"}, {"type": "Object", "name": "r", "description": " The optional region that we are bound to."}], "param": "{Array} xy The XY coords for the Drag", "guessedname": "_checkTicks", "guessedtype": "function"}, "_checkRegion": {"return": {"type": "Array", "description": "The new XY that is inside the region"}, "description": "Check if xy is inside a given region, if not change to it be inside.", "private": "", "params": [{"type": "Array", "name": "_xy", "description": " The XY to check if it's in the current region, if it isn't inside the region, it will reset the xy array to be inside the region."}], "param": "{Array} _xy The XY to check if it's in the current region, if it isn't inside the region, it will reset the xy array to be inside the region.", "guessedname": "_checkRegion", "guessedtype": "function"}, "getRegion": {"return": {"type": "Object", "description": ""}, "description": "Get the active region: viewport, node, custom region", "param": "{Boolean} inc Include the node's height and width", "params": [{"type": "Boolean", "name": "inc", "description": " Include the node's height and width"}], "guessedname": "getRegion", "guessedtype": "function"}, "align": {"description": "Modifies the Drag.actXY method from the after drag:align event. This is where the constraining happens.", "guessedname": "align", "guessedtype": "function"}, "resetCache": {"description": "Reset the internal region cache.", "guessedname": "resetCache", "guessedtype": "function"}, "drag": {"description": "Fires after drag:drag. Handle the tickX and tickX align events.", "guessedname": "drag", "guessedtype": "function"}, "_handleStart": {"description": "Fires on drag:start and clears the _regionCache", "private": "", "guessedname": "_handleStart", "guessedtype": "function"}, "_handleEnd": {"description": "Fires on drag:end", "private": "", "guessedname": "_handleEnd", "guessedtype": "function"}, "inRegion": {"return": {"type": "Boolean", "description": "True if the XY is inside the region, false otherwise."}, "description": "Checks if the XY passed or the dragNode is inside the active region.", "param": "{Array} xy Optional XY to check, if not supplied this.get('dragNode').getXY() is used.", "params": [{"type": "Array", "name": "xy", "description": " Optional XY to check, if not supplied this.get('dragNode').getXY() is used."}], "guessedname": "inRegion", "guessedtype": "function"}, "_tickAlignX": {"description": "Fires when the actXY[0] reach a new value respecting the tickX gap.", "private": "", "guessedname": "_tickAlignX", "guessedtype": "function"}, "_cacheRegion": {"description": "Get's the region and caches it, called from window.resize and when the cache is null", "private": "", "guessedname": "_cacheRegion", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "dd.js", "guessedtype": "property", "shortname": "DDConstrained", "events": {"constrain2viewChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "constrain2viewChange", "description": "Fires when the value for the configuration attribute 'constrain2view' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "tickXChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "tickXChange", "description": "Fires when the value for the configuration attribute 'tickX' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "tickXArrayChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "tickXArrayChange", "description": "Fires when the value for the configuration attribute 'tickXArray' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "gutterChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "gutterChange", "description": "Fires when the value for the configuration attribute 'gutter' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "constrain2nodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "constrain2nodeChange", "description": "Fires when the value for the configuration attribute 'constrain2node' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "stickYChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "stickYChange", "description": "Fires when the value for the configuration attribute 'stickY' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "tickYArrayChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "tickYArrayChange", "description": "Fires when the value for the configuration attribute 'tickYArray' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "stickXChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "stickXChange", "description": "Fires when the value for the configuration attribute 'stickX' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "constrainChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "constrainChange", "description": "Fires when the value for the configuration attribute 'constrain' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "tickYChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "tickYChange", "description": "Fires when the value for the configuration attribute 'tickY' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "constrain2regionChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "constrain2regionChange", "description": "Fires when the value for the configuration attribute 'constrain2region' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "cacheRegionChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "cacheRegionChange", "description": "Fires when the value for the configuration attribute 'cacheRegion' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "drag:tickAlignY": {"description": "Fires when this node is aligned with the tickY value.", "param": "{EventFacade} event An Event Facade object", "params": [{"type": "EventFacade", "name": "event", "description": " An Event Facade object"}], "guessedname": "EV_TICK_ALIGN_Y", "guessedtype": "property", "type": "{CustomEvent}"}, "drag:tickAlignX": {"description": "Fires when this node is aligned with the tickX value.", "param": "{EventFacade} event An Event Facade object", "params": [{"type": "EventFacade", "name": "event", "description": " An Event Facade object"}], "guessedname": "EV_TICK_ALIGN_X", "guessedtype": "property", "type": "{CustomEvent}"}}, "description": "Plugin for the dd-drag module to add the constraining methods to it. It supports constraining to a node or viewport. It supports tick based moves and XY axis constraints."}, "LiveSearch": {"name": "LiveSearch", "configs": {"index": {"default": "[]", "type": "Array", "description": "Index for the nodes content.", "guessedname": "index", "guessedtype": "property"}, "hide": {"default": "function(node) { return node.hide(); }", "type": "function", "description": "Function to be executed to hide the node when the data of that node\nnot matches with the filter.", "guessedname": "hide", "guessedtype": "property"}, "show": {"default": "function(node) { return node.show(); }", "type": "function", "description": "Function to be executed to show the node when the data of that node\nmatches with the filter.", "guessedname": "show", "guessedtype": "property"}, "searchValue": {"type": "String", "description": "The text value to search for", "guessedname": "searchValue", "guessedtype": "property"}, "delay": {"default": "250", "type": "Number", "description": "Number of milliseconds the filter will be applied to the node list\nafter the user stop typing.", "guessedname": "delay", "guessedtype": "property"}, "matchRegex": {"default": "(.)*", "type": "RegExp", "description": "The input <code>value</code> need to matches with this RegExp to be\naccept as a filter (i.e., in order to accept only digits you\ncould use /\\d+/g).", "guessedname": "matchRegex", "guessedtype": "property"}, "input": {"type": "Node | String", "description": "The <code>value</code> of this input node is used to filter the\nresults.", "guessedname": "input", "guessedtype": "property"}, "nodes": {"type": "Node | NodeList", "description": "Nodes to be indexed for the filtering.", "guessedname": "nodes", "guessedtype": "property"}, "data": {"default": "function(node) { return node.html(); }", "type": "function", "description": "<p>Function to extract the content from the node for the indexing. The\ndefault uses the <code>node.html()</code>. In case if you need to\nindex the id of the nodes, here goes one example:</p>\nExample indexing the id of the node instead of the HTML:\n<pre><code>function(node) {\nreturn node.attr('id');\n}\n</code></pre>", "guessedname": "data", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "<p><img src=\"assets/images/aui-live-search/main.png\"/></p>\nA base class for LiveSearch, providing:\n<ul>\n<li>Real-time filtering for DOM elements based on a input query</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.LiveSearch({\ninput: '#input',\nnodes: '#search .entry'\n});\n</code></pre>\nCheck the list of <a href=\"LiveSearch.html#configattributes\">Configuration Attributes</a> available for\nLiveSearch."}], "namespace": "", "module": "aui-live-search", "events": {"matchRegexChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "matchRegexChange", "description": "Fires when the value for the configuration attribute 'matchRegex' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "hideChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "hideChange", "description": "Fires when the value for the configuration attribute 'hide' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "searchValueChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "searchValueChange", "description": "Fires when the value for the configuration attribute 'searchValue' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "indexChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "indexChange", "description": "Fires when the value for the configuration attribute 'index' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "delayChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "delayChange", "description": "Fires when the value for the configuration attribute 'delay' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "inputChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "inputChange", "description": "Fires when the value for the configuration attribute 'input' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "showChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "showChange", "description": "Fires when the value for the configuration attribute 'show' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "dataChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "dataChange", "description": "Fires when the value for the configuration attribute 'data' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "nodesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "nodesChange", "description": "Fires when the value for the configuration attribute 'nodes' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "LiveSearch", "methods": {"_iterateResults": {"description": "Iterator for the result set that determines\nwhether to show or hide the result nodes.", "param": "{Object} item The current result item", "protected": "", "params": [{"type": "Object", "name": "item", "description": " The current result item"}, {"type": "Number", "name": "index", "description": " The current index of the result collection"}, {"type": "Array", "name": "result", "description": "  The results array being iterated"}], "guessedname": "_iterateResults", "guessedtype": "function"}, "search": {"description": "Searches for the user supplied value.", "param": "{EventFacade} event the input key event object", "protected": "", "params": [{"type": "String|Number", "name": "value", "description": " The text to search for"}], "guessedname": "search", "guessedtype": "function"}, "_inputKeyUp": {"description": "Fires the keyup event on\n<a href=\"LiveSearch.html#config_input\">input</a>.", "param": "{EventFacade} event keyup event facade", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " keyup event facade"}], "guessedname": "_inputKeyUp", "guessedtype": "function"}, "_setNodes": {"return": {"type": "Node | NodeList | String", "description": ""}, "description": "Setter for <a href=\"LiveSearch.html#config_nodes\">nodes</a>.", "param": "{Node | NodeList | String} v", "protected": "", "params": [{"type": "Node | NodeList | String", "name": "v", "description": ""}], "guessedname": "_setNodes", "guessedtype": "function"}, "_defSearchFn": {"description": "Default method that handles the search event.", "param": "{EventFacade} event search event facade", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " search event facade"}], "guessedname": "_defSearchFn", "guessedtype": "function"}, "refreshIndex": {"description": "Refreshes the <a href=\"LiveSearch.html#config_index\">index</a>.", "guessedname": "refreshIndex", "guessedtype": "function"}, "initializer": {"protected": "", "description": "Construction logic executed during LiveSearch instantiation. Lifecycle.", "guessedname": "initializer", "guessedtype": "function"}, "filter": {"return": {"type": "Array", "description": "Matched results."}, "description": "Filter the <a href=\"LiveSearch.html#config_nodes\">nodes</a> based on\nthe input value.", "param": "{String} query Query to filter results", "params": [{"type": "String", "name": "query", "description": " Query to filter results"}], "guessedname": "filter", "guessedtype": "function"}, "_getSearchValue": {"description": "Getter method for the\n<a href=\"LiveSearch.html#config_searchValue\">searchValue</a> attribute.", "param": "{String} value", "protected": "", "params": [{"type": "String", "name": "value", "description": ""}], "guessedname": "_getSearchValue", "guessedtype": "function"}, "_afterSearchValueChange": {"description": "Fires after the value of the\n<a href=\"LiveSearch.html#config_searchValue\">searchValue</a> attribute changes.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_afterSearchValueChange", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Bind the events on the LiveSearch UI. Lifecycle.", "guessedname": "bindUI", "guessedtype": "function"}, "destroy": {"protected": "", "description": "Descructor lifecycle implementation for the LiveSearch class.\nPurges events attached to the node (and all child nodes).", "guessedname": "destroy", "guessedtype": "function"}, "_normalizeQuery": {"return": {"type": "String", "description": ""}, "description": "Normalize the input query. With <code>trim</code>,\n<code>matchRegex</code> and replace '*' to '' (on a regex empty match\nwith everything like *).", "param": "{String} query Query to filter results", "protected": "", "params": [{"type": "String", "name": "query", "description": " Query to filter results"}], "guessedname": "_normalizeQuery", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "aui-live-search.js", "guessedtype": "property", "shortname": "LiveSearch", "properties": {"query": {"protected": "", "type": "String", "description": "Stores the query value.", "guessedname": "query", "guessedtype": "property"}, "LiveSearch.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}, "LiveSearch.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the LiveSearch.", "guessedname": "ATTRS", "guessedtype": "property"}, "timer": {"protected": "", "type": "Object", "description": "Handles the <a href=\"YUI.html#method_later\">later</a> Object.", "guessedname": "timer", "guessedtype": "property"}, "normalizedQuery": {"protected": "", "type": "String", "description": "Stores the normalized query value given from\n<a href=\"LiveSearch.html#config__normalizeQuery\">_normalizeQuery</a>.", "guessedname": "normalizedQuery", "guessedtype": "property"}}, "description": "<p><img src=\"assets/images/aui-live-search/main.png\"/></p>\nA base class for LiveSearch, providing:\n<ul>\n<li>Real-time filtering for DOM elements based on a input query</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.LiveSearch({\ninput: '#input',\nnodes: '#search .entry'\n});\n</code></pre>\nCheck the list of <a href=\"LiveSearch.html#configattributes\">Configuration Attributes</a> available for\nLiveSearch."}, "Toolbar": {"name": "Toolbar", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "A base class for Toolbar, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>The ability to manage multiple <a href=\"ButtonItem.html\">ButtonItem</a> widgets as one group</li>\n<li>Managed user interaction states (default, active, hover)</li>\n<li>Keyboard accessible</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.Toolbar({\nchildren: [\n{icon: 'plus', label: 'Add'},\n{icon: 'minus', label: 'Delete'}\n]\n}).render();\n</code></pre>\nCheck the list of <a href=\"Toolbar.html#configattributes\">Configuration Attributes</a> available for\nToolbar."}], "namespace": "", "module": "aui-toolbar", "events": {"hoverStateChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "hoverStateChange", "description": "Fires when the value for the configuration attribute 'hoverState' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "defaultChildTypeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "defaultChildTypeChange", "description": "Fires when the value for the configuration attribute 'defaultChildType' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "activeStateChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "activeStateChange", "description": "Fires when the value for the configuration attribute 'activeState' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "orientationChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "orientationChange", "description": "Fires when the value for the configuration attribute 'orientation' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "childrenChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "childrenChange", "description": "Fires when the value for the configuration attribute 'children' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "defaultStateChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "defaultStateChange", "description": "Fires when the value for the configuration attribute 'defaultState' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "Toolbar", "methods": {"syncUI": {"protected": "", "description": "Sync the Toolbar UI. Lifecycle.", "guessedname": "syncUI", "guessedtype": "function"}, "_afterAddButton": {"description": "Syncs the UI after a button is added.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_afterAddButton", "guessedtype": "function"}, "_uiSetOrientation": {"description": "Updates the UI for the orientation attribute.", "param": "{String} newVal The new value", "protected": "", "params": [{"type": "String", "name": "newVal", "description": " The new value"}], "guessedname": "_uiSetOrientation", "guessedtype": "function"}, "initializer": {"protected": "", "description": "Construction logic executed during Toolbar instantiation. Lifecycle.", "guessedname": "initializer", "guessedtype": "function"}, "_afterRemoveButton": {"description": "Syncs the UI after a button is removed.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_afterRemoveButton", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Bind the events on the Toolbar UI. Lifecycle.", "guessedname": "bindUI", "guessedtype": "function"}, "_addByIconId": {"return": {"type": "String", "description": ""}, "description": "Overloads the add method so that if only a string is passed in, it will be\nassumed to be the icon, and will automatically create a configuration\nobject for it.", "param": "{String} icon the icon name or object or array of objects to add to the toolbar", "protected": "", "params": [{"type": "String", "name": "icon", "description": " the icon name or object or array of objects to add to the toolbar"}], "guessedname": "_addByIconId", "guessedtype": "function"}}, "uses": ["WidgetParent"], "superclass": "Component", "file": "aui-toolbar.js", "guessedtype": "property", "extends": "Component", "shortname": "Toolbar", "configs": {"orientation": {"default": "'horizontal'", "type": "String", "description": "Representing the orientation of the progress bar. Could be\n<code>horizontal</code> or <code>vertical</code>.", "guessedname": "orientation", "guessedtype": "property"}, "hoverState": {"type": "boolean", "description": "Receives an interaction state of hover during the\n<code>mouseover</code> event.", "guessedname": "hoverState", "guessedtype": "property"}, "defaultChildType": {"default": "ButtonItem", "type": "String | Object", "description": "The default type of child widget to render into the Element", "guessedname": "defaultChildType", "guessedtype": "property"}, "defaultState": {"type": "boolean", "description": "Receives a default interaction state.", "guessedname": "defaultState", "guessedtype": "property"}, "children": {"type": "Array", "description": "Receives the toolbar items."}, "activeState": {"type": "boolean", "description": "Receives an interaction state of active when the user clicks on it.", "guessedname": "activeState", "guessedtype": "property"}}, "description": "A base class for Toolbar, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>The ability to manage multiple <a href=\"ButtonItem.html\">ButtonItem</a> widgets as one group</li>\n<li>Managed user interaction states (default, active, hover)</li>\n<li>Keyboard accessible</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.Toolbar({\nchildren: [\n{icon: 'plus', label: 'Add'},\n{icon: 'minus', label: 'Delete'}\n]\n}).render();\n</code></pre>\nCheck the list of <a href=\"Toolbar.html#configattributes\">Configuration Attributes</a> available for\nToolbar."}, "Tab": {"name": "Tab", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying tabview configuration properties."}], "description": "Provides Tab instances for use with TabView"}], "namespace": "", "module": "tabview", "events": {"contentChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "contentChange", "description": "Fires when the value for the configuration attribute 'content' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "labelChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "labelChange", "description": "Fires when the value for the configuration attribute 'label' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "triggerEventChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "triggerEventChange", "description": "Fires when the value for the configuration attribute 'triggerEvent' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "panelNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "panelNodeChange", "description": "Fires when the value for the configuration attribute 'panelNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "Tab", "uses": ["WidgetChild"], "superclass": "Widget", "file": "tabview.js", "guessedtype": "property", "extends": "Widget", "shortname": "Tab", "configs": {"triggerEvent": {"default": "\"click\"", "type": "String", "guessedname": "triggerEvent", "guessedtype": "property"}, "content": {"type": "String", "guessedname": "content", "guessedtype": "property"}, "panelNode": {"type": "Y.Node", "guessedname": "panelNode", "guessedtype": "property"}, "label": {"type": "String", "guessedname": "label", "guessedtype": "property"}}, "description": "Provides Tab instances for use with TabView"}, "Attribute": {"name": "Attribute", "description": "<p>\nAttribute provides configurable attribute support along with attribute change events. It is designed to be \naugmented on to a host class, and provides the host with the ability to configure attributes to store and retrieve state, \nalong with attribute change events.\n</p>\n<p>For example, attributes added to the host can be configured:</p>\n<ul>\n<li>As read only.</li>\n<li>As write once.</li>\n<li>With a setter function, which can be used to manipulate\nvalues passed to Attribute's <a href=\"#method_set\">set</a> method, before they are stored.</li>\n<li>With a getter function, which can be used to manipulate stored values,\nbefore they are returned by Attribute's <a href=\"#method_get\">get</a> method.</li>\n<li>With a validator function, to validate values before they are stored.</li>\n</ul>\n<p>See the <a href=\"#method_addAttr\">addAttr</a> method, for the complete set of configuration\noptions available for attributes</p>.\n<p><strong>NOTE:</strong> Most implementations will be better off extending the <a href=\"Base.html\">Base</a> class, \ninstead of augmenting Attribute directly. Base augments Attribute and will handle the initial configuration \nof attributes for derived classes, accounting for values passed into the constructor.</p>", "namespace": "", "module": "attribute", "uses": ["EventTarget"], "param": "attrs {Object} The attributes to add during construction (passed through to <a href=\"#method_addAttrs\">addAttrs</a>). These can also be defined on the constructor being augmented with Attribute by defining the ATTRS property on the constructor.", "file": "attribute-base.js", "shortname": "Attribute", "properties": {"_ATTR_CFG": {"description": "The list of properties which can be configured for \neach attribute (e.g. setter, getter, writeOnce etc.).\nThis property is used internally as a whitelist for faster\nY.mix operations.", "protected": "", "static": "", "guessedname": "_ATTR_CFG", "guessedtype": "property", "type": "Array"}, "INVALID_VALUE": {"description": "<p>The value to return from an attribute setter in order to prevent the set from going through.</p>\n<p>You can return this value from your setter if you wish to combine validator and setter \nfunctionality into a single setter function, which either returns the massaged value to be stored or \nAttribute.INVALID_VALUE to prevent invalid values from being stored.</p>", "static": "", "guessedname": "INVALID_VALUE", "guessedtype": "property", "type": "Object", "final": ""}}, "methods": {"_setAttrVal": {"return": {"type": "booolean", "description": "true if the new attribute value was stored, false if not."}, "description": "Updates the stored value of the attribute in the privately held State object,\nif validation and setter passes.", "private": "", "params": [{"type": "String", "name": "attrName", "description": " The attribute name."}, {"type": "String", "name": "subAttrName", "description": " The sub-attribute name, if setting a sub-attribute property (\"x.y.z\")."}, {"type": "Any", "name": "prevVal", "description": " The currently stored value of the attribute."}, {"type": "Any", "name": "newVal", "description": " The value which is going to be stored."}], "param": "{String} attrName The attribute name.", "guessedname": "_setAttrVal", "guessedtype": "function"}, "set": {"return": {"type": "Object", "description": "A reference to the host object."}, "description": "Sets the value of an attribute.", "chainable": "", "param": "{String} name The name of the attribute. If the \ncurrent value of the attribute is an Object, dot notation can be used\nto set the value of a property within the object (e.g. <code>set(\"x.y.z\", 5)</code>).", "params": [{"type": "String", "name": "name", "description": " The name of the attribute. If the \ncurrent value of the attribute is an Object, dot notation can be used\nto set the value of a property within the object (e.g. <code>set(\"x.y.z\", 5)</code>)."}, {"type": "Any", "name": "value", "description": " The value to set the attribute to."}, {"type": "Object", "name": "opts", "description": " (Optional) Optional event data to be mixed into\nthe event facade passed to subscribers of the attribute's change event. This \ncan be used as a flexible way to identify the source of a call to set, allowing \nthe developer to distinguish between set called internally by the host, vs. \nset called externally by the application developer."}], "guessedname": "set", "guessedtype": "function"}, "getAttrs": {"return": {"type": "Object", "description": "An object with attribute name/value pairs."}, "description": "Gets multiple attribute values.", "param": "{Array | boolean} attrs Optional. An array of attribute names. If omitted, all attribute values are\nreturned. If set to true, all attributes modified from their initial values are returned.", "params": [{"type": "Array | boolean", "name": "attrs", "description": " Optional. An array of attribute names. If omitted, all attribute values are\nreturned. If set to true, all attributes modified from their initial values are returned."}], "guessedname": "getAttrs", "guessedtype": "function"}, "_initAttrs": {"description": "Utility method to set up initial attributes defined during construction, either through the constructor.ATTRS property, or explicitly passed in.", "param": "attrs {Object} The attributes to add during construction (passed through to <a href=\"#method_addAttrs\">addAttrs</a>). These can also be defined on the constructor being augmented with Attribute by defining the ATTRS property on the constructor.", "protected": "", "params": [{"type": "Object", "name": "attrs", "description": "  The attributes to add during construction (passed through to <a href=\"#method_addAttrs\">addAttrs</a>). These can also be defined on the constructor being augmented with Attribute by defining the ATTRS property on the constructor."}, {"type": "Object", "name": "values", "description": "  The initial attribute values to apply (passed through to <a href=\"#method_addAttrs\">addAttrs</a>). These are not merged/cloned. The caller is responsible for isolating user provided values if required."}, {"type": "boolean", "name": "lazy", "description": "  Whether or not to add attributes lazily (passed through to <a href=\"#method_addAttrs\">addAttrs</a>)."}], "guessedname": "_initAttrs", "guessedtype": "function"}, "_fireAttrChange": {"description": "Utility method to help setup the event payload and fire the attribute change event.", "param": "{String} attrName The name of the attribute", "params": [{"type": "String", "name": "attrName", "description": " The name of the attribute"}, {"type": "String", "name": "subAttrName", "description": " The full path of the property being changed, \nif this is a sub-attribute value being change. Otherwise null."}, {"type": "Any", "name": "currVal", "description": " The current value of the attribute"}, {"type": "Any", "name": "newVal", "description": " The new value of the attribute"}, {"type": "Object", "name": "opts", "description": " Any additional event data to mix into the attribute change event's event facade."}], "private": "", "guessedname": "_fireAttrChange", "guessedtype": "function"}, "modifyAttr": {"param": "{String} name The name of the attribute whose configuration is to be updated.", "params": [{"type": "String", "name": "name", "description": " The name of the attribute whose configuration is to be updated."}, {"type": "Object", "name": "config", "description": " An object with configuration property/value pairs, specifying the configuration properties to modify."}], "description": "Updates the configuration of an attribute which has already been added.\n<p>\nThe properties which can be modified through this interface are limited\nto the following subset of attributes, which can be safely modified\nafter a value has already been set on the attribute: readOnly, writeOnce, \nbroadcast and getter.\n</p>", "guessedname": "modifyAttr", "guessedtype": "function"}, "_protectAttrs": {"return": {"type": "Object", "description": "A protected version of the attrs argument."}, "description": "Utility method to protect an attribute configuration\nhash, by merging the entire object and the individual \nattr config objects.", "param": "{Object} attrs A hash of attribute to configuration object pairs.", "protected": "", "params": [{"type": "Object", "name": "attrs", "description": " A hash of attribute to configuration object pairs."}], "guessedname": "_protectAttrs", "guessedtype": "function"}, "_setAttr": {"return": {"type": "Object", "description": "A reference to the host object."}, "description": "Provides the common implementation for the public set and protected _set methods.\nSee <a href=\"#method_set\">set</a> for argument details.", "chainable": "", "param": "{String} name The name of the attribute.", "protected": "", "params": [{"type": "String", "name": "name", "description": " The name of the attribute."}, {"type": "Any", "name": "value", "description": " The value to set the attribute to."}, {"type": "Object", "name": "opts", "description": " (Optional) Optional event data to be mixed into\nthe event facade passed to subscribers of the attribute's change event."}, {"type": "boolean", "name": "force", "description": " If true, allows the caller to set values for \nreadOnly or writeOnce attributes which have already been set."}], "guessedname": "_setAttr", "guessedtype": "function"}, "_normAttrVals": {"return": {"type": "Object", "description": "An object literal with 2 properties - \"simple\" and \"complex\",\ncontaining simple and complex attribute values respectively keyed \nby the top level attribute name, or null, if valueHash is falsey."}, "description": "Utility method to split out simple attribute name/value pairs (\"x\") \nfrom complex attribute name/value pairs (\"x.y.z\"), so that complex\nattributes can be keyed by the top level attribute name.", "private": "", "params": [{"type": "Object", "name": "valueHash", "description": " An object with attribute name/value pairs"}], "param": "{Object} valueHash An object with attribute name/value pairs", "guessedname": "_normAttrVals", "guessedtype": "function"}, "_getAttrCfg": {"return": {"type": "Object", "description": "The configuration properties for the given attribute, or all attributes."}, "description": "Returns an object with the configuration properties (and value)\nfor the given attrubute. If attrName is not provided, returns the\nconfiguration properties for all attributes.", "param": "{String} name Optional. The attribute name. If not provided, the method will return the configuration for all attributes.", "protected": "", "params": [{"type": "String", "name": "name", "description": " Optional. The attribute name. If not provided, the method will return the configuration for all attributes."}], "guessedname": "_getAttrCfg", "guessedtype": "function"}, "_defAttrChangeFn": {"description": "Default function for attribute change events.", "param": "{EventFacade} e The event object for attribute change events.", "params": [{"type": "EventFacade", "name": "e", "description": " The event object for attribute change events."}], "private": "", "guessedname": "_defAttrChangeFn", "guessedtype": "function"}, "_addLazyAttr": {"description": "Finishes initializing an attribute which has been lazily added.", "param": "{Object} name The name of the attribute", "params": [{"type": "Object", "name": "name", "description": " The name of the attribute"}], "private": "", "guessedname": "_addLazyAttr", "guessedtype": "function"}, "_getAttrInitVal": {"return": {"type": "Any", "description": "The initial value of the attribute."}, "description": "Returns the initial value of the given attribute from\neither the default configuration provided, or the \nover-ridden value if it exists in the set of initValues \nprovided and the attribute is not read-only.", "private": "", "params": [{"type": "String", "name": "attr", "description": " The name of the attribute"}, {"type": "Object", "name": "cfg", "description": " The attribute configuration object"}, {"type": "Object", "name": "initValues", "description": " The object with simple and complex attribute name/value pairs returned from _normAttrVals"}], "param": "{String} attr The name of the attribute", "guessedname": "_getAttrInitVal", "guessedtype": "function"}, "_getAttr": {"return": {"type": "Any", "description": "The value of the attribute."}, "description": "Provides the common implementation for the public get method,\nallowing Attribute hosts to over-ride either method.\nSee <a href=\"#method_get\">get</a> for argument details.", "chainable": "", "param": "{String} name The name of the attribute.", "protected": "", "params": [{"type": "String", "name": "name", "description": " The name of the attribute."}], "guessedname": "_getAttr", "guessedtype": "function"}, "_getAttrs": {"return": {"type": "Object", "description": "An object with attribute name/value pairs."}, "description": "Implementation behind the public getAttrs method, to get multiple attribute values.", "param": "{Array | boolean} attrs Optional. An array of attribute names. If omitted, all attribute values are\nreturned. If set to true, all attributes modified from their initial values are returned.", "protected": "", "params": [{"type": "Array | boolean", "name": "attrs", "description": " Optional. An array of attribute names. If omitted, all attribute values are\nreturned. If set to true, all attributes modified from their initial values are returned."}], "guessedname": "_getAttrs", "guessedtype": "function"}, "removeAttr": {"param": "{String} name The name of the attribute to be removed.", "params": [{"type": "String", "name": "name", "description": " The name of the attribute to be removed."}], "description": "Removes an attribute from the host object", "guessedname": "removeAttr", "guessedtype": "function"}, "get": {"return": {"type": "Any", "description": "The value of the attribute"}, "description": "Returns the current value of the attribute. If the attribute\nhas been configured with a 'getter' function, this method will delegate\nto the 'getter' to obtain the value of the attribute.", "param": "{String} name The name of the attribute. If the value of the attribute is an Object, \ndot notation can be used to obtain the value of a property of the object (e.g. <code>get(\"x.y.z\")</code>)", "params": [{"type": "String", "name": "name", "description": " The name of the attribute. If the value of the attribute is an Object, \ndot notation can be used to obtain the value of a property of the object (e.g. <code>get(\"x.y.z\")</code>)"}], "guessedname": "get", "guessedtype": "function"}, "_setStateVal": {"description": "Sets the stored value for the attribute, in either the \ninternal state object, or the state proxy if it exits", "param": "{String} name The name of the attribute", "params": [{"type": "String", "name": "name", "description": " The name of the attribute"}, {"type": "Any", "name": "value", "description": " The value of the attribute"}], "private": "", "guessedname": "_setStateVal", "guessedtype": "function"}, "addAttrs": {"return": {"type": "Object", "description": "A reference to the host object."}, "description": "Configures a group of attributes, and sets initial values.\n<p>\n<strong>NOTE:</strong> This method does not isolate the configuration object by merging/cloning. \nThe caller is responsible for merging/cloning the configuration object if required.\n</p>", "chainable": "", "param": "{Object} cfgs An object with attribute name/configuration pairs.", "params": [{"type": "Object", "name": "cfgs", "description": " An object with attribute name/configuration pairs."}, {"type": "Object", "name": "values", "description": " An object with attribute name/value pairs, defining the initial values to apply.\nValues defined in the cfgs argument will be over-written by values in this argument unless defined as read only."}, {"type": "boolean", "name": "lazy", "description": " Whether or not to delay the intialization of these attributes until the first call to get/set.\nIndividual attributes can over-ride this behavior by defining a lazyAdd configuration property in their configuration.\nSee <a href=\"#method_addAttr\">addAttr</a>."}], "guessedname": "addAttrs", "guessedtype": "function"}, "_getStateVal": {"return": {"type": "Any", "description": "The stored value of the attribute"}, "description": "Gets the stored value for the attribute, from either the \ninternal state object, or the state proxy if it exits", "private": "", "params": [{"type": "String", "name": "name", "description": " The name of the attribute"}], "param": "{String} name The name of the attribute", "guessedname": "_getStateVal", "guessedtype": "function"}, "_setAttrs": {"return": {"type": "Object", "description": "A reference to the host object."}, "description": "Implementation behind the public setAttrs method, to set multiple attribute values.", "chainable": "", "param": "{Object} attrs  An object with attributes name/value pairs.", "protected": "", "params": [{"type": "Object", "name": "attrs", "description": "  An object with attributes name/value pairs."}], "guessedname": "_setAttrs", "guessedtype": "function"}, "reset": {"return": {"type": "Object", "description": "A reference to the host object."}, "description": "Resets the attribute (or all attributes) to its initial value, as long as\nthe attribute is not readOnly, or writeOnce.", "chainable": "", "param": "{String} name Optional. The name of the attribute to reset.  If omitted, all attributes are reset.", "params": [{"type": "String", "name": "name", "description": " Optional. The name of the attribute to reset.  If omitted, all attributes are reset."}], "guessedname": "reset", "guessedtype": "function"}, "addAttr": {"return": {"type": "Object", "description": "A reference to the host object."}, "description": "<p>\nAdds an attribute with the provided configuration to the host object.\n</p>\n<p>\nThe config argument object supports the following properties:\n</p>\n<dl>\n<dt>value &#60;Any&#62;</dt>\n<dd>The initial value to set on the attribute</dd>\n<dt>valueFn &#60;Function | String&#62;</dt>\n<dd>\n<p>A function, which will return the initial value to set on the attribute. This is useful\nfor cases where the attribute configuration is defined statically, but needs to \nreference the host instance (\"this\") to obtain an initial value. If both the value and valueFn properties are defined, \nthe value returned by the valueFn has precedence over the value property, unless it returns undefined, in which \ncase the value property is used.</p>\n<p>valueFn can also be set to a string, representing the name of the instance method to be used to retrieve the value.</p>\n</dd>\n<dt>readOnly &#60;boolean&#62;</dt>\n<dd>Whether or not the attribute is read only. Attributes having readOnly set to true\ncannot be modified by invoking the set method.</dd>\n<dt>writeOnce &#60;boolean&#62; or &#60;string&#62;</dt>\n<dd>\nWhether or not the attribute is \"write once\". Attributes having writeOnce set to true, \ncan only have their values set once, be it through the default configuration, \nconstructor configuration arguments, or by invoking set.\n<p>The writeOnce attribute can also be set to the string \"initOnly\", in which case the attribute can only be set during initialization\n(when used with Base, this means it can only be set during construction)</p>\n</dd>\n<dt>setter &#60;Function | String&#62;</dt>\n<dd>\n<p>The setter function used to massage or normalize the value passed to the set method for the attribute. \nThe value returned by the setter will be the final stored value. Returning\n<a href=\"#property_Attribute.INVALID_VALUE\">Attribute.INVALID_VALUE</a>, from the setter will prevent\nthe value from being stored.\n</p>\n<p>setter can also be set to a string, representing the name of the instance method to be used as the setter function.</p>\n</dd>\n<dt>getter &#60;Function | String&#62;</dt>\n<dd>\n<p>\nThe getter function used to massage or normalize the value returned by the get method for the attribute.\nThe value returned by the getter function is the value which will be returned to the user when they \ninvoke get.\n</p>\n<p>getter can also be set to a string, representing the name of the instance method to be used as the getter function.</p>\n</dd>\n<dt>validator &#60;Function | String&#62;</dt>\n<dd>\n<p>\nThe validator function invoked prior to setting the stored value. Returning\nfalse from the validator function will prevent the value from being stored.\n</p>\n<p>validator can also be set to a string, representing the name of the instance method to be used as the validator function.</p>\n</dd>\n<dt>broadcast &#60;int&#62;</dt>\n<dd>If and how attribute change events for this attribute should be broadcast. See CustomEvent's <a href=\"CustomEvent.html#property_broadcast\">broadcast</a> property for \nvalid values. By default attribute change events are not broadcast.</dd>\n<dt>lazyAdd &#60;boolean&#62;</dt>\n<dd>Whether or not to delay initialization of the attribute until the first call to get/set it. \nThis flag can be used to over-ride lazy initialization on a per attribute basis, when adding multiple attributes through \nthe <a href=\"#method_addAttrs\">addAttrs</a> method.</dd>\n</dl>\n<p>The setter, getter and validator are invoked with the value and name passed in as the first and second arguments, and with\nthe context (\"this\") set to the host object.</p>\n<p>Configuration properties outside of the list mentioned above are considered private properties used internally by attribute, and are not intended for public use.</p>", "chainable": "", "param": "{String} name The name of the attribute.", "params": [{"type": "String", "name": "name", "description": " The name of the attribute."}, {"type": "Object", "name": "config", "description": " An object with attribute configuration property/value pairs, specifying the configuration for the attribute.\n<p>\n<strong>NOTE:</strong> The configuration object is modified when adding an attribute, so if you need \nto protect the original values, you will need to merge the object.\n</p>"}, {"type": "boolean", "name": "lazy", "description": " (optional) Whether or not to add this attribute lazily (on the first call to get/set)."}], "guessedname": "addAttr", "guessedtype": "function"}, "attrAdded": {"return": {"type": "boolean", "description": "true if an attribute with the given name has been added, false if it hasn't. This method will return true for lazily added attributes."}, "description": "Checks if the given attribute has been added to the host", "param": "{String} name The name of the attribute to check.", "params": [{"type": "String", "name": "name", "description": " The name of the attribute to check."}], "guessedname": "attrAdded", "guessedtype": "function"}, "_isLazyAttr": {"return": {"type": "boolean", "description": "true if it's a lazily added attribute, false otherwise."}, "description": "Checks whether or not the attribute is one which has been\nadded lazily and still requires initialization.", "private": "", "params": [{"type": "String", "name": "name", "description": " The name of the attribute"}], "param": "{String} name The name of the attribute", "guessedname": "_isLazyAttr", "guessedtype": "function"}, "_addAttrs": {"description": "Implementation behind the public addAttrs method. \nThis method is invoked directly by get if it encounters a scenario \nin which an attribute's valueFn attempts to obtain the \nvalue an attribute in the same group of attributes, which has not yet \nbeen added (on demand initialization).", "param": "{Object} cfgs An object with attribute name/configuration pairs.", "params": [{"type": "Object", "name": "cfgs", "description": " An object with attribute name/configuration pairs."}, {"type": "Object", "name": "values", "description": " An object with attribute name/value pairs, defining the initial values to apply.\nValues defined in the cfgs argument will be over-written by values in this argument unless defined as read only."}, {"type": "boolean", "name": "lazy", "description": " Whether or not to delay the intialization of these attributes until the first call to get/set.\nIndividual attributes can over-ride this behavior by defining a lazyAdd configuration property in their configuration.\nSee <a href=\"#method_addAttr\">addAttr</a>."}], "private": "", "guessedname": "_addAttrs", "guessedtype": "function"}, "setAttrs": {"return": {"type": "Object", "description": "A reference to the host object."}, "description": "Sets multiple attribute values.", "chainable": "", "param": "{Object} attrs  An object with attributes name/value pairs.", "params": [{"type": "Object", "name": "attrs", "description": "  An object with attributes name/value pairs."}], "guessedname": "setAttrs", "guessedtype": "function"}, "_set": {"return": {"type": "Object", "description": "A reference to the host object."}, "description": "Allows setting of readOnly/writeOnce attributes. See <a href=\"#method_set\">set</a> for argument details.", "chainable": "", "param": "{String} name The name of the attribute.", "protected": "", "params": [{"type": "String", "name": "name", "description": " The name of the attribute."}, {"type": "Any", "name": "val", "description": " The value to set the attribute to."}, {"type": "Object", "name": "opts", "description": " (Optional) Optional event data to be mixed into\nthe event facade passed to subscribers of the attribute's change event."}], "guessedname": "_set", "guessedtype": "function"}}}, "DataTableDataSource": {"name": "DataTableDataSource", "namespace": "", "module": "datatable", "events": {"initialRequestChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "initialRequestChange", "description": "Fires when the value for the configuration attribute 'initialRequest' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "datasourceChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "datasourceChange", "description": "Fires when the value for the configuration attribute 'datasource' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "configs": {"initialRequest": {"type": "Object", "description": "Request sent to DataSource immediately upon initialization.", "guessedname": "initialRequest", "guessedtype": "property"}, "datasource": {"type": "Y.DataSource", "description": "Pointer to DataSource instance.", "guessedname": "datasource", "guessedtype": "property"}}, "methods": {"_setInitialRequest": {"description": "Sends request to DataSource.", "param": "request {Object} DataSource request.", "params": [{"type": "Object", "name": "request", "description": "  DataSource request."}], "private": "", "guessedname": "_setInitialRequest", "guessedtype": "function"}, "load": {"param": "config {object} Optional configuration parameters:\n<dl>\n<dt>request</dt><dd>Pass in a new request, or initialRequest is used.</dd>\n<dt>callback</dt><dd>Pass in DataSource callback object, or the following default is used:\n<dl>\n<dt>success</dt><dd>datatable.onDataReturnInitializeTable</dd>\n<dt>failure</dt><dd>datatable.onDataReturnInitializeTable</dd>\n<dt>scope</dt><dd>datatable</dd>\n<dt>argument</dt><dd>datatable.getState()</dd>\n</dl>\n</dd>\n<dt>datasource</dt><dd>Pass in a new DataSource instance to override the current DataSource for this transaction.</dd>\n</dl>", "params": [{"type": "object", "name": "config", "description": "  Optional configuration parameters:\n<dl>\n<dt>request</dt><dd>Pass in a new request, or initialRequest is used.</dd>\n<dt>callback</dt><dd>Pass in DataSource callback object, or the following default is used:\n<dl>\n<dt>success</dt><dd>datatable.onDataReturnInitializeTable</dd>\n<dt>failure</dt><dd>datatable.onDataReturnInitializeTable</dd>\n<dt>scope</dt><dd>datatable</dd>\n<dt>argument</dt><dd>datatable.getState()</dd>\n</dl>\n</dd>\n<dt>datasource</dt><dd>Pass in a new DataSource instance to override the current DataSource for this transaction.</dd>\n</dl>"}], "description": "Load data by calling DataSource's sendRequest() method under the hood.", "guessedname": "load", "guessedtype": "function"}, "onDataReturnInitializeTable": {"param": "e {Event.Facade} DataSource Event Facade object.", "params": [{"type": "Event.Facade", "name": "e", "description": "  DataSource Event Facade object."}], "description": "Callback function passed to DataSource's sendRequest() method populates\nan entire DataTable with new data, clearing previous data, if any.", "guessedname": "onDataReturnInitializeTable", "guessedtype": "function"}, "_setDataSource": {"return": {"type": "", "description": "Y.DataSource"}, "description": "Creates new DataSource instance if one is not provided.", "private": "", "params": [{"type": "Object | Y.DataSource", "name": "ds", "description": ""}], "param": "ds {Object | Y.DataSource}", "guessedname": "_setDataSource", "guessedtype": "function"}, "initializer": {"description": "Initializer.", "param": "config {Object} Config object.", "params": [{"type": "Object", "name": "config", "description": "  Config object."}], "private": "", "guessedname": "initializer", "guessedtype": "function"}}, "extends": "Plugin.Base", "superclass": "Plugin.Base", "file": "datatable-datasource.js", "shortname": "DataTableDataSource", "properties": {"NS": {"description": "The namespace for the plugin. This will be the property on the host which\nreferences the plugin instance.", "value": "\"datasource\"", "static": "", "guessedname": "NS", "guessedtype": "property", "type": "String", "final": ""}, "NAME": {"description": "Class name.", "value": "\"dataTableDataSource\"", "static": "", "guessedname": "NAME", "guessedtype": "property", "type": "String", "final": ""}}, "description": "Adds DataSource integration to DataTable."}, "TreeNodeCheck": {"name": "TreeNodeCheck", "configs": {"checkName": {"default": "'tree-node-check'", "type": "String", "description": "Name of the checkbox element used on the current TreeNode.", "guessedname": "checkName", "guessedtype": "property"}, "checkEl": {"default": "Generated DOM element.", "type": "Node | String", "description": "Checkbox element.", "guessedname": "checkEl", "guessedtype": "property"}, "checkContainerEl": {"default": "Generated DOM element.", "type": "Node | String", "description": "Container element for the checkbox.", "guessedname": "checkContainerEl", "guessedtype": "property"}, "checked": {"default": "false", "type": "boolean", "description": "Whether the TreeNode is checked or not.", "guessedname": "checked", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "<p><img src=\"assets/images/aui-tree-nod-check/main.png\"/></p>\nA base class for TreeNodeCheck, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Checkbox support for the TreeNode</li>\n</ul>\nCheck the list of <a href=\"TreeNodeCheck.html#configattributes\">Configuration Attributes</a> available for\nTreeNodeCheck."}], "namespace": "", "module": "aui-tree", "events": {"checkContainerElChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "checkContainerElChange", "description": "Fires when the value for the configuration attribute 'checkContainerEl' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "checkNameChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "checkNameChange", "description": "Fires when the value for the configuration attribute 'checkName' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "checkElChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "checkElChange", "description": "Fires when the value for the configuration attribute 'checkEl' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "checkedChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "checkedChange", "description": "Fires when the value for the configuration attribute 'checked' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "TreeNodeCheck", "methods": {"uncheck": {"description": "Uncheck the current TreeNode.", "guessedname": "uncheck", "guessedtype": "function"}, "check": {"description": "Check the current TreeNode.", "guessedname": "check", "guessedtype": "function"}, "toggleCheck": {"description": "Toggle the check status of the current TreeNode.", "guessedname": "toggleCheck", "guessedtype": "function"}}, "extends": "TreeNodeIO", "superclass": "TreeNodeIO", "file": "aui-tree.js", "guessedtype": "property", "shortname": "TreeNodeCheck", "properties": {"TreeNode.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the TreeNode.", "guessedname": "ATTRS", "guessedtype": "property"}, "TreeNode.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}}, "description": "<p><img src=\"assets/images/aui-tree-nod-check/main.png\"/></p>\nA base class for TreeNodeCheck, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Checkbox support for the TreeNode</li>\n</ul>\nCheck the list of <a href=\"TreeNodeCheck.html#configattributes\">Configuration Attributes</a> available for\nTreeNodeCheck."}, "Plugin.SortScroll": {"name": "Plugin.SortScroll", "constructors": [{"description": "Plugin for sortable to handle scrolling lists."}], "namespace": "Plugin", "module": "sortable", "guessedname": "SortScroll", "extends": "Base", "superclass": "Base", "file": "sortable-scroll.js", "guessedtype": "function", "shortname": "SortScroll", "properties": {"NS": {"description": "The scroll instance.", "default": "scroll", "readonly": "", "protected": "", "static": "", "guessedname": "NS", "guessedtype": "property", "type": "{String}"}, "NAME": {"description": "The name of the class.", "default": "SortScroll", "readonly": "", "protected": "", "static": "", "guessedname": "NAME", "guessedtype": "property", "type": "{String}"}}, "description": "Plugin for sortable to handle scrolling lists."}, "Do.Prevent": {"name": "Do.Prevent", "constructors": [{"params": [{"type": "String", "name": "msg", "description": "  (optional) Explanation of why the termination was done"}], "description": "Return a Prevent object when you want to prevent the wrapped function\nfrom executing, but want the remaining listeners to execute.  Useful\nfor Do.before subscribers."}], "namespace": "", "module": "event-custom", "guessedname": "Prevent", "file": "event-custom-base.js", "guessedtype": "function", "shortname": "Do.Prevent", "description": "Return a Prevent object when you want to prevent the wrapped function\nfrom executing, but want the remaining listeners to execute.  Useful\nfor Do.before subscribers."}, "TreeViewDD": {"name": "TreeViewDD", "configs": {"checked": {"default": "false", "type": "boolean", "description": "Whether the TreeNode is checked or not.", "guessedname": "checked", "guessedtype": "property"}, "helper": {"default": "null", "type": "Node | String", "description": "Dragdrop helper element.", "guessedname": "helper", "guessedtype": "property"}, "scrollDelay": {"default": "100", "type": "Number", "description": "Delay of the scroll while dragging the TreeNodes.", "guessedname": "scrollDelay", "guessedtype": "property"}, "checkEl": {"default": "Generated DOM element.", "type": "Node | String", "description": "Checkbox element.", "guessedname": "checkEl", "guessedtype": "property"}, "checkName": {"default": "'tree-node-check'", "type": "String", "description": "Name of the checkbox element used on the current TreeNode.", "guessedname": "checkName", "guessedtype": "property"}, "checkContainerEl": {"default": "Generated DOM element.", "type": "Node | String", "description": "Container element for the checkbox.", "guessedname": "checkContainerEl", "guessedtype": "property"}, "dropAction": {"default": "null", "type": "String", "description": "Drop action (i.e. could be 'append', 'below' or 'above').", "guessedname": "dropAction", "guessedtype": "property"}, "nodeContent": {"default": "null", "type": "Node", "description": "Reference for the current drop node.", "guessedname": "nodeContent", "guessedtype": "property"}, "lastY": {"default": "0", "type": "Number", "description": "Last Y.", "guessedname": "lastY", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "A base class for TreeViewDD, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>DragDrop support for the TreeNodes</li>\n</ul>\nQuick Example:<br/>\nCheck the list of <a href=\"TreeViewDD.html#configattributes\">Configuration Attributes</a> available for\nTreeViewDD."}], "namespace": "", "module": "aui-tree", "events": {"checkContainerElChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "checkContainerElChange", "description": "Fires when the value for the configuration attribute 'checkContainerEl' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "dropActionChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "dropActionChange", "description": "Fires when the value for the configuration attribute 'dropAction' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "nodeContentChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "nodeContentChange", "description": "Fires when the value for the configuration attribute 'nodeContent' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "helperChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "helperChange", "description": "Fires when the value for the configuration attribute 'helper' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "checkedChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "checkedChange", "description": "Fires when the value for the configuration attribute 'checked' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "checkElChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "checkElChange", "description": "Fires when the value for the configuration attribute 'checkEl' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "checkNameChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "checkNameChange", "description": "Fires when the value for the configuration attribute 'checkName' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "scrollDelayChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "scrollDelayChange", "description": "Fires when the value for the configuration attribute 'scrollDelay' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "lastYChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "lastYChange", "description": "Fires when the value for the configuration attribute 'lastY' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "TreeViewDD", "methods": {"uncheck": {"description": "Uncheck the current TreeNode.", "guessedname": "uncheck", "guessedtype": "function"}, "_bindDragDrop": {"protected": "", "description": "Bind DragDrop events.", "guessedname": "_bindDragDrop", "guessedtype": "function"}, "_onDropExit": {"description": "Fires on drop exit event.", "param": "{EventFacade} event append event facade", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " append event facade"}], "guessedname": "_onDropExit", "guessedtype": "function"}, "_onDragAlign": {"description": "Fires on drag align event.", "param": "{EventFacade} event append event facade", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " append event facade"}], "guessedname": "_onDragAlign", "guessedtype": "function"}, "toggleCheck": {"description": "Toggle the check status of the current TreeNode.", "guessedname": "toggleCheck", "guessedtype": "function"}, "check": {"description": "Check the current TreeNode.", "guessedname": "check", "guessedtype": "function"}, "_onDragStart": {"description": "Fires on drag start event.", "param": "{EventFacade} event append event facade", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " append event facade"}], "guessedname": "_onDragStart", "guessedtype": "function"}, "_createDrag": {"description": "Setup DragDrop on the TreeNodes.", "param": "{Node} node", "protected": "", "params": [{"type": "Node", "name": "node", "description": ""}], "guessedname": "_createDrag", "guessedtype": "function"}, "_afterDropHit": {"description": "Fires after the drop hit event.", "param": "{EventFacade} event drop hit event facade", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " drop hit event facade"}], "guessedname": "_afterDropHit", "guessedtype": "function"}, "_onDropOver": {"description": "Fires on drop over event.", "param": "{EventFacade} event append event facade", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " append event facade"}], "guessedname": "_onDropOver", "guessedtype": "function"}, "destructor": {"protected": "", "description": "Descructor lifecycle implementation for the TreeViewDD class.\nPurges events attached to the node (and all child nodes).", "guessedname": "destructor", "guessedtype": "function"}, "_appendState": {"description": "Set the append CSS state on the passed <code>nodeContent</code>.", "param": "{Node} nodeContent", "protected": "", "params": [{"type": "Node", "name": "nodeContent", "description": ""}], "guessedname": "_appendState", "guessedtype": "function"}, "_resetState": {"description": "Set the reset CSS state on the passed <code>nodeContent</code>.", "param": "{Node} nodeContent", "protected": "", "params": [{"type": "Node", "name": "nodeContent", "description": ""}], "guessedname": "_resetState", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Bind the events on the TreeViewDD UI. Lifecycle.", "guessedname": "bindUI", "guessedtype": "function"}, "_goingUpState": {"description": "Set the going up CSS state on the passed <code>nodeContent</code>.", "param": "{Node} nodeContent", "protected": "", "params": [{"type": "Node", "name": "nodeContent", "description": ""}], "guessedname": "_goingUpState", "guessedtype": "function"}, "_updateNodeState": {"description": "Update the CSS node state (i.e. going down, going up, append etc).", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_updateNodeState", "guessedtype": "function"}, "_onDropHit": {"description": "Fires on drop hit event.", "param": "{EventFacade} event append event facade", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " append event facade"}], "guessedname": "_onDropHit", "guessedtype": "function"}, "_goingDownState": {"description": "Set the going down CSS state on the passed <code>nodeContent</code>.", "param": "{Node} nodeContent", "protected": "", "params": [{"type": "Node", "name": "nodeContent", "description": ""}], "guessedname": "_goingDownState", "guessedtype": "function"}, "renderUI": {"protected": "", "description": "Create the DOM structure for the TreeViewDD. Lifecycle.", "guessedname": "renderUI", "guessedtype": "function"}, "_handleEvent": {"description": "Fires after the append event.", "param": "{EventFacade} event append event facade", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " append event facade"}], "guessedname": "_afterAppend", "guessedtype": "function"}}, "extends": "TreeView", "superclass": "TreeView", "file": "aui-tree.js", "guessedtype": "property", "shortname": "TreeViewDD", "properties": {"TreeNode.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}, "TreeViewDD.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the TreeViewDD.", "guessedname": "ATTRS", "guessedtype": "property"}, "direction": {"protected": "", "type": "String", "description": "Direction of the drag (i.e. could be 'up' or 'down').", "guessedname": "direction", "guessedtype": "property"}, "TreeNode.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the TreeNode.", "guessedname": "ATTRS", "guessedtype": "property"}, "TreeViewDD.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}}, "description": "A base class for TreeViewDD, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>DragDrop support for the TreeNodes</li>\n</ul>\nQuick Example:<br/>\nCheck the list of <a href=\"TreeViewDD.html#configattributes\">Configuration Attributes</a> available for\nTreeViewDD."}, "Plugin.DDNodeScroll": {"properties": {"NS": {"description": "The NodeScroll instance will be placed on the Drag instance under the nodescroll namespace.", "default": "nodescroll", "readonly": "", "protected": "", "static": "", "guessedname": "NAME", "guessedtype": "property", "type": "{String}"}}, "name": "Plugin.DDNodeScroll", "constructors": [{"description": "Extends the Scroll class to make a parent node scroll while dragging."}], "namespace": "Plugin", "module": "dd", "events": {"nodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "nodeChange", "description": "Fires when the value for the configuration attribute 'node' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "NS", "extends": "Scroll", "superclass": "Scroll", "file": "dd.js", "guessedtype": "function", "shortname": "DDNodeScroll", "configs": {"node": {"type": "Node", "description": "The node we want to scroll. Used to set the internal parentScroll attribute.", "guessedname": "node", "guessedtype": "property"}}, "description": "Extends the Scroll class to make a parent node scroll while dragging."}, "TreeView": {"name": "TreeView", "configs": {"type": {"default": "'file'", "type": "String", "description": "Type of the treeview (i.e. could be 'file' or 'normal').", "guessedname": "type", "guessedtype": "property"}, "io": {"default": "null", "type": "Object", "description": "IO metadata for loading the children using ajax.", "guessedname": "io", "guessedtype": "property"}, "lastSelected": {"default": "null", "type": "TreeNode", "description": "Last selected TreeNode.", "guessedname": "lastSelected", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "<p><img src=\"assets/images/aui-tree-view/main.png\"/></p>\nA base class for TreeView, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var tree2 = new A.TreeView({\nwidth: 200,\ntype: 'normal',\nboundingBox: '#tree',\nchildren: [\n{ label: 'Folder 1', children: [ { label: 'file' }, { label: 'file' }, { label: 'file' } ] },\n{ label: 'Folder 2', expanded: true, children: [ { label: 'file' }, { label: 'file' } ] },\n{ label: 'Folder 3', children: [ { label: 'file' } ] },\n{ label: 'Folder 4', expanded: true, children: [ { label: 'Folder 4-1', expanded: true, children: [ { label: 'file' } ] } ] }\n]\n})\n.render();\n</code></pre>\nCheck the list of <a href=\"TreeView.html#configattributes\">Configuration Attributes</a> available for\nTreeView."}], "namespace": "", "module": "aui-tree", "events": {"lastSelectedChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "lastSelectedChange", "description": "Fires when the value for the configuration attribute 'lastSelected' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "typeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "typeChange", "description": "Fires when the value for the configuration attribute 'type' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "ioChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "ioChange", "description": "Fires when the value for the configuration attribute 'io' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "TreeView", "methods": {"_onMouseEnterNodeEl": {"description": "Fires on <code>mouseeneter</code> the TreeNode.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onMouseEnterNodeEl", "guessedtype": "function"}, "syncUI": {"protected": "", "description": "Sync the TreeView UI. Lifecycle.", "guessedname": "syncUI", "guessedtype": "function"}, "_delegateDOM": {"protected": "", "description": "Delegate events.", "guessedname": "_delegateDOM", "guessedtype": "function"}, "_onClickNodeEl": {"description": "Fires on click the TreeView (i.e. set the select/unselect state).", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onClickNodeEl", "guessedtype": "function"}, "_onMouseLeaveNodeEl": {"description": "Fires on <code>mouseleave</code> the TreeNode.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onMouseLeaveNodeEl", "guessedtype": "function"}, "_renderElements": {"protected": "", "description": "Render elements.", "guessedname": "_renderElements", "guessedtype": "function"}, "_onClickHitArea": {"description": "Fires on <code>click</code> the TreeNode hitarea.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onClickHitArea", "guessedtype": "function"}, "_createFromHTMLMarkup": {"description": "Create TreeNode from HTML markup.", "param": "{Node} container", "protected": "", "params": [{"type": "Node", "name": "container", "description": ""}], "guessedname": "_createFromHTMLMarkup", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Bind the events on the TreeView UI. Lifecycle.", "guessedname": "bindUI", "guessedtype": "function"}, "renderUI": {"protected": "", "description": "Create the DOM structure for the TreeView. Lifecycle.", "guessedname": "renderUI", "guessedtype": "function"}}, "extends": "TreeData", "superclass": "TreeData", "file": "aui-tree.js", "guessedtype": "property", "shortname": "TreeView", "properties": {"TreeView.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the TreeView.", "guessedname": "ATTRS", "guessedtype": "property"}, "TreeView.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}}, "description": "<p><img src=\"assets/images/aui-tree-view/main.png\"/></p>\nA base class for TreeView, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var tree2 = new A.TreeView({\nwidth: 200,\ntype: 'normal',\nboundingBox: '#tree',\nchildren: [\n{ label: 'Folder 1', children: [ { label: 'file' }, { label: 'file' }, { label: 'file' } ] },\n{ label: 'Folder 2', expanded: true, children: [ { label: 'file' }, { label: 'file' } ] },\n{ label: 'Folder 3', children: [ { label: 'file' } ] },\n{ label: 'Folder 4', expanded: true, children: [ { label: 'Folder 4-1', expanded: true, children: [ { label: 'file' } ] } ] }\n]\n})\n.render();\n</code></pre>\nCheck the list of <a href=\"TreeView.html#configattributes\">Configuration Attributes</a> available for\nTreeView."}, "StackedMarkerSeries": {"name": "StackedMarkerSeries", "constructors": [{"description": "StackedMarkerSeries plots markers with different series stacked along the value axis to indicate each\nseries' contribution to a cumulative total."}], "namespace": "", "module": "charts", "events": {"typeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "typeChange", "description": "Fires when the value for the configuration attribute 'type' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "StackedMarkerSeries", "methods": {"setAreaData": {"protected": "", "description": "Calculates the coordinates for the series. Overrides base implementation.", "guessedname": "setAreaData", "guessedtype": "function"}}, "extends": "MarkerSeries", "superclass": "MarkerSeries", "file": "charts.js", "guessedtype": "property", "shortname": "StackedMarkerSeries", "configs": {"type": {"default": "stackedMarker", "type": "String", "description": "Read-only attribute indicating the type of series.", "guessedname": "type", "guessedtype": "property"}}, "description": "StackedMarkerSeries plots markers with different series stacked along the value axis to indicate each\nseries' contribution to a cumulative total."}, "OverlayManager": {"name": "OverlayManager", "configs": {"zIndexBase": {"default": "1000", "type": "Number", "description": "The zIndex base to be used on the stacking for all overlays\nregistered on the OverlayManager.", "guessedname": "zIndexBase", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "<p><img src=\"assets/images/aui-overlay-manager/main.png\"/></p>\nA base class for OverlayManager, providing:\n<ul>\n<li>Grouping overlays</li>\n<li>Show or hide the entire group of registered overlays</li>\n<li>Basic Overlay Stackability (zIndex support)</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var groupOverlayManager = new A.OverlayManager();\ngroupOverlayManager.register([overlay1, overlay2, overlay3]);\ngroupOverlayManager.hideAll();\n</code></pre>\nCheck the list of <a href=\"OverlayManager.html#configattributes\">Configuration Attributes</a> available for\nOverlayManager."}], "namespace": "", "module": "aui-overlay", "events": {"zIndexBaseChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "zIndexBaseChange", "description": "Fires when the value for the configuration attribute 'zIndexBase' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "OverlayManager", "methods": {"_onFocusedChange": {"description": "Fires when the <a href=\"Widget.html#config_focused\">focused</a>\nattribute change. Used to invoke\n<a href=\"OverlayManager.html#method_bringToTop\">bringToTop</a>.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onFocusedChange", "guessedtype": "function"}, "hideAll": {"description": "Invoke the <a href=\"Overlay.html#method_hide\">hide</a> method from\nall registered Overlays.", "guessedname": "hideAll", "guessedtype": "function"}, "_registered": {"return": {"type": "boolean", "description": ""}, "description": "Check if the overlay is registered.", "param": "{Overlay} overlay Overlay", "protected": "", "params": [{"type": "Overlay", "name": "overlay", "description": " Overlay"}], "guessedname": "_registered", "guessedtype": "function"}, "_onMouseDown": {"description": "Mousedown event handler, used to invoke\n<a href=\"OverlayManager.html#method_bringToTop\">bringToTop</a>.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onMouseDown", "guessedtype": "function"}, "register": {"return": {"type": "Array", "description": "Registered overlays"}, "description": "Register the passed <a href=\"Overlay.html\">Overlay</a> to this\nOverlayManager.", "param": "{Overlay} overlay <a href=\"Overlay.html\">Overlay</a> instance to be registered", "params": [{"type": "Overlay", "name": "overlay", "description": " <a href=\"Overlay.html\">Overlay</a> instance to be registered"}], "guessedname": "register", "guessedtype": "function"}, "showAll": {"description": "Invoke the <a href=\"Overlay.html#method_show\">show</a> method from\nall registered Overlays.", "guessedname": "showAll", "guessedtype": "function"}, "remove": {"return": {"type": "null", "description": ""}, "description": "Remove the passed <a href=\"Overlay.html\">Overlay</a> from this\nOverlayManager.", "param": "{Overlay} overlay <a href=\"Overlay.html\">Overlay</a> instance to be removed", "params": [{"type": "Overlay", "name": "overlay", "description": " <a href=\"Overlay.html\">Overlay</a> instance to be removed"}], "guessedname": "remove", "guessedtype": "function"}, "destructor": {"protected": "", "description": "Descructor lifecycle implementation for the OverlayManager class.\nPurges events attached to the node (and all child nodes).", "guessedname": "destructor", "guessedtype": "function"}, "bringToTop": {"param": "{Overlay} overlay Instance of\n<a href=\"Overlay.html\">Overlay</a>.", "params": [{"type": "Overlay", "name": "overlay", "description": " Instance of\n<a href=\"Overlay.html\">Overlay</a>."}], "description": "Set the passed overlay zIndex to the highest value.", "guessedname": "bringToTop", "guessedtype": "function"}, "each": {"return": {"type": "null", "description": ""}, "description": "Loop through all registered <a href=\"Overlay.html\">Overlay</a> and\nexecute a callback.", "param": "{function} fn Callback to be executed on the\n<a href=\"Array.html#method_each\">Array.each</a>", "params": [{"type": "function", "name": "fn", "description": " Callback to be executed on the\n<a href=\"Array.html#method_each\">Array.each</a>"}], "guessedname": "each", "guessedtype": "function"}, "initializer": {"protected": "", "description": "Construction logic executed during OverlayManager instantiation. Lifecycle.", "guessedname": "initializer", "guessedtype": "function"}, "sortByZIndexDesc": {"return": {"type": "Number", "description": ""}, "description": "zIndex comparator. Used on Array.sort.", "param": "{Overlay} a Overlay", "params": [{"type": "Overlay", "name": "a", "description": " Overlay"}, {"type": "Overlay", "name": "b", "description": " Overlay"}], "guessedname": "sortByZIndexDesc", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "aui-overlay.js", "guessedtype": "property", "shortname": "OverlayManager", "properties": {"OverlayManager.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the OverlayManager.", "guessedname": "ATTRS", "guessedtype": "property"}, "OverlayManager.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}}, "description": "<p><img src=\"assets/images/aui-overlay-manager/main.png\"/></p>\nA base class for OverlayManager, providing:\n<ul>\n<li>Grouping overlays</li>\n<li>Show or hide the entire group of registered overlays</li>\n<li>Basic Overlay Stackability (zIndex support)</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var groupOverlayManager = new A.OverlayManager();\ngroupOverlayManager.register([overlay1, overlay2, overlay3]);\ngroupOverlayManager.hideAll();\n</code></pre>\nCheck the list of <a href=\"OverlayManager.html#configattributes\">Configuration Attributes</a> available for\nOverlayManager."}, "ThumbRating": {"name": "ThumbRating", "configs": {"size": {"description": "The size on ThumbRating is always 2 (i.e., thumb up and thumb down).", "default": "2", "readonly": "", "guessedname": "size", "guessedtype": "property", "type": "Number"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "<p><img src=\"assets/images/aui-rating/thumb-rating.png\"/></p>\nA base class for ThumbRating, providing:\n<ul>\n<li>A non-obstrusive star rating control using Thumb up and Thumb down icons</li>\n<li>Could be based on a set of radio input boxes</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.ThumbRating({\nboundingBox: '#rating',\ndefaultSelected: 3,\ndisabled: false,\nlabel: 'Label'\n}).render();\n</code></pre>\nCheck the list of <a href=\"ThumbRating.html#configattributes\">Configuration Attributes</a> available for\nThumbRating."}], "namespace": "", "module": "aui-rating", "events": {"sizeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "sizeChange", "description": "Fires when the value for the configuration attribute 'size' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "ThumbRating", "methods": {"_syncElements": {"protected": "", "description": "Empty method, no logic needed on this method on ThumbRating.", "guessedname": "_syncElements", "guessedtype": "function"}, "fillTo": {"param": "{Number} index Index to be selected", "params": [{"type": "Number", "name": "index", "description": " Index to be selected"}, {"type": "String", "name": "className", "description": " Class name to be applied when fill the Rating elements"}], "description": "Add the <code>className</code> on the the <code>index</code> element\nand all the previous Rating elements.", "guessedname": "fillTo", "guessedtype": "function"}, "renderUI": {"protected": "", "description": "Create the DOM structure for the ThumbRating. Lifecycle.", "guessedname": "renderUI", "guessedtype": "function"}}, "extends": "Rating", "superclass": "Rating", "file": "aui-rating.js", "guessedtype": "property", "shortname": "ThumbRating", "properties": {"ThumbRating.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the ThumbRating.", "guessedname": "ATTRS", "guessedtype": "property"}, "ThumbRating.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}}, "description": "<p><img src=\"assets/images/aui-rating/thumb-rating.png\"/></p>\nA base class for ThumbRating, providing:\n<ul>\n<li>A non-obstrusive star rating control using Thumb up and Thumb down icons</li>\n<li>Could be based on a set of radio input boxes</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.ThumbRating({\nboundingBox: '#rating',\ndefaultSelected: 3,\ndisabled: false,\nlabel: 'Label'\n}).render();\n</code></pre>\nCheck the list of <a href=\"ThumbRating.html#configattributes\">Configuration Attributes</a> available for\nThumbRating."}, "DataSourceCacheExtension": {"name": "DataSourceCacheExtension", "namespace": "", "module": "datasource", "guessedname": "DataSourceCacheExtension", "methods": {"_beforeDefRequestFn": {"description": "First look for cached response, then send request to live data.", "param": "e {Event.Facade} Event Facade with the following properties:\n<dl>\n<dt>tId (Number)</dt> <dd>Unique transaction ID.</dd>\n<dt>request (Object)</dt> <dd>The request.</dd>\n<dt>callback (Object)</dt> <dd>The callback object.</dd>\n<dt>cfg (Object)</dt> <dd>Configuration object.</dd>\n</dl>", "protected": "", "params": [{"type": "Event.Facade", "name": "e", "description": "  Event Facade with the following properties:\n<dl>\n<dt>tId (Number)</dt> <dd>Unique transaction ID.</dd>\n<dt>request (Object)</dt> <dd>The request.</dd>\n<dt>callback (Object)</dt> <dd>The callback object.</dd>\n<dt>cfg (Object)</dt> <dd>Configuration object.</dd>\n</dl>"}], "guessedname": "_beforeDefRequestFn", "guessedtype": "function"}, "_beforeDefResponseFn": {"description": "Adds data to cache before returning data.", "param": "e {Event.Facade} Event Facade with the following properties:\n<dl>\n<dt>tId (Number)</dt> <dd>Unique transaction ID.</dd>\n<dt>request (Object)</dt> <dd>The request.</dd>\n<dt>callback (Object)</dt> <dd>The callback object with the following properties:\n<dl>\n<dt>success (Function)</dt> <dd>Success handler.</dd>\n<dt>failure (Function)</dt> <dd>Failure handler.</dd>\n</dl>\n</dd>\n<dt>data (Object)</dt> <dd>Raw data.</dd>\n<dt>response (Object)</dt> <dd>Normalized response object with the following properties:\n<dl>\n<dt>cached (Object)</dt> <dd>True when response is cached.</dd>\n<dt>results (Object)</dt> <dd>Parsed results.</dd>\n<dt>meta (Object)</dt> <dd>Parsed meta data.</dd>\n<dt>error (Object)</dt> <dd>Error object.</dd>\n</dl>\n</dd>\n<dt>cfg (Object)</dt> <dd>Configuration object.</dd>\n</dl>", "protected": "", "params": [{"type": "Event.Facade", "name": "e", "description": "  Event Facade with the following properties:\n<dl>\n<dt>tId (Number)</dt> <dd>Unique transaction ID.</dd>\n<dt>request (Object)</dt> <dd>The request.</dd>\n<dt>callback (Object)</dt> <dd>The callback object with the following properties:\n<dl>\n<dt>success (Function)</dt> <dd>Success handler.</dd>\n<dt>failure (Function)</dt> <dd>Failure handler.</dd>\n</dl>\n</dd>\n<dt>data (Object)</dt> <dd>Raw data.</dd>\n<dt>response (Object)</dt> <dd>Normalized response object with the following properties:\n<dl>\n<dt>cached (Object)</dt> <dd>True when response is cached.</dd>\n<dt>results (Object)</dt> <dd>Parsed results.</dd>\n<dt>meta (Object)</dt> <dd>Parsed meta data.</dd>\n<dt>error (Object)</dt> <dd>Error object.</dd>\n</dl>\n</dd>\n<dt>cfg (Object)</dt> <dd>Configuration object.</dd>\n</dl>"}], "guessedname": "_beforeDefResponseFn", "guessedtype": "function"}, "initializer": {"description": "Internal init() handler.", "param": "config {Object} Config object.", "params": [{"type": "Object", "name": "config", "description": "  Config object."}], "private": "", "guessedname": "initializer", "guessedtype": "function"}}, "file": "datasource-cache.js", "guessedtype": "function", "shortname": "DataSourceCacheExtension", "properties": {"NS": {"description": "The namespace for the plugin. This will be the property on the host which\nreferences the plugin instance.", "value": "\"cache\"", "static": "", "guessedname": "NS", "guessedtype": "property", "type": "String", "final": ""}, "NAME": {"description": "Class name.", "value": "\"dataSourceCacheExtension\"", "static": "", "guessedname": "NAME", "guessedtype": "property", "type": "String", "final": ""}}, "description": "DataSourceCache extension binds Cache to DataSource."}, "Test.Assert.ComparisonFailure": {"name": "Test.Assert.ComparisonFailure", "constructors": [{"params": [{"type": "String", "name": "message", "description": " The message to display when the error occurs."}, {"type": "Object", "name": "expected", "description": " The expected value."}, {"type": "Object", "name": "actual", "description": " The actual value that caused the assertion to fail."}], "description": "ComparisonFailure is subclass of Error that is thrown whenever\na comparison between two values fails. It provides mechanisms to retrieve\nboth the expected and actual value."}], "namespace": "Test", "module": "test", "guessedname": "ComparisonFailure", "methods": {"toString": {"return": {"type": "String", "description": "A string describing the error."}, "description": "Returns a fully formatted error for an assertion failure. This message\nprovides information about the expected and actual values.", "guessedname": "getMessage", "guessedtype": "function"}}, "extends": "Assert.Error", "superclass": "Assert.Error", "file": "test.js", "guessedtype": "function", "shortname": "Assert.ComparisonFailure", "properties": {"expected": {"type": "Object", "description": "The expected value.", "guessedname": "expected", "guessedtype": "property"}, "actual": {"type": "Object", "description": "The actual value.", "guessedname": "actual", "guessedtype": "property"}, "name": {"type": "String", "description": "The name of the error that occurred.", "guessedname": "name", "guessedtype": "property"}}, "description": "ComparisonFailure is subclass of Error that is thrown whenever\na comparison between two values fails. It provides mechanisms to retrieve\nboth the expected and actual value."}, "VMLGraphic": {"name": "VMLGraphic", "constructors": [{"description": "<a href=\"http://www.w3.org/TR/NOTE-VML\">VML</a> implementation of the <a href=\"Graphic.html\">`Graphic`</a> class. \n`VMLGraphic` is not intended to be used directly. Instead, use the <a href=\"Graphic.html\">`Graphic`</a> class. \nIf the browser lacks <a href=\"http://www.w3.org/TR/SVG/\">SVG</a> and <a href=\"http://www.w3.org/TR/html5/the-canvas-element.html\">Canvas</a> \ncapabilities, the <a href=\"Graphic.html\">`Graphic`</a> class will point to the `VMLGraphic` class."}], "namespace": "", "module": "graphics", "properties": {"_resizeDown": {"type": "Boolean", "private": "", "guessedname": "_resizeDown", "guessedtype": "property"}, "_shapeClass": {"guessedname": "_shapeClass", "type": "Object", "description": "Look up for shape classes. Used by `addShape` to retrieve a class for instantiation.", "private": "", "guessedtype": "property"}, "_y": {"guessedname": "_y", "type": "Number", "description": "Storage for `y` attribute.", "private": "", "guessedtype": "property"}, "_x": {"guessedname": "_x", "type": "Number", "description": "Storage for `x` attribute.", "private": "", "guessedtype": "property"}}, "guessedname": "VMLGraphic", "methods": {"_appendShape": {"description": "Adds a shape instance to the graphic instance.", "param": "{Shape} shape The shape instance to be added to the graphic.", "params": [{"type": "Shape", "name": "shape", "description": " The shape instance to be added to the graphic."}], "private": "", "guessedname": "_appendShape", "guessedtype": "function"}, "addToRedrawQueue": {"description": "Adds a shape to the redraw queue and calculates the contentBounds.", "param": "shape {VMLShape}", "protected": "", "params": [{"type": "VMLShape", "name": "shape", "description": ""}], "guessedname": "addToRedrawQueue", "guessedtype": "function"}, "render": {"param": "{HTMLElement} parentNode node in which to render the graphics node into.", "params": [{"type": "HTMLElement", "name": "parentNode", "description": " node in which to render the graphics node into."}], "description": "Adds the graphics node to the dom.", "guessedname": "render", "guessedtype": "function"}, "_createGraphic": {"private": "", "description": "Creates a group element", "guessedname": "_createGraphic", "guessedtype": "function"}, "_redraw": {"private": "", "description": "Redraws all shapes.", "guessedname": "_redraw", "guessedtype": "function"}, "_createGraphicNode": {"return": {"type": "", "description": "HTMLElement"}, "description": "Creates a graphic node", "private": "", "params": [{"type": "String", "name": "type", "description": " node type to create"}, {"type": "String", "name": "pe", "description": " specified pointer-events value"}], "param": "{String} type node type to create", "guessedname": "_createGraphicNode", "guessedtype": "function"}, "initializer": {"private": "", "description": "Initializes the class.", "guessedname": "initializer", "guessedtype": "function"}, "getShapeById": {"return": {"type": "", "description": "Shape"}, "description": "Returns a shape based on the id of its dom node.", "param": "{String} id Dom id of the shape's node attribute.", "params": [{"type": "String", "name": "id", "description": " Dom id of the shape's node attribute."}], "guessedname": "getShapeById", "guessedtype": "function"}, "_getDocFrag": {"guessedname": "_getDocFrag", "return": {"type": "", "description": "DocumentFragment"}, "description": "Returns a document fragment to for attaching shapes.", "private": "", "guessedtype": "function"}, "addShape": {"return": {"type": "", "description": "Shape"}, "description": "Generates a shape instance by type.", "param": "{Object} cfg attributes for the shape", "params": [{"type": "Object", "name": "cfg", "description": " attributes for the shape"}], "guessedname": "addShape", "guessedtype": "function"}, "_toggleVisible": {"description": "Toggles visibility", "param": "{Boolean} val indicates visibilitye", "params": [{"type": "Boolean", "name": "val", "description": " indicates visibilitye"}], "private": "", "guessedname": "_toggleVisible", "guessedtype": "function"}, "removeAllShapes": {"description": "Removes all shape instances from the dom.", "guessedname": "removeAllShapes", "guessedtype": "function"}, "_removeChildren": {"description": "Removes all child nodes.", "param": "node", "params": [{"type": "", "name": "node", "description": ""}], "private": "", "guessedname": "_removeChildren", "guessedtype": "function"}, "destroy": {"description": "Removes all nodes.", "guessedname": "destroy", "guessedtype": "function"}, "_getShapeClass": {"return": {"type": "", "description": "Function"}, "description": "Returns a shape class. Used by `addShape`.", "private": "", "params": [{"type": "Shape | String", "name": "val", "description": " Indicates which shape class."}], "param": "{Shape | String} val Indicates which shape class.", "guessedname": "_getShapeClass", "guessedtype": "function"}, "removeShape": {"param": "{Shape|String} shape The instance or id of the shape to be removed.", "params": [{"type": "Shape|String", "name": "shape", "description": " The instance or id of the shape to be removed."}], "description": "Removes a shape instance from from the graphic instance.", "guessedname": "removeShape", "guessedtype": "function"}, "setPosition": {"param": "{Number} x x-coordinate for the object.", "params": [{"type": "Number", "name": "x", "description": " x-coordinate for the object."}, {"type": "Number", "name": "y", "description": " y-coordinate for the object."}], "description": "Sets the positon of the graphics object.", "guessedname": "setPosition", "guessedtype": "function"}, "getXY": {"return": {"type": "", "description": "Array The XY position of the shape."}, "description": "Gets the current position of the graphic instance in page coordinates.", "guessedname": "getXY", "guessedtype": "function"}, "_getUpdatedContentBounds": {"guessedname": "_getUpdatedContentBounds", "return": {"type": "Object", "description": ""}, "description": "Recalculates and returns the `contentBounds` for the `Graphic` instance.", "private": "", "guessedtype": "function"}, "clear": {"description": "Clears the graphics object.", "guessedname": "clear", "guessedtype": "function"}, "batch": {"param": "{Function} method Method to execute.", "params": [{"type": "Function", "name": "method", "description": " Method to execute."}], "description": "Allows for creating multiple shapes in order to batch appending and redraw operations.", "guessedname": "batch", "guessedtype": "function"}, "setSize": {"param": "w {Number} width to set for the instance.", "params": [{"type": "Number", "name": "w", "description": "  width to set for the instance."}, {"type": "Number", "name": "h", "description": "  height to set for the instance."}], "description": "Sets the size of the graphics object.", "guessedname": "setSize", "guessedtype": "function"}}, "file": "graphics-vml-debug.js", "guessedtype": "function", "shortname": "VMLGraphic", "configs": {"node": {"type": "HTMLElement", "description": "The html element that represents to coordinate system of the Graphic instance.", "guessedname": "node", "guessedtype": "property"}, "autoSize": {"default": "false", "type": "Boolean", "description": "Determines how the size of instance is calculated. If true, the width and height are determined by the size of the contents.\nIf false, the width and height values are either explicitly set or determined by the size of the parent node's dimensions.", "guessedname": "autoSize", "guessedtype": "property"}, "resizeDown": {"type": "Boolean", "description": "The contentBounds will resize to greater values but not values. (for performance)\nWhen resizing the contentBounds down is desirable, set the resizeDown value to true.", "guessedname": "resizeDown", "guessedtype": "property"}, "render": {"type": "Node | String", "description": "Whether or not to render the `Graphic` automatically after to a specified parent node after init. This can be a Node instance or a CSS selector string.", "guessedname": "render", "guessedtype": "property"}, "height": {"type": "Number", "description": "Indicates the height of the `Graphic`.", "guessedname": "height", "guessedtype": "property"}, "shapes": {"readonly": "", "type": "Object", "description": "Key value pairs in which a shape instance is associated with its id.", "guessedname": "shapes", "guessedtype": "property"}, "width": {"type": "Number", "description": "Indicates the width of the `Graphic`.", "guessedname": "width", "guessedtype": "property"}, "contentBounds": {"type": "Object", "description": "Object containing size and coordinate data for the content of a Graphic in relation to the coordSpace node.", "guessedname": "contentBounds", "guessedtype": "property"}, "y": {"type": "Number", "description": "Indicates the y-coordinate for the instance.", "guessedname": "y", "guessedtype": "property"}, "x": {"type": "Number", "description": "Indicates the x-coordinate for the instance.", "guessedname": "x", "guessedtype": "property"}, "autoDraw": {"description": "Indicates whether or not the instance will automatically redraw after a change is made to a shape.\nThis property will get set to false when batching operations.", "default": "true", "private": "", "guessedname": "autoDraw", "guessedtype": "property", "type": "Boolean"}, "id": {"type": "String", "description": "Unique id for class instance.", "guessedname": "id", "guessedtype": "property"}}, "description": "<a href=\"http://www.w3.org/TR/NOTE-VML\">VML</a> implementation of the <a href=\"Graphic.html\">`Graphic`</a> class. \n`VMLGraphic` is not intended to be used directly. Instead, use the <a href=\"Graphic.html\">`Graphic`</a> class. \nIf the browser lacks <a href=\"http://www.w3.org/TR/SVG/\">SVG</a> and <a href=\"http://www.w3.org/TR/html5/the-canvas-element.html\">Canvas</a> \ncapabilities, the <a href=\"Graphic.html\">`Graphic`</a> class will point to the `VMLGraphic` class."}, "State": {"name": "State", "constructors": [{"description": "The State class maintains state for a collection of named items, with \na varying number of properties defined.\nIt avoids the need to create a separate class for the item, and separate instances \nof these classes for each item, by storing the state in a 2 level hash table, \nimproving performance when the number of items is likely to be large."}], "namespace": "", "module": "attribute", "guessedname": "State", "methods": {"addAll": {"param": "name {String} The name of the item.", "params": [{"type": "String", "name": "name", "description": "  The name of the item."}, {"type": "Object", "name": "o", "description": "  A hash of property/value pairs."}], "description": "Adds multiple properties to an item.", "guessedname": "addAll", "guessedtype": "function"}, "get": {"return": {"type": "Any", "description": "The value of the supplied property."}, "description": "For a given item, returns the value of the property requested, or undefined if not found.", "param": "name {String} The name of the item", "params": [{"type": "String", "name": "name", "description": "  The name of the item"}, {"type": "String", "name": "key", "description": "  Optional. The property value to retrieve."}], "guessedname": "get", "guessedtype": "function"}, "getAll": {"return": {"type": "Object", "description": "An object with property/value pairs for the item."}, "description": "For the given item, returns a disposable object with all of the\nitem's property/value pairs.", "param": "name {String} The name of the item", "params": [{"type": "String", "name": "name", "description": "  The name of the item"}], "guessedname": "getAll", "guessedtype": "function"}, "remove": {"param": "name {String} The name of the item.", "params": [{"type": "String", "name": "name", "description": "  The name of the item."}, {"type": "String", "name": "key", "description": "  The property to remove."}], "description": "Removes a property from an item.", "guessedname": "remove", "guessedtype": "function"}, "removeAll": {"param": "name {String} The name of the item.", "params": [{"type": "String", "name": "name", "description": "  The name of the item."}, {"type": "Object|Array", "name": "o", "description": "  Collection of properties to delete. If not provided, the entire item is removed."}], "description": "Removes multiple properties from an item, or remove the item completely.", "guessedname": "removeAll", "guessedtype": "function"}, "add": {"param": "name {String} The name of the item.", "params": [{"type": "String", "name": "name", "description": "  The name of the item."}, {"type": "String", "name": "key", "description": "  The name of the property."}, {"type": "Any", "name": "val", "description": "  The value of the property."}], "description": "Adds a property to an item.", "guessedname": "add", "guessedtype": "function"}}, "file": "attribute-base.js", "guessedtype": "function", "shortname": "State", "properties": {"data": {"description": "Hash of attributes", "guessedname": "data", "guessedtype": "property"}}, "description": "The State class maintains state for a collection of named items, with \na varying number of properties defined.\nIt avoids the need to create a separate class for the item, and separate instances \nof these classes for each item, by storing the state in a 2 level hash table, \nimproving performance when the number of items is likely to be large."}, "HistoryHash": {"since": "3.2.0", "name": "HistoryHash", "description": "Provides browser history management backed by\n<code>window.location.hash</code>, as well as convenience methods for working\nwith the location hash and a synthetic <code>hashchange</code> event that\nnormalizes differences across browsers.", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " (optional) Configuration object. See the HistoryBase\ndocumentation for details."}], "description": "Provides browser history management backed by\n<code>window.location.hash</code>, as well as convenience methods for working\nwith the location hash and a synthetic <code>hashchange</code> event that\nnormalizes differences across browsers."}], "namespace": "", "module": "history", "guessedname": "HistoryBase", "extends": "HistoryBase", "superclass": "HistoryBase", "file": "history-hash.js", "guessedtype": "property", "shortname": "HistoryHash", "properties": {"_REGEX_HASH": {"description": "Regular expression used to parse location hash/query strings.", "protected": "", "static": "", "guessedname": "_REGEX_HASH", "guessedtype": "property", "type": "RegExp", "final": ""}, "SRC_HASH": {"description": "Constant used to identify state changes originating from\n<code>hashchange</code> events.", "static": "", "guessedname": "SRC_HASH", "guessedtype": "property", "type": "String", "final": ""}, "hashPrefix": {"description": "<p>\nPrefix to prepend when setting the hash fragment. For example, if the\nprefix is <code>!</code> and the hash fragment is set to\n<code>#foo=bar&baz=quux</code>, the final hash fragment in the URL will\nbecome <code>#!foo=bar&baz=quux</code>. This can be used to help make an\nAjax application crawlable in accordance with Google's guidelines at\n<a href=\"http://code.google.com/web/ajaxcrawling/\">http://code.google.com/web/ajaxcrawling/</a>.\n</p>\n<p>\nNote that this prefix applies to all HistoryHash instances. It's not\npossible for individual instances to use their own prefixes since they\nall operate on the same URL.\n</p>", "default": "''", "static": "", "guessedname": "hashPrefix", "guessedtype": "property", "type": "String"}}, "methods": {"_updateIframe": {"description": "Updates the history iframe with the specified hash.", "param": "{String} hash location hash", "protected": "", "static": "", "guessedname": "_updateIframe", "guessedtype": "function", "params": [{"type": "String", "name": "hash", "description": " location hash"}, {"type": "Boolean", "name": "replace", "description": " (optional) if <code>true</code>, the current\nhistory state will be replaced without adding a new history entry"}]}, "replaceHash": {"description": "Replaces the browser's current location hash with the specified hash\nand removes all forward navigation states, without creating a new browser\nhistory entry. Automatically prepends the <code>hashPrefix</code> if one\nis set.", "param": "{String} hash new location hash", "static": "", "guessedname": "replaceHash", "guessedtype": "function", "params": [{"type": "String", "name": "hash", "description": " new location hash"}]}, "getUrl": {"static": "", "return": {"type": "String", "description": "current bookmarkable URL"}, "description": "Gets the current bookmarkable URL.", "guessedname": "getUrl", "guessedtype": "function"}, "setHash": {"description": "Sets the browser's location hash to the specified string. Automatically\nprepends the <code>hashPrefix</code> if one is set.", "param": "{String} hash new location hash", "static": "", "guessedname": "setHash", "guessedtype": "function", "params": [{"type": "String", "name": "hash", "description": " new location hash"}]}, "decode": {"return": {"type": "String", "description": "decoded string"}, "description": "Wrapper around <code>decodeURIComponent()</code> that also converts +\nchars into spaces.", "param": "{String} string string to decode", "static": "", "guessedname": "decode", "guessedtype": "function", "params": [{"type": "String", "name": "string", "description": " string to decode"}]}, "getIframeHash": {"static": "", "return": {"type": "String", "description": "current iframe hash"}, "description": "Gets the raw (not decoded) current location hash from the IE iframe,\nminus the preceding '#' character and the hashPrefix (if one is set).", "guessedname": "getIframeHash", "guessedtype": "function"}, "getHash": {"static": "", "return": {"type": "String", "description": "current location hash"}, "description": "Gets the raw (not decoded) current location hash, minus the preceding '#'\ncharacter and the hashPrefix (if one is set).", "guessedname": "getHash", "guessedtype": "function"}, "createHash": {"return": {"type": "String", "description": "location hash string"}, "description": "Creates a location hash string from the specified object of key/value\npairs.", "param": "{Object} params object of key/value parameter pairs", "static": "", "guessedname": "createHash", "guessedtype": "function", "params": [{"type": "Object", "name": "params", "description": " object of key/value parameter pairs"}]}, "_afterHashChange": {"description": "Handler for hashchange events.", "param": "{Event} e", "protected": "", "params": [{"type": "Event", "name": "e", "description": ""}], "guessedname": "_afterHashChange", "guessedtype": "function"}, "encode": {"return": {"type": "String", "description": "encoded string"}, "description": "Wrapper around <code>encodeURIComponent()</code> that converts spaces to\n+ chars.", "param": "{String} string string to encode", "static": "", "guessedname": "encode", "guessedtype": "function", "params": [{"type": "String", "name": "string", "description": " string to encode"}]}, "parseHash": {"return": {"type": "Object", "description": "object of parsed key/value parameter pairs"}, "description": "Parses a location hash string into an object of key/value parameter\npairs. If <i>hash</i> is not specified, the current location hash will\nbe used.", "param": "{String} hash (optional) location hash string", "static": "", "guessedname": "parseHash", "guessedtype": "function", "params": [{"type": "String", "name": "hash", "description": " (optional) location hash string"}]}}}, "Test.Format": {"name": "Test.Format", "namespace": "Test", "module": "test", "methods": {"XML": {"return": {"type": "String", "description": "An XML-formatted string of results."}, "description": "Returns test results formatted as an XML string.", "param": "{Object} result The results object created by TestRunner.", "static": "", "guessedname": "XML", "guessedtype": "function", "params": [{"type": "Object", "name": "result", "description": " The results object created by TestRunner."}]}, "JSON": {"return": {"type": "String", "description": "A JSON-formatted string of results."}, "description": "Returns test results formatted as a JSON string. Requires JSON utility.", "param": "{Object} result The results object created by TestRunner.", "static": "", "guessedname": "JSON", "guessedtype": "function", "params": [{"type": "Object", "name": "result", "description": " The results object created by TestRunner."}]}, "JUnitXML": {"return": {"type": "String", "description": "An XML-formatted string of results."}, "description": "Returns test results formatted in JUnit XML format.", "param": "{Object} result The results object created by TestRunner.", "static": "", "guessedname": "JUnitXML", "guessedtype": "function", "params": [{"type": "Object", "name": "result", "description": " The results object created by TestRunner."}]}, "TAP": {"return": {"type": "String", "description": "A TAP-formatted string of results."}, "description": "Returns test results formatted in TAP format.\nFor more information, see <a href=\"http://testanything.org/\">Test Anything Protocol</a>.", "param": "{Object} result The results object created by TestRunner.", "static": "", "guessedname": "TAP", "guessedtype": "function", "params": [{"type": "Object", "name": "result", "description": " The results object created by TestRunner."}]}}, "static": "", "file": "test.js", "shortname": "Format", "description": "Contains specific formatting options for test result information."}, "DateCellEditor": {"name": "DateCellEditor", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "DateCellEditor class.\nCheck the list of <a href=\"DateCellEditor.html#configattributes\">Configuration Attributes</a> available for\nDateCellEditor."}], "namespace": "", "module": "aui-component", "guessedname": "DateCellEditor", "extends": "A.DateCellEditor", "superclass": "A.DateCellEditor", "file": "aui-datatable.js", "guessedtype": "property", "shortname": "DateCellEditor", "description": "DateCellEditor class.\nCheck the list of <a href=\"DateCellEditor.html#configattributes\">Configuration Attributes</a> available for\nDateCellEditor."}, "CustomEvent": {"name": "CustomEvent", "constructors": [{"params": [{"type": "String", "name": "type", "description": " The type of event, which is passed to the callback\nwhen the event fires."}, {"type": "object", "name": "o", "description": " configuration object."}], "description": "The CustomEvent class lets you define events for your application\nthat can be subscribed to by one or more independent component."}], "namespace": "", "module": "event-custom", "guessedname": "CustomEvent", "methods": {"_notify": {"description": "Notify a single subscriber", "param": "{Subscriber} s the subscriber.", "protected": "", "params": [{"type": "Subscriber", "name": "s", "description": " the subscriber."}, {"type": "Array", "name": "args", "description": " the arguments array to apply to the listener."}], "guessedname": "_notify", "guessedtype": "function"}, "_delete": {"description": "Deletes the subscriber from the internal store of on() and after()\nsubscribers.", "param": "subscriber object.", "params": [{"type": "", "name": "subscriber", "description": " object."}], "private": "", "guessedname": "_delete", "guessedtype": "function"}, "stopPropagation": {"description": "Stop propagation to bubble targets", "guessedname": "stopPropagation", "guessedtype": "function"}, "monitor": {"return": {"type": "EventHandle", "description": "return value from the monitor event subscription."}, "description": "Monitor the event state for the subscribed event.  The first parameter\nis what should be monitored, the rest are the normal parameters when\nsubscribing to an event.", "param": "what {string} what to monitor ('detach', 'attach', 'publish').", "params": [{"type": "string", "name": "what", "description": "  what to monitor ('detach', 'attach', 'publish')."}], "guessedname": "monitor", "guessedtype": "function"}, "applyConfig": {"param": "o hash of properties to apply.", "params": [{"type": "", "name": "o", "description": " hash of properties to apply."}, {"type": "boolean", "name": "force", "description": "  if true, properties that exist on the event\nwill be overwritten."}], "description": "Apply configuration properties.  Only applies the CONFIG whitelist", "guessedname": "applyConfig", "guessedtype": "function"}, "_broadcast": {"description": "Notifies the YUI instance if the event is configured with broadcast = 1,\nand both the YUI instance and Y.Global if configured with broadcast = 2.", "param": "args {Array} Arguments sent to fire()", "params": [{"type": "Array", "name": "args", "description": "  Arguments sent to fire()"}], "private": "", "guessedname": "_broadcast", "guessedtype": "function"}, "stopImmediatePropagation": {"description": "Stops propagation to bubble targets, and prevents any remaining\nsubscribers on the current target from executing.", "guessedname": "stopImmediatePropagation", "guessedtype": "function"}, "halt": {"param": "immediate {boolean} if true additional listeners\non the current target will not be executed", "params": [{"type": "boolean", "name": "immediate", "description": "  if true additional listeners\non the current target will not be executed"}], "description": "Stops the event propagation and prevents the default\nevent behavior.", "guessedname": "halt", "guessedtype": "function"}, "fire": {"return": {"type": "boolean", "description": "false if one of the subscribers returned false,\ntrue otherwise."}, "description": "Notifies the subscribers.  The callback functions will be executed\nfrom the context specified when the event was created, and with the\nfollowing parameters:\n<ul>\n<li>The type of event</li>\n<li>All of the arguments fire() was executed with as an array</li>\n<li>The custom object (if any) that was passed into the subscribe()\nmethod</li>\n</ul>", "param": "{Object*} arguments an arbitrary set of parameters to pass to\nthe handler.", "params": [{"type": "Object*", "name": "arguments", "description": " an arbitrary set of parameters to pass to\nthe handler."}], "guessedname": "fire", "guessedtype": "function"}, "unsubscribeAll": {"deprecated": "use detachAll.", "return": {"type": "int", "description": "The number of listeners unsubscribed."}, "description": "Removes all listeners", "guessedname": "unsubscribeAll", "guessedtype": "function"}, "after": {"return": {"type": "EventHandle", "description": "handle Unsubscribe handle."}, "description": "Listen for this event after the normal subscribers have been notified and\nthe default behavior has been applied.  If a normal subscriber prevents the\ndefault behavior, it also prevents after listeners from firing.", "param": "{Function} fn The function to execute.", "params": [{"type": "Function", "name": "fn", "description": " The function to execute."}, {"type": "object", "name": "context", "description": " optional execution context."}, {"type": "mixed", "name": "arg*", "description": " 0..n additional arguments to supply to the subscriber\nwhen the event fires."}], "guessedname": "after", "guessedtype": "function"}, "_procSubs": {"return": {"type": "", "description": "Boolean false if a subscriber returns false or stops the event\npropagation via e.stopPropagation(),\ne.stopImmediatePropagation(), or e.halt()"}, "description": "Notifies a list of subscribers.", "private": "", "params": [{"type": "Array", "name": "subs", "description": "  List of subscribers"}, {"type": "Array", "name": "args", "description": "  Arguments passed to fire()"}, {"type": "", "name": "ef", "description": ""}], "param": "subs {Array} List of subscribers", "guessedname": "_procSubs", "guessedtype": "function"}, "unsubscribe": {"return": {"type": "int|undefined", "description": "returns the number of subscribers unsubscribed."}, "description": "Detach listeners.", "deprecated": "use detach.", "param": "{Function} fn  The subscribed function to remove, if not supplied\nall will be removed.", "params": [{"type": "Function", "name": "fn", "description": "  The subscribed function to remove, if not supplied\nall will be removed."}, {"type": "Object", "name": "context", "description": " The context object passed to subscribe."}], "guessedname": "unsubscribe", "guessedtype": "function"}, "detach": {"return": {"type": "int", "description": "returns the number of subscribers unsubscribed."}, "description": "Detach listeners.", "param": "{Function} fn  The subscribed function to remove, if not supplied\nall will be removed.", "params": [{"type": "Function", "name": "fn", "description": "  The subscribed function to remove, if not supplied\nall will be removed."}, {"type": "Object", "name": "context", "description": " The context object passed to subscribe."}], "guessedname": "detach", "guessedtype": "function"}, "log": {"param": "{string} msg message to log.", "params": [{"type": "string", "name": "msg", "description": " message to log."}, {"type": "string", "name": "cat", "description": " log category."}], "description": "Logger abstraction to centralize the application of the silent flag", "guessedname": "log", "guessedtype": "function"}, "on": {"return": {"type": "EventHandle", "description": "An object with a detach method to detch the handler(s)."}, "description": "Listen for this event", "param": "{Function} fn The function to execute.", "params": [{"type": "Function", "name": "fn", "description": " The function to execute."}, {"type": "object", "name": "context", "description": " optional execution context."}, {"type": "mixed", "name": "arg*", "description": " 0..n additional arguments to supply to the subscriber\nwhen the event fires."}], "guessedname": "on", "guessedtype": "function"}, "subscribe": {"return": {"type": "EventHandle", "description": "Unsubscribe handle."}, "description": "Listen for this event", "deprecated": "use on.", "param": "{Function} fn The function to execute.", "params": [{"type": "Function", "name": "fn", "description": " The function to execute."}], "guessedname": "subscribe", "guessedtype": "function"}, "fireSimple": {"return": {"type": "", "description": "Boolean false if a subscriber returned false"}, "description": "Set up for notifying subscribers of non-emitFacade events.", "param": "args {Array} Arguments passed to fire()", "protected": "", "params": [{"type": "Array", "name": "args", "description": "  Arguments passed to fire()"}], "guessedname": "fireSimple", "guessedtype": "function"}, "preventDefault": {"description": "Prevents the execution of this event's defaultFn", "guessedname": "preventDefault", "guessedtype": "function"}, "detachAll": {"return": {"type": "int", "description": "The number of listeners unsubscribed."}, "description": "Removes all listeners", "guessedname": "detachAll", "guessedtype": "function"}, "getSubs": {"return": {"type": "Array", "description": "first item is the on subscribers, second the after."}, "description": "Get all of the subscribers to this event and any sibling event", "guessedname": "getSubs", "guessedtype": "function"}, "_on": {"return": {"type": "EventHandle", "description": ""}, "description": "Create the Subscription for subscribing function, context, and bound\narguments.  If this is a fireOnce event, the subscriber is immediately \nnotified.", "param": "fn {Function} Subscription callback", "protected": "", "params": [{"type": "Function", "name": "fn", "description": "  Subscription callback"}, {"type": "Object", "name": "[context]", "description": "  Override `this` in the callback"}, {"type": "Array", "name": "[args]", "description": "  bound arguments that will be passed to the callback after the arguments generated by fire()"}, {"type": "String", "name": "[when]", "description": "  \"after\" to slot into after subscribers"}], "guessedname": "_on", "guessedtype": "function"}, "hasSubs": {"return": {"type": "", "description": "Number"}, "description": "Returns the number of subscribers for this event as the sum of the on()\nsubscribers and after() subscribers.", "guessedname": "hasSubs", "guessedtype": "function"}}, "file": "event-custom-base.js", "guessedtype": "function", "shortname": "CustomEvent", "properties": {"fired": {"default": "false;", "type": "boolean", "description": "This event has fired if true"}, "afters": {"type": "Subscriber {}", "description": "'After' subscribers", "guessedname": "afters", "guessedtype": "property"}, "monitored": {"type": "boolean", "description": "Monitor when an event is attached or detached."}, "silent": {"type": "boolean", "description": "By default all custom events are logged in the debug build, set silent\nto true to disable debug outpu for this event.", "guessedname": "silent", "guessedtype": "property"}, "firedWith": {"type": "Array", "description": "An array containing the arguments the custom event\nwas last fired with."}, "preventable": {"default": "true", "type": "boolean", "description": "Specifies whether or not this event's default function\ncan be cancelled by a subscriber by executing preventDefault()\non the event facade", "guessedname": "preventable", "guessedtype": "property"}, "stoppedFn": {"type": "Function", "description": "The function to execute if a subscriber calls\nstopPropagation or stopImmediatePropagation"}, "type": {"type": "string", "description": "The type of event, returned to subscribers when the event fires", "guessedname": "type", "guessedtype": "property"}, "defaultFn": {"type": "Function", "description": "The default function to execute after event listeners\nhave fire, but only if the default action was not\nprevented."}, "prevented": {"type": "int", "description": "Flag for preventDefault that is modified during fire().\nif it is not 0, the default behavior for this event"}, "queuable": {"default": "false", "type": "boolean", "description": "Specifies whether this event should be queued when the host is actively\nprocessing an event.  This will effect exectution order of the callbacks\nfor the various events."}, "host": {"type": "EventTarget", "description": "Specifies the host for this custom event.  This is used\nto enable event bubbling"}, "subscribers": {"type": "Subscriber {}", "description": "The subscribers to this event", "guessedname": "subscribers", "guessedtype": "property"}, "emitFacade": {"default": "false", "type": "boolean", "description": "If set to true, the custom event will deliver an EventFacade object\nthat is similar to a DOM event object."}, "bubbles": {"default": "true", "type": "boolean", "description": "Specifies whether or not a subscriber can stop the event propagation\nvia stopPropagation(), stopImmediatePropagation(), or halt()\nEvents can only bubble if emitFacade is true.", "guessedname": "bubbles", "guessedtype": "property"}, "broadcast": {"type": "int", "description": "If 0, this event does not broadcast.  If 1, the YUI instance is notified\nevery time this event fires.  If 2, the YUI instance and the YUI global\n(if event is enabled on the global) are notified every time this event\nfires."}, "fireOnce": {"default": "false;", "type": "boolean", "description": "This event should only fire one time if true, and if\nit has fired, any new subscribers should be notified\nimmediately."}, "preventedFn": {"type": "Function", "description": "The function to execute if a subscriber calls\npreventDefault"}, "stopped": {"type": "int", "description": "Flag for stopPropagation that is modified during fire()\n1 means to stop propagation to bubble targets.  2 means\nto also stop additional subscribers on this target."}, "context": {"type": "object", "description": "The context the the event will fire from by default.  Defaults to the YUI\ninstance.", "guessedname": "context", "guessedtype": "property"}, "signature": {"default": "9", "type": "int", "description": "Supports multiple options for listener signatures in order to\nport YUI 2 apps.", "guessedname": "signature", "guessedtype": "property"}, "async": {"default": "false", "type": "boolean", "description": "fireOnce listeners will fire syncronously unless async\nis set to true"}}, "description": "The CustomEvent class lets you define events for your application\nthat can be subscribed to by one or more independent component."}, "Circle": {"name": "Circle", "constructors": [{"description": "<p>Creates circle shape with editable attributes.</p> \n<p>`Circle` instances can be created using the <a href=\"Graphic.html#method_addShape\">`addShape`</a> method of the <a href=\"Graphic.html\">`Graphic`</a> class. \nThe method's `cfg` argument contains a `type` attribute. Assigning \"circle\" or `Y.Circle` to this attribute will create a `Circle` instance. Required attributes\nfor instantiating a `Circle` are `type` and `radius`. Optional attributes include:\n<ul>\n<li><a href=\"#attr_fill\">fill</a></li>\n<li><a href=\"#attr_id\">id</a></li>\n<li><a href=\"#attr_stroke\">stroke</a></li>\n<li><a href=\"#attr_transform\">transform</a></li>\n<li><a href=\"#attr_transformOrigin\">transformOrigin</a></li>\n<li><a href=\"#attr_visible\">visible</a></li>\n<li><a href=\"#attr_x\">x</a></li>\n<li><a href=\"#attr_y\">y</a></li>\n</ul>\nThe below code creates a circle by defining the `type` attribute as \"circle\":</p>\nvar myCircle = myGraphic.addShape({\ntype: \"circle\",\nradius: 10,\nfill: {\ncolor: \"#9aa\"\n},\nstroke: {\nweight: 1,\ncolor: \"#000\"\n}\n});\nBelow, this same circle is created by defining the `type` attribute with a class reference:\nvar myCircle = myGraphic.addShape({\ntype: Y.Circle,\nradius: 10,\nfill: {\ncolor: \"#9aa\"\n},\nstroke: {\nweight: 1,\ncolor: \"#000\"\n}\n});\n<p>`Circle` has the following implementations based on browser capability.\n<ul>\n<li><a href=\"SVGCircle.html\">`SVGCircle`</a></li>\n<li><a href=\"VMLCircle.html\">`VMLCircle`</a></li>\n<li><a href=\"CanvasCircle.html\">`CanvasCircle`</a></li>\n</ul>\nIt is not necessary to interact with these classes directly. `Circle` will point to the appropriate implemention.</p>"}], "namespace": "", "module": "graphics", "extends": "Shape", "superclass": "Shape", "file": "graphics.js", "shortname": "Circle", "configs": {"radius": {"type": "Number", "description": "Radius of the circle"}}, "description": "<p>Creates circle shape with editable attributes.</p> \n<p>`Circle` instances can be created using the <a href=\"Graphic.html#method_addShape\">`addShape`</a> method of the <a href=\"Graphic.html\">`Graphic`</a> class. \nThe method's `cfg` argument contains a `type` attribute. Assigning \"circle\" or `Y.Circle` to this attribute will create a `Circle` instance. Required attributes\nfor instantiating a `Circle` are `type` and `radius`. Optional attributes include:\n<ul>\n<li><a href=\"#attr_fill\">fill</a></li>\n<li><a href=\"#attr_id\">id</a></li>\n<li><a href=\"#attr_stroke\">stroke</a></li>\n<li><a href=\"#attr_transform\">transform</a></li>\n<li><a href=\"#attr_transformOrigin\">transformOrigin</a></li>\n<li><a href=\"#attr_visible\">visible</a></li>\n<li><a href=\"#attr_x\">x</a></li>\n<li><a href=\"#attr_y\">y</a></li>\n</ul>\nThe below code creates a circle by defining the `type` attribute as \"circle\":</p>\nvar myCircle = myGraphic.addShape({\ntype: \"circle\",\nradius: 10,\nfill: {\ncolor: \"#9aa\"\n},\nstroke: {\nweight: 1,\ncolor: \"#000\"\n}\n});\nBelow, this same circle is created by defining the `type` attribute with a class reference:\nvar myCircle = myGraphic.addShape({\ntype: Y.Circle,\nradius: 10,\nfill: {\ncolor: \"#9aa\"\n},\nstroke: {\nweight: 1,\ncolor: \"#000\"\n}\n});\n<p>`Circle` has the following implementations based on browser capability.\n<ul>\n<li><a href=\"SVGCircle.html\">`SVGCircle`</a></li>\n<li><a href=\"VMLCircle.html\">`VMLCircle`</a></li>\n<li><a href=\"CanvasCircle.html\">`CanvasCircle`</a></li>\n</ul>\nIt is not necessary to interact with these classes directly. `Circle` will point to the appropriate implemention.</p>"}, "WidgetModality": {"name": "WidgetModality", "namespace": "", "module": "widget-modality", "events": {"modalChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "modalChange", "description": "Fires when the value for the configuration attribute 'modal' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "maskNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "maskNodeChange", "description": "Fires when the value for the configuration attribute 'maskNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "focusOnChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "focusOnChange", "description": "Fires when the value for the configuration attribute 'focusOn' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "configs": {"focusOn": {"type": "array", "description": "An array of objects corresponding to the nodes and events that will trigger a re-focus back on the widget.\nThe implementer can supply an array of objects, with each object having the following properties:\n<p>eventName: (string, required): The eventName to listen to.</p>\n<p>node: (Y.Node, optional): The Y.Node that will fire the event (defaults to the boundingBox of the widget)</p>\n<p>By default, this attribute consists of two objects which will cause the widget to re-focus if anything \noutside the widget is clicked on or focussed upon.</p>", "guessedname": "focusOn", "guessedtype": "property"}, "maskNode": {"type": "Y.Node", "description": "Returns a Y.Node instance of the node being used as the mask.", "guessedname": "maskNode", "guessedtype": "property"}, "modal": {"type": "boolean", "description": "Whether the widget should be modal or not.", "guessedname": "modal", "guessedtype": "property"}}, "methods": {"_GET_MASK": {"static": "", "description": "Returns the mask if it exists on the page - otherwise creates a mask. There's only\none mask on a page at a given time.\n<p>\nThis method in invoked internally by the getter of the maskNode ATTR.\n</p>", "guessedname": "_GET_MASK", "guessedtype": "function"}, "_attachUIHandlesModal": {"description": "Attaches UI Listeners for \"clickoutside\" and \"focusoutside\" on the widget. When these events occur, and the widget is modal, focus is shifted back onto the widget.", "guessedname": "_attachUIHandlesModal", "guessedtype": "function"}, "_blur": {"description": "Blurs the widget.", "guessedname": "_blur", "guessedtype": "function"}, "_resyncMask": {"description": "Resyncs the mask in the viewport for browsers that don't support fixed positioning", "param": "{Y.Widget} nextElem The Y.Widget instance that will be visible in the stack once the current widget is closed.", "params": [{"type": "Y.Widget", "name": "nextElem", "description": " The Y.Widget instance that will be visible in the stack once the current widget is closed."}], "private": "", "guessedname": "_resyncMask", "guessedtype": "function"}, "_afterHostVisibleChangeModal": {"param": "{EventFacade} e The event facade of the change", "params": [{"type": "EventFacade", "name": "e", "description": " The event facade of the change"}], "description": "Default function that is called when visibility is changed on the widget.", "guessedname": "_afterHostVisibleChangeModal", "guessedtype": "function"}, "_detachUIHandlesModal": {"description": "Detaches all UI Listeners that were set in _attachUIHandlesModal from the widget.", "guessedname": "_detachUIHandlesModal", "guessedtype": "function"}, "_renderUIModal": {"protected": "", "description": "Adds modal class to the bounding box of the widget\n<p>\nThis method in invoked after renderUI is invoked for the Widget class\nusing YUI's aop infrastructure.\n</p>", "guessedname": "_renderUIModal", "guessedtype": "function"}, "_syncUIModal": {"protected": "", "description": "Syncs the mask with the widget's current state, namely the visibility and z-index of the widget\n<p>\nThis method in invoked after syncUI is invoked for the Widget class\nusing YUI's aop infrastructure.\n</p>", "guessedname": "_syncUIModal", "guessedtype": "function"}, "_uiSetHostVisibleModal": {"param": "{boolean} Whether the widget is visible or not", "params": [{"type": "boolean", "name": "Whether", "description": " the widget is visible or not"}], "description": "Performs events attaching/detaching, stack shifting and mask repositioning based on the visibility of the widget", "guessedname": "_uiSetHostVisibleModal", "guessedtype": "function"}, "_focus": {"description": "Provides mouse and tab focus to the widget's bounding box.", "guessedname": "_focus", "guessedtype": "function"}, "_getMaskNode": {"return": {"type": "Node", "description": "The Y.Node instance of the mask, as returned from WidgetModal._GET_MASK"}, "description": "Returns the Y.Node instance of the maskNode", "guessedname": "_getMaskNode", "guessedtype": "function"}, "isNested": {"description": "Returns a boolean representing whether the current widget is in a \"nested modality\" state.\nThis is done by checking the number of widgets currently on the stack.", "public": "", "guessedname": "isNested", "guessedtype": "function"}, "_afterFocusOnChange": {"description": "Default function called when focusOn Attribute is changed. Remove existing listeners and create new listeners.", "guessedname": "_afterFocusOnChange", "guessedtype": "function"}, "_uiSetHostZIndexModal": {"param": "{Number} Z-Index of the widget", "params": [{"type": "Number", "name": "Z-Index", "description": " of the widget"}], "description": "Sets the z-index of the mask node.", "guessedname": "_uiSetHostZIndexModal", "guessedtype": "function"}, "_repositionMask": {"param": "{Widget} nextElem The Y.Widget instance that will be visible in the stack once the current widget is closed.", "params": [{"type": "Widget", "name": "nextElem", "description": " The Y.Widget instance that will be visible in the stack once the current widget is closed."}], "description": "Repositions the mask in the DOM for nested modality cases.", "guessedname": "_repositionMask", "guessedtype": "function"}, "_afterHostZIndexChangeModal": {"param": "{EventFacade} e The event facade of the change", "params": [{"type": "EventFacade", "name": "e", "description": " The event facade of the change"}], "description": "Default function that is called when z-index is changed on the widget.", "guessedname": "_afterHostZIndexChangeModal", "guessedtype": "function"}, "_bindUIModal": {"protected": "", "description": "Hooks up methods to be executed when the widget's visibility or z-index changes\n<p>\nThis method in invoked after bindUI is invoked for the Widget class\nusing YUI's aop infrastructure.\n</p>", "guessedname": "_bindUIModal", "guessedtype": "function"}}, "param": "{Object} config User configuration object", "file": "widget-modality.js", "shortname": "WidgetModality", "properties": {"ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute \nconfiguration introduced by WidgetModality.", "guessedname": "ATTRS", "guessedtype": "property"}, "STACK": {"description": "A stack of Y.Widget objects representing the current hierarchy of modal widgets presently displayed on the screen", "guessedname": "STACK", "guessedtype": "property"}}, "description": "Widget extension, which can be used to add modality support to the base Widget class, \nthrough the Base.create method."}, "Plugin.Drop": {"name": "Plugin.Drop", "constructors": [{"description": "Simple Drop plugin that can be attached to a Node via the plug method."}], "namespace": "Plugin", "module": "dd", "guessedname": "Drop", "extends": "DD.Drop", "superclass": "DD.Drop", "file": "dd-drop-plugin.js", "guessedtype": "function", "shortname": "Drop", "properties": {"NS": {"type": "{String}", "description": "The Drop instance will be placed on the Node instance under the drop namespace. It can be accessed via Node.drop;", "guessedname": "NS", "guessedtype": "property"}, "NAME": {"type": "{String}", "description": "dd-drop-plugin", "guessedname": "NAME", "guessedtype": "property"}}, "description": "Simple Drop plugin that can be attached to a Node via the plug method."}, "OverlayContextPanelManager": {"name": "OverlayContextPanelManager", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "A base class for OverlayContextPanelManager:"}], "namespace": "", "module": "aui-overlay", "guessedname": "OverlayContextPanelManager", "static": "", "superclass": "OverlayManager", "file": "aui-overlay.js", "guessedtype": "property", "extends": "OverlayManager", "shortname": "OverlayContextPanelManager", "description": "A base class for OverlayContextPanelManager:"}, "JSONPRequest": {"methods": {"_format": {"return": {"type": "String", "description": "fully qualified JSONP url"}, "description": "URL formatter that looks for callback= in the url and appends it\nif not present.  The supplied proxy name will be assigned to the query\nparam.  Override this method by passing a function as the\n&quot;format&quot; property in the config object to the constructor.", "param": "url { String } the original url", "protected": "", "params": [{"type": " String ", "name": "url", "description": "  the original url"}, {"type": "String", "name": "proxy", "description": "  the function name that will be used as a proxy to\nthe configured callback methods."}], "guessedname": "_format", "guessedtype": "function"}, "_defaultCallback": {"return": {"type": "Function", "description": "the callback function if found, or null"}, "description": "<p>Parses the url for a callback named explicitly in the string.\nOverride this if the target JSONP service uses a different query\nparameter or url format.</p>\n<p>If the callback is declared inline, the corresponding function will\nbe returned.  Otherwise null.</p>", "param": "url {String} the url to search in", "protected": "", "params": [{"type": "String", "name": "url", "description": "  the url to search in"}], "guessedname": "_defaultCallback", "guessedtype": "function"}, "_init": {"description": "Set up the success and failure handlers and the regex pattern used\nto insert the temporary callback name in the url.", "param": "url {String} the url of the JSONP service", "protected": "", "params": [{"type": "String", "name": "url", "description": "  the url of the JSONP service"}, {"type": "Object|Function", "name": "callback", "description": "  Optional success callback or config\nobject containing success and failure functions and\nthe url regex."}], "guessedname": "_init", "guessedtype": "function"}, "send": {"description": "Issues the JSONP request.", "chainable": "", "param": "args* {any} any additional arguments to pass to the url formatter\nbeyond the base url and the proxy function name", "params": [{"type": "any", "name": "args*", "description": "  any additional arguments to pass to the url formatter\nbeyond the base url and the proxy function name"}], "guessedname": "send", "guessedtype": "function"}}, "description": "<p>Provides a JSONPRequest class for repeated JSONP calls, and a convenience\nmethod Y.jsonp(url, callback) to instantiate and send a JSONP request.</p>\n<p>Both the constructor as well as the convenience function take two\nparameters: a url string and a callback.</p>\n<p>The url provided must include the placeholder string\n&quot;{callback}&quot; which will be replaced by a dynamically\ngenerated routing function to pass the data to your callback function.\nAn example url might look like\n&quot;http://example.com/service?callback={callback}&quot;.</p>\n<p>The second parameter can be a callback function that accepts the JSON\npayload as its argument, or a configuration object supporting the keys:</p>\n<ul>\n<li>on - map of callback subscribers\n<ul>\n<li>success - function handler for successful transmission</li>\n<li>failure - function handler for failed transmission</li>\n<li>timeout - function handler for transactions that timeout</li>\n</ul>\n</li>\n<li>format  - override function for inserting the proxy name in the url</li>\n<li>timeout - the number of milliseconds to wait before giving up</li>\n<li>context - becomes <code>this</code> in the callbacks</li>\n<li>args    - array of subsequent parameters to pass to the callbacks</li>\n<li>allowCache - use the same proxy name for all requests? (boolean)</li>\n</ul>", "constructors": [{"params": [{"type": "String", "name": "url", "description": "  the url of the JSONP service"}, {"type": "Object|Function", "name": "callback", "description": "  the default callback configuration or\nsuccess handler"}], "description": "<p>Provides a JSONPRequest class for repeated JSONP calls, and a convenience\nmethod Y.jsonp(url, callback) to instantiate and send a JSONP request.</p>\n<p>Both the constructor as well as the convenience function take two\nparameters: a url string and a callback.</p>\n<p>The url provided must include the placeholder string\n&quot;{callback}&quot; which will be replaced by a dynamically\ngenerated routing function to pass the data to your callback function.\nAn example url might look like\n&quot;http://example.com/service?callback={callback}&quot;.</p>\n<p>The second parameter can be a callback function that accepts the JSON\npayload as its argument, or a configuration object supporting the keys:</p>\n<ul>\n<li>on - map of callback subscribers\n<ul>\n<li>success - function handler for successful transmission</li>\n<li>failure - function handler for failed transmission</li>\n<li>timeout - function handler for transactions that timeout</li>\n</ul>\n</li>\n<li>format  - override function for inserting the proxy name in the url</li>\n<li>timeout - the number of milliseconds to wait before giving up</li>\n<li>context - becomes <code>this</code> in the callbacks</li>\n<li>args    - array of subsequent parameters to pass to the callbacks</li>\n<li>allowCache - use the same proxy name for all requests? (boolean)</li>\n</ul>"}], "namespace": "", "module": "jsonp", "file": "jsonp.js", "shortname": "JSONPRequest", "properties": {"_template": {"description": "Template used by the default URL formatter to add the callback function\nname to the url.", "default": "\"callback={callback}\"", "protected": "", "guessedname": "_template", "guessedtype": "property", "type": "String"}, "_requests": {"guessedname": "_requests", "type": "{Object}", "description": "Map of the number of requests currently pending responses per\ngenerated proxy.  Used to ensure the proxy is not flushed if the\nrequest times out and there is a timeout handler and success\nhandler, and used by connections configured to allowCache to make\nsure the proxy isn't deleted until the last response has returned.", "private": "", "guessedtype": "property"}, "_timeouts": {"guessedname": "_timeouts", "type": "{Object}", "description": "Map of the number of timeouts received from the destination url\nby generated proxy.  Used to ensure the proxy is not flushed if the\nrequest times out and there is a timeout handler and success\nhandler, and used by connections configured to allowCache to make\nsure the proxy isn't deleted until the last response has returned.", "private": "", "guessedtype": "property"}, "_pattern": {"description": "RegExp used by the default URL formatter to insert the generated callback\nname into the JSONP url.  Looks for a query param callback=.  If a value\nis assigned, it will be clobbered.", "default": "/\\bcallback=.*?(?=&|$)/i", "protected": "", "guessedname": "_pattern", "guessedtype": "property", "type": "RegExp"}}, "name": "JSONPRequest"}, "DataSource.Get": {"name": "DataSource.Get", "configs": {"scriptCallbackParam": {"default": "\"callback\"", "type": "String", "description": "Callback string parameter name sent to the remote script. By default,\nrequests are sent to\n&#60;URI&#62;?&#60;scriptCallbackParam&#62;=callbackFunction", "guessedname": "scriptCallbackParam", "guessedtype": "property"}, "asyncMode": {"default": "\"allowAll\"", "type": "String", "description": "Defines request/response management in the following manner:\n<dl>\n<!--<dt>queueRequests</dt>\n<dd>If a request is already in progress, wait until response is\nreturned before sending the next request.</dd>\n<dt>cancelStaleRequests</dt>\n<dd>If a request is already in progress, cancel it before\nsending the next request.</dd>-->\n<dt>ignoreStaleResponses</dt>\n<dd>Send all requests, but handle only the response for the most\nrecently sent request.</dd>\n<dt>allowAll</dt>\n<dd>Send all requests and handle all responses.</dd>\n</dl>", "guessedname": "asyncMode", "guessedtype": "property"}, "generateRequestCallback": {"type": "Function", "description": "Accepts the DataSource instance and a callback ID, and returns a callback\nparam/value string that gets appended to the script URI. Implementers\ncan customize this string to match their server's query syntax.", "guessedname": "generateRequestCallback", "guessedtype": "property"}, "get": {"default": "Y.Get", "type": "Y.Get", "description": "Pointer to Get Utility.", "guessedname": "get", "guessedtype": "property"}}, "constructors": [{"description": "Get Utility subclass for the DataSource Utility."}], "namespace": "", "module": "datasource", "events": {"generateRequestCallbackChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "generateRequestCallbackChange", "description": "Fires when the value for the configuration attribute 'generateRequestCallback' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "scriptCallbackParamChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "scriptCallbackParamChange", "description": "Fires when the value for the configuration attribute 'scriptCallbackParam' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "getChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "getChange", "description": "Fires when the value for the configuration attribute 'get' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "asyncModeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "asyncModeChange", "description": "Fires when the value for the configuration attribute 'asyncMode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "DSGet", "methods": {"_defRequestFn": {"description": "Passes query string to Get Utility. Fires <code>response</code> event when\nresponse is received asynchronously.", "param": "e {Event.Facade} Event Facade with the following properties:\n<dl>\n<dt>tId (Number)</dt> <dd>Unique transaction ID.</dd>\n<dt>request (Object)</dt> <dd>The request.</dd>\n<dt>callback (Object)</dt> <dd>The callback object with the following properties:\n<dl>\n<dt>success (Function)</dt> <dd>Success handler.</dd>\n<dt>failure (Function)</dt> <dd>Failure handler.</dd>\n</dl>\n</dd>\n<dt>cfg (Object)</dt> <dd>Configuration object.</dd>\n</dl>", "protected": "", "params": [{"type": "Event.Facade", "name": "e", "description": "  Event Facade with the following properties:\n<dl>\n<dt>tId (Number)</dt> <dd>Unique transaction ID.</dd>\n<dt>request (Object)</dt> <dd>The request.</dd>\n<dt>callback (Object)</dt> <dd>The callback object with the following properties:\n<dl>\n<dt>success (Function)</dt> <dd>Success handler.</dd>\n<dt>failure (Function)</dt> <dd>Failure handler.</dd>\n</dl>\n</dd>\n<dt>cfg (Object)</dt> <dd>Configuration object.</dd>\n</dl>"}], "guessedname": "_defRequestFn", "guessedtype": "function"}, "_generateRequest": {"description": "Default method for adding callback param to url.  See\ngenerateRequestCallback attribute.", "param": "guid {String} unique identifier for callback function wrapper", "protected": "", "params": [{"type": "String", "name": "guid", "description": "  unique identifier for callback function wrapper"}], "guessedname": "_generateRequest", "guessedtype": "function"}}, "extends": "DataSource.Local", "superclass": "DataSource.Local", "file": "datasource-get.js", "guessedtype": "function", "shortname": "DataSource.Get", "properties": {"NAME": {"description": "Class name.", "value": "\"dataSourceGet\"", "static": "", "guessedname": "NAME", "guessedtype": "property", "type": "String", "final": ""}, "_last": {"protected": "", "type": "{String}", "description": "Stores the most recent request id for validation against stale\nresponse handling.", "guessedname": "_last", "guessedtype": "property"}}, "description": "Get Utility subclass for the DataSource Utility."}, "TreeData": {"name": "TreeData", "configs": {"index": {"default": "{}", "type": "Object", "description": "Index the nodes.", "guessedname": "index", "guessedtype": "property"}, "container": {"default": "null", "type": "Node | String", "description": "Container to nest children nodes. If has cntainer it's not a leaf.", "guessedname": "container", "guessedtype": "property"}, "children": {"default": "[]", "type": "Array", "description": "Array of children (i.e. could be a JSON metadata object or a TreeNode instance).", "guessedname": "children", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "A base class for TreeData, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Handle the data of the tree</li>\n<li>Basic DOM implementation (append/remove/insert)</li>\n<li>Indexing management to handle the children nodes</li>\n</ul>\nCheck the list of <a href=\"TreeData.html#configattributes\">Configuration Attributes</a> available for\nTreeData."}], "namespace": "", "module": "aui-tree", "events": {"indexChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "indexChange", "description": "Fires when the value for the configuration attribute 'index' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "containerChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "containerChange", "description": "Fires when the value for the configuration attribute 'container' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "childrenChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "childrenChange", "description": "Fires when the value for the configuration attribute 'children' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "TreeData", "methods": {"selectAll": {"description": "Select all children of the TreeData.", "guessedname": "selectAll", "guessedtype": "function"}, "appendChild": {"param": "{TreeNode} node", "params": [{"type": "TreeNode", "name": "node", "description": ""}, {"type": "boolean", "name": "cancelBubbling", "description": ""}], "description": "Append a child node to the TreeData.", "guessedname": "appendChild", "guessedtype": "function"}, "createNode": {"return": {"type": "TreeNode", "description": ""}, "description": "Create a TreeNode instance.", "param": "{Object} options", "params": [{"type": "Object", "name": "options", "description": ""}], "guessedname": "createNode", "guessedtype": "function"}, "initializer": {"protected": "", "description": "Construction logic executed during TreeData instantiation. Lifecycle.", "guessedname": "initializer", "guessedtype": "function"}, "_setChildren": {"return": {"type": "Array", "description": ""}, "description": "Setter for <a href=\"TreeData.html#config_children\">children</a>.", "param": "{Array} v", "protected": "", "params": [{"type": "Array", "name": "v", "description": ""}], "guessedname": "_setChildren", "guessedtype": "function"}, "getNodeByChild": {"return": {"type": "TreeNode", "description": ""}, "description": "Get a TreeNode instance by a child DOM Node.", "param": "{Node} child", "params": [{"type": "Node", "name": "child", "description": ""}], "guessedname": "getNodeByChild", "guessedtype": "function"}, "getChildren": {"return": {"type": "Array", "description": ""}, "description": "Get an Array of the children nodes of the current TreeData.", "param": "{boolean} deep", "params": [{"type": "boolean", "name": "deep", "description": ""}], "guessedname": "getChildren", "guessedtype": "function"}, "isRegistered": {"return": {"type": "boolean", "description": ""}, "description": "Whether the TreeNode is registered on this TreeData.", "param": "{TreeNode} node", "params": [{"type": "TreeNode", "name": "node", "description": ""}], "guessedname": "isRegistered", "guessedtype": "function"}, "updateReferences": {"param": "{node} TreeNode", "params": [{"type": "node", "name": "TreeNode", "description": ""}, {"type": "parentNode", "name": "TreeNode", "description": ""}, {"type": "ownerTree", "name": "TreeView", "description": ""}], "description": "Update the references of the passed TreeNode.", "guessedname": "updateReferences", "guessedtype": "function"}, "_removeChild": {"param": "{TreeData} node", "params": [{"type": "TreeData", "name": "node", "description": ""}], "description": "Remove the passed <code>node</code> from the current TreeData.", "guessedname": "_removeChild", "guessedtype": "function"}, "removeChild": {"param": "{TreeData} node", "params": [{"type": "TreeData", "name": "node", "description": ""}], "description": "Remove the passed <code>node</code> from the current TreeData.", "guessedname": "removeChild", "guessedtype": "function"}, "destructor": {"protected": "", "description": "Descructor lifecycle implementation for the TreeData class.\nPurges events attached to the node (and all child nodes).", "guessedname": "destructor", "guessedtype": "function"}, "indexOf": {"return": {"type": "Number", "description": ""}, "description": "Index of the passed TreeNode on the <a\nhref=\"TreeData.html#config_children\">children</a> attribute.", "param": "{TreeNode} node", "params": [{"type": "TreeNode", "name": "node", "description": ""}], "guessedname": "indexOf", "guessedtype": "function"}, "hasChildNodes": {"return": {"type": "boolean", "description": ""}, "description": "Whether the TreeData contains children or not.", "guessedname": "hasChildNodes", "guessedtype": "function"}, "updateIndex": {"param": "{Object} index", "params": [{"type": "Object", "name": "index", "description": ""}], "description": "Update the <a href=\"TreeData.html#config_index\">index</a> attribute value.", "guessedname": "updateIndex", "guessedtype": "function"}, "insertAfter": {"param": "{TreeNode} treeNode", "params": [{"type": "TreeNode", "name": "treeNode", "description": ""}, {"type": "TreeNode", "name": "refTreeNode", "description": ""}], "description": "Insert <code>treeNode</code> after the <code>refTreeNode</code>.", "guessedname": "insertAfter", "guessedtype": "function"}, "getNodeById": {"return": {"type": "TreeNode", "description": ""}, "description": "Get a TreeNode by id.", "param": "{String} uid", "params": [{"type": "String", "name": "uid", "description": ""}], "guessedname": "getNodeById", "guessedtype": "function"}, "empty": {"description": "Delete all children of the current TreeData.", "guessedname": "empty", "guessedtype": "function"}, "expandAll": {"description": "Expand all children of the TreeData.", "guessedname": "expandAll", "guessedtype": "function"}, "insertBefore": {"param": "{TreeNode} treeNode", "params": [{"type": "TreeNode", "name": "treeNode", "description": ""}, {"type": "TreeNode", "name": "refTreeNode", "description": ""}], "description": "Insert <code>treeNode</code> before the <code>refTreeNode</code>.", "guessedname": "insertBefore", "guessedtype": "function"}, "unregisterNode": {"param": "{TreeNode} node", "params": [{"type": "TreeNode", "name": "node", "description": ""}], "description": "Unregister the passed TreeNode from this TreeData.", "guessedname": "unregisterNode", "guessedtype": "function"}, "getEventOutputMap": {"return": {"type": "Object", "description": ""}, "description": "Get an object containing metadata for the custom events.", "param": "{TreeData} node", "params": [{"type": "TreeData", "name": "node", "description": ""}], "guessedname": "getEventOutputMap", "guessedtype": "function"}, "registerNode": {"param": "{TreeNode} node", "params": [{"type": "TreeNode", "name": "node", "description": ""}], "description": "Register the passed TreeNode on this TreeData.", "guessedname": "registerNode", "guessedtype": "function"}, "_appendChild": {"description": "Append a child node to the TreeData.", "param": "{TreeNode} node", "protected": "", "params": [{"type": "TreeNode", "name": "node", "description": ""}, {"type": "boolean", "name": "cancelBubbling", "description": ""}], "guessedname": "_appendChild", "guessedtype": "function"}, "insert": {"param": "{TreeNode} treeNode", "params": [{"type": "TreeNode", "name": "treeNode", "description": ""}, {"type": "TreeNode", "name": "refTreeNode", "description": ""}, {"type": "TreeNode", "name": "where", "description": " 'before' or 'after'"}], "description": "Insert <code>treeNode</code> before or after the <code>refTreeNode</code>.", "guessedname": "insert", "guessedtype": "function"}, "eachChildren": {"param": "{function} fn callback", "params": [{"type": "function", "name": "fn", "description": " callback"}, {"type": "boolean", "name": "fn", "description": " recursive"}], "description": "Loop each children and execute the <code>fn</code> callback.", "guessedname": "eachChildren", "guessedtype": "function"}, "item": {"return": {"type": "TreeNode", "description": ""}, "description": "Get a TreeNode children by index.", "param": "{Number} index", "params": [{"type": "Number", "name": "index", "description": ""}], "guessedname": "item", "guessedtype": "function"}, "bubbleEvent": {"param": "{String} eventType", "params": [{"type": "String", "name": "eventType", "description": ""}, {"type": "Array", "name": "args", "description": ""}, {"type": "boolean", "name": "cancelBubbling", "description": ""}, {"type": "boolean", "name": "stopActionPropagation", "description": ""}], "description": "Bubble event to all parent nodes.", "guessedname": "bubbleEvent", "guessedtype": "function"}, "refreshIndex": {"description": "Refresh the index (i.e. re-index all nodes).", "guessedname": "refreshIndex", "guessedtype": "function"}, "collapseAll": {"description": "Collapse all children of the TreeData.", "guessedname": "collapseAll", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "aui-tree.js", "guessedtype": "property", "shortname": "TreeData", "properties": {"TreeData.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the TreeData.", "guessedname": "ATTRS", "guessedtype": "property"}, "TreeData.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}}, "description": "A base class for TreeData, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Handle the data of the tree</li>\n<li>Basic DOM implementation (append/remove/insert)</li>\n<li>Indexing management to handle the children nodes</li>\n</ul>\nCheck the list of <a href=\"TreeData.html#configattributes\">Configuration Attributes</a> available for\nTreeData."}, "IORequest": {"name": "IORequest", "configs": {"responseData": {"default": "null", "type": "String | JSONObject | XMLDocument", "description": "This is a normalized attribute for the response data. It's useful\nto retrieve the correct type for the\n<a href=\"IORequest.html#config_dataType\">dataType</a> (i.e., in json\nrequests the <code>responseData</code>) is a JSONObject.", "guessedname": "responseData", "guessedtype": "property"}, "transaction": {"default": "null", "type": "Object", "description": "Stores the IO Object of the current transaction.", "guessedname": "transaction", "guessedtype": "property"}, "timeout": {"default": "Value mapped on YUI.AUI.defaults.io.", "type": "Number", "description": "See <a href=\"http://developer.yahoo.com/yui/3/io/#configuration\">IO\nConfiguration</a>.", "guessedname": "timeout", "guessedtype": "property"}, "form": {"default": "Value mapped on YUI.AUI.defaults.io.", "type": "Object", "description": "See <a href=\"http://developer.yahoo.com/yui/3/io/#configuration\">IO\nConfiguration</a>.", "guessedname": "form", "guessedtype": "property"}, "dataType": {"default": "null", "type": "String", "description": "The type of the request (i.e., could be xml, json, javascript, text).", "guessedname": "dataType", "guessedtype": "property"}, "cfg": {"description": "Object containing all the\n<a href=\"io.html#configattributes\">IO Configuration Attributes</a>.\nThis Object is passed to the <code>A.io</code> internally.", "default": "Object containing all the\n<a href=\"io.html#configattributes\">IO Configuration Attributes</a>.", "readonly": "", "guessedname": "cfg", "guessedtype": "property", "type": "String"}, "cache": {"default": "true", "type": "boolean", "description": "If <code>false</code> the current timestamp will be appended to the\nurl, avoiding the url to be cached.", "guessedname": "cache", "guessedtype": "property"}, "autoLoad": {"default": "true", "type": "boolean", "description": "If <code>true</code> invoke the\n<a href=\"IORequest.html#method_start\">start</a> method automatically,\ninitializing the IO transaction.", "guessedname": "autoLoad", "guessedtype": "property"}, "uri": {"default": "null", "type": "String", "description": "URI to be requested using AJAX.", "guessedname": "uri", "guessedtype": "property"}, "sync": {"default": "Value mapped on YUI.AUI.defaults.io.", "type": "boolean", "description": "See <a href=\"http://developer.yahoo.com/yui/3/io/#configuration\">IO\nConfiguration</a>.", "guessedname": "sync", "guessedtype": "property"}, "headers": {"default": "Object", "type": "Object", "description": "Set the correct ACCEPT header based on the dataType.", "guessedname": "headers", "guessedtype": "property"}, "arguments": {"default": "Value mapped on YUI.AUI.defaults.io.", "type": "Object", "description": "See <a href=\"http://developer.yahoo.com/yui/3/io/#configuration\">IO\nConfiguration</a>.", "guessedname": "arguments", "guessedtype": "property"}, "context": {"default": "Value mapped on YUI.AUI.defaults.io.", "type": "Object", "description": "See <a href=\"http://developer.yahoo.com/yui/3/io/#configuration\">IO\nConfiguration</a>.", "guessedname": "context", "guessedtype": "property"}, "active": {"default": "false", "type": "boolean", "description": "Whether the transaction is active or not.", "guessedname": "active", "guessedtype": "property"}, "selector": {"type": "string", "description": "A selector to be used to query against the response of the\nrequest. Only works if the response is XML or HTML.", "guessedname": "selector", "guessedtype": "property"}, "data": {"default": "Value mapped on YUI.AUI.defaults.io.", "type": "Object", "description": "See <a href=\"http://developer.yahoo.com/yui/3/io/#configuration\">IO\nConfiguration</a>.", "guessedname": "data", "guessedtype": "property"}, "method": {"default": "Value mapped on YUI.AUI.defaults.io.", "type": "String", "description": "See <a href=\"http://developer.yahoo.com/yui/3/io/#configuration\">IO\nConfiguration</a>.", "guessedname": "method", "guessedtype": "property"}, "xdr": {"default": "Value mapped on YUI.AUI.defaults.io.", "type": "Object", "description": "See <a href=\"http://developer.yahoo.com/yui/3/io/#configuration\">IO\nConfiguration</a>.", "guessedname": "xdr", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "A base class for IORequest, providing:\n<ul>\n<li>Response data normalization for XML, JSON, JavaScript</li>\n<li>Cache options</li>\n</ul>\nQuick Example:<br/>\n<pre><code>A.io.request(uri, config);</code></pre>\nCheck the list of <a href=\"IORequest.html#configattributes\">Configuration Attributes</a> available for\nIORequest."}], "namespace": "", "module": "aui-io", "events": {"contextChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "contextChange", "description": "Fires when the value for the configuration attribute 'context' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "timeoutChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "timeoutChange", "description": "Fires when the value for the configuration attribute 'timeout' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "responseDataChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "responseDataChange", "description": "Fires when the value for the configuration attribute 'responseData' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "xdrChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "xdrChange", "description": "Fires when the value for the configuration attribute 'xdr' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "activeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "activeChange", "description": "Fires when the value for the configuration attribute 'active' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "autoLoadChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "autoLoadChange", "description": "Fires when the value for the configuration attribute 'autoLoad' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "methodChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "methodChange", "description": "Fires when the value for the configuration attribute 'method' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "selectorChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "selectorChange", "description": "Fires when the value for the configuration attribute 'selector' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "headersChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "headersChange", "description": "Fires when the value for the configuration attribute 'headers' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "cacheChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "cacheChange", "description": "Fires when the value for the configuration attribute 'cache' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "uriChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "uriChange", "description": "Fires when the value for the configuration attribute 'uri' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "dataTypeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "dataTypeChange", "description": "Fires when the value for the configuration attribute 'dataType' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "cfgChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "cfgChange", "description": "Fires when the value for the configuration attribute 'cfg' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "transactionChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "transactionChange", "description": "Fires when the value for the configuration attribute 'transaction' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "argumentsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "argumentsChange", "description": "Fires when the value for the configuration attribute 'arguments' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "syncChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "syncChange", "description": "Fires when the value for the configuration attribute 'sync' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "formChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "formChange", "description": "Fires when the value for the configuration attribute 'form' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "dataChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "dataChange", "description": "Fires when the value for the configuration attribute 'data' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "IORequest", "methods": {"_autoStart": {"protected": "", "description": "Invoke the <code>start</code> method (autoLoad attribute).", "guessedname": "_autoStart", "guessedtype": "function"}, "stop": {"description": "Stops the IO transaction.", "guessedname": "stop", "guessedtype": "function"}, "_success": {"description": "Internal success callback for the IO transaction.", "param": "{Number} id ID of the IO transaction.", "protected": "", "params": [{"type": "Number", "name": "id", "description": " ID of the IO transaction."}, {"type": "Object", "name": "obj", "description": " IO transaction Object."}, {"type": "Object", "name": "args", "description": " Custom arguments, passed to the event handler. See <a href=\"http://developer.yahoo.com/yui/3/io/#configuration\">IO"}], "guessedname": "_success", "guessedtype": "function"}, "destructor": {"protected": "", "description": "Descructor lifecycle implementation for the IORequest class.\nPurges events attached to the node (and all child nodes).", "guessedname": "destructor", "guessedtype": "function"}, "getFormattedData": {"protected": "", "return": {"type": "String", "description": ""}, "description": "Applies the <code>YUI.AUI.defaults.io.dataFormatter</code> if defined and return the formatted data.", "guessedname": "getFormattedData", "guessedtype": "function"}, "start": {"description": "Starts the IO transaction. Used to refresh the content also.", "guessedname": "start", "guessedtype": "function"}, "_end": {"description": "Internal end callback for the IO transaction.", "param": "{Number} id ID of the IO transaction.", "protected": "", "params": [{"type": "Number", "name": "id", "description": " ID of the IO transaction."}, {"type": "Object", "name": "args", "description": " Custom arguments, passed to the event handler. See <a href=\"http://developer.yahoo.com/yui/3/io/#configuration\">IO"}], "guessedname": "_end", "guessedtype": "function"}, "_parseURL": {"return": {"type": "String", "description": ""}, "description": "Parse the <a href=\"IORequest.html#config_uri\">uri</a> to add a\ntimestamp if <a href=\"IORequest.html#config_cache\">cache</a> is\n<code>true</code>. Also applies the\n<code>YUI.AUI.defaults.io.uriFormatter</code>.", "param": "{String} url", "protected": "", "params": [{"type": "String", "name": "url", "description": ""}], "guessedname": "_parseURL", "guessedtype": "function"}, "_setResponseData": {"return": {"type": "Object", "description": ""}, "description": "Setter for <a href=\"IORequest.html#config_responseData\">responseData</a>.", "param": "{Object} xhr XHR Object.", "protected": "", "params": [{"type": "Object", "name": "xhr", "description": " XHR Object."}], "guessedname": "_setResponseData", "guessedtype": "function"}, "initializer": {"protected": "", "description": "Construction logic executed during IORequest instantiation. Lifecycle.", "guessedname": "init", "guessedtype": "function"}}, "uses": ["io"], "superclass": "Plugin.Base", "file": "aui-io.js", "guessedtype": "property", "extends": "Plugin.Base", "shortname": "IORequest", "properties": {"IORequest.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}, "IORequest.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the IORequest.", "guessedname": "ATTRS", "guessedtype": "property"}}, "description": "A base class for IORequest, providing:\n<ul>\n<li>Response data normalization for XML, JSON, JavaScript</li>\n<li>Cache options</li>\n</ul>\nQuick Example:<br/>\n<pre><code>A.io.request(uri, config);</code></pre>\nCheck the list of <a href=\"IORequest.html#configattributes\">Configuration Attributes</a> available for\nIORequest."}, "ArrayList": {"name": "ArrayList", "description": "Generic ArrayList class for managing lists of items and iterating operations\nover them.  The targeted use for this class is for augmentation onto a\nclass that is responsible for managing multiple instances of another class\n(e.g. NodeList for Nodes).  The recommended use is to augment your class with\nArrayList, then use ArrayList.addMethod to mirror the API of the constituent\nitems on the list's API.\nThe default implementation creates immutable lists, but mutability can be\nprovided via the arraylist-add submodule or by implementing mutation methods\ndirectly on the augmented class's prototype.", "constructors": [{"params": [{"type": " Array ", "name": "items", "description": "  array of items this list will be responsible for"}], "description": "Generic ArrayList class for managing lists of items and iterating operations\nover them.  The targeted use for this class is for augmentation onto a\nclass that is responsible for managing multiple instances of another class\n(e.g. NodeList for Nodes).  The recommended use is to augment your class with\nArrayList, then use ArrayList.addMethod to mirror the API of the constituent\nitems on the list's API.\nThe default implementation creates immutable lists, but mutability can be\nprovided via the arraylist-add submodule or by implementing mutation methods\ndirectly on the augmented class's prototype."}], "namespace": "", "module": "collection", "file": "arraylist.js", "shortname": "ArrayList", "methods": {"indexOf": {"return": {"type": " Integer ", "description": "Array index if found.  Otherwise -1"}, "description": "Finds the first index of the needle in the managed array of items.", "param": "needle { mixed } The item to search for", "params": [{"type": " mixed ", "name": "needle", "description": "  The item to search for"}], "guessedname": "indexOf", "guessedtype": "function"}, "some": {"return": {"type": " Boolean ", "description": "True if the function returned true on an item"}, "description": "<p>Execute a function on each item of the list, optionally providing a\ncustom execution context.  Default context is the item.</p>\n<p>The callback signature is <code>callback( item, index )</code>.</p>\n<p>Unlike <code>each</code>, if the callback returns true, the\niteratation will stop.</p>", "param": "fn { Function } the function to execute", "params": [{"type": " Function ", "name": "fn", "description": "  the function to execute"}, {"type": " mixed ", "name": "context", "description": "  optional override 'this' in the function"}], "guessedname": "some", "guessedtype": "function"}, "remove": {"return": {"type": "ArrayList", "description": "the instance."}, "description": "Removes first or all occurrences of an item to the ArrayList.  If a\ncomparator is not provided, uses itemsAreEqual method to determine\nmatches.", "chainable": "", "param": "{ mixed } needle Item to find and remove from the list.", "params": [{"type": " mixed ", "name": "needle", "description": " Item to find and remove from the list."}, {"type": " Boolean ", "name": "all", "description": " If true, remove all occurrences."}, {"type": " Function ", "name": "comparator", "description": " optional a/b function to test equivalence."}], "guessedname": "remove", "guessedtype": "function"}, "addMethod": {"description": "<p>Adds a pass through method to dest (typically the prototype of a list\nclass) that calls the named method on each item in the list with\nwhatever parameters are passed in.  Allows for API indirection via list\ninstances.</p>\n<p>Accepts a single string name or an array of string names.</p>\n<pre><code>list.each( function ( item ) {\nitem.methodName( 1, 2, 3 );\n} );\n// becomes\nlist.methodName( 1, 2, 3 );</code></pre>\n<p>Additionally, the pass through methods use the item retrieved by the\n<code>_item</code> method in case there is any special behavior that is\nappropriate for API mirroring.</p>\n<p>If the iterated method returns a value, the return value from the\nadded method will be an array of values with each value being at the\ncorresponding index for that item.  If the iterated method does not\nreturn a value, the added method will be chainable.", "param": "dest {Object} Object or prototype to receive the iterator method", "static": "", "guessedname": "addMethod", "guessedtype": "function", "params": [{"type": "Object", "name": "dest", "description": "  Object or prototype to receive the iterator method"}, {"type": "String|String[]", "name": "name", "description": "  Name of method of methods to create"}]}, "filter": {"return": {"type": " ArrayList ", "description": "New instance based on who passed the validator."}, "description": "<p>Create a new ArrayList (or augmenting class instance) from a subset\nof items as determined by the boolean function passed as the\nargument.  The original ArrayList is unchanged.</p>\n<p>The validator signature is <code>validator( item )</code>.</p>", "param": "{ Function } validator Boolean function to determine in or out.", "params": [{"type": " Function ", "name": "validator", "description": " Boolean function to determine in or out."}], "guessedname": "filter", "guessedtype": "function"}, "item": {"return": {"type": " mixed ", "description": "the item at the requested index"}, "description": "Get an item by index from the list.  Override this method if managing a\nlist of objects that have a different public representation (e.g. Node\ninstances vs DOM nodes).  The iteration methods that accept a user\nfunction will use this method for access list items for operation.", "param": "i { Integer } index to fetch", "params": [{"type": " Integer ", "name": "i", "description": "  index to fetch"}], "guessedname": "item", "guessedtype": "function"}, "add": {"return": {"type": "ArrayList", "description": "the instance."}, "description": "Add a single item to the ArrayList.  Does not prevent duplicates.", "chainable": "", "param": "{ mixed } item Item presumably of the same type as others in the\nArrayList.", "params": [{"type": " mixed ", "name": "item", "description": " Item presumably of the same type as others in the\nArrayList."}, {"type": "Number", "name": "index", "description": " (Optional.)  Number representing the position at\nwhich the item should be inserted."}], "guessedname": "add", "guessedtype": "function"}, "itemsAreEqual": {"return": {"type": " Boolean ", "description": "true if items are deemed equivalent."}, "description": "Default comparator for items stored in this list.  Used by remove().", "param": "{ mixed } a item to test equivalence with.", "params": [{"type": " mixed ", "name": "a", "description": " item to test equivalence with."}, {"type": " mixed ", "name": "b", "description": " other item to test equivalance."}], "guessedname": "itemsAreEqual", "guessedtype": "function"}, "isEmpty": {"return": {"type": " Boolean ", "description": "true if 1 or more items are being managed"}, "description": "Is this instance managing any items?", "guessedname": "isEmpty", "guessedtype": "function"}, "each": {"return": {"type": " ArrayList ", "description": "this instance"}, "description": "<p>Execute a function on each item of the list, optionally providing a\ncustom execution context.  Default context is the item.</p>\n<p>The callback signature is <code>callback( item, index )</code>.</p>", "chainable": "", "param": "fn { Function } the function to execute", "params": [{"type": " Function ", "name": "fn", "description": "  the function to execute"}, {"type": " mixed ", "name": "context", "description": "  optional override 'this' in the function"}], "guessedname": "each", "guessedtype": "function"}, "toJSON": {"return": {"type": " Array ", "description": "an array representation of the ArrayList"}, "description": "Provides an array-like representation for JSON.stringify.", "guessedname": "toJSON", "guessedtype": "function"}, "_item": {"return": {"type": " mixed ", "description": "The item appropriate for pass through API methods"}, "description": "Protected method for optimizations that may be appropriate for API\nmirroring. Similar in functionality to <code>item</code>, but is used by\nmethods added with <code>ArrayList.addMethod()</code>.", "param": "i { Integer } Index of item to fetch", "protected": "", "params": [{"type": " Integer ", "name": "i", "description": "  Index of item to fetch"}], "guessedname": "_item", "guessedtype": "property"}, "size": {"return": {"type": " Integer ", "description": "Number of items in the list"}, "description": "How many items are in this list?", "guessedname": "size", "guessedtype": "function"}}}, "Fills": {"name": "Fills", "constructors": [{"description": "Utility class used for drawing area fills."}], "namespace": "", "module": "charts", "methods": {"_getAreaDefaults": {"guessedname": "_getAreaDefaults", "return": {"type": "", "description": "Object"}, "description": "Returns default values for area styles.", "private": "", "guessedtype": "function"}, "_getStackedClosingPoints": {"protected": "", "return": {"type": "", "description": "Array"}, "description": "Concatenates coordinate array with the correct coordinates for closing an area stack.", "guessedname": "_getStackedClosingPoints", "guessedtype": "function"}, "drawFill": {"description": "Draws fill", "param": "{Array} xcoords The x-coordinates for the series.", "protected": "", "params": [{"type": "Array", "name": "xcoords", "description": " The x-coordinates for the series."}, {"type": "Array", "name": "ycoords", "description": " The y-coordinates for the series."}], "guessedname": "drawFill", "guessedtype": "function"}, "_getPath": {"guessedname": "_getPath", "return": {"type": "", "description": "Path"}, "description": "Returns a path shape used for drawing fills.", "private": "", "guessedtype": "function"}, "_getClosingPoints": {"protected": "", "return": {"type": "", "description": "Array"}, "description": "Concatenates coordinate array with correct coordinates for closing an area fill.", "guessedname": "_getClosingPoints", "guessedtype": "function"}, "drawStackedAreaSpline": {"protected": "", "description": "Draws a a stacked area spline", "guessedname": "drawStackedAreaSpline", "guessedtype": "function"}, "drawAreaSpline": {"protected": "", "description": "Draws a fill for a spline", "guessedname": "drawAreaSpline", "guessedtype": "function"}, "_toggleVisible": {"description": "Toggles visibility", "param": "{Boolean} visible indicates visibilitye", "params": [{"type": "Boolean", "name": "visible", "description": " indicates visibilitye"}], "private": "", "guessedname": "_toggleVisible", "guessedtype": "function"}}, "file": "charts.js", "shortname": "Fills", "properties": {"_defaults": {"guessedname": "_defaults", "type": "Object", "description": "Storage for default area styles.", "private": "", "guessedtype": "property"}}, "description": "Utility class used for drawing area fills."}, "Editable": {"name": "Editable", "configs": {"formatInput": {"default": "null", "type": "function", "description": "Function to format the input text displayed on the input.", "guessedname": "formatInput", "guessedtype": "property"}, "node": {"type": "Node", "description": "Node to setup the editable.", "guessedname": "node", "guessedtype": "property"}, "icons": {"default": "[]", "type": "Array", "description": "Array with icons for the <a href=\"Toolbar.html\">Toolbar</a>.", "guessedname": "icons", "guessedtype": "property"}, "eventType": {"default": "'click'", "type": "String", "description": "Event type to initialize the editable.", "guessedname": "eventType", "guessedtype": "property"}, "cancelButton": {"default": "Button constructor Object.", "type": "String", "description": "<a href=\"ButtonItem.html\">ButtonItem</a> constructor Object for the\ncancelButton.", "guessedname": "cancelButton", "guessedtype": "property"}, "contentText": {"default": "''", "type": "String", "description": "Content text.", "guessedname": "contentText", "guessedtype": "property"}, "formatOutput": {"default": "null", "type": "function", "description": "Function to format the output text displayed on the input.", "guessedname": "formatOutput", "guessedtype": "property"}, "saveButton": {"default": "Button constructor Object.", "type": "String", "description": "<a href=\"ButtonItem.html\">ButtonItem</a> constructor Object for the\nsaveButton.", "guessedname": "saveButton", "guessedtype": "property"}, "renderTo": {"type": "String | Node", "description": "Node to render the editable.", "guessedname": "renderTo", "guessedtype": "property"}, "inputType": {"default": "'text'", "type": "String", "description": "Type of the input used to edit the <a\nhref=\"Editable.html#config_node\">node</a>.", "guessedname": "inputType", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "<p><img src=\"assets/images/aui-editable/main.png\"/></p>\nA base class for Editable, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Edit in place elements</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.Editable({\nnode: '#editor'\n}).render();\n</code></pre>\nCheck the list of <a href=\"Editable.html#configattributes\">Configuration Attributes</a> available for\nEditable."}], "namespace": "", "module": "aui-editable", "events": {"cancelButtonChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "cancelButtonChange", "description": "Fires when the value for the configuration attribute 'cancelButton' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "save": {"preventable": "_defSaveFn", "params": [{"type": "Event.Facade", "name": "event", "description": " The save event."}], "description": "Handles the save event.", "param": "{Event.Facade} event The save event.", "type": "{Event.Custom}"}, "formatInputChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "formatInputChange", "description": "Fires when the value for the configuration attribute 'formatInput' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "startEditing": {"preventable": "_defStartEditingFn", "params": [{"type": "Event.Facade", "name": "event", "description": " The startEditing event."}], "description": "Handles the startEditing event.", "param": "{Event.Facade} event The startEditing event.", "type": "{Event.Custom}"}, "renderToChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "renderToChange", "description": "Fires when the value for the configuration attribute 'renderTo' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "nodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "nodeChange", "description": "Fires when the value for the configuration attribute 'node' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "stopEditing": {"preventable": "_defStopEditingFn", "params": [{"type": "Event.Facade", "name": "event", "description": " The stopEditing event."}], "description": "Handles the stopEditing event.", "param": "{Event.Facade} event The stopEditing event.", "type": "{Event.Custom}"}, "saveButtonChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "saveButtonChange", "description": "Fires when the value for the configuration attribute 'saveButton' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "eventTypeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "eventTypeChange", "description": "Fires when the value for the configuration attribute 'eventType' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "cancel": {"preventable": "_defCancelFn", "params": [{"type": "Event.Facade", "name": "event", "description": " The cancel event."}], "description": "Handles the cancel event.", "param": "{Event.Facade} event The cancel event.", "type": "{Event.Custom}"}, "inputTypeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "inputTypeChange", "description": "Fires when the value for the configuration attribute 'inputType' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "formatOutputChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "formatOutputChange", "description": "Fires when the value for the configuration attribute 'formatOutput' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "iconsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "iconsChange", "description": "Fires when the value for the configuration attribute 'icons' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "contentTextChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "contentTextChange", "description": "Fires when the value for the configuration attribute 'contentText' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "Editable", "methods": {"initializer": {"protected": "", "description": "Construction logic executed during Editable instantiation. Lifecycle.", "guessedname": "initializer", "guessedtype": "function"}, "cancel": {"description": "Cancel the editable. Return to the original state.", "guessedname": "cancel", "guessedtype": "function"}, "_uiSetNode": {"description": "Handles the updating of the UI when the node is set.", "param": "{Node} node.", "protected": "", "params": [{"type": "Node", "name": "node.", "description": ""}], "guessedname": "_uiSetNode", "guessedtype": "function"}, "_setInput": {"description": "Set the value of the <a\nhref=\"Editable.html#property_inputNode\">inputNode</a>.", "param": "{String} value Value of the input.", "protected": "", "params": [{"type": "String", "name": "value", "description": " Value of the input."}], "guessedname": "_setInput", "guessedtype": "function"}, "_onKeypressEditable": {"description": "Fires <code>onkeypress</code> occurs on the editable element.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onKeypressEditable", "guessedtype": "function"}, "_startEditing": {"description": "Fires when start editing.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_startEditing", "guessedtype": "function"}, "_toHTML": {"return": {"type": "String", "description": ""}, "description": "Converts the new lines <code>\\n</code> to <code><br/></code> (i.e.,\nnl2br).", "param": "{String} text Input text.", "protected": "", "params": [{"type": "String", "name": "text", "description": " Input text."}], "guessedname": "_toHTML", "guessedtype": "function"}, "_syncContentText": {"description": "Sync the content text.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_syncContentText", "guessedtype": "function"}, "save": {"description": "Save the editable. Fires the\n<a href=\"Editable.html#event_save\">save</a> event.", "guessedname": "save", "guessedtype": "function"}, "_onMouseLeaveEditable": {"description": "Fires <code>onmouseleave</code> occurs on the editable element.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onMouseLeaveEditable", "guessedtype": "function"}, "_createEvents": {"protected": "", "description": "Create the Events.", "guessedname": "_createEvents", "guessedtype": "function"}, "_defCancelFn": {"description": "Fires the cancel event.", "param": "{EventFacade} event cancel event facade", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " cancel event facade"}], "guessedname": "_defCancelFn", "guessedtype": "function"}, "_setOutput": {"description": "Set the <code>innerHTML</code> of the <a\nhref=\"Editable.html#config_node\">node</a>.", "param": "{String} value", "protected": "", "params": [{"type": "String", "name": "value", "description": ""}], "guessedname": "_setOutput", "guessedtype": "function"}, "_defSaveFn": {"description": "Fires the save event.", "param": "{EventFacade} event save event facade", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " save event facade"}], "guessedname": "_defSaveFn", "guessedtype": "function"}, "_afterFocusedChangeEditable": {"description": "Fires the <a href=\"Editable.html#event_stopEditing\">stopEditing</a>\nevent.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_afterFocusedChangeEditable", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Bind the events on the Editable UI. Lifecycle.", "guessedname": "bindUI", "guessedtype": "function"}, "syncUI": {"protected": "", "description": "Sync the Editable UI. Lifecycle.", "guessedname": "syncUI", "guessedtype": "function"}, "_onMouseEnterEditable": {"description": "Fires <code>onmouseenter</code> occurs on the editable element.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onMouseEnterEditable", "guessedtype": "function"}, "_defStartEditingFn": {"description": "Fires the startEditing event.", "param": "{EventFacade} event startEditing event facade", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " startEditing event facade"}], "guessedname": "_defStartEditingFn", "guessedtype": "function"}, "renderUI": {"protected": "", "description": "Create the DOM structure for the Editable. Lifecycle.", "guessedname": "renderUI", "guessedtype": "function"}, "_defStopEditingFn": {"description": "Fires the stopEditing event.", "param": "{EventFacade} event stopEditing event facade", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " stopEditing event facade"}], "guessedname": "_defStopEditingFn", "guessedtype": "function"}, "_toText": {"return": {"type": "String", "description": ""}, "description": "Converts HTML to text.", "param": "{String} text HTML input.", "protected": "", "params": [{"type": "String", "name": "text", "description": " HTML input."}], "guessedname": "_toText", "guessedtype": "function"}}, "extends": "Component", "superclass": "Component", "file": "aui-editable.js", "guessedtype": "property", "shortname": "Editable", "properties": {"Editable.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the Editable.", "guessedname": "ATTRS", "guessedtype": "property"}, "Editable.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}}, "description": "<p><img src=\"assets/images/aui-editable/main.png\"/></p>\nA base class for Editable, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Edit in place elements</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.Editable({\nnode: '#editor'\n}).render();\n</code></pre>\nCheck the list of <a href=\"Editable.html#configattributes\">Configuration Attributes</a> available for\nEditable."}, "Selector": {"name": "Selector", "for": "Selector", "namespace": "", "module": "dom", "methods": {"setText": {"params": [{"type": "HTMLElement", "name": "element", "description": " The html element."}, {"type": "String", "name": "content", "description": " The content to add."}], "description": "Sets the text content of the HTMLElement.", "guessedname": "setText", "guessedtype": "property"}, "setAttribute": {"params": [{"type": "HTMLElement", "name": "el", "description": " The target element for the attribute."}, {"type": "String", "name": "attr", "description": " The attribute to set."}, {"type": "String", "name": "val", "description": " The value of the attribute."}], "description": "Provides a normalized attribute interface.", "guessedname": "setAttribute", "guessedtype": "function"}, "getText": {"return": {"type": "String", "description": "The text content of the element (includes text of any descending elements)."}, "params": [{"type": "HTMLElement", "name": "element", "description": " The html element."}], "description": "Returns the text content of the HTMLElement.", "guessedname": "getText", "guessedtype": "property"}, "_tokenize": {"description": "Break selector into token units per simple selector.\nCombinator is attached to the previous token.", "guessedname": "_tokenize", "guessedtype": "function"}, "getAttibute": {"return": {"type": "String", "description": "The current value of the attribute."}, "params": [{"type": "HTMLElement", "name": "el", "description": " The target element for the attribute."}, {"type": "String", "name": "attr", "description": " The attribute to get."}], "description": "Provides a normalized attribute interface.", "guessedname": "getAttribute", "guessedtype": "function"}, "query": {"return": {"type": "Array", "description": "An array of nodes that match the given selector."}, "description": "Retrieves a set of nodes based on a given CSS selector.", "param": "{string} selector The CSS Selector to test the node against.", "static": "", "guessedname": "query", "guessedtype": "function", "params": [{"type": "string", "name": "selector", "description": " The CSS Selector to test the node against."}, {"type": "HTMLElement", "name": "root", "description": " optional An HTMLElement to start the query from. Defaults to Y.config.doc"}, {"type": "Boolean", "name": "firstOnly", "description": " optional Whether or not to return only the first match."}]}, "ancestor": {"return": {"type": "HTMLElement", "description": "The ancestor node matching the selector, or null."}, "description": "A convenience function to emulate Y.Node's aNode.ancestor(selector).", "param": "{HTMLElement} element An HTMLElement to start the query from.", "static": "", "guessedname": "ancestor", "guessedtype": "function", "params": [{"type": "HTMLElement", "name": "element", "description": " An HTMLElement to start the query from."}, {"type": "String", "name": "selector", "description": " The CSS selector to test the node against."}, {"type": "Boolean", "name": "testSelf", "description": " optional Whether or not to include the element in the scan"}]}}, "static": "", "file": "dom.js", "shortname": "Selector", "properties": {"shorthand": {"type": "object", "description": "Mapping of shorthand tokens to corresponding attribute selector", "guessedname": "shorthand", "guessedtype": "property"}, "operators": {"type": "object", "description": "List of operators and corresponding boolean functions. \nThese functions are passed the attribute and the current node's value of the attribute.", "guessedname": "operators", "guessedtype": "property"}, "PARENT_NODE": {"description": "Provides helper methods for collecting and filtering DOM elements.", "guessedname": "PARENT_NODE", "guessedtype": "property"}}, "description": "Provides support for using CSS selectors to query the DOM"}, "DataSourceXMLSchema": {"name": "DataSourceXMLSchema", "namespace": "", "module": "datasource", "guessedname": "DataSourceXMLSchema", "methods": {"_beforeDefDataFn": {"description": "Parses raw data into a normalized response.", "param": "tId {Number} Unique transaction ID.", "protected": "", "params": [{"type": "Number", "name": "tId", "description": "  Unique transaction ID."}, {"type": "Object", "name": "request", "description": "  The request."}, {"type": "Object", "name": "callback", "description": "  The callback object with the following properties:\n<dl>\n<dt>success (Function)</dt> <dd>Success handler.</dd>\n<dt>failure (Function)</dt> <dd>Failure handler.</dd>\n</dl>"}, {"type": "Object", "name": "data", "description": "  Raw data."}], "guessedname": "_beforeDefDataFn", "guessedtype": "function"}, "initializer": {"description": "Internal init() handler.", "param": "config {Object} Config object.", "params": [{"type": "Object", "name": "config", "description": "  Config object."}], "private": "", "guessedname": "initializer", "guessedtype": "function"}}, "extends": "Plugin.Base", "superclass": "Plugin.Base", "file": "datasource-xmlschema.js", "guessedtype": "function", "shortname": "DataSourceXMLSchema", "properties": {"NS": {"description": "The namespace for the plugin. This will be the property on the host which\nreferences the plugin instance.", "value": "\"schema\"", "static": "", "guessedname": "NS", "guessedtype": "property", "type": "String", "final": ""}, "NAME": {"description": "Class name.", "value": "\"dataSourceXMLSchema\"", "static": "", "guessedname": "NAME", "guessedtype": "property", "type": "String", "final": ""}}, "description": "Adds schema-parsing to the DataSource Utility."}, "Controller": {"since": "3.4.0", "name": "Controller", "constructors": [{"description": "Provides URL-based routing using HTML5 `pushState()` or the location hash.\nThis makes it easy to wire up route handlers for different application states\nwhile providing full back/forward navigation support and bookmarkable, shareable\nURLs."}], "namespace": "", "module": "app", "properties": {"_regexUrlQuery": {"protected": "", "type": "RegExp", "description": "Regex that matches and captures the query portion of a URL, minus the\npreceding `?` character, and discarding the hash portion of the URL if any.", "guessedname": "_regexUrlQuery", "guessedtype": "property"}, "_dispatching": {"default": "undefined", "protected": "", "type": "Boolean", "description": "Whether or not we're currently in the process of dispatching to routes."}, "_dispatched": {"default": "undefined", "protected": "", "type": "Boolean", "description": "Whether or not `_dispatch()` has been called since this controller was\ninstantiated."}, "_regexUrlStrip": {"protected": "", "type": "RegExp", "description": "Regex that matches everything before the path portion of an HTTP or HTTPS\nURL. This will be used to strip this part of the URL from a string when we\nonly want the path.", "guessedname": "_regexUrlStrip", "guessedtype": "property"}, "_ready": {"default": "undefined", "protected": "", "type": "Boolean", "description": "Whether or not the `ready` event has fired yet."}, "_regexPathParam": {"protected": "", "type": "RegExp", "description": "Regex used to match parameter placeholders in route paths.\nSubpattern captures:\n1. Parameter prefix character. Either a `:` for subpath parameters that\nshould only match a single level of a path, or `*` for splat parameters\nthat should match any number of path levels.\n2. Parameter name.", "guessedname": "_regexPathParam", "guessedtype": "property"}, "html5": {"type": "Boolean", "description": "Whether or not this browser is capable of using HTML5 history.\nThis property is for informational purposes only. It's not configurable, and\nchanging it will have no effect.", "guessedname": "html5", "guessedtype": "property"}, "routes": {"default": "`[]`", "type": "Object[]", "description": "Array of route objects specifying routes to be created at instantiation\ntime.\nEach item in the array must be an object with the following properties:\n`path`: String or regex representing the path to match. See the docs for\nthe `route()` method for more details.\n`callback`: Function or a string representing the name of a function on\nthis controller instance that should be called when the route is\ntriggered. See the docs for the `route()` method for more details.\nThis property may be overridden in a subclass or passed as a config\nattribute when instantiating a `Y.Controller`-based class, but setting it\nafter instantiation will have no effect (use the `route()` method instead).\nIf routes are passed at instantiation time, they will override any routes\nset on the prototype.", "guessedname": "routes", "guessedtype": "property"}, "root": {"default": "`''`", "type": "String", "description": "Absolute root path from which all routes should be evaluated.\nFor example, if your controller is running on a page at\n`http://example.com/myapp/` and you add a route with the path `/`, your\nroute will never execute, because the path will always be preceded by\n`/myapp`. Setting `root` to `/myapp` would cause all routes to be evaluated\nrelative to that root URL, so the `/` route would then execute when the\nuser browses to `http://example.com/myapp/`.\nThis property may be overridden in a subclass, set after instantiation, or\npassed as a config attribute when instantiating a `Y.Controller`-based\nclass.", "guessedname": "root", "guessedtype": "property"}}, "guessedname": "HistoryHash", "methods": {"dispatch": {"chainable": "", "description": "Dispatches to the first route handler that matches the current URL, if any.\nIf `dispatch()` is called before the `ready` event has fired, it will\nautomatically wait for the `ready` event before dispatching. Otherwise it\nwill dispatch immediately.", "guessedname": "dispatch", "guessedtype": "function"}, "replace": {"description": "Replaces the current browser history entry with a new one, and dispatches to\nthe first matching route handler, if any.\nBehind the scenes, this method uses HTML5 `pushState()` in browsers that\nsupport it (or the location hash in older browsers and IE) to change the\nURL.\nThe specified URL must share the same origin (i.e., protocol, host, and\nport) as the current page, or an error will occur.", "chainable": "", "param": "{String} [url] URL to set. Should be a relative URL. If this\ncontroller's `root` property is set, this URL must be relative to the\nroot URL. If no URL is specified, the page's current URL will be used.", "see": "save()", "params": [{"type": "String", "name": "[url]", "description": " URL to set. Should be a relative URL. If this\ncontroller's `root` property is set, this URL must be relative to the\nroot URL. If no URL is specified, the page's current URL will be used."}], "guessedname": "replace", "guessedtype": "function", "example": "// Starting URL: http://example.com/\ncontroller.replace('/path/');\n// New URL: http://example.com/path/\ncontroller.replace('/path?foo=bar');\n// New URL: http://example.com/path?foo=bar\ncontroller.replace('/');\n// New URL: http://example.com/"}, "upgrade": {"return": {"type": "Boolean", "description": "`true` if the URL was upgraded, `false` otherwise."}, "description": "Upgrades a hash-based URL to an HTML5 URL if necessary. In non-HTML5\nbrowsers, this method is a noop.", "guessedname": "upgrade", "guessedtype": "function"}, "getPath": {"return": {"type": "String", "description": "Current route path."}, "description": "Gets the current route path, relative to the `root` (if any).", "guessedname": "getPath", "guessedtype": "function"}, "_getHashPath": {"protected": "", "return": {"type": "String", "description": "Current hash path, or an empty string if the hash is empty."}, "description": "Gets the current path from the location hash, or an empty string if the\nhash is empty.", "guessedname": "_getHashPath", "guessedtype": "function"}, "_getRequest": {"return": {"type": "Object", "description": "Request object."}, "description": "Gets a request object that can be passed to a route handler.", "param": "{String} path Current path being dispatched.", "protected": "", "params": [{"type": "String", "name": "path", "description": " Current path being dispatched."}], "guessedname": "_getRequest", "guessedtype": "function"}, "match": {"return": {"type": "Object[]", "description": "Array of route objects that match the specified path."}, "description": "Returns an array of route objects that match the specified URL path.\nThis method is called internally to determine which routes match the current\npath whenever the URL changes. You may override it if you want to customize\nthe route matching logic, although this usually shouldn't be necessary.\nEach returned route object has the following properties:\n`callback`: A function or a string representing the name of a function\nthis controller that should be executed when the route is triggered.\n`keys`: An array of strings representing the named parameters defined in\nthe route's path specification, if any.\n`path`: The route's path specification, which may be either a string or\na regex.\n`regex`: A regular expression version of the route's path specification.\nThis regex is used to determine whether the route matches a given path.", "param": "{String} path URL path to match.", "params": [{"type": "String", "name": "path", "description": " URL path to match."}], "guessedname": "match", "guessedtype": "function", "example": "controller.route('/foo', function () {});\ncontroller.match('/foo');\n// => [{callback: ..., keys: [], path: '/foo', regex: ...}]"}, "_getRegex": {"return": {"type": "RegExp", "description": "Route regex."}, "description": "Creates a regular expression from the given route specification. If _path_\nis already a regex, it will be returned unmodified.", "param": "{String|RegExp} path Route path specification.", "protected": "", "params": [{"type": "String|RegExp", "name": "path", "description": " Route path specification."}, {"type": "Array", "name": "keys", "description": " Array reference to which route parameter names will be\nadded."}], "guessedname": "_getRegex", "guessedtype": "function"}, "_save": {"description": "Saves a history entry using either `pushState()` or the location hash.", "chainable": "", "param": "{String} [url] URL for the history entry.", "protected": "", "params": [{"type": "String", "name": "[url]", "description": " URL for the history entry."}, {"type": "Boolean", "name": "[replace=false]", "description": " If `true`, the current history entry will\nbe replaced instead of a new one being added."}], "guessedname": "_save", "guessedtype": "function"}, "_decode": {"return": {"type": "String", "description": "Decoded string."}, "description": "Wrapper around `decodeURIComponent` that also converts `+` chars into\nspaces.", "param": "{String} string String to decode.", "protected": "", "params": [{"type": "String", "name": "string", "description": " String to decode."}], "guessedname": "_decode", "guessedtype": "function"}, "_getQuery": {"protected": "", "return": {"type": "String", "description": "Current route query string."}, "description": "Gets the current route query string.", "guessedname": "_getQuery", "guessedtype": "function"}, "save": {"description": "Saves a new browser history entry and dispatches to the first matching route\nhandler, if any.\nBehind the scenes, this method uses HTML5 `pushState()` in browsers that\nsupport it (or the location hash in older browsers and IE) to change the\nURL and create a history entry.\nThe specified URL must share the same origin (i.e., protocol, host, and\nport) as the current page, or an error will occur.", "chainable": "", "param": "{String} [url] URL to set. Should be a relative URL. If this\ncontroller's `root` property is set, this URL must be relative to the\nroot URL. If no URL is specified, the page's current URL will be used.", "see": "replace()", "params": [{"type": "String", "name": "[url]", "description": " URL to set. Should be a relative URL. If this\ncontroller's `root` property is set, this URL must be relative to the\nroot URL. If no URL is specified, the page's current URL will be used."}], "guessedname": "save", "guessedtype": "function", "example": "// Starting URL: http://example.com/\ncontroller.save('/path/');\n// New URL: http://example.com/path/\ncontroller.save('/path?foo=bar');\n// New URL: http://example.com/path?foo=bar\ncontroller.save('/');\n// New URL: http://example.com/"}, "_queue": {"description": "Queues up a `_save()` call to run after all previously-queued calls have\nfinished.\nThis is necessary because if we make multiple `_save()` calls before the\nfirst call gets dispatched, then both calls will dispatch to the last call's\nURL.\nAll arguments passed to `_queue()` will be passed on to `_save()` when the\nqueued function is executed.", "chainable": "", "see": "_dequeue", "protected": "", "guessedname": "_queue", "guessedtype": "function"}, "_dequeue": {"description": "Shifts the topmost `_save()` call off the queue and executes it. Does\nnothing if the queue is empty.", "chainable": "", "see": "_queue", "protected": "", "guessedname": "_dequeue", "guessedtype": "function"}, "removeRoot": {"return": {"type": "String", "description": "Rootless path."}, "description": "Removes the `root` URL from the from of _path_ (if it's there) and returns\nthe result. The returned path will always have a leading `/`.", "param": "{String} path URL path.", "params": [{"type": "String", "name": "path", "description": " URL path."}], "guessedname": "removeRoot", "guessedtype": "function"}, "_parseQuery": {"return": {"type": "Object", "description": "Hash of key/value pairs for query parameters."}, "description": "Parses a URL query string into a key/value hash. If `Y.QueryString.parse` is\navailable, this method will be an alias to that.", "param": "{String} query Query string to parse.", "protected": "", "params": [{"type": "String", "name": "query", "description": " Query string to parse."}], "guessedname": "_parseQuery", "guessedtype": "function"}, "_joinURL": {"return": {"type": "String", "description": "Joined URL."}, "description": "Joins the `root` URL to the specified _url_, normalizing leading/trailing\n`/` characters.", "param": "{String} url URL to append to the `root` URL.", "protected": "", "params": [{"type": "String", "name": "url", "description": " URL to append to the `root` URL."}], "guessedname": "_joinURL", "guessedtype": "function", "example": "controller.root = '/foo'\ncontroller._joinURL('bar');  // => '/foo/bar'\ncontroller._joinURL('/bar'); // => '/foo/bar'\ncontroller.root = '/foo/'\ncontroller._joinURL('bar');  // => '/foo/bar'\ncontroller._joinURL('/bar'); // => '/foo/bar'"}, "hasRoute": {"return": {"type": "Boolean", "description": "`true` if there's at least one matching route, `false`\notherwise."}, "description": "Returns `true` if this controller has at least one route that matches the\nspecified URL path, `false` otherwise.", "param": "{String} path URL path to match.", "params": [{"type": "String", "name": "path", "description": " URL path to match."}], "guessedname": "hasRoute", "guessedtype": "function"}, "_getPath": {"protected": "", "return": {"type": "String", "description": "Current route path."}, "description": "Gets the current route path.", "guessedname": "_getPath", "guessedtype": "function"}, "_dispatch": {"description": "Dispatches to the first route handler that matches the specified _path_.\nIf called before the `ready` event has fired, the dispatch will be aborted.\nThis ensures normalized behavior between Chrome (which fires a `popstate`\nevent on every pageview) and other browsers (which do not).", "chainable": "", "param": "{String} path URL path.", "protected": "", "params": [{"type": "String", "name": "path", "description": " URL path."}], "guessedname": "_dispatch", "guessedtype": "function"}, "_defReadyFn": {"description": "Default handler for the `ready` event.", "param": "{EventFacade} e", "protected": "", "params": [{"type": "EventFacade", "name": "e", "description": ""}], "guessedname": "_defReadyFn", "guessedtype": "function"}, "route": {"description": "Adds a route handler for the specified URL _path_.\nThe _path_ parameter may be either a string or a regular expression. If it's\na string, it may contain named parameters: `:param` will match any single\npart of a URL path (not including `/` characters), and `*param` will match\nany number of parts of a URL path (including `/` characters). These named\nparameters will be made available as keys on the `req.params` object that's\npassed to route handlers.\nIf the _path_ parameter is a regex, all pattern matches will be made\navailable as numbered keys on `req.params`, starting with `0` for the full\nmatch, then `1` for the first subpattern match, and so on.\nHere's a set of sample routes along with URL paths that they match:\nRoute: `/photos/:tag/:page`\nURL: `/photos/kittens/1`, params: `{tag: 'kittens', page: '1'}`\nURL: `/photos/puppies/2`, params: `{tag: 'puppies', page: '2'}`\nRoute: `/file/*path`\nURL: `/file/foo/bar/baz.txt`, params: `{path: 'foo/bar/baz.txt'}`\nURL: `/file/foo`, params: `{path: 'foo'}`\nIf multiple route handlers match a given URL, they will be executed in the\norder they were added. The first route that was added will be the first to\nbe executed.", "chainable": "", "param": "{String|RegExp} path Path to match. May be a string or a regular\nexpression.", "params": [{"type": "String|RegExp", "name": "path", "description": " Path to match. May be a string or a regular\nexpression."}, {"type": "Function|String", "name": "callback", "description": " Callback function to call whenever this\nroute is triggered. If specified as a string, the named function will be\ncalled on this controller instance."}, {"type": "Object", "name": "callback.req", "description": " Request object containing information about\nthe request. It contains the following properties."}, {"type": "Array|Object", "name": "callback.req.params", "description": " Captured parameters matched by\nthe route path specification. If a string path was used and contained\nnamed parameters, then this will be a key/value hash mapping parameter\nnames to their matched values. If a regex path was used, this will be\nan array of subpattern matches starting at index 0 for the full match,\nthen 1 for the first subpattern match, and so on."}, {"type": "String", "name": "callback.req.path", "description": " The current URL path."}, {"type": "Object", "name": "callback.req.query", "description": " Query hash representing the URL query\nstring, if any. Parameter names are keys, and are mapped to parameter\nvalues."}, {"type": "Function", "name": "callback.next", "description": " Callback to pass control to the next\nmatching route. If you don't call this function, then no further route\nhandlers will be executed, even if there are more that match. If you do\ncall this function, then the next matching route handler (if any) will\nbe called, and will receive the same `req` object that was passed to\nthis route (so you can use the request object to pass data along to\nsubsequent routes)."}], "guessedname": "route", "guessedtype": "function", "example": "controller.route('/photos/:tag/:page', function (req, next) {\nY.log('Current tag: ' + req.params.tag);\nY.log('Current page number: ' + req.params.page);\n});"}, "_afterHistoryChange": {"description": "Handles `history:change` and `hashchange` events.", "param": "{EventFacade} e", "protected": "", "params": [{"type": "EventFacade", "name": "e", "description": ""}], "guessedname": "_afterHistoryChange", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "controller.js", "guessedtype": "property", "shortname": "Controller", "events": {"ready": {"description": "Fired when the controller is ready to begin dispatching to route handlers.\nYou shouldn't need to wait for this event unless you plan to implement some\nkind of custom dispatching logic. It's used internally in order to avoid\ndispatching to an initial route if a browser history change occurs first.", "fireonce": "", "param": "{Boolean} dispatched `true` if routes have already been dispatched\n(most likely due to a history change).", "params": [{"type": "Boolean", "name": "dispatched", "description": " `true` if routes have already been dispatched\n(most likely due to a history change)."}], "guessedname": "EVT_READY", "guessedtype": "property"}}, "description": "Provides URL-based routing using HTML5 `pushState()` or the location hash.\nThis makes it easy to wire up route handlers for different application states\nwhile providing full back/forward navigation support and bookmarkable, shareable\nURLs."}, "WidgetPosition": {"name": "WidgetPosition", "namespace": "", "module": "widget-position", "events": {"yChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "yChange", "description": "Fires when the value for the configuration attribute 'y' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "xyChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "xyChange", "description": "Fires when the value for the configuration attribute 'xy' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "xChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "xChange", "description": "Fires when the value for the configuration attribute 'x' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "configs": {"y": {"default": "0", "type": "number", "description": "Page Y co-ordinate for the widget. This attribute acts as a facade for the \nxy attribute. Changes in position can be monitored by listening for xyChange events.", "guessedname": "y", "guessedtype": "property"}, "x": {"default": "0", "type": "number", "description": "Page X co-ordinate for the widget. This attribute acts as a facade for the \nxy attribute. Changes in position can be monitored by listening for xyChange events.", "guessedname": "x", "guessedtype": "property"}, "xy": {"default": "[0,0]", "type": "Array", "description": "Page XY co-ordinate pair for the widget.", "guessedname": "xy", "guessedtype": "property"}}, "methods": {"_getX": {"protected": "", "return": {"type": "Number", "description": "The X page co-ordinate value"}, "description": "Default getter for the X attribute. The value is retrieved from \nthe XY attribute, which is the sole store for the XY state.", "guessedname": "_getX", "guessedtype": "function"}, "_validateXY": {"return": {"type": "boolean", "description": "true if valid, false if not."}, "description": "Default validator for the XY attribute", "param": "{Array} val The XY page co-ordinate value which is being set.", "protected": "", "params": [{"type": "Array", "name": "val", "description": " The XY page co-ordinate value which is being set."}], "guessedname": "_validateXY", "guessedtype": "function"}, "_setX": {"description": "Default setter for the X attribute. The setter passes the X value through\nto the XY attribute, which is the sole store for the XY state.", "param": "{Number} val The X page co-ordinate value", "protected": "", "params": [{"type": "Number", "name": "val", "description": " The X page co-ordinate value"}], "guessedname": "_setX", "guessedtype": "function"}, "_uiSetXY": {"description": "Updates the UI to reflect the XY page co-ordinates passed in.", "param": "{String} val The XY page co-ordinates value to be reflected in the UI", "protected": "", "params": [{"type": "String", "name": "val", "description": " The XY page co-ordinates value to be reflected in the UI"}], "guessedname": "_uiSetXY", "guessedtype": "function"}, "move": {"param": "{Number} x The new x position", "params": [{"type": "Number", "name": "x", "description": " The new x position"}, {"type": "Number", "name": "y", "description": " The new y position\n<p>Or</p>"}, {"type": "Array", "name": "x,", "description": " y values passed as an array ([x, y]), to support\nsimple pass through of Node.getXY results"}], "description": "Moves the Widget to the specified page xy co-ordinate position.", "guessedname": "move", "guessedtype": "function"}, "_syncUIPosition": {"protected": "", "description": "Synchronizes the UI to match the Widgets xy page position state.\n<p>\nThis method in invoked after syncUI is invoked for the Widget class\nusing YUI's aop infrastructure.\n</p>", "guessedname": "_syncUIPosition", "guessedtype": "function"}, "_getY": {"protected": "", "return": {"type": "Number", "description": "The Y page co-ordinate value"}, "description": "Default getter for the Y attribute. The value is retrieved from \nthe XY attribute, which is the sole store for the XY state.", "guessedname": "_getY", "guessedtype": "function"}, "syncXY": {"description": "Synchronizes the Panel's \"xy\", \"x\", and \"y\" properties with the \nWidget's position in the DOM.", "guessedname": "syncXY", "guessedtype": "function"}, "_setY": {"description": "Default setter for the Y attribute. The setter passes the Y value through\nto the XY attribute, which is the sole store for the XY state.", "param": "{Number} val The Y page co-ordinate value", "protected": "", "params": [{"type": "Number", "name": "val", "description": " The Y page co-ordinate value"}], "guessedname": "_setY", "guessedtype": "function"}, "_afterXYChange": {"description": "Default attribute change listener for the xy attribute, responsible\nfor updating the UI, in response to attribute changes.", "param": "{EventFacade} e The event facade for the attribute change", "protected": "", "params": [{"type": "EventFacade", "name": "e", "description": " The event facade for the attribute change"}], "guessedname": "_afterXYChange", "guessedtype": "function"}, "_renderUIPosition": {"protected": "", "description": "Creates/Initializes the DOM to support xy page positioning.\n<p>\nThis method in invoked after renderUI is invoked for the Widget class\nusing YUI's aop infrastructure.\n</p>", "guessedname": "_renderUIPosition", "guessedtype": "function"}, "_bindUIPosition": {"protected": "", "description": "Binds event listeners responsible for updating the UI state in response to \nWidget position related state changes.\n<p>\nThis method in invoked after bindUI is invoked for the Widget class\nusing YUI's aop infrastructure.\n</p>", "guessedname": "_bindUIPosition", "guessedtype": "function"}}, "param": "{Object} config User configuration object", "file": "widget-position.js", "shortname": "WidgetPosition", "properties": {"ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute \nconfiguration introduced by WidgetPosition.", "guessedname": "ATTRS", "guessedtype": "property"}, "POSITIONED_CLASS_NAME": {"description": "Default class used to mark the boundingBox of a positioned widget.", "default": "\"yui-widget-positioned\"", "static": "", "guessedname": "POSITIONED_CLASS_NAME", "guessedtype": "property", "type": "String"}}, "description": "Widget extension, which can be used to add positioning support to the base Widget class, \nthrough the <a href=\"Base.html#method_build\">Base.build</a> method."}, "Uploader": {"name": "Uploader", "configs": {"log": {"default": "false", "type": "{Boolean}", "description": "The flag that allows Flash player to \noutput debug messages to its trace stack \n(if the Flash debug player is used).", "guessedname": "log", "guessedtype": "property"}, "swfURL": {"description": "The URL of the uploader's SWF.", "writeonce": "", "default": "\"assets/uploader.swf\"", "guessedname": "swfURL", "guessedtype": "property", "type": "{String}"}, "multiFiles": {"default": "false", "type": "{Boolean}", "description": "The flag that allows the user to select\nmore than one files during the 'Browse'\ndialog (using 'Shift' or 'Ctrl' keys).", "guessedname": "multiFiles", "guessedtype": "property"}, "buttonSkin": {"description": "The URL of the image sprite for skinning the uploader's 'Browse' button.", "writeonce": "", "default": "null", "guessedname": "buttonSkin", "guessedtype": "property", "type": "{String}"}, "simLimit": {"default": "2", "type": "{Number}", "description": "The number of files that can be uploaded\nsimultaneously if the automatic queue management\nis used. This value can be in the range between 2\nand 5.", "guessedname": "simLimit", "guessedtype": "property"}, "boundingBox": {"description": "The Node containing the uploader's 'Browse' button.", "writeonce": "", "default": "null", "guessedname": "boundingBox", "guessedtype": "property", "type": "{Node}"}, "fileFilters": {"default": "[]", "type": "{Array}", "description": "The array of filters on file extensions for\nthe 'Browse' dialog. These filters only provide\nconvenience for the user and do not strictly\nlimit the selection to certain file extensions.\nEach item in the array must contain a 'description'\nproperty, and an 'extensions' property that must be\nin the form \"*.ext;*.ext;*.ext;...\"", "guessedname": "fileFilters", "guessedtype": "property"}, "transparent": {"description": "The flag indicating whether the uploader is rendered \nwith a transparent background.", "writeonce": "", "default": "true", "guessedname": "transparent", "guessedtype": "property", "type": "{Boolean}"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": " (optional) Configuration parameters for the Uploader. The following parameters are available:\n<dl>\n<dt>boundingBox : String|Node (required)</dt>\n<dd></dd>\n<dt>buttonSkin : String (optional)</dt>\n<dd></dd>\n<dt>transparent : String (optional)</dt>\n<dd></dd>\n<dt>swfURL : String (optional)</dt>\n<dd></dd>\n</dl>"}], "description": "Creates the Uploader instance and keeps the initialization data"}], "namespace": "", "module": "uploader", "events": {"mouseleave": {"params": [{"type": "Event", "name": "event", "description": "  The event object for the mouseleave."}], "description": "Fired when the mouse leaves the Uploader's 'Browse' button.", "param": "event {Event} The event object for the mouseleave."}, "uploadprogress": {"params": [{"type": "Event", "name": "event", "description": "  The event object for the uploadprogress.\n<dl>\n<dt>id</dt>\n<dd>The id of the file for which the progress information is being provided.</dd>\n<dt>bytesLoaded</dt>\n<dd>The number of bytes of the file that has been uploaded.</dd>\n<dt>bytesTotal</dt>\n<dd>The total number of bytes in the file that is being uploaded.</dd>\n</dl>"}], "description": "Provides progress information on a specific file upload.", "param": "event {Event} The event object for the uploadprogress.\n<dl>\n<dt>id</dt>\n<dd>The id of the file for which the progress information is being provided.</dd>\n<dt>bytesLoaded</dt>\n<dd>The number of bytes of the file that has been uploaded.</dd>\n<dt>bytesTotal</dt>\n<dd>The total number of bytes in the file that is being uploaded.</dd>\n</dl>"}, "uploadcomplete": {"params": [{"type": "Event", "name": "event", "description": "  The event object for the uploadcancel.\n<dl>\n<dt>id</dt>\n<dd>The id of the file whose upload has been cancelled.</dd>\n</dl>"}], "description": "Fires when a specific file's upload is cancelled.", "param": "event {Event} The event object for the uploadcancel.\n<dl>\n<dt>id</dt>\n<dd>The id of the file whose upload has been cancelled.</dd>\n</dl>"}, "uploaderReady": {"params": [{"type": "Event", "name": "event", "description": "  The event object for the uploaderReady."}], "description": "Announces that the uploader is ready and available for calling methods\nand setting properties", "param": "event {Event} The event object for the uploaderReady."}, "uploadcompletedata": {"params": [{"type": "Event", "name": "event", "description": "  The event object for the uploadcompletedata.\n<dl>\n<dt>id</dt>\n<dd>The id of the file for which the response is being provided.</dd>\n<dt>data</dt>\n<dd>The content of the server response.</dd>\n</dl>"}], "description": "If the server has sent a response to the file upload, this event is\nfired and the response is added to its payload.", "param": "event {Event} The event object for the uploadcompletedata.\n<dl>\n<dt>id</dt>\n<dd>The id of the file for which the response is being provided.</dd>\n<dt>data</dt>\n<dd>The content of the server response.</dd>\n</dl>"}, "simLimitChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "simLimitChange", "description": "Fires when the value for the configuration attribute 'simLimit' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "uploadstart": {"params": [{"type": "Event", "name": "event", "description": "  The event object for the uploadstart.\n<dl>\n<dt>id</dt>\n<dd>The id of the file whose upload has been started.</dd>\n</dl>"}], "description": "Announces that the upload has been started for a specific file.", "param": "event {Event} The event object for the uploadstart.\n<dl>\n<dt>id</dt>\n<dd>The id of the file whose upload has been started.</dd>\n</dl>"}, "swfURLChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "swfURLChange", "description": "Fires when the value for the configuration attribute 'swfURL' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "mouseup": {"params": [{"type": "Event", "name": "event", "description": "  The event object for the mouseup."}], "description": "Fired when the mouse button is raised on the Uploader's 'Browse' button.", "param": "event {Event} The event object for the mouseup."}, "boundingBoxChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "boundingBoxChange", "description": "Fires when the value for the configuration attribute 'boundingBox' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "fileselect": {"params": [{"type": "Event} The event object for the fileSelect.\n<dl>\n<dt>fileList</dt>\n<dd>The file list Object with entries in the following format: \nfileList[fileID] = {id: fileID, name: fileName, cDate: fileCDate, mDate: fileMDate, size: fileSize", "name": "event", "description": " </dd>\n</dl>"}], "description": "Fires when the user has finished selecting a set of files to be uploaded.", "param": "event {Event} The event object for the fileSelect.\n<dl>\n<dt>fileList</dt>\n<dd>The file list Object with entries in the following format: \nfileList[fileID] = {id: fileID, name: fileName, cDate: fileCDate, mDate: fileMDate, size: fileSize}</dd>\n</dl>"}, "multiFilesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "multiFilesChange", "description": "Fires when the value for the configuration attribute 'multiFiles' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "fileFiltersChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "fileFiltersChange", "description": "Fires when the value for the configuration attribute 'fileFilters' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "transparentChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "transparentChange", "description": "Fires when the value for the configuration attribute 'transparent' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "mousedown": {"params": [{"type": "Event", "name": "event", "description": "  The event object for the mousedown."}], "description": "Fired when the mouse button is pressed on the Uploader's 'Browse' button.", "param": "event {Event} The event object for the mousedown."}, "uploadcancel": {"params": [{"type": "Event", "name": "event", "description": "  The event object for the uploaderReady.\n<dl>\n<dt>ddEvent</dt>\n<dd><code>drag:start</code> event from the thumb</dd>\n</dl>"}], "description": "Announces that the uploader is ready and available for calling methods\nand setting properties", "param": "event {Event} The event object for the uploaderReady.\n<dl>\n<dt>ddEvent</dt>\n<dd><code>drag:start</code> event from the thumb</dd>\n</dl>"}, "logChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "logChange", "description": "Fires when the value for the configuration attribute 'log' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "uploaderror": {"params": [{"type": "Event", "name": "event", "description": "  The event object for the uploadeerror.\n<dl>\n<dt>id</dt>\n<dd>The id of the file for which the upload error has occurred.</dd>\n<dt>status</dt>\n<dd>Relevant error information.</dd>\n</dl>"}], "description": "Provides error information if an error has occurred during the upload.", "param": "event {Event} The event object for the uploadeerror.\n<dl>\n<dt>id</dt>\n<dd>The id of the file for which the upload error has occurred.</dd>\n<dt>status</dt>\n<dd>Relevant error information.</dd>\n</dl>"}, "click": {"params": [{"type": "Event", "name": "event", "description": "  The event object for the click."}], "description": "Fired when the mouse button is clicked on the Uploader's 'Browse' button.", "param": "event {Event} The event object for the click."}, "buttonSkinChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "buttonSkinChange", "description": "Fires when the value for the configuration attribute 'buttonSkin' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "mouseenter": {"params": [{"type": "Event", "name": "event", "description": "  The event object for the mouseenter."}], "description": "Fired when the mouse enters the Uploader's 'Browse' button.", "param": "event {Event} The event object for the mouseenter."}}, "methods": {"uploadAll": {"param": "url {String} The URL to upload the files to.", "params": [{"type": "String", "name": "url", "description": "  The URL to upload the files to."}, {"type": "String", "name": "method", "description": "  (optional) The HTTP method to use for sending additional variables, either 'GET' or 'POST' ('GET' by default)"}, {"type": "Object", "name": "postVars", "description": "  (optional) A set of key-value pairs to send as variables along with the file upload HTTP request."}, {"type": "String", "name": "postFileVarName", "description": "  (optional) The name of the POST variable that should contain the uploaded file ('Filedata' by default)."}], "description": "Starts the upload of the files in the upload queue. \nThe upload queue is managed automatically.", "guessedname": "uploadAll", "guessedtype": "function"}, "enable": {"description": "Enables the uploader user input (mouse clicks on the 'Browse' button). If the button skin \nis applied, the sprite is reset from the \"disabled\" state.", "guessedname": "enable", "guessedtype": "function"}, "setAllowLogging": {"description": "Setter for the 'log' property.", "param": "value {Boolean} The value for the 'log' property.", "params": [{"type": "Boolean", "name": "value", "description": "  The value for the 'log' property."}], "private": "", "guessedname": "setAllowLogging", "guessedtype": "function"}, "_initializeUploader": {"description": "Called when the uploader SWF is initialized", "param": "event {Object} The event to be propagated from Flash.", "params": [{"type": "Object", "name": "event", "description": "  The event to be propagated from Flash."}], "private": "", "guessedname": "_initializeUploader", "guessedtype": "function"}, "_relayEvent": {"description": "Called when an event is dispatched from Uploader", "param": "event {Object} The event to be propagated from Flash.", "params": [{"type": "Object", "name": "event", "description": "  The event to be propagated from Flash."}], "private": "", "guessedname": "_relayEvent", "guessedtype": "function"}, "clearFileList": {"return": {"type": "Boolean", "description": "This method always returns true."}, "description": "Clears the upload queue.", "guessedname": "clearFileList", "guessedtype": "function"}, "upload": {"return": {"type": "Boolean", "description": "This method always returns true."}, "description": "Starts the upload of a specific file.", "param": "fileID {String} The ID of the file to be uploaded.", "params": [{"type": "String", "name": "fileID", "description": "  The ID of the file to be uploaded."}, {"type": "String", "name": "url", "description": "  The URL to upload the file to."}, {"type": "String", "name": "method", "description": "  (optional) The HTTP method to use for sending additional variables, either 'GET' or 'POST' ('GET' by default)"}, {"type": "Object", "name": "postVars", "description": "  (optional) A set of key-value pairs to send as variables along with the file upload HTTP request."}, {"type": "String", "name": "postFileVarName", "description": "  (optional) The name of the POST variable that should contain the uploaded file ('Filedata' by default)"}], "guessedname": "upload", "guessedtype": "function"}, "initializer": {"protected": "", "description": "Construction logic executed during Uploader instantiation.", "guessedname": "initializer", "guessedtype": "function"}, "removeFile": {"return": {"type": "Object} The updated file list, which is an object of the format:\nfileList[fileID] = {id: fileID, name: fileName, cDate: fileCDate, mDate: fileMDate, size: fileSize", "description": ""}, "description": "Removes a specific file from the upload queue.", "param": "fileID {String} The ID of the file to be removed", "params": [{"type": "String", "name": "fileID", "description": "  The ID of the file to be removed"}], "guessedname": "removeFile", "guessedtype": "function"}, "setSimUploadLimit": {"description": "Setter for the 'simLimit' property.", "param": "value {Boolean} The value for the 'simLimit' property.", "params": [{"type": "Boolean", "name": "value", "description": "  The value for the 'simLimit' property."}], "private": "", "guessedname": "setSimUploadLimit", "guessedtype": "function"}, "setAllowMultipleFiles": {"description": "Setter for the 'multiFiles' property.", "param": "value {Boolean} The value for the 'multiFiles' property.", "params": [{"type": "Boolean", "name": "value", "description": "  The value for the 'multiFiles' property."}], "private": "", "guessedname": "setAllowMultipleFiles", "guessedtype": "function"}, "uploadThese": {"param": "fileIDs {Array} The array of IDs of the files to be uploaded.", "params": [{"type": "Array", "name": "fileIDs", "description": "  The array of IDs of the files to be uploaded."}, {"type": "String", "name": "url", "description": "  The URL to upload the files to."}, {"type": "String", "name": "method", "description": "  (optional) The HTTP method to use for sending additional variables, either 'GET' or 'POST' ('GET' by default)"}, {"type": "Object", "name": "postVars", "description": "  (optional) A set of key-value pairs to send as variables along with the file upload HTTP request."}, {"type": "String", "name": "postFileVarName", "description": "  (optional) The name of the POST variable that should contain the uploaded file ('Filedata' by default)"}], "description": "Starts the upload of a set of files, as specified in the first argument. \nThe upload queue is managed automatically.", "guessedname": "uploadThese", "guessedtype": "function"}, "cancel": {"param": "fileID {String} (optional) The ID of the file whose upload should be cancelled. If no ID is specified, all uploads are cancelled.", "params": [{"type": "String", "name": "fileID", "description": "  (optional) The ID of the file whose upload should be cancelled. If no ID is specified, all uploads are cancelled."}], "description": "Cancels the upload of a specific file, if currently in progress.", "guessedname": "cancel", "guessedtype": "function"}, "setFileFilters": {"description": "Setter for the 'fileFilters' property.", "param": "value {Boolean} The value for the 'fileFilters' property.", "params": [{"type": "Boolean", "name": "value", "description": "  The value for the 'fileFilters' property."}], "private": "", "guessedname": "setFileFilters", "guessedtype": "function"}}, "extends": "Y.Base", "superclass": "Y.Base", "file": "uploader.js", "shortname": "Uploader", "properties": {"uploaderswf": {"description": "The reference to the instance of Y.SWF that encapsulates the instance of the Flash player with uploader logic.", "default": "null", "private": "", "guessedname": "uploaderswf", "guessedtype": "property", "type": "{SWF}"}, "_id": {"guessedname": "_id", "type": "{String}", "description": "The id of this instance of uploader.", "private": "", "guessedtype": "property"}}, "description": "Creates the Uploader instance and keeps the initialization data"}, "DataSource.IO": {"name": "DataSource.IO", "configs": {"ioConfig": {"default": "null", "type": "Object", "description": "Default IO Config.", "guessedname": "ioConfig", "guessedtype": "property"}, "io": {"default": "Y.io", "type": "Y.io", "description": "Pointer to IO Utility.", "guessedname": "io", "guessedtype": "property"}}, "constructors": [{"description": "IO subclass for the DataSource Utility."}], "namespace": "", "module": "datasource", "events": {"ioConfigChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "ioConfigChange", "description": "Fires when the value for the configuration attribute 'ioConfig' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "ioChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "ioChange", "description": "Fires when the value for the configuration attribute 'io' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "DSIO", "methods": {"failureHandler": {"description": "IO failure callback.", "param": "id {String} Transaction ID.", "params": [{"type": "String", "name": "id", "description": "  Transaction ID."}, {"type": "String", "name": "response", "description": "  Response."}, {"type": "Event.Facade", "name": "e", "description": "  Event facade."}], "private": "", "guessedname": "failureHandler", "guessedtype": "function"}, "successHandler": {"description": "IO success callback.", "param": "id {String} Transaction ID.", "params": [{"type": "String", "name": "id", "description": "  Transaction ID."}, {"type": "String", "name": "response", "description": "  Response."}, {"type": "Event.Facade", "name": "e", "description": "  Event facade."}], "private": "", "guessedname": "successHandler", "guessedtype": "function"}, "_defRequestFn": {"description": "Passes query string to IO. Fires <code>response</code> event when\nresponse is received asynchronously.", "param": "e {Event.Facade} Event Facade with the following properties:\n<dl>\n<dt>tId (Number)</dt> <dd>Unique transaction ID.</dd>\n<dt>request (Object)</dt> <dd>The request.</dd>\n<dt>callback (Object)</dt> <dd>The callback object with the following properties:\n<dl>\n<dt>success (Function)</dt> <dd>Success handler.</dd>\n<dt>failure (Function)</dt> <dd>Failure handler.</dd>\n</dl>\n</dd>\n<dt>cfg (Object)</dt> <dd>Configuration object.</dd>\n</dl>", "protected": "", "params": [{"type": "Event.Facade", "name": "e", "description": "  Event Facade with the following properties:\n<dl>\n<dt>tId (Number)</dt> <dd>Unique transaction ID.</dd>\n<dt>request (Object)</dt> <dd>The request.</dd>\n<dt>callback (Object)</dt> <dd>The callback object with the following properties:\n<dl>\n<dt>success (Function)</dt> <dd>Success handler.</dd>\n<dt>failure (Function)</dt> <dd>Failure handler.</dd>\n</dl>\n</dd>\n<dt>cfg (Object)</dt> <dd>Configuration object.</dd>\n</dl>"}], "guessedname": "_defRequestFn", "guessedtype": "function"}, "initializer": {"description": "Internal init() handler.", "param": "config {Object} Config object.", "params": [{"type": "Object", "name": "config", "description": "  Config object."}], "private": "", "guessedname": "initializer", "guessedtype": "function"}}, "extends": "DataSource.Local", "superclass": "DataSource.Local", "file": "datasource-io.js", "guessedtype": "function", "shortname": "DataSource.IO", "properties": {"NAME": {"description": "Class name.", "value": "\"dataSourceIO\"", "static": "", "guessedname": "NAME", "guessedtype": "property", "type": "String", "final": ""}, "_queue": {"description": "Object literal to manage asynchronous request/response\ncycles enabled if queue needs to be managed (asyncMode/ioConnMode):\n<dl>\n<dt>interval {Number}</dt>\n<dd>Interval ID of in-progress queue.</dd>\n<dt>conn</dt>\n<dd>In-progress connection identifier (if applicable).</dd>\n<dt>requests {Object[]}</dt>\n<dd>Array of queued request objects: {request:request, callback:callback}.</dd>\n</dl>", "default": "{interval:null, conn:null, requests:[]}", "private": "", "guessedname": "_queue", "guessedtype": "property", "type": "Object"}}, "description": "IO subclass for the DataSource Utility."}, "Plots": {"name": "Plots", "constructors": [{"description": "Utility class used for drawing markers."}], "namespace": "", "module": "charts", "methods": {"_createMarker": {"return": {"type": "", "description": "Shape"}, "description": "Creates a shape to be used as a marker.", "private": "", "params": [{"type": "Object", "name": "styles", "description": " Hash of style properties."}, {"type": "Number", "name": "order", "description": " Order of the series."}, {"type": "Number", "name": "index", "description": " Index within the series associated with the marker."}], "param": "{Object} styles Hash of style properties.", "guessedname": "_createMarker", "guessedtype": "function"}, "_parseMarkerStyles": {"return": {"type": "", "description": "Object"}, "description": "Combines new styles with existing styles.", "private": "", "params": [{"type": "Object", "name": "Object", "description": " containing style properties for the marker."}], "param": "{Object} Object containing style properties for the marker.", "guessedname": "_parseMarkerStyles", "guessedtype": "function"}, "getMarker": {"return": {"type": "", "description": "Shape"}, "description": "Gets and styles a marker. If there is a marker in cache, it will use it. Otherwise\nit will create one.", "param": "{Object} styles Hash of style properties.", "protected": "", "params": [{"type": "Object", "name": "styles", "description": " Hash of style properties."}, {"type": "Number", "name": "order", "description": " Order of the series."}, {"type": "Number", "name": "index", "description": " Index within the series associated with the marker."}], "guessedname": "getMarker", "guessedtype": "function"}, "_getItemColor": {"return": {"type": "", "description": "String"}, "description": "Parses a color from an array.", "param": "{Array} val collection of colors", "protected": "", "params": [{"type": "Array", "name": "val", "description": " collection of colors"}, {"type": "Number", "name": "i", "description": " index of the item"}], "guessedname": "_getItemColor", "guessedtype": "function"}, "updateMarkerState": {"description": "Resizes and positions markers based on a mouse interaction.", "param": "{String} type state of the marker", "protected": "", "params": [{"type": "String", "name": "type", "description": " state of the marker"}, {"type": "Number", "name": "i", "description": " index of the marker"}], "guessedname": "updateMarkerState", "guessedtype": "function"}, "drawPlots": {"protected": "", "description": "Draws the markers", "guessedname": "drawPlots", "guessedtype": "function"}, "_setStyles": {"return": {"type": "", "description": "Object"}, "description": "Method used by `styles` setter. Overrides base implementation.", "param": "{Object} newStyles Hash of properties to update.", "protected": "", "params": [{"type": "Object", "name": "newStyles", "description": " Hash of properties to update."}], "guessedname": "_setStyles", "guessedtype": "function"}, "_getState": {"return": {"type": "", "description": "String"}, "description": "Returns marker state based on event type", "param": "{String} type event type", "protected": "", "params": [{"type": "String", "name": "type", "description": " event type"}], "guessedname": "_getState", "guessedtype": "function"}, "_createMarkerCache": {"private": "", "description": "Creates a cache of markers for reuse.", "guessedname": "_createMarkerCache", "guessedtype": "function"}, "_toggleVisible": {"description": "Toggles visibility", "param": "{Boolean} visible indicates visibilitye", "params": [{"type": "Boolean", "name": "visible", "description": " indicates visibilitye"}], "private": "", "guessedname": "_toggleVisible", "guessedtype": "function"}, "_getPlotDefaults": {"protected": "", "return": {"type": "", "description": "Object"}, "description": "Gets the default values for series that use the utility. This method is used by\nthe class' `styles` attribute's getter to get build default values.", "guessedname": "_getPlotDefaults", "guessedtype": "function"}, "_clearMarkerCache": {"private": "", "description": "Removes unused markers from the marker cache", "guessedname": "_clearMarkerCache", "guessedtype": "function"}}, "file": "charts.js", "shortname": "Plots", "properties": {"_plotDefaults": {"guessedname": "_plotDefaults", "type": "Object", "description": "Storage for default marker styles.", "private": "", "guessedtype": "property"}, "_markers": {"guessedname": "_markers", "type": "Array", "description": "Collection of markers to be used in the series.", "private": "", "guessedtype": "property"}, "_markerCache": {"guessedname": "_markerCache", "type": "Array", "description": "Collection of markers to be re-used on a series redraw.", "private": "", "guessedtype": "property"}, "_statSyles": {"type": "Object", "private": "", "guessedname": "_stateSyles", "guessedtype": "property"}}, "description": "Utility class used for drawing markers."}, "DD.Drop": {"name": "DD.Drop", "configs": {"node": {"type": "Node", "description": "Y.Node instanace to use as the element to make a Drop Target", "guessedname": "node", "guessedtype": "property"}, "useShim": {"deprecated": "", "type": "Boolean", "description": "Use the Drop shim. Default: true", "guessedname": "useShim", "guessedtype": "property"}, "padding": {"type": "String", "description": "CSS style padding to make the Drop Target bigger than the node.", "guessedname": "padding", "guessedtype": "property"}, "groups": {"type": "Array", "description": "Array of groups to add this drop into.", "guessedname": "groups", "guessedtype": "property"}, "lock": {"type": "Boolean", "description": "Set to lock this drop element.", "guessedname": "lock", "guessedtype": "property"}, "bubbles": {"deprecated": "", "type": "Object", "description": "Controls the default bubble parent for this Drop instance. Default: Y.DD.DDM. Set to false to disable bubbling. Use bubbleTargets in config.", "guessedname": "bubbles", "guessedtype": "property"}}, "constructors": [{"description": "Provides the ability to create a Drop Target."}], "namespace": "DD", "module": "dd", "properties": {"_groups": {"guessedname": "_groups", "type": "Array", "description": "The groups this target belongs to.", "private": "", "guessedtype": "property"}, "_valid": {"guessedname": "_valid", "type": "Boolean", "description": "Flag for determining if the target is valid in this operation.", "private": "", "guessedtype": "property"}, "shim": {"type": "{Object}", "description": "Node reference to the targets shim", "guessedname": "shim", "guessedtype": "property"}, "region": {"type": "Object", "description": "A region object associated with this target, used for checking regions while dragging.", "guessedname": "region", "guessedtype": "property"}, "_bubbleTargets": {"private": "", "description": "The default bubbleTarget for this object. Default: Y.DD.DDM", "guessedname": "_bubbleTargets", "guessedtype": "property"}, "overTarget": {"type": "Boolean", "description": "This flag is tripped when a drag element is over this target.", "guessedname": "overTarget", "guessedtype": "property"}}, "guessedname": "NODE", "methods": {"addToGroup": {"return": {"type": "Self", "description": ""}, "description": "Add this Drop instance to a group, this should be used for on-the-fly group additions.", "chainable": "", "param": "{String} g The group to add this Drop Instance to.", "params": [{"type": "String", "name": "g", "description": " The group to add this Drop Instance to."}], "guessedname": "addToGroup", "guessedtype": "function"}, "_handleOverTarget": {"description": "This handles the over target call made from this object or from the DDM", "private": "", "guessedname": "_handleTargetOver", "guessedtype": "function"}, "removeFromGroup": {"return": {"type": "Self", "description": ""}, "description": "Remove this Drop instance from a group, this should be used for on-the-fly group removals.", "chainable": "", "param": "{String} g The group to remove this Drop Instance from.", "params": [{"type": "String", "name": "g", "description": " The group to remove this Drop Instance from."}], "guessedname": "removeFromGroup", "guessedtype": "function"}, "_createEvents": {"description": "This method creates all the events for this Event Target and publishes them so we get Event Bubbling.", "private": "", "guessedname": "_createEvents", "guessedtype": "function"}, "_handleOut": {"description": "Handles out of target calls/checks", "private": "", "guessedname": "_handleOut", "guessedtype": "function"}, "sizeShim": {"description": "Positions and sizes the shim with the raw data from the node, this can be used to programatically adjust the Targets shim for Animation..", "guessedname": "sizeShim", "guessedtype": "function"}, "initializer": {"description": "Private lifecycle method", "private": "", "guessedname": "initializer", "guessedtype": "function"}, "_handleOutEvent": {"description": "Handles the mouseout DOM event on the Target Shim", "private": "", "guessedname": "_handleOutEvent", "guessedtype": "function"}, "_createShim": {"description": "Creates the Target shim and adds it to the DDM's playground..", "private": "", "guessedname": "_createShim", "guessedtype": "function"}, "inGroup": {"return": {"type": "", "description": "Boolean"}, "description": "Check if this target is in one of the supplied groups.", "param": "{Array} groups The groups to check against", "params": [{"type": "Array", "name": "groups", "description": " The groups to check against"}], "guessedname": "inGroup", "guessedtype": "function"}, "_activateShim": {"description": "Activates the shim and adds some interaction CSS classes", "private": "", "guessedname": "_activateShim", "guessedtype": "function"}, "_deactivateShim": {"description": "Removes classes from the target, resets some flags and sets the shims deactive position [-999, -999]", "private": "", "guessedname": "_deactivateShim", "guessedtype": "function"}, "destructor": {"description": "Lifecycle destructor, unreg the drag from the DDM and remove listeners", "private": "", "guessedname": "destructor", "guessedtype": "function"}, "_handleOverEvent": {"description": "Handles the mouseover DOM event on the Target Shim", "private": "", "guessedname": "_handleOverEvent", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "dd.js", "guessedtype": "property", "shortname": "Drop", "events": {"paddingChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "paddingChange", "description": "Fires when the value for the configuration attribute 'padding' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "groupsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "groupsChange", "description": "Fires when the value for the configuration attribute 'groups' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "drop:enter": {"description": "Fires when a drag element enters this target.", "param": "{EventFacade} event An Event Facade object with the following specific property added:\n<dl>\n<dt>drop</dt><dd>The drop object at the time of the event.</dd>\n<dt>drag</dt><dd>The drag object at the time of the event.</dd>\n</dl>", "params": [{"type": "EventFacade", "name": "event", "description": " An Event Facade object with the following specific property added:\n<dl>\n<dt>drop</dt><dd>The drop object at the time of the event.</dd>\n<dt>drag</dt><dd>The drag object at the time of the event.</dd>\n</dl>"}], "guessedname": "EV_DROP_ENTER", "guessedtype": "property", "bubbles": "DDM", "type": "{CustomEvent}"}, "bubblesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "bubblesChange", "description": "Fires when the value for the configuration attribute 'bubbles' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "drop:over": {"description": "Fires when a drag element is over this target.", "param": "{EventFacade} event An Event Facade object with the following specific property added:\n<dl>\n<dt>drop</dt><dd>The drop object at the time of the event.</dd>\n<dt>drag</dt><dd>The drag object at the time of the event.</dd>\n</dl>", "params": [{"type": "EventFacade", "name": "event", "description": " An Event Facade object with the following specific property added:\n<dl>\n<dt>drop</dt><dd>The drop object at the time of the event.</dd>\n<dt>drag</dt><dd>The drag object at the time of the event.</dd>\n</dl>"}], "guessedname": "EV_DROP_OVER", "guessedtype": "property", "bubbles": "DDM", "type": "{CustomEvent}"}, "nodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "nodeChange", "description": "Fires when the value for the configuration attribute 'node' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "drop:hit": {"description": "Fires when a draggable node is dropped on this Drop Target. (Fired from dd-ddm-drop)", "param": "{EventFacade} event An Event Facade object with the following specific property added:\n<dl>\n<dt>drop</dt><dd>The best guess on what was dropped on.</dd>\n<dt>drag</dt><dd>The drag object at the time of the event.</dd>\n<dt>others</dt><dd>An array of all the other drop targets that was dropped on.</dd>\n</dl>", "params": [{"type": "EventFacade", "name": "event", "description": " An Event Facade object with the following specific property added:\n<dl>\n<dt>drop</dt><dd>The best guess on what was dropped on.</dd>\n<dt>drag</dt><dd>The drag object at the time of the event.</dd>\n<dt>others</dt><dd>An array of all the other drop targets that was dropped on.</dd>\n</dl>"}], "guessedname": "Drop", "guessedtype": "function", "bubbles": "DDM", "type": "{CustomEvent}"}, "useShimChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "useShimChange", "description": "Fires when the value for the configuration attribute 'useShim' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "lockChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "lockChange", "description": "Fires when the value for the configuration attribute 'lock' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "drop:exit": {"description": "Fires when a drag element exits this target.", "param": "{EventFacade} event An Event Facade object", "params": [{"type": "EventFacade", "name": "event", "description": " An Event Facade object"}], "guessedname": "EV_DROP_EXIT", "guessedtype": "property", "bubbles": "DDM", "type": "{CustomEvent}"}}, "description": "Provides the ability to create a Drop Target."}, "A.NodeList": {"name": "A.NodeList", "constructors": [{"description": "Augment the <a href=\"NodeList.html\">YUI3 NodeList</a> with more util methods.\nCheck the list of <a href=\"NodeList.html#methods\">Methods</a> available for\nAUI NodeList."}], "namespace": "", "module": "aui-node", "methods": {"getDoc": {"description": "Get the document node. Shortcut to <code>A.one(document)</code>.", "guessedname": "getDoc", "guessedtype": "function"}, "getWin": {"description": "Get the window node. Shortcut to <code>A.one(window)</code>.", "guessedname": "getWin", "guessedtype": "function"}, "all": {"description": "See <a href=\"Node.html#method_all\">Node all</a>.", "guessedname": "all", "guessedtype": "function"}, "last": {"return": {"type": "Node", "description": ""}, "description": "Returns the last element in the node list collection.", "guessedname": "last", "guessedtype": "function"}, "getDOM": {"description": "See <a href=\"Node.html#method_getDOM\">Node getDOM</a>.", "guessedname": "getDOM", "guessedtype": "function"}, "one": {"description": "See <a href=\"Node.html#method_one\">Node one</a>.", "guessedname": "one", "guessedtype": "function"}, "first": {"return": {"type": "Node", "description": ""}, "description": "Returns the first element in the node list collection.", "guessedname": "first", "guessedtype": "function"}, "getBody": {"description": "Get the body node. Shortcut to <code>A.one('body')</code>.", "guessedname": "getBody", "guessedtype": "function"}}, "uses": ["A.Node"], "file": "aui-node.js", "shortname": "A.NodeList", "description": "Augment the <a href=\"NodeList.html\">YUI3 NodeList</a> with more util methods.\nCheck the list of <a href=\"NodeList.html#methods\">Methods</a> available for\nAUI NodeList."}, "OverlayBase": {"name": "OverlayBase", "constructors": [{"params": [{"type": "Object", "name": "object", "description": " The user configuration for the instance."}], "description": "A basic Overlay Widget, which can be positioned based on Page XY co-ordinates and is stackable (z-index support).\nIt also provides alignment and centering support and uses a standard module format for it's content, with header,\nbody and footer section support."}], "namespace": "", "module": "aui-overlay", "guessedname": "OverlayBase", "uses": ["WidgetStdMod", "WidgetPosition", "WidgetStack", "WidgetPositionAlign", "WidgetPositionConstrain"], "superclass": "Component", "file": "aui-overlay.js", "guessedtype": "property", "extends": "Component", "shortname": "OverlayBase", "description": "A basic Overlay Widget, which can be positioned based on Page XY co-ordinates and is stackable (z-index support).\nIt also provides alignment and centering support and uses a standard module format for it's content, with header,\nbody and footer section support."}, "StackedColumnSeries": {"name": "StackedColumnSeries", "constructors": [{"description": "The StackedColumnSeries renders column chart in which series are stacked vertically to show\ntheir contribution to the cumulative total."}], "namespace": "", "module": "charts", "events": {"negativeBaseValuesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "negativeBaseValuesChange", "description": "Fires when the value for the configuration attribute 'negativeBaseValues' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "typeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "typeChange", "description": "Fires when the value for the configuration attribute 'type' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "positiveBaseValuesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "positiveBaseValuesChange", "description": "Fires when the value for the configuration attribute 'positiveBaseValues' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "stylesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "stylesChange", "description": "Fires when the value for the configuration attribute 'styles' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "StackedColumnSeries", "methods": {"drawSeries": {"protected": "", "description": "Draws the series.", "guessedname": "drawSeries", "guessedtype": "function"}, "updateMarkerState": {"description": "Resizes and positions markers based on a mouse interaction.", "param": "{String} type state of the marker", "protected": "", "params": [{"type": "String", "name": "type", "description": " state of the marker"}, {"type": "Number", "name": "i", "description": " index of the marker"}], "guessedname": "updateMarkerState", "guessedtype": "function"}, "_getPlotDefaults": {"protected": "", "return": {"type": "", "description": "Object"}, "description": "Gets the default values for the markers.", "guessedname": "_getPlotDefaults", "guessedtype": "function"}}, "uses": ["StackingUtil"], "superclass": "ColumnSeries", "file": "charts.js", "guessedtype": "property", "extends": "ColumnSeries", "shortname": "StackedColumnSeries", "configs": {"styles": {"type": "Object", "description": "Style properties used for drawing markers. This attribute is inherited from `ColumnSeries`. Below are the default values:\n<dl>\n<dt>fill</dt><dd>A hash containing the following values:\n<dl>\n<dt>color</dt><dd>Color of the fill. The default value is determined by the order of the series on the graph. The color\nwill be retrieved from the below array:<br/>\n`[\"#66007f\", \"#a86f41\", \"#295454\", \"#996ab2\", \"#e8cdb7\", \"#90bdbd\",\"#000000\",\"#c3b8ca\", \"#968373\", \"#678585\"]`\n</dd>\n<dt>alpha</dt><dd>Number from 0 to 1 indicating the opacity of the marker fill. The default value is 1.</dd>\n</dl>\n</dd>\n<dt>border</dt><dd>A hash containing the following values:\n<dl>\n<dt>color</dt><dd>Color of the border. The default value is determined by the order of the series on the graph. The color\nwill be retrieved from the below array:<br/>\n`[\"#205096\", \"#b38206\", \"#000000\", \"#94001e\", \"#9d6fa0\", \"#e55b00\", \"#5e85c9\", \"#adab9e\", \"#6ac291\", \"#006457\"]`\n<dt>alpha</dt><dd>Number from 0 to 1 indicating the opacity of the marker border. The default value is 1.</dd>\n<dt>weight</dt><dd>Number indicating the width of the border. The default value is 1.</dd>\n</dl>\n</dd>\n<dt>width</dt><dd>indicates the width of the marker. The default value is 24.</dd>\n<dt>over</dt><dd>hash containing styles for markers when highlighted by a `mouseover` event. The default \nvalues for each style is null. When an over style is not set, the non-over value will be used. For example,\nthe default value for `marker.over.fill.color` is equivalent to `marker.fill.color`.</dd>\n</dl>"}, "negativeBaseValues": {"default": "null", "type": "Array", "guessedname": "negativeBaseValues", "private": "", "guessedtype": "property"}, "type": {"default": "stackedColumn", "type": "String", "description": "Read-only attribute indicating the type of series.", "guessedname": "type", "guessedtype": "property"}, "positiveBaseValues": {"default": "null", "type": "Array", "guessedname": "positiveBaseValues", "private": "", "guessedtype": "property"}}, "description": "The StackedColumnSeries renders column chart in which series are stacked vertically to show\ntheir contribution to the cumulative total."}, "Plugin.NodeFX": {"name": "Plugin.NodeFX", "namespace": "", "module": "anim", "guessedname": "NodeFX", "extends": "Base", "superclass": "Base", "file": "anim.js", "guessedtype": "function", "shortname": "Plugin.NodeFX", "description": "Binds an Anim instance to a Node instance"}, "CurveUtil": {"name": "CurveUtil", "constructors": [{"description": "Utility class used for calculating curve points."}], "namespace": "", "module": "charts", "methods": {"getCurveControlPoints": {"return": {"type": "", "description": "Object"}, "description": "Creates an array of start, end and control points for splines.", "param": "{Array} xcoords Collection of x-coordinates used for calculate the curves", "protected": "", "params": [{"type": "Array", "name": "xcoords", "description": " Collection of x-coordinates used for calculate the curves"}, {"type": "Array", "name": "ycoords", "description": " Collection of y-coordinates used for calculate the curves"}], "guessedname": "getCurveControlPoints", "guessedtype": "function"}, "getControlPoints": {"return": {"type": "", "description": "Array"}, "description": "Gets the control points for the curve.", "private": "", "params": [{"type": "Array", "name": "vals", "description": " Collection of values coords used to generate control points."}], "param": "{Array} vals Collection of values coords used to generate control points.", "guessedname": "getControlPoints", "guessedtype": "function"}}, "file": "charts.js", "shortname": "CurveUtil", "description": "Utility class used for calculating curve points."}, "Test.Assert.UnexpectedValue": {"name": "Test.Assert.UnexpectedValue", "constructors": [{"params": [{"type": "String", "name": "message", "description": " The message to display when the error occurs."}, {"type": "Object", "name": "unexpected", "description": " The unexpected value."}], "description": "UnexpectedValue is subclass of Error that is thrown whenever\na value was unexpected in its scope. This typically means that a test\nwas performed to determine that a value was *not* equal to a certain\nvalue."}], "namespace": "Test", "module": "test", "guessedname": "UnexpectedValue", "methods": {"getMessage": {"return": {"type": "String", "description": "A string describing the error."}, "description": "Returns a fully formatted error for an assertion failure. The message\ncontains information about the unexpected value that was encountered.", "guessedname": "getMessage", "guessedtype": "function"}}, "extends": "Assert.Error", "superclass": "Assert.Error", "file": "test.js", "guessedtype": "function", "shortname": "Assert.UnexpectedValue", "properties": {"unexpected": {"type": "Object", "description": "The unexpected value.", "guessedname": "unexpected", "guessedtype": "property"}, "name": {"type": "String", "description": "The name of the error that occurred.", "guessedname": "name", "guessedtype": "property"}}, "description": "UnexpectedValue is subclass of Error that is thrown whenever\na value was unexpected in its scope. This typically means that a test\nwas performed to determine that a value was *not* equal to a certain\nvalue."}, "DataType.Number": {"name": "DataType.Number", "description": "DataType.Number provides a set of utility functions to operate against Number objects.", "namespace": "", "module": "datatype", "guessedname": "LANG", "static": "", "file": "datatype-number-format.js", "guessedtype": "property", "shortname": "DataType.Number", "methods": {"parse": {"return": {"type": "Number", "description": "A number, or null."}, "description": "Converts data to type Number.", "param": "data {String | Number | Boolean} Data to convert. The following\nvalues return as null: null, undefined, NaN, \"\".", "params": [{"type": "String | Number | Boolean", "name": "data", "description": "  Data to convert. The following\nvalues return as null: null, undefined, NaN, \"\"."}], "guessedname": "parse", "guessedtype": "function"}, "format": {"return": {"type": "HTML", "description": "Formatted number for display. Note, the following values\nreturn as \"\": null, undefined, NaN, \"\"."}, "description": "Takes a Number and formats to string for display to user.", "param": "data {Number} Number.", "params": [{"type": "Number", "name": "data", "description": "  Number."}, {"type": "Object} (Optional) Optional configuration values:\n<dl>\n<dt>prefix {HTML}</dd>\n<dd>String prepended before each number, like a currency designator \"$\"</dd>\n<dt>decimalPlaces {Number}</dd>\n<dd>Number of decimal places to round. Must be a number 0 to 20.</dd>\n<dt>decimalSeparator {HTML}</dd>\n<dd>Decimal separator</dd>\n<dt>thousandsSeparator {HTML}</dd>\n<dd>Thousands separator</dd>\n<dt>suffix {HTML", "name": "config", "description": " </dd>\n<dd>String appended after each number, like \" items\" (note the space)</dd>\n</dl>"}], "guessedname": "format", "guessedtype": "function"}}}, "HistoryBase": {"name": "HistoryBase", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " (optional) configuration object, which may contain\nzero or more of the following properties:\n<dl>\n<dt>force (Boolean)</dt>\n<dd>\nIf `true`, a `history:change` event will be fired whenever the URL\nchanges, even if there is no associated state change. Default is `false`.\n</dd>\n<dt>initialState (Object)</dt>\n<dd>\nInitial state to set, as an object hash of key/value pairs. This will be\nmerged into the current global state.\n</dd>\n</dl>"}], "description": "Provides global state management backed by an object, but with no browser\nhistory integration. For actual browser history integration and back/forward\nsupport, use the history-html5 or history-hash modules."}], "namespace": "", "module": "history", "events": {"history:change": {"params": [{"type": "EventFacade", "name": "e", "description": " Event facade with the following additional\nproperties:\n<dl>\n<dt>changed (Object)</dt>\n<dd>\nObject hash of state items that have been added or changed. The\nkey is the item key, and the value is an object containing\n<code>newVal</code> and <code>prevVal</code> properties\nrepresenting the values of the item both before and after the\nchange. If the item was newly added, <code>prevVal</code> will be\n<code>undefined</code>.\n</dd>\n<dt>newVal (Object)</dt>\n<dd>\nObject hash of key/value pairs of all state items after the\nchange.\n</dd>\n<dt>prevVal (Object)</dt>\n<dd>\nObject hash of key/value pairs of all state items before the\nchange.\n</dd>\n<dt>removed (Object)</dt>\n<dd>\nObject hash of key/value pairs of state items that have been\nremoved. Values are the old values prior to removal.\n</dd>\n<dt>src (String)</dt>\n<dd>\nThe source of the event. This can be used to selectively ignore\nevents generated by certain sources.\n</dd>\n</dl>"}], "description": "Fired when the state changes. To be notified of all state changes\nregardless of the History or YUI instance that generated them,\nsubscribe to this event on <code>Y.Global</code>. If you would rather\nbe notified only about changes generated by this specific History\ninstance, subscribe to this event on the instance.", "param": "{EventFacade} e Event facade with the following additional\nproperties:\n<dl>\n<dt>changed (Object)</dt>\n<dd>\nObject hash of state items that have been added or changed. The\nkey is the item key, and the value is an object containing\n<code>newVal</code> and <code>prevVal</code> properties\nrepresenting the values of the item both before and after the\nchange. If the item was newly added, <code>prevVal</code> will be\n<code>undefined</code>.\n</dd>\n<dt>newVal (Object)</dt>\n<dd>\nObject hash of key/value pairs of all state items after the\nchange.\n</dd>\n<dt>prevVal (Object)</dt>\n<dd>\nObject hash of key/value pairs of all state items before the\nchange.\n</dd>\n<dt>removed (Object)</dt>\n<dd>\nObject hash of key/value pairs of state items that have been\nremoved. Values are the old values prior to removal.\n</dd>\n<dt>src (String)</dt>\n<dd>\nThe source of the event. This can be used to selectively ignore\nevents generated by certain sources.\n</dd>\n</dl>"}, "[key]Change": {"params": [{"type": "EventFacade", "name": "e", "description": " Event facade with the following additional\nproperties:\n<dl>\n<dt>newVal (mixed)</dt>\n<dd>\nThe new value of the item after the change.\n</dd>\n<dt>prevVal (mixed)</dt>\n<dd>\nThe previous value of the item before the change, or\n<code>undefined</code> if the item was just added and has no\nprevious value.\n</dd>\n<dt>src (String)</dt>\n<dd>\nThe source of the event. This can be used to selectively ignore\nevents generated by certain sources.\n</dd>\n</dl>"}], "description": "<p>\nDynamic event fired when an individual history item is added or\nchanged. The name of this event depends on the name of the key that\nchanged. To listen to change events for a key named \"foo\", subscribe\nto the <code>fooChange</code> event; for a key named \"bar\", subscribe\nto <code>barChange</code>, etc.\n</p>\n<p>\nKey-specific events are only fired for instance-level changes; that\nis, changes that were made via the same History instance on which the\nevent is subscribed. To be notified of changes made by other History\ninstances, subscribe to the global <code>history:change</code> event.\n</p>", "param": "{EventFacade} e Event facade with the following additional\nproperties:\n<dl>\n<dt>newVal (mixed)</dt>\n<dd>\nThe new value of the item after the change.\n</dd>\n<dt>prevVal (mixed)</dt>\n<dd>\nThe previous value of the item before the change, or\n<code>undefined</code> if the item was just added and has no\nprevious value.\n</dd>\n<dt>src (String)</dt>\n<dd>\nThe source of the event. This can be used to selectively ignore\nevents generated by certain sources.\n</dd>\n</dl>"}, "[key]Remove": {"params": [{"type": "EventFacade", "name": "e", "description": " Event facade with the following additional\nproperties:\n<dl>\n<dt>prevVal (mixed)</dt>\n<dd>\nThe value of the item before it was removed.\n</dd>\n<dt>src (String)</dt>\n<dd>\nThe source of the event. This can be used to selectively ignore\nevents generated by certain sources.\n</dd>\n</dl>"}], "description": "<p>\nDynamic event fired when an individual history item is removed. The\nname of this event depends on the name of the key that was removed.\nTo listen to remove events for a key named \"foo\", subscribe to the\n<code>fooRemove</code> event; for a key named \"bar\", subscribe to\n<code>barRemove</code>, etc.\n</p>\n<p>\nKey-specific events are only fired for instance-level changes; that\nis, changes that were made via the same History instance on which the\nevent is subscribed. To be notified of changes made by other History\ninstances, subscribe to the global <code>history:change</code> event.\n</p>", "param": "{EventFacade} e Event facade with the following additional\nproperties:\n<dl>\n<dt>prevVal (mixed)</dt>\n<dd>\nThe value of the item before it was removed.\n</dd>\n<dt>src (String)</dt>\n<dd>\nThe source of the event. This can be used to selectively ignore\nevents generated by certain sources.\n</dd>\n</dl>"}}, "guessedname": "Lang", "methods": {"_isSimpleObject": {"return": {"type": "Boolean", "description": ""}, "param": "{mixed} value", "params": [{"type": "mixed", "name": "value", "description": ""}], "description": "Returns <code>true</code> if <i>value</i> is a simple object and not a\nfunction or an array.", "private": ""}, "_defChangeFn": {"description": "Default <code>history:change</code> event handler.", "param": "{EventFacade} e state change event facade", "protected": "", "params": [{"type": "EventFacade", "name": "e", "description": " state change event facade"}], "guessedname": "_defChangeFn", "guessedtype": "function"}, "get": {"return": {"type": "Object|String", "description": "Value of the specified state parameter, or an\nobject hash of key/value pairs for all current state parameters."}, "description": "Returns the current value of the state parameter specified by <i>key</i>,\nor an object hash of key/value pairs for all current state parameters if\nno key is specified.", "param": "{String} key (optional) State parameter key.", "params": [{"type": "String", "name": "key", "description": " (optional) State parameter key."}], "guessedname": "get", "guessedtype": "function"}, "_fireRemoveEvent": {"description": "Fires a dynamic \"[key]Remove\" event.", "param": "{String} src source of the change, for inclusion in event facades\nto facilitate filtering", "protected": "", "params": [{"type": "String", "name": "src", "description": " source of the change, for inclusion in event facades\nto facilitate filtering"}, {"type": "String", "name": "key", "description": " key of the item that was removed"}, {"type": "mixed", "name": "value", "description": " value of the item prior to its removal"}], "guessedname": "_fireRemoveEvent", "guessedtype": "function"}, "_init": {"description": "Initializes this HistoryBase instance. This method is called by the\nconstructor.", "param": "{Object} config configuration object", "protected": "", "params": [{"type": "Object", "name": "config", "description": " configuration object"}], "guessedname": "_init", "guessedtype": "function"}, "_storeState": {"description": "Stores the specified state. Don't call this method directly; go through\n_resolveChanges() to ensure that changes are resolved and all events are\nfired properly.", "param": "{String} src source of the changes", "protected": "", "params": [{"type": "String", "name": "src", "description": " source of the changes"}, {"type": "Object", "name": "newState", "description": " new state to store"}, {"type": "Object", "name": "options", "description": " Zero or more options. See <code>add()</code> for\na list of supported options."}], "guessedname": "_storeState", "guessedtype": "function"}, "replace": {"description": "Same as <code>add()</code> except that a new browser history entry will\nnot be created. Instead, the current history entry will be replaced with\nthe new state.", "chainable": "", "param": "{Object} state Object hash of key/value pairs.", "params": [{"type": "Object", "name": "state", "description": " Object hash of key/value pairs."}, {"type": "Object", "name": "options", "description": " (optional) Zero or more options. See\n<code>add()</code> for a list of supported options."}], "guessedname": "replace", "guessedtype": "function"}, "_change": {"description": "Changes the state. This method provides a common implementation shared by\nthe public methods for changing state.", "chainable": "", "param": "{String} src Source of the change, for inclusion in event facades\nto facilitate filtering.", "protected": "", "params": [{"type": "String", "name": "src", "description": " Source of the change, for inclusion in event facades\nto facilitate filtering."}, {"type": "Object", "name": "state", "description": " Object hash of key/value pairs."}, {"type": "Object", "name": "options", "description": " (optional) Zero or more options. See\n<code>add()</code> for a list of supported options."}], "guessedname": "_change", "guessedtype": "function"}, "add": {"description": "Adds a state entry with new values for the specified keys. By default,\nthe new state will be merged into the existing state, and new values will\noverride existing values. Specifying a <code>null</code> or\n<code>undefined</code> value will cause that key to be removed from the\nnew state entry.", "chainable": "", "param": "{Object} state Object hash of key/value pairs.", "params": [{"type": "Object", "name": "state", "description": " Object hash of key/value pairs."}, {"type": "Object", "name": "options", "description": " (optional) Zero or more of the following options:\n<dl>\n<dt>merge (Boolean)</dt>\n<dd>\n<p>\nIf <code>true</code> (the default), the new state will be merged\ninto the existing state. New values will override existing values,\nand <code>null</code> or <code>undefined</code> values will be\nremoved from the state.\n</p>\n<p>\nIf <code>false</code>, the existing state will be discarded as a\nwhole and the new state will take its place.\n</p>\n</dd>\n</dl>"}], "guessedname": "add", "guessedtype": "function"}, "_fireEvents": {"description": "Called by _resolveChanges() when the state has changed. This method takes\ncare of actually firing the necessary events.", "param": "{String} src Source of the changes, for inclusion in event facades\nto facilitate filtering.", "protected": "", "params": [{"type": "String", "name": "src", "description": " Source of the changes, for inclusion in event facades\nto facilitate filtering."}, {"type": "Object", "name": "changes", "description": " Resolved changes."}, {"type": "Object", "name": "options", "description": " Zero or more options. See <code>add()</code> for\na list of supported options."}], "guessedname": "_fireEvents", "guessedtype": "function"}, "_resolveChanges": {"description": "Resolves the changes (if any) between <i>newState</i> and the current\nstate and fires appropriate events if things have changed.", "param": "{String} src source of the changes, for inclusion in event facades\nto facilitate filtering", "protected": "", "params": [{"type": "String", "name": "src", "description": " source of the changes, for inclusion in event facades\nto facilitate filtering"}, {"type": "Object", "name": "newState", "description": " object hash of key/value pairs representing the\nnew state"}, {"type": "Object", "name": "options", "description": " Zero or more options. See <code>add()</code> for\na list of supported options."}], "guessedname": "_resolveChanges", "guessedtype": "function"}, "addValue": {"description": "Adds a state entry with a new value for a single key. By default, the new\nvalue will be merged into the existing state values, and will override an\nexisting value with the same key if there is one. Specifying a\n<code>null</code> or <code>undefined</code> value will cause the key to\nbe removed from the new state entry.", "chainable": "", "param": "{String} key State parameter key.", "params": [{"type": "String", "name": "key", "description": " State parameter key."}, {"type": "String", "name": "value", "description": " New value."}, {"type": "Object", "name": "options", "description": " (optional) Zero or more options. See\n<code>add()</code> for a list of supported options."}], "guessedname": "addValue", "guessedtype": "function"}, "_fireChangeEvent": {"description": "Fires a dynamic \"[key]Change\" event.", "param": "{String} src source of the change, for inclusion in event facades\nto facilitate filtering", "protected": "", "params": [{"type": "String", "name": "src", "description": " source of the change, for inclusion in event facades\nto facilitate filtering"}, {"type": "String", "name": "key", "description": " key of the item that was changed"}, {"type": "Object", "name": "value", "description": " object hash containing <i>newVal</i> and\n<i>prevVal</i> properties for the changed item"}], "guessedname": "_fireChangeEvent", "guessedtype": "function"}, "replaceValue": {"description": "Same as <code>addValue()</code> except that a new browser history entry\nwill not be created. Instead, the current history entry will be replaced\nwith the new state.", "chainable": "", "param": "{String} key State parameter key.", "params": [{"type": "String", "name": "key", "description": " State parameter key."}, {"type": "String", "name": "value", "description": " New value."}, {"type": "Object", "name": "options", "description": " (optional) Zero or more options. See\n<code>add()</code> for a list of supported options."}], "guessedname": "replaceValue", "guessedtype": "function"}}, "uses": ["EventTarget"], "file": "history-base.js", "guessedtype": "property", "shortname": "HistoryBase", "properties": {"_config": {"description": "Configuration object provided by the user on instantiation, or an\nempty object if one wasn't provided.", "default": "{}", "protected": "", "guessedname": "config", "guessedtype": "property", "type": "Object"}, "force": {"default": "false", "type": "Boolean", "description": "If `true`, a `history:change` event will be fired whenever the URL\nchanges, even if there is no associated state change.", "guessedname": "force", "guessedtype": "property"}, "NAME": {"type": "String", "static": "", "description": "Name of this component.", "guessedname": "NAME", "guessedtype": "property"}, "SRC_REPLACE": {"description": "Constant used to identify state changes originating from the\n<code>replace()</code> method.", "static": "", "guessedname": "SRC_REPLACE", "guessedtype": "property", "type": "String", "final": ""}, "SRC_ADD": {"description": "Constant used to identify state changes originating from the\n<code>add()</code> method.", "static": "", "guessedname": "SRC_ADD", "guessedtype": "property", "type": "String", "final": ""}, "nativeHashChange": {"type": "Boolean", "static": "", "description": "Whether or not this browser supports the <code>window.onhashchange</code>\nevent natively. Note that even if this is <code>true</code>, you may\nstill want to use HistoryHash's synthetic <code>hashchange</code> event\nsince it normalizes implementation differences and fixes spec violations\nacross various browsers."}, "_initialState": {"description": "Resolved initial state: a merge of the user-supplied initial state\n(if any) and any initial state provided by a subclass. This may\ndiffer from <code>_config.initialState</code>. If neither the config\nnor a subclass supplies an initial state, this property will be\n<code>null</code>.", "default": "{}", "protected": "", "guessedname": "initialState", "guessedtype": "property", "type": "Object|null"}, "html5": {"type": "Boolean", "static": "", "description": "Whether or not this browser supports the HTML5 History API."}}, "description": "Provides global state management backed by an object, but with no browser\nhistory integration. For actual browser history integration and back/forward\nsupport, use the history-html5 or history-hash modules."}, "DataSourceArraySchema": {"name": "DataSourceArraySchema", "namespace": "", "module": "datasource", "guessedname": "DataSourceArraySchema", "methods": {"_beforeDefDataFn": {"description": "Parses raw data into a normalized response.", "param": "tId {Number} Unique transaction ID.", "protected": "", "params": [{"type": "Number", "name": "tId", "description": "  Unique transaction ID."}, {"type": "Object", "name": "request", "description": "  The request."}, {"type": "Object", "name": "callback", "description": "  The callback object with the following properties:\n<dl>\n<dt>success (Function)</dt> <dd>Success handler.</dd>\n<dt>failure (Function)</dt> <dd>Failure handler.</dd>\n</dl>"}, {"type": "Object", "name": "data", "description": "  Raw data."}], "guessedname": "_beforeDefDataFn", "guessedtype": "function"}, "initializer": {"description": "Internal init() handler.", "param": "config {Object} Config object.", "params": [{"type": "Object", "name": "config", "description": "  Config object."}], "private": "", "guessedname": "initializer", "guessedtype": "function"}}, "extends": "Plugin.Base", "superclass": "Plugin.Base", "file": "datasource-arrayschema.js", "guessedtype": "function", "shortname": "DataSourceArraySchema", "properties": {"NS": {"description": "The namespace for the plugin. This will be the property on the host which\nreferences the plugin instance.", "value": "\"schema\"", "static": "", "guessedname": "NS", "guessedtype": "property", "type": "String", "final": ""}, "NAME": {"description": "Class name.", "value": "\"dataSourceArraySchema\"", "static": "", "guessedname": "NAME", "guessedtype": "property", "type": "String", "final": ""}}, "description": "Adds schema-parsing to the DataSource Utility."}, "Plugin.EditorLists": {"name": "Plugin.EditorLists", "constructors": [{"description": "Handles list manipulation inside the Editor. Adds keyboard manipulation and execCommand support. Adds overrides for the <a href=\"Plugin.ExecCommand.html#method_COMMANDS.insertorderedlist\">insertorderedlist</a> and <a href=\"Plugin.ExecCommand.html#method_COMMANDS.insertunorderedlist\">insertunorderedlist</a> execCommands."}], "namespace": "", "module": "editor", "guessedname": "EditorLists", "methods": {"_onNodeChange": {"description": "Listener for host's nodeChange event and captures the tabkey interaction only when inside a list node.", "param": "{Event} e The Event facade passed from the host.", "params": [{"type": "Event", "name": "e", "description": " The Event facade passed from the host."}], "private": "", "guessedname": "_onNodeChange", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "editor.js", "guessedtype": "function", "shortname": "Plugin.EditorLists", "properties": {"NS": {"static": "", "description": "lists", "guessedname": "NS", "guessedtype": "property"}, "NONSEL": {"static": "", "description": "The selector query to get all non elements", "guessedname": "NON_SEL", "guessedtype": "property"}, "REMOVE": {"static": "", "description": "The non element placeholder, used for positioning the cursor and filling empty items", "guessedname": "NON", "guessedtype": "property"}, "NAME": {"static": "", "description": "editorLists", "guessedname": "NAME", "guessedtype": "property"}}, "description": "Handles list manipulation inside the Editor. Adds keyboard manipulation and execCommand support. Adds overrides for the <a href=\"Plugin.ExecCommand.html#method_COMMANDS.insertorderedlist\">insertorderedlist</a> and <a href=\"Plugin.ExecCommand.html#method_COMMANDS.insertunorderedlist\">insertunorderedlist</a> execCommands."}, "DialogManager": {"name": "DialogManager", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "A base class for DialogManager:"}], "namespace": "", "module": "aui-dialog", "guessedname": "DialogManager", "methods": {"refreshByChild": {"param": "{Node | String} child Child node of the Dialog.", "params": [{"type": "Node | String", "name": "child", "description": " Child node of the Dialog."}], "description": "<p>Invoke the <a href=\"IOPlugin.html#method_start\">start</a> method\nfrom the <a href=\"IOPlugin.html\">IOPlugin</a> plugged on this Dialog\ninstance. If there is no IOPlugin plugged it does nothing.</p>\nExample:\n<pre><code>A.DialogManager.refreshByChild('#dialogContent1');</code></pre>", "guessedname": "refreshByChild", "guessedtype": "function"}, "closeByChild": {"return": {"type": "Dialog", "description": ""}, "description": "<p>Invoke the <a href=\"Dialog.html#method_close\">close</a> method from\nthe Dialog which contains the <code>child</code> element.</p>\nExample:\n<pre><code>A.DialogManager.closeByChild('#dialogContent1');</code></pre>", "param": "{Node | String} child Child node of the Dialog.", "params": [{"type": "Node | String", "name": "child", "description": " Child node of the Dialog."}], "guessedname": "closeByChild", "guessedtype": "function"}, "findByChild": {"return": {"type": "Widget", "description": ""}, "description": "Find the <a href=\"Widget.html\">Widget</a> instance based on a child\nelement.", "param": "{Node | String} child Child node of the Dialog.", "params": [{"type": "Node | String", "name": "child", "description": " Child node of the Dialog."}], "guessedname": "findByChild", "guessedtype": "function"}}, "static": "", "superclass": "OverlayManager", "file": "aui-dialog.js", "guessedtype": "property", "extends": "OverlayManager", "shortname": "DialogManager", "description": "A base class for DialogManager:"}, "Test.Coverage.Format": {"name": "Test.Coverage.Format", "namespace": "Test", "module": "test", "methods": {"JSON": {"return": {"type": "String", "description": "A JSON-formatted string of coverage data."}, "description": "Returns the coverage report in JSON format. This is the straight\nJSON representation of the native coverage report.", "param": "{Object} coverage The coverage report object.", "static": "", "guessedname": "JSON", "guessedtype": "function", "params": [{"type": "Object", "name": "coverage", "description": " The coverage report object."}]}, "XdebugJSON": {"return": {"type": "String", "description": "A JSON-formatted string of coverage data."}, "description": "Returns the coverage report in a JSON format compatible with\nXdebug. See <a href=\"http://www.xdebug.com/docs/code_coverage\">Xdebug Documentation</a>\nfor more information. Note: function coverage is not available\nin this format.", "param": "{Object} coverage The coverage report object.", "static": "", "guessedname": "XdebugJSON", "guessedtype": "function", "params": [{"type": "Object", "name": "coverage", "description": " The coverage report object."}]}}, "static": "", "file": "test.js", "shortname": "Coverage.Format", "description": "Contains specific formatting options for coverage information."}, "ScrollView": {"name": "ScrollView", "description": "ScrollView provides a scrollable widget, supporting flick gestures, across both touch and mouse based devices.", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal with initial attribute values"}], "description": "ScrollView provides a scrollable widget, supporting flick gestures, across both touch and mouse based devices."}], "namespace": "", "module": "scrollview-base", "properties": {"_TRANSITION": {"private": "", "description": "Object map of style property names used to set transition properties.\nCurrently, Webkit specific names are defaulted.  The configured property\nnames are `_TRANSITION.DURATION` (\"WebkitTransitionDuration\") and\n`_TRANSITION.PROPERTY (\"WebkitTransitionProperty\").", "guessedname": "_TRANSITION", "guessedtype": "property"}, "_prevent": {"protected": "", "type": "Object", "description": "<p>Used to control whether or not ScrollView's internal\ngesturemovestart, gesturemove and gesturemoveend\nevent listeners should preventDefault. The value is an\nobject, with \"start\", \"move\" and \"end\" properties used to \nspecify which events should preventDefault and which shouldn't:</p>\n<pre>\n{\nstart : false,\nmove : true,\nend : false\n}\n</pre>\n<p>The default values are set up in order to prevent panning,\non touch devices, while allowing click listeners on elements inside \nthe ScrollView to be notified as expected.</p>", "guessedname": "_prevent", "guessedtype": "property"}, "SNAP_EASING": {"description": "The default easing to use when animating the bounce snap back.", "default": "'ease-out'", "static": "", "guessedname": "SNAP_EASING", "guessedtype": "property", "type": "String"}, "_isDragging": {"protected": "", "type": "boolean", "description": "Internal state, defines whether or not the scrollview is currently being dragged", "guessedname": "_isDragging", "guessedtype": "property"}, "_scrollsHorizontal": {"protected": "", "type": "boolean", "description": "Internal state, defines whether or not the scrollview can scroll horizontally"}, "_currentVelocity": {"protected": "", "type": "number", "description": "Internal state, currently calculated velocity from the flick", "guessedname": "_currentVelocity", "guessedtype": "property"}, "_forceHWTransforms": {"protected": "", "type": "boolean", "description": "Flag driving whether or not we should try and force H/W acceleration when transforming. Currently enabled by default for Webkit.\nUsed by the _transform method.", "guessedname": "_forceHWTransforms", "guessedtype": "property"}, "EASING": {"description": "The default easing used when animating the flick", "default": "'cubic-bezier(0, 0.1, 0, 1.0)'", "static": "", "guessedname": "EASING", "guessedtype": "property", "type": "String"}, "BOUNCE_RANGE": {"description": "The default bounce distance in pixels", "default": "150", "static": "", "guessedname": "BOUNCE_RANGE", "guessedtype": "property", "type": "Number"}, "CLASS_NAMES": {"type": "Object", "static": "", "description": "List of class names used in the scrollview's DOM", "guessedname": "CLASS_NAMES", "guessedtype": "property"}, "_scrollHeight": {"protected": "", "type": "number", "description": "Internal state, cached scrollHeight, for performance"}, "_maxScrollY": {"protected": "", "type": "number", "description": "Internal state, defines the maximum amount that the scrollview can be scrolled along the Y axis"}, "_maxScrollX": {"protected": "", "type": "number", "description": "Internal state, defines the maximum amount that the scrollview can be scrolled along the X axis"}, "FRAME_STEP": {"description": "The interval used when animating the flick", "default": "30", "static": "", "guessedname": "FRAME_STEP", "guessedtype": "property", "type": "Number"}, "_snapToEdge": {"protected": "", "type": "boolean", "description": "Internal state, defines whether or not the scrollview needs to snap to a boundary edge", "guessedname": "_snapToEdge", "guessedtype": "property"}, "_scrolledForward": {"protected": "", "type": "boolean", "description": "Internal state, defines whether or not the scrollview has been scrolled in the forward (distance > 0), or backward (distance < 0) direction", "guessedname": "_scrolledForward", "guessedtype": "property"}, "lastScrolledAmt": {"public": "", "type": "Number", "description": "Contains the distance (postive or negative) in pixels by which the scrollview was last scrolled. This is useful when\nsetting up click listeners on the scrollview content, which on mouse based devices are always fired, even after a\ndrag/flick. \n<p>Touch based devices don't currently fire a click event, if the finger has been moved (beyond a threshold) so this check isn't required,\nif working in a purely touch based environment</p>", "guessedname": "lastScrolledAmt", "guessedtype": "property"}, "_minScrollY": {"protected": "", "type": "number", "description": "Internal state, defines the minimum amount that the scrollview can be scrolled along the Y axis"}, "_minScrollX": {"protected": "", "type": "number", "description": "Internal state, defines the minimum amount that the scrollview can be scrolled along the X axis"}, "NAME": {"description": "The identity of the widget.", "default": "'scrollview'", "readonly": "", "protected": "", "static": "", "guessedname": "NAME", "guessedtype": "property", "type": "String"}, "_scrollsVertical": {"protected": "", "type": "boolean", "description": "Internal state, defines whether or not the scrollview can scroll vertically"}, "_scrollWidth": {"protected": "", "type": "number", "description": "Internal state, cached scrollWidth, for performance"}, "_scrolledHalfway": {"protected": "", "type": "boolean", "description": "Internal state, defines whether or not the scrollview has been scrolled half it's width/height", "guessedname": "_scrolledHalfway", "guessedtype": "property"}, "_flicking": {"protected": "", "type": "boolean", "description": "Internal state, defines whether or not the scrollview is currently animating a flick", "guessedname": "_flicking", "guessedtype": "property"}, "ATTRS": {"description": "Static property used to define the default attribute configuration of\nthe Widget.", "protected": "", "static": "", "guessedname": "ATTRS", "guessedtype": "property", "type": "{Object}"}, "UI_SRC": {"description": "Flag used to source property changes initiated from the DOM", "default": "\"ui\"", "static": "", "guessedname": "UI_SRC", "guessedtype": "property", "type": "String"}}, "configs": {"flick": {"default": "Object with properties minDistance = 10, minVelocity = 0.3.", "type": "Object", "description": "The minimum distance and/or velocity which define a flick", "guessedname": "flick", "guessedtype": "property"}, "bounce": {"default": "0.1", "type": "Number", "description": "Drag coefficient for intertial scrolling at the upper\nand lower boundaries of the scrollview. Set to 0 to \ndisable \"rubber-banding\".", "guessedname": "bounce", "guessedtype": "property"}, "deceleration": {"default": "0.93", "description": "Drag coefficent for inertial scrolling. The closer to 1 this\nvalue is, the less friction during scrolling.", "guessedname": "deceleration", "guessedtype": "property"}, "scrollX": {"default": "0", "type": "Number", "description": "The scroll position in the x-axis", "guessedname": "scrollX", "guessedtype": "property"}, "scrollY": {"default": "0", "type": "Number", "description": "The scroll position in the y-axis", "guessedname": "scrollY", "guessedtype": "property"}}, "extends": "Widget", "superclass": "Widget", "file": "scrollview-base.js", "shortname": "ScrollView", "events": {"flick": {"param": "e {EventFacade} The default event facade.", "params": [{"type": "EventFacade", "name": "e", "description": "  The default event facade."}], "description": "Notification event fired at the end of a flick gesture (the flick animation may still be in progress)", "guessedname": "sv", "guessedtype": "property"}, "flickChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "flickChange", "description": "Fires when the value for the configuration attribute 'flick' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "decelerationChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "decelerationChange", "description": "Fires when the value for the configuration attribute 'deceleration' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "scrollXChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "scrollXChange", "description": "Fires when the value for the configuration attribute 'scrollX' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "bounceChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "bounceChange", "description": "Fires when the value for the configuration attribute 'bounce' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "scrollYChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "scrollYChange", "description": "Fires when the value for the configuration attribute 'scrollY' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "scrollEnd": {"params": [{"type": "EventFacade", "name": "e", "description": "  The default event facade."}], "description": "Notification event fired at the end of a scroll transition", "param": "e {EventFacade} The default event facade."}}, "methods": {"_uiDimensionsChange": {"protected": "", "description": "This method gets invoked whenever the height or width attributes change,\nallowing us to determine which scrolling axes need to be enabled.", "guessedname": "_uiDimensionsChange", "guessedtype": "function"}, "_flickFrame": {"protected": "", "description": "Execute a single frame in the flick animation", "guessedname": "_flickFrame", "guessedtype": "function"}, "_setScrollY": {"return": {"type": "Number", "description": "The normalized value"}, "description": "Setter for the scrollY ATTR", "param": "val {Number} The new scrollY value", "protected": "", "params": [{"type": "Number", "name": "val", "description": "  The new scrollY value"}], "guessedname": "_setScrollY", "guessedtype": "function"}, "scrollTo": {"param": "x {Number} The x-position to scroll to", "params": [{"type": "Number", "name": "x", "description": "  The x-position to scroll to"}, {"type": "Number", "name": "y", "description": "  The y-position to scroll to"}, {"type": "Number", "name": "duration", "description": "  Duration, in ms, of the scroll animation (default is 0)"}, {"type": "String", "name": "easing", "description": "  An easing equation if duration is set"}], "description": "Scroll the element to a given xy coordinate", "guessedname": "scrollTo", "guessedtype": "function"}, "_afterScrollChange": {"description": "After listener for changes to the scrollX or scrollY attribute", "param": "e {Event.Facade} The event facade", "protected": "", "params": [{"type": "Event.Facade", "name": "e", "description": "  The event facade"}], "guessedname": "_afterScrollChange", "guessedtype": "function"}, "initializer": {"description": "Designated initializer", "guessedname": "initializer", "guessedtype": "function"}, "_onGestureMoveStart": {"description": "gesturemovestart event handler", "param": "e {Event.Facade} The gesturemovestart event facade", "params": [{"type": "Event.Facade", "name": "e", "description": "  The gesturemovestart event facade"}], "private": "", "guessedname": "_onGestureMoveStart", "guessedtype": "function"}, "_onTransEnd": {"description": "Content box transition callback", "param": "{Event.Facade} e The event facade", "params": [{"type": "Event.Facade", "name": "e", "description": " The event facade"}], "private": "", "guessedname": "_onTransEnd", "guessedtype": "function"}, "_moveTo": {"description": "Utility method, to move the given element to the given xy position", "param": "node {Node} The node to move", "params": [{"type": "Node", "name": "node", "description": "  The node to move"}, {"type": "Number", "name": "x", "description": "  The x-position to move to"}, {"type": "Number", "name": "y", "description": "  The y-position to move to"}], "private": "", "guessedname": "_moveTo", "guessedtype": "function"}, "_fixIESelect": {"description": "Internal method to fix text selection in IE", "param": "{Node} bb The bounding box", "params": [{"type": "Node", "name": "bb", "description": " The bounding box"}, {"type": "Node", "name": "cb", "description": " The content box"}], "private": "", "guessedname": "_fixIESelect", "guessedtype": "function"}, "_afterDimChange": {"description": "After listener for the height or width attribute", "param": "e {Event.Facade} The event facade", "protected": "", "params": [{"type": "Event.Facade", "name": "e", "description": "  The event facade"}], "guessedname": "_afterDimChange", "guessedtype": "function"}, "_uiSizeCB": {"protected": "", "description": "Override the contentBox sizing method, since the contentBox height\nshould not be that of the boundingBox.", "guessedname": "_uiSizeCB", "guessedtype": "function"}, "bindUI": {"description": "bindUI implementation\nHooks up events for the widget", "guessedname": "bindUI", "guessedtype": "function"}, "_onGestureMove": {"description": "gesturemove event handler", "param": "e {Event.Facade} The gesturemove event facade", "params": [{"type": "Event.Facade", "name": "e", "description": "  The gesturemove event facade"}], "private": "", "guessedname": "_onGestureMove", "guessedtype": "function"}, "_getScrollDims": {"guessedname": "_getScrollDims", "returns": "{Array} The scrollWidth and scrollHeight as an array: [scrollWidth, scrollHeight]", "description": "Utility method to obtain scrollWidth, scrollHeight,\naccounting for the impact of translate on scrollWidth, scrollHeight", "private": "", "guessedtype": "function"}, "_uiScrollTo": {"description": "Used to move the ScrollView content", "param": "x {Number}", "protected": "", "params": [{"type": "Number", "name": "x", "description": ""}, {"type": "Number", "name": "y", "description": ""}, {"type": "Number", "name": "duration", "description": ""}, {"type": "String", "name": "easing", "description": ""}], "guessedname": "_uiScrollTo", "guessedtype": "function"}, "_killTimer": {"description": "Stop the animation timer", "param": "fireEvent {Boolean} If true, fire the scrollEnd event", "protected": "", "params": [{"type": "Boolean", "name": "fireEvent", "description": "  If true, fire the scrollEnd event"}], "guessedname": "_killTimer", "guessedtype": "function"}, "_setScrollX": {"return": {"type": "Number", "description": "The normalized value"}, "description": "Setter for the scrollX attribute", "param": "val {Number} The new scrollX value", "protected": "", "params": [{"type": "Number", "name": "val", "description": "  The new scrollX value"}], "guessedname": "_setScrollX", "guessedtype": "function"}, "_flick": {"description": "Execute a flick at the end of a scroll action", "param": "distance {Number} The distance (in px) the user scrolled before the flick", "protected": "", "params": [{"type": "Number", "name": "distance", "description": "  The distance (in px) the user scrolled before the flick"}, {"type": "Number", "name": "time", "description": "  The number of ms the scroll event lasted before the flick"}], "guessedname": "_flick", "guessedtype": "function"}, "_transform": {"description": "Utility method, to create the translate transform string with the\nx, y translation amounts provided.", "param": "{Number} x Number of pixels to translate along the x axis", "params": [{"type": "Number", "name": "x", "description": " Number of pixels to translate along the x axis"}, {"type": "Number", "name": "y", "description": " Number of pixels to translate along the y axis"}], "private": "", "guessedname": "_transform", "guessedtype": "function"}, "_setScroll": {"return": {"type": "Number", "description": "The constrained value, if it exceeds min/max range"}, "description": "The scrollX, scrollY setter implementation", "private": "", "params": [{"type": "Number", "name": "val", "description": ""}, {"type": "String", "name": "dim", "description": ""}], "param": "{Number} val", "guessedname": "_setScroll", "guessedtype": "function"}, "_iePreventSelect": {"guessedname": "_iePreventSelect", "description": "Native onselectstart handle to prevent selection in IE", "private": "", "guessedtype": "function"}, "_ieRestoreSelect": {"guessedname": "_ieRestoreSelect", "description": "Restores native onselectstart handle, backed up to prevent selection in IE", "private": "", "guessedtype": "function"}, "_onGestureMoveEnd": {"description": "gestureend event handler", "param": "e {Event.Facade} The gesturemoveend event facade", "params": [{"type": "Event.Facade", "name": "e", "description": "  The gesturemoveend event facade"}], "private": "", "guessedname": "_onGestureMoveEnd", "guessedtype": "function"}}}, "Profiler": {"name": "Profiler", "namespace": "", "module": "profiler", "guessedname": "Profiler", "methods": {"getFunctionReport": {"return": {"type": "Object", "description": "An object containing profile data for a given function."}, "description": "Returns an object containing profiling data for a single function.\nThe object has an entry for min, max, avg, calls, and points).", "deprecated": "Use getReport() instead.", "static": "", "guessedname": "getFunctionReport", "guessedtype": "function"}, "pause": {"return": {"type": "Void", "description": ""}, "description": "Pauses profiling information for a given name.", "param": "{String} name The name of the data point.", "static": "", "guessedname": "pause", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the data point."}]}, "getReport": {"static": "", "return": {"type": "Object", "description": "An object containing profile data for a given function."}, "description": "Returns an object containing profiling data for a single function.\nThe object has an entry for min, max, avg, calls, and points).", "guessedname": "getReport", "guessedtype": "function"}, "start": {"return": {"type": "Void", "description": ""}, "description": "Start profiling information for a given name. The name cannot be the name\nof a registered function or object. This is used to start timing for a\nparticular block of code rather than instrumenting the entire function.", "param": "{String} name The name of the data point.", "static": "", "guessedname": "start", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the data point."}]}, "getFullReport": {"static": "", "return": {"type": "Object", "description": "An object containing all profile data."}, "description": "Returns an object containing profiling data for all of the functions \nthat were profiled. The object has an entry for each function and \nreturns all information (min, max, average, calls, etc.) for each\nfunction.", "guessedname": "getFullReport", "guessedtype": "function"}, "unregisterFunction": {"return": {"type": "Void", "description": ""}, "description": "Removes a constructor function from profiling. Reverses the registerConstructor() method.", "param": "{String} name The full name of the function including namespacing. This\nis the name of the function that is stored in the report.", "static": "", "guessedname": "unregisterConstructor", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The full name of the function including namespacing. This\nis the name of the function that is stored in the report."}]}, "clear": {"return": {"type": "Void", "description": ""}, "description": "Removes all report data from the profiler.", "param": "{String} name (Optional) The name of the report to clear. If\nomitted, then all report data is cleared.", "static": "", "guessedname": "clear", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " (Optional) The name of the report to clear. If\nomitted, then all report data is cleared."}]}, "stop": {"return": {"type": "Void", "description": ""}, "description": "Stops profiling information for a given name.", "param": "{String} name The name of the data point.", "static": "", "guessedname": "stop", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the data point."}]}, "getCallCount": {"return": {"type": "int", "description": "The number of times the function was called."}, "description": "Returns the number of times that the given function has been called.", "param": "{String} name The name of the function whose data should be returned.", "static": "", "guessedname": "getCallCount", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the function whose data should be returned."}]}, "registerFunction": {"return": {"type": "Void", "description": ""}, "description": "Sets up a function for profiling. It essentially overwrites the function with one\nthat has instrumentation data. This method also creates an entry for the function\nin the profile report. The original function is stored on the container object.", "param": "{String} name The full name of the function including namespacing. This\nis the name of the function that is stored in the report.", "static": "", "guessedname": "registerFunction", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The full name of the function including namespacing. This\nis the name of the function that is stored in the report."}, {"type": "Object", "name": "owner", "description": " (Optional) The object that owns the function. If the function\nisn't global then this argument is required. This could be the namespace that\nthe function belongs to or the object on which it's\na method."}, {"type": "Boolean", "name": "registerPrototype", "description": " (Optional) Indicates that the prototype should\nalso be instrumented. Setting to true has the same effect as calling\nregisterConstructor()."}]}, "instrument": {"return": {"type": "Function", "description": "An instrumented version of the function."}, "description": "Instruments a method to have profiling calls.", "param": "{String} name The name of the report for the function.", "static": "", "guessedname": "instrument", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the report for the function."}, {"type": "Function", "name": "method", "description": " The function to instrument."}]}, "getOriginal": {"return": {"type": "Function|Object", "description": "The uninstrumented version of a function/object."}, "description": "Returns the uninstrumented version of a function/object.", "param": "{String} name The name of the function/object to retrieve.", "static": "", "guessedname": "getOriginal", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the function/object to retrieve."}]}, "getAverage": {"return": {"type": "float", "description": "The average time it takes the function to execute."}, "description": "Returns the average amount of time (in milliseconds) that the function\nwith the given name takes to execute.", "param": "{String} name The name of the function whose data should be returned.\nIf an object type method, it should be 'constructor.prototype.methodName';\na normal object method would just be 'object.methodName'.", "static": "", "guessedname": "getAverage", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the function whose data should be returned.\nIf an object type method, it should be 'constructor.prototype.methodName';\na normal object method would just be 'object.methodName'."}]}, "getMin": {"return": {"type": "float", "description": "The minimum time it takes the function to execute."}, "description": "Returns the minimum amount of time (in milliseconds) that the function\nwith the given name takes to execute.", "param": "{String} name The name of the function whose data should be returned.\nIf an object type method, it should be 'constructor.prototype.methodName';\na normal object method would just be 'object.methodName'.", "static": "", "guessedname": "getMin", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the function whose data should be returned.\nIf an object type method, it should be 'constructor.prototype.methodName';\na normal object method would just be 'object.methodName'."}]}, "unregisterObject": {"return": {"type": "Void", "description": ""}, "description": "Unregisters an object for profiling. It takes the object and looks for functions.\nWhen a function is found, unregisterMethod() is called on it. If set to recrusive\nmode, it will also unregister objects found inside of this object, \nusing the same methodology.", "param": "{String} name The name of the object to unregister.", "static": "", "guessedname": "unregisterObject", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the object to unregister."}, {"type": "Boolean", "name": "recurse", "description": " (Optional) Determines if subobject methods should also be\nunregistered."}]}, "getMax": {"return": {"type": "float", "description": "The maximum time it takes the function to execute."}, "description": "Returns the maximum amount of time (in milliseconds) that the function\nwith the given name takes to execute.", "param": "{String} name The name of the function whose data should be returned.\nIf an object type method, it should be 'constructor.prototype.methodName';\na normal object method would just be 'object.methodName'.", "static": "", "guessedname": "getMax", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the function whose data should be returned.\nIf an object type method, it should be 'constructor.prototype.methodName';\na normal object method would just be 'object.methodName'."}]}, "registerConstructor": {"return": {"type": "Void", "description": ""}, "description": "Sets up a constructor for profiling, including all properties and methods on the prototype.", "param": "{string} name The fully-qualified name of the function including namespace information.", "static": "", "guessedname": "registerConstructor", "guessedtype": "function", "params": [{"type": "string", "name": "name", "description": " The fully-qualified name of the function including namespace information."}, {"type": "Object", "name": "owner", "description": " (Optional) The object that owns the function (namespace or containing object)."}]}, "registerObject": {"return": {"type": "Void", "description": ""}, "description": "Sets up an object for profiling. It takes the object and looks for functions.\nWhen a function is found, registerMethod() is called on it. If set to recrusive\nmode, it will also setup objects found inside of this object for profiling, \nusing the same methodology.", "param": "{String} name The name of the object to profile (shows up in report).", "static": "", "guessedname": "registerObject", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the object to profile (shows up in report)."}, {"type": "Object", "name": "owner", "description": " (Optional) The object represented by the name."}, {"type": "Boolean", "name": "recurse", "description": " (Optional) Determines if subobject methods are also profiled."}]}}, "static": "", "file": "profiler.js", "guessedtype": "property", "shortname": "Profiler", "description": "Profiles functions in JavaScript."}, "Test.Assert.ShouldError": {"name": "Test.Assert.ShouldError", "constructors": [{"params": [{"type": "String", "name": "message", "description": " The message to display when the error occurs."}], "description": "ShouldError is subclass of Error that is thrown whenever\na test is expected to throw an error but doesn't."}], "namespace": "Test", "module": "test", "guessedname": "ShouldError", "extends": "Assert.Error", "superclass": "Assert.Error", "file": "test.js", "guessedtype": "function", "shortname": "Assert.ShouldError", "properties": {"name": {"type": "String", "description": "The name of the error that occurred.", "guessedname": "name", "guessedtype": "property"}}, "description": "ShouldError is subclass of Error that is thrown whenever\na test is expected to throw an error but doesn't."}, "Record": {"description": "Provides a wrapper around a standard javascript object. Can be inserted into a Recordset instance.", "namespace": "", "module": "recordset", "events": {"dataChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "dataChange", "description": "Fires when the value for the configuration attribute 'data' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "idChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "idChange", "description": "Fires when the value for the configuration attribute 'id' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "Record", "methods": {"getValue": {"description": "Retrieve a particular (or all) values from the object", "param": "field {string} (optional) The key to retrieve the value from. If not supplied, the entire object is returned.", "params": [{"type": "string", "name": "field", "description": "  (optional) The key to retrieve the value from. If not supplied, the entire object is returned."}], "guessedname": "getValue", "guessedtype": "function", "public": ""}}, "file": "recordset-base.js", "guessedtype": "property", "shortname": "Record", "configs": {"data": {"type": "object", "description": "The object stored within the record instance", "guessedname": "data", "guessedtype": "property"}, "id": {"type": "string", "description": "Unique ID of the record instance", "guessedname": "id", "guessedtype": "property"}}, "name": "Record"}, "BaseGraphic": {"name": "BaseGraphic", "constructors": [{"params": [{"type": "Object", "name": "cfg", "description": " Key value pairs for attributes"}], "description": "BaseGraphic serves as the base class for the graphic layer. It serves the same purpose as\nBase but uses a lightweight getter/setter class instead of Attribute.\nThis class is temporary and a work in progress."}], "namespace": "", "module": "graphics", "guessedname": "BaseGraphic", "methods": {"init": {"protected": "", "description": "Init method, invoked during construction.\nFires an init event after calling `initializer` on implementers.", "guessedname": "init", "guessedtype": "function"}}, "file": "graphics.js", "guessedtype": "function", "shortname": "BaseGraphic", "description": "BaseGraphic serves as the base class for the graphic layer. It serves the same purpose as\nBase but uses a lightweight getter/setter class instead of Attribute.\nThis class is temporary and a work in progress."}, "Plugin.EditorTab": {"name": "Plugin.EditorTab", "constructors": [{"description": "Handles tab and shift-tab indent/outdent support."}], "namespace": "", "module": "editor", "guessedname": "EditorTab", "methods": {"_onNodeChange": {"description": "Listener for host's nodeChange event and captures the tabkey interaction.", "param": "{Event} e The Event facade passed from the host.", "params": [{"type": "Event", "name": "e", "description": " The Event facade passed from the host."}], "private": "", "guessedname": "_onNodeChange", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "editor.js", "guessedtype": "function", "shortname": "Plugin.EditorTab", "properties": {"NS": {"static": "", "description": "tab", "guessedname": "NS", "guessedtype": "property"}, "NAME": {"static": "", "description": "editorTab", "guessedname": "NAME", "guessedtype": "property"}}, "description": "Handles tab and shift-tab indent/outdent support."}, "WidgetChild": {"properties": {"ROOT_TYPE": {"type": "Object", "description": "Constructor reference used to determine the root of a Widget-based \nobject tree.\n<p>\nCurrently used to control the behavior of the <code>root</code>  \nattribute so that recursing up the object heirarchy can be constrained \nto a specific type of Widget.  Widget authors should set this property\nto the constructor function for a given Widget implementation.\n</p>", "guessedname": "ROOT_TYPE", "guessedtype": "property"}}, "name": "WidgetChild", "namespace": "", "module": "widget-child", "events": {"depthChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "depthChange", "description": "Fires when the value for the configuration attribute 'depth' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "rootChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "rootChange", "description": "Fires when the value for the configuration attribute 'root' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "parentChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "parentChange", "description": "Fires when the value for the configuration attribute 'parent' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "selectedChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "selectedChange", "description": "Fires when the value for the configuration attribute 'selected' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "indexChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "indexChange", "description": "Fires when the value for the configuration attribute 'index' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "param": "{Object} config User configuration object.", "file": "widget-child.js", "shortname": "WidgetChild", "configs": {"index": {"readonly": "", "type": "Number", "description": "Number representing the Widget's ordinal position in its \nparent Widget.", "guessedname": "index", "guessedtype": "property"}, "depth": {"description": "Number representing the depth of this Widget relative to \nthe root Widget in the object heirarchy.", "default": "-1", "readonly": "", "guessedname": "depth", "guessedtype": "property", "type": "Number"}, "selected": {"default": "0", "type": "Number", "description": "Number indicating if the Widget is selected.  Possible \nvalues are:\n<dl>\n<dt>0</dt> <dd>(Default) Not selected</dd>\n<dt>1</dt> <dd>Fully selected</dd>\n<dt>2</dt> <dd>Partially selected</dd>\n</dl>", "guessedname": "selected", "guessedtype": "property"}, "root": {"readonly": "", "type": "Widget", "description": "Returns the root Widget in the object hierarchy.  If the\nROOT_TYPE property is set, the search for the root Widget will be \nconstrained to parent Widgets of the specified type.", "guessedname": "root", "guessedtype": "property"}, "parent": {"readonly": "", "type": "Widget", "description": "Retrieves the parent of the Widget in the object hierarchy.", "guessedname": "parent", "guessedtype": "property"}}, "description": "Widget extension providing functionality enabling a Widget to be a \nchild of another Widget."}, "ImgLoadGroup": {"properties": {"_areFoldTriggersSet": {"guessedname": "_areFoldTriggersSet", "type": "Boolean", "description": "Boolean tracking whether the window scroll and window resize triggers have been set if this is a fold group.", "private": "", "guessedtype": "property"}, "_maxKnownHLimit": {"guessedname": "_maxKnownHLimit", "type": "Int", "description": "The maximum pixel height of the document that has been made visible.\nDuring fold checks, if the user scrolls up then there's no need to check for newly exposed images.", "private": "", "guessedtype": "property"}, "_imgObjs": {"guessedname": "_imgObjs", "type": "Object", "description": "Collection of images (<code>Y.ImgLoadImgObj</code> objects) registered with this group, keyed by DOM id.", "private": "", "guessedtype": "property"}, "_classImageEls": {"guessedname": "_classImageEls", "type": "Array", "description": "DOM elements having the class name that is associated with this group.\nElements are stored during the <code>_foldCheck</code> function and reused later during any subsequent <code>_foldCheck</code> calls - gives a slight performance improvement when the page fold is repeatedly checked.", "private": "", "guessedtype": "property"}, "_triggers": {"guessedname": "_triggers", "type": "Array", "description": "Collection of triggers for this group.\nKeeps track of each trigger's event handle, as returned from <code>Y.on</code>.", "private": "", "guessedtype": "property"}, "_className": {"guessedname": "_className", "type": "String", "description": "Keep the CSS class name in a member variable for ease and speed.", "private": "", "guessedtype": "property"}, "_timeout": {"guessedname": "_timeout", "type": "Object", "description": "Timeout object to keep a handle on the time limit.", "private": "", "guessedtype": "property"}}, "name": "ImgLoadGroup", "constructors": [{"description": "A group for images. A group can have one time limit and a series of triggers. Thus the images belonging to this group must share these constraints."}], "namespace": "", "module": "imageloader", "events": {"foldDistanceChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "foldDistanceChange", "description": "Fires when the value for the configuration attribute 'foldDistance' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "timeLimitChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "timeLimitChange", "description": "Fires when the value for the configuration attribute 'timeLimit' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "classNameChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "classNameChange", "description": "Fires when the value for the configuration attribute 'className' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "classNameActionChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "classNameActionChange", "description": "Fires when the value for the configuration attribute 'classNameAction' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "nameChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "nameChange", "description": "Fires when the value for the configuration attribute 'name' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "ImgLoadGroup", "methods": {"addCustomTrigger": {"description": "Adds a custom event trigger to the group.", "chainable": "", "param": "{String} name  The name of the event", "params": [{"type": "String", "name": "name", "description": "  The name of the event"}, {"type": "Object", "name": "obj", "description": "  The object on which to attach the event. <code>obj</code> is optional - by default the event is attached to the <code>Y</code> instance"}], "guessedname": "addCustomTrigger", "guessedtype": "function"}, "addTrigger": {"description": "Adds a trigger to the group. Arguments are passed to <code>Y.on</code>.", "chainable": "", "param": "{Object} obj  The DOM object to attach the trigger event to", "params": [{"type": "Object", "name": "obj", "description": "  The DOM object to attach the trigger event to"}, {"type": "String", "name": "type", "description": "  The event type"}], "guessedname": "addTrigger", "guessedtype": "function"}, "_setFoldTriggers": {"private": "", "description": "Sets the window scroll and window resize triggers for any group that is fold-conditional (i.e., has a fold distance set).", "guessedname": "_setFoldTriggers", "guessedtype": "function"}, "_init": {"private": "", "description": "Initialize all private members needed for the group.", "guessedname": "_init", "guessedtype": "function"}, "_clearTriggers": {"private": "", "description": "Clears the timeout and all triggers associated with the group.", "guessedname": "_clearTriggers", "guessedtype": "function"}, "_getFetchTimeout": {"guessedname": "_getFetchTimeout", "return": {"type": "Function", "description": "group's <code>fetch</code> method"}, "description": "Returns the group's <code>fetch</code> method, with the proper closure, for use with <code>setTimeout</code>.", "private": "", "guessedtype": "function"}, "_onloadTasks": {"private": "", "description": "Performs necessary setup at domready time.\nInitiates time limit for group; executes the fold check for the images.", "guessedname": "_onloadTasks", "guessedtype": "function"}, "registerImage": {"return": {"type": "Object", "description": "<code>Y.ImgLoadImgObj</code> that was registered"}, "description": "Registers an image with the group.\nArguments are passed through to a <code>Y.ImgLoadImgObj</code> constructor; see that class' attribute documentation for detailed information. \"<code>domId</code>\" is a required attribute.", "param": "{Object} *  A configuration object literal with attribute name/value pairs  (passed through to a <code>Y.ImgLoadImgObj</code> constructor)", "params": [{"type": "Object", "name": "*", "description": "  A configuration object literal with attribute name/value pairs  (passed through to a <code>Y.ImgLoadImgObj</code> constructor)"}], "guessedname": "registerImage", "guessedtype": "function"}, "_fetchByClass": {"private": "", "description": "Finds all elements in the DOM with the class name specified in the group. Removes the class from the element in order to let the style definitions trigger the image fetching.", "guessedname": "_fetchByClass", "guessedtype": "function"}, "_foldCheck": {"private": "", "description": "Checks the position of each image in the group. If any part of the image is within the specified distance (<code>foldDistance</code>) of the client viewport, the image is fetched immediately.", "guessedname": "_foldCheck", "guessedtype": "function"}, "fetch": {"description": "Displays the images in the group.\nThis method is called when a trigger fires or the time limit expires; it shouldn't be called externally, but is not private in the rare event that it needs to be called immediately.", "guessedname": "fetch", "guessedtype": "function"}, "_updateNodeClassName": {"description": "Updates a given node, removing the ImageLoader class name. If the\nnode is an img and the classNameAction is \"enhanced\", then node\nclass name is removed and also the src attribute is set to the \nimage URL as well as clearing the style background image.", "param": "node {Node} The node to act on.", "params": [{"type": "Node", "name": "node", "description": "  The node to act on."}], "private": "", "guessedname": "_updateNodeClassName", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "imageloader.js", "guessedtype": "function", "shortname": "ImgLoadGroup", "configs": {"className": {"type": "String", "description": "Class name that will identify images belonging to the group. This class name will be removed from each element in order to fetch images.\nThis class should have, in its CSS style definition, \"<code>background:none !important;</code>\".", "guessedname": "className", "guessedtype": "property"}, "timeLimit": {"type": "Number", "description": "Time limit, in seconds, after which images are fetched regardless of trigger events.", "guessedname": "timeLimit", "guessedtype": "property"}, "classNameAction": {"type": "String", "description": "Determines how to act when className is used as the way to delay load images. The \"default\" action is to just\nremove the class name. The \"enhanced\" action is to remove the class name and also set the src attribute if\nthe element is an img.", "guessedname": "classNameAction", "guessedtype": "property"}, "foldDistance": {"type": "Number", "description": "Distance below the fold for which images are loaded. Images are not loaded until they are at most this distance away from (or above) the fold.\nThis check is performed at page load (domready) and after any window scroll or window resize event (until all images are loaded).", "guessedname": "foldDistance", "guessedtype": "property"}, "name": {"type": "String", "description": "Name for the group. Only used to identify the group in logging statements.", "guessedname": "name", "guessedtype": "property"}}, "description": "A group for images. A group can have one time limit and a series of triggers. Thus the images belonging to this group must share these constraints."}, "Test.Wait": {"name": "Test.Wait", "constructors": [{"params": [{"type": "Function", "name": "segment", "description": " A function to run when the wait is over."}, {"type": "int", "name": "delay", "description": " The number of milliseconds to wait before running the code."}], "description": "Represents a stoppage in test execution to wait for an amount of time before\ncontinuing."}], "namespace": "Test", "module": "test", "guessedname": "Wait", "file": "test.js", "guessedtype": "function", "shortname": "Wait", "properties": {"delay": {"type": "int", "description": "The delay before running the segment of code.", "guessedname": "delay", "guessedtype": "property"}, "segment": {"type": "Function", "description": "The segment of code to run when the wait is over.", "guessedname": "segment", "guessedtype": "property"}}, "description": "Represents a stoppage in test execution to wait for an amount of time before\ncontinuing."}, "Do.Halt": {"name": "Do.Halt", "constructors": [{"params": [{"type": "String", "name": "msg", "description": "  (optional) Explanation of why the termination was done"}, {"type": "any", "name": "retVal", "description": "  Return value passed to code that invoked the wrapped\nfunction."}], "description": "Return a Halt object when you want to terminate the execution\nof all subsequent subscribers as well as the wrapped method\nif it has not exectued yet.  Useful for Do.before subscribers."}], "namespace": "", "module": "event-custom", "guessedname": "Halt", "file": "event-custom-base.js", "guessedtype": "function", "shortname": "Do.Halt", "description": "Return a Halt object when you want to terminate the execution\nof all subsequent subscribers as well as the wrapped method\nif it has not exectued yet.  Useful for Do.before subscribers."}, "AutoCompleteBase": {"methods": {"_onInputBlur": {"description": "Handles <code>blur</code> events on the input node.", "param": "{EventFacade} e", "protected": "", "params": [{"type": "EventFacade", "name": "e", "description": ""}], "guessedname": "_onInputBlur", "guessedtype": "function"}, "_defQueryFn": {"description": "Default <code>query</code> event handler. Sets the <code>query</code>\nproperty and sends a request to the source if one is configured.", "param": "{EventFacade} e", "protected": "", "params": [{"type": "EventFacade", "name": "e", "description": ""}], "guessedname": "_defQueryFn", "guessedtype": "function"}, "_createStringSource": {"return": {"type": "Object", "description": "DataSource-like object."}, "description": "Creates a DataSource-like object that calls the specified  URL or\nexecutes the specified YQL query for results. If the string starts\nwith \"select \", \"use \", or \"set \" (case-insensitive), it's assumed to be\na YQL query; otherwise, it's assumed to be a URL (which may be absolute\nor relative). URLs containing a \"{callback}\" placeholder are assumed to\nbe JSONP URLs; all others will use XHR. See the <code>source</code>\nattribute for more details.", "param": "{String} source URL or YQL query.", "protected": "", "params": [{"type": "String", "name": "source", "description": " URL or YQL query."}], "guessedname": "_createStringSource", "guessedtype": "function"}, "_setResultFilters": {"return": {"type": "Array", "description": "Array of filter functions (empty if <i>filters</i> is\n<code>null</code>)."}, "description": "Setter for the <code>resultFilters</code> attribute.", "param": "{Array|Function|String|null} filters <code>null</code>, a filter\nfunction, an array of filter functions, or a string or array of strings\nrepresenting the names of methods on\n<code>Y.AutoCompleteFilters</code>.", "protected": "", "params": [{"type": "Array|Function|String|null", "name": "filters", "description": " <code>null</code>, a filter\nfunction, an array of filter functions, or a string or array of strings\nrepresenting the names of methods on\n<code>Y.AutoCompleteFilters</code>."}], "guessedname": "_setResultFilters", "guessedtype": "function"}, "sendRequest": {"description": "<p>\nSends a request to the configured source. If no source is configured,\nthis method won't do anything.\n</p>\n<p>\nUsually there's no reason to call this method manually; it will be\ncalled automatically when user input causes a <code>query</code> event to\nbe fired. The only time you'll need to call this method manually is if\nyou want to force a request to be sent when no user input has occurred.\n</p>", "chainable": "", "param": "{String} query (optional) Query to send. If specified, the\n<code>query</code> attribute will be set to this query. If not\nspecified, the current value of the <code>query</code> attribute will\nbe used.", "params": [{"type": "String", "name": "query", "description": " (optional) Query to send. If specified, the\n<code>query</code> attribute will be set to this query. If not\nspecified, the current value of the <code>query</code> attribute will\nbe used."}, {"type": "Function", "name": "requestTemplate", "description": " (optional) Request template function.\nIf not specified, the current value of the <code>requestTemplate</code>\nattribute will be used."}], "guessedname": "sendRequest", "guessedtype": "function"}, "_defaultYQLLocator": {"return": {"type": "Array", "description": ""}, "description": "Default resultListLocator used when a string-based YQL source is set and\nthe implementer hasn't already specified one.", "param": "{Object} response YQL response object.", "protected": "", "params": [{"type": "Object", "name": "response", "description": " YQL response object."}], "guessedname": "_defaultYQLLocator", "guessedtype": "function"}, "_afterSourceTypeChange": {"description": "Updates the current <code>source</code> based on the new\n<code>sourceType</code> to ensure that the two attributes don't get out\nof sync when they're changed separately.", "param": "{EventFacade} e", "protected": "", "params": [{"type": "EventFacade", "name": "e", "description": ""}], "guessedname": "_afterSourceTypeChange", "guessedtype": "function"}, "_createJSONPSource": {"return": {"type": "Object", "description": "DataSource-like object."}, "description": "Creates a DataSource-like object that uses the specified JSONPRequest\ninstance as a source. See the <code>source</code> attribute for more\ndetails.", "param": "{JSONPRequest|String} source URL string or JSONPRequest instance.", "protected": "", "params": [{"type": "JSONPRequest|String", "name": "source", "description": " URL string or JSONPRequest instance."}], "guessedname": "_createJSONPSource", "guessedtype": "function"}, "_destructorACBase": {"protected": "", "description": "Detaches AutoCompleteBase event listeners.", "guessedname": "_destructorACBase", "guessedtype": "function"}, "_onResponse": {"description": "Handles source responses and fires the <code>results</code> event.", "param": "{EventFacade} e", "protected": "", "params": [{"type": "EventFacade", "name": "e", "description": ""}], "guessedname": "_onResponse", "guessedtype": "function"}, "_updateValue": {"description": "<p>\nUpdates the query portion of the <code>value</code> attribute.\n</p>\n<p>\nIf a query delimiter is defined, the last delimited portion of the input\nvalue will be replaced with the specified <i>value</i>.\n</p>", "param": "{String} newVal New value.", "protected": "", "params": [{"type": "String", "name": "newVal", "description": " New value."}], "guessedname": "_updateValue", "guessedtype": "function"}, "_jsonpFormatter": {"return": {"type": "String", "description": "Formatted URL"}, "description": "URL formatter passed to <code>JSONPRequest</code> instances.", "param": "{String} url", "protected": "", "params": [{"type": "String", "name": "url", "description": ""}, {"type": "String", "name": "proxy", "description": ""}, {"type": "String", "name": "query", "description": ""}], "guessedname": "_jsonpFormatter", "guessedtype": "function"}, "_sourceSuccess": {"description": "Shared success callback for non-DataSource sources.", "param": "{mixed} data Response data.", "protected": "", "params": [{"type": "mixed", "name": "data", "description": " Response data."}, {"type": "Object", "name": "request", "description": " Request object."}], "guessedname": "_sourceSuccess", "guessedtype": "function"}, "_getXHRUrl": {"return": {"type": "String", "description": "Formatted URL."}, "description": "Returns a formatted XHR URL based on the specified base <i>url</i>,\n<i>query</i>, and the current <i>requestTemplate</i> if any.", "param": "{String} url Base URL.", "protected": "", "params": [{"type": "String", "name": "url", "description": " Base URL."}, {"type": "Object", "name": "request", "description": " Request object containing `query` and `request`\nproperties."}], "guessedname": "_getXHRUrl", "guessedtype": "function"}, "_createSelectSource": {"return": {"type": "Object", "description": "DataSource-like object."}, "description": "Creates a DataSource-like object that uses the specified &lt;select&gt;\nnode as a source.", "param": "{Node} source YUI Node instance wrapping a &lt;select&gt; node.", "protected": "", "params": [{"type": "Node", "name": "source", "description": " YUI Node instance wrapping a &lt;select&gt; node."}], "guessedname": "_createSelectSource", "guessedtype": "function"}, "_parseValue": {"return": {"type": "String|null", "description": "query"}, "description": "<p>\nReturns the query portion of the specified input value, or\n<code>null</code> if there is no suitable query within the input value.\n</p>\n<p>\nIf a query delimiter is defined, the query will be the last delimited\npart of of the string.\n</p>", "param": "{String} value Input value from which to extract the query.", "protected": "", "params": [{"type": "String", "name": "value", "description": " Input value from which to extract the query."}], "guessedname": "_parseValue", "guessedtype": "function"}, "_defClearFn": {"protected": "", "description": "Default <code>clear</code> event handler. Sets the <code>results</code>\nproperty to an empty array and <code>query</code> to null.", "guessedname": "_defClearFn", "guessedtype": "function"}, "_setRequestTemplate": {"return": {"type": "Function|null", "description": ""}, "description": "Setter for the <code>requestTemplate</code> attribute.", "param": "{Function|String|null} template", "protected": "", "params": [{"type": "Function|String|null", "name": "template", "description": ""}], "guessedname": "_setRequestTemplate", "guessedtype": "function"}, "_functionValidator": {"description": "Returns <code>true</code> if <i>value</i> is either a function or\n<code>null</code>.", "param": "{Function|null} value Value to validate.", "protected": "", "params": [{"type": "Function|null", "name": "value", "description": " Value to validate."}], "guessedname": "_functionValidator", "guessedtype": "function"}, "_createObjectSource": {"return": {"type": "Object", "description": "DataSource-like object."}, "description": "Creates a DataSource-like object that looks up queries as properties on\nthe specified object, and returns the found value (if any) as a response.\nSee the <code>source</code> attribute for more details.", "param": "{Object} source", "protected": "", "params": [{"type": "Object", "name": "source", "description": ""}], "guessedname": "_createObjectSource", "guessedtype": "function"}, "_defResultsFn": {"description": "Default <code>results</code> event handler. Sets the <code>results</code>\nproperty to the latest results.", "param": "{EventFacade} e", "protected": "", "params": [{"type": "EventFacade", "name": "e", "description": ""}], "guessedname": "_defResultsFn", "guessedtype": "function"}, "_syncUIACBase": {"protected": "", "description": "Synchronizes the UI state of the <code>inputNode</code>.", "guessedname": "_syncUIACBase", "guessedtype": "function"}, "_createArraySource": {"return": {"type": "Object", "description": "DataSource-like object."}, "description": "Creates a DataSource-like object that simply returns the specified array\nas a response. See the <code>source</code> attribute for more details.", "param": "{Array} source", "protected": "", "params": [{"type": "Array", "name": "source", "description": ""}], "guessedname": "_createArraySource", "guessedtype": "function"}, "_onInputValueChange": {"description": "Handles <code>valueChange</code> events on the input node and fires a\n<code>query</code> event when the input value meets the configured\ncriteria.", "param": "{EventFacade} e", "protected": "", "params": [{"type": "EventFacade", "name": "e", "description": ""}], "guessedname": "_onInputValueChange", "guessedtype": "function"}, "_setLocator": {"return": {"type": "Function|null", "description": ""}, "description": "Setter for locator attributes.", "param": "{Function|String|null} locator", "protected": "", "params": [{"type": "Function|String|null", "name": "locator", "description": ""}], "guessedname": "_setLocator", "guessedtype": "function"}, "_setSource": {"return": {"type": "DataSource|Object", "description": ""}, "description": "Setter for the <code>source</code> attribute. Returns a DataSource or\na DataSource-like object depending on the type of <i>source</i> and/or\nthe value of the <code>sourceType</code> attribute.", "param": "{mixed} source AutoComplete source. See the <code>source</code>\nattribute for details.", "protected": "", "params": [{"type": "mixed", "name": "source", "description": " AutoComplete source. See the <code>source</code>\nattribute for details."}], "guessedname": "_setSource", "guessedtype": "function"}, "_beforeCreateObjectSource": {"description": "Runs before AutoCompleteBase's <code>_createObjectSource()</code> method\nand augments it to support additional object-based source types.", "param": "{String} source", "protected": "", "params": [{"type": "String", "name": "source", "description": ""}], "guessedname": "_beforeCreateObjectSource", "guessedtype": "function"}, "_setResultHighlighter": {"return": {"type": "Function|null", "description": ""}, "description": "Setter for the <code>resultHighlighter</code> attribute.", "param": "{Function|String|null} highlighter <code>null</code>, a\nhighlighter function, or a string representing the name of a method on\n<code>Y.AutoCompleteHighlighters</code>.", "protected": "", "params": [{"type": "Function|String|null", "name": "highlighter", "description": " <code>null</code>, a\nhighlighter function, or a string representing the name of a method on\n<code>Y.AutoCompleteHighlighters</code>."}], "guessedname": "_setResultHighlighter", "guessedtype": "function"}, "_bindUIACBase": {"protected": "", "description": "Attaches event listeners and behaviors.", "guessedname": "_bindUIACBase", "guessedtype": "function"}, "_getObjectValue": {"return": {"type": "mixed", "description": "Located value, or <code>undefined</code> if the value was\nnot found at the specified path."}, "description": "Faster and safer alternative to Y.Object.getValue(). Doesn't bother\ncasting the path to an array (since we already know it's an array) and\ndoesn't throw an error if a value in the middle of the object hierarchy\nis neither <code>undefined</code> nor an object.", "param": "{Object} obj", "protected": "", "params": [{"type": "Object", "name": "obj", "description": ""}, {"type": "Array", "name": "path", "description": ""}], "guessedname": "_getObjectValue", "guessedtype": "function"}, "_createFunctionSource": {"return": {"type": "Object", "description": "DataSource-like object."}, "description": "Creates a DataSource-like object that passes the query to a\ncustom-defined function, which is expected to call the provided callback\nwith an array of results. See the <code>source</code> attribute for more\ndetails.", "param": "{Function} source Function that accepts a query and a callback as\nparameters, and calls the callback with an array of results.", "protected": "", "params": [{"type": "Function", "name": "source", "description": " Function that accepts a query and a callback as\nparameters, and calls the callback with an array of results."}], "guessedname": "_createFunctionSource", "guessedtype": "function"}, "_createIOSource": {"return": {"type": "Object", "description": "DataSource-like object."}, "description": "Creates a DataSource-like object that uses <code>Y.io</code> as a source.\nSee the <code>source</code> attribute for more details.", "param": "{String} source URL.", "protected": "", "params": [{"type": "String", "name": "source", "description": " URL."}], "guessedname": "_createIOSource", "guessedtype": "function"}, "_afterValueChange": {"description": "Handles change events for the <code>value</code> attribute.", "param": "{EventFacade} e", "protected": "", "params": [{"type": "EventFacade", "name": "e", "description": ""}], "guessedname": "_afterValueChange", "guessedtype": "function"}, "_syncBrowserAutocomplete": {"protected": "", "description": "Synchronizes the UI state of the <code>allowBrowserAutocomplete</code>\nattribute.", "guessedname": "_syncBrowserAutocomplete", "guessedtype": "function"}, "_createYQLSource": {"return": {"type": "Object", "description": "DataSource-like object."}, "description": "Creates a DataSource-like object that uses the specified YQL query string\nto create a YQL-based source. See the <code>source</code> attribute for\ndetails. If no <code>resultListLocator</code> is defined, this method\nwill set a best-guess locator that might work for many typical YQL\nqueries.", "param": "{String} source YQL query.", "protected": "", "params": [{"type": "String", "name": "source", "description": " YQL query."}], "guessedname": "_createYQLSource", "guessedtype": "function"}, "_parseResponse": {"description": "Parses result responses, performs filtering and highlighting, and fires\nthe <code>results</code> event.", "param": "{String} query Query that generated these results.", "protected": "", "params": [{"type": "String", "name": "query", "description": " Query that generated these results."}, {"type": "Object", "name": "response", "description": " Response containing results."}, {"type": "Object", "name": "data", "description": " Raw response data."}], "guessedname": "_parseResponse", "guessedtype": "function"}}, "description": "<p>\nExtension that provides core autocomplete logic (but no UI implementation)\nfor a text input field or textarea.\n</p>\n<p>\nThe <code>AutoCompleteBase</code> class provides events and attributes that\nabstract away core autocomplete logic and configuration, but does not provide\na widget implementation or suggestion UI. For a prepackaged autocomplete\nwidget, see <code>AutoCompleteList</code>.\n</p>\n<p>\nThis extension cannot be instantiated directly, since it doesn't provide an\nactual implementation. It's intended to be mixed into a\n<code>Y.Base</code>-based class or widget.\n</p>\n<p>\n<code>Y.Widget</code>-based example:\n</p>\n<pre>\nYUI().use('autocomplete-base', 'widget', function (Y) {\n&nbsp;&nbsp;var MyAC = Y.Base.create('myAC', Y.Widget, [Y.AutoCompleteBase], {\n&nbsp;&nbsp;&nbsp;&nbsp;// Custom prototype methods and properties.\n&nbsp;&nbsp;}, {\n&nbsp;&nbsp;&nbsp;&nbsp;// Custom static methods and properties.\n&nbsp;&nbsp;});\n&nbsp;\n&nbsp;&nbsp;// Custom implementation code.\n});\n</pre>\n<p>\n<code>Y.Base</code>-based example:\n</p>\n<pre>\nYUI().use('autocomplete-base', function (Y) {\n&nbsp;&nbsp;var MyAC = Y.Base.create('myAC', Y.Base, [Y.AutoCompleteBase], {\n&nbsp;&nbsp;&nbsp;&nbsp;initializer: function () {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this._bindUIACBase();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this._syncUIACBase();\n&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;// Custom prototype methods and properties.\n&nbsp;&nbsp;}, {\n&nbsp;&nbsp;&nbsp;&nbsp;// Custom static methods and properties.\n&nbsp;&nbsp;});\n&nbsp;\n&nbsp;&nbsp;// Custom implementation code.\n});\n</pre>", "namespace": "", "module": "autocomplete", "properties": {"SOURCE_TYPES": {"type": "{Object}", "static": "", "description": "Mapping of built-in source types to their setter functions. DataSource\ninstances and DataSource-like objects are handled natively, so are not\nmapped here.", "guessedname": "SOURCE_TYPES", "guessedtype": "property"}, "_YQL_SOURCE_REGEX": {"protected": "", "type": "RegExp", "description": "Regular expression used to determine whether a String source is a YQL\nquery.", "guessedname": "_YQL_SOURCE_REGEX", "guessedtype": "property"}}, "guessedname": "Escape", "file": "autocomplete-base.js", "guessedtype": "property", "events": {"sourceChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "sourceChange", "description": "Fires when the value for the configuration attribute 'source' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "inputNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "inputNodeChange", "description": "Fires when the value for the configuration attribute 'inputNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "results": {"preventable": "_defResultsFn", "params": [{"type": "EventFacade", "name": "e", "description": " Event facade with the following additional\nproperties:\n<dl>\n<dt>data (Array|Object)</dt>\n<dd>\nRaw, unfiltered result data (if available).\n</dd>\n<dt>query (String)</dt>\n<dd>\nQuery that generated these results.\n</dd>\n<dt>results (Array)</dt>\n<dd>\nArray of filtered, formatted, and highlighted results. Each item in\nthe array is an object with the following properties:\n<dl>\n<dt>display (Node|HTMLElement|String)</dt>\n<dd>\nFormatted result HTML suitable for display to the user. If no\ncustom formatter is set, this will be an HTML-escaped version of\nthe string in the <code>text</code> property.\n</dd>\n<dt>highlighted (String)</dt>\n<dd>\nHighlighted (but not formatted) result text. This property will\nonly be set if a highlighter is in use.\n</dd>\n<dt>raw (mixed)</dt>\n<dd>\nRaw, unformatted result in whatever form it was provided by the\n<code>source</code>.\n</dd>\n<dt>text (String)</dt>\n<dd>\nPlain text version of the result, suitable for being inserted\ninto the value of a text input field or textarea when the result\nis selected by a user. This value is not HTML-escaped and should\nnot be inserted into the page using innerHTML.\n</dd>\n</dl>\n</dd>\n</dl>"}], "description": "Fires after query results are received from the <code>source</code>. If\nno source has been set, this event will not fire.", "param": "{EventFacade} e Event facade with the following additional\nproperties:\n<dl>\n<dt>data (Array|Object)</dt>\n<dd>\nRaw, unfiltered result data (if available).\n</dd>\n<dt>query (String)</dt>\n<dd>\nQuery that generated these results.\n</dd>\n<dt>results (Array)</dt>\n<dd>\nArray of filtered, formatted, and highlighted results. Each item in\nthe array is an object with the following properties:\n<dl>\n<dt>display (Node|HTMLElement|String)</dt>\n<dd>\nFormatted result HTML suitable for display to the user. If no\ncustom formatter is set, this will be an HTML-escaped version of\nthe string in the <code>text</code> property.\n</dd>\n<dt>highlighted (String)</dt>\n<dd>\nHighlighted (but not formatted) result text. This property will\nonly be set if a highlighter is in use.\n</dd>\n<dt>raw (mixed)</dt>\n<dd>\nRaw, unformatted result in whatever form it was provided by the\n<code>source</code>.\n</dd>\n<dt>text (String)</dt>\n<dd>\nPlain text version of the result, suitable for being inserted\ninto the value of a text input field or textarea when the result\nis selected by a user. This value is not HTML-escaped and should\nnot be inserted into the page using innerHTML.\n</dd>\n</dl>\n</dd>\n</dl>"}, "resultTextLocatorChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "resultTextLocatorChange", "description": "Fires when the value for the configuration attribute 'resultTextLocator' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "resultListLocatorChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "resultListLocatorChange", "description": "Fires when the value for the configuration attribute 'resultListLocator' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "query": {"preventable": "_defQueryFn", "params": [{"type": "EventFacade", "name": "e", "description": " Event facade with the following additional\nproperties:\n<dl>\n<dt>inputValue (String)</dt>\n<dd>\nFull contents of the text input field or textarea that generated\nthe query.\n</dd>\n<dt>query (String)</dt>\n<dd>\nAutocomplete query. This is the string that will be used to\nrequest completion results. It may or may not be the same as\n<code>inputValue</code>.\n</dd>\n</dl>"}], "description": "Fires when the contents of the input field have changed and the input\nvalue meets the criteria necessary to generate an autocomplete query.", "param": "{EventFacade} e Event facade with the following additional\nproperties:\n<dl>\n<dt>inputValue (String)</dt>\n<dd>\nFull contents of the text input field or textarea that generated\nthe query.\n</dd>\n<dt>query (String)</dt>\n<dd>\nAutocomplete query. This is the string that will be used to\nrequest completion results. It may or may not be the same as\n<code>inputValue</code>.\n</dd>\n</dl>"}, "queryDelimiterChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "queryDelimiterChange", "description": "Fires when the value for the configuration attribute 'queryDelimiter' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "resultFiltersChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "resultFiltersChange", "description": "Fires when the value for the configuration attribute 'resultFilters' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "requestTemplateChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "requestTemplateChange", "description": "Fires when the value for the configuration attribute 'requestTemplate' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "sourceTypeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "sourceTypeChange", "description": "Fires when the value for the configuration attribute 'sourceType' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "minQueryLengthChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "minQueryLengthChange", "description": "Fires when the value for the configuration attribute 'minQueryLength' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "allowTrailingDelimiterChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "allowTrailingDelimiterChange", "description": "Fires when the value for the configuration attribute 'allowTrailingDelimiter' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "resultFormatterChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "resultFormatterChange", "description": "Fires when the value for the configuration attribute 'resultFormatter' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "allowBrowserAutocompleteChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "allowBrowserAutocompleteChange", "description": "Fires when the value for the configuration attribute 'allowBrowserAutocomplete' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "valueChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "valueChange", "description": "Fires when the value for the configuration attribute 'value' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "maxResultsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "maxResultsChange", "description": "Fires when the value for the configuration attribute 'maxResults' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "clear": {"preventable": "_defClearFn", "params": [{"type": "EventFacade", "name": "e", "description": " Event facade with the following additional\nproperties:\n<dl>\n<dt>prevVal (String)</dt>\n<dd>\nValue of the query before it was cleared.\n</dd>\n</dl>"}], "description": "Fires after the query has been completely cleared or no longer meets the\nminimum query length requirement.", "param": "{EventFacade} e Event facade with the following additional\nproperties:\n<dl>\n<dt>prevVal (String)</dt>\n<dd>\nValue of the query before it was cleared.\n</dd>\n</dl>"}, "resultHighlighterChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "resultHighlighterChange", "description": "Fires when the value for the configuration attribute 'resultHighlighter' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "resultsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "resultsChange", "description": "Fires when the value for the configuration attribute 'results' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "tokenInputChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "tokenInputChange", "description": "Fires when the value for the configuration attribute 'tokenInput' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "queryChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "queryChange", "description": "Fires when the value for the configuration attribute 'query' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "yqlProtocolChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "yqlProtocolChange", "description": "Fires when the value for the configuration attribute 'yqlProtocol' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "queryDelayChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "queryDelayChange", "description": "Fires when the value for the configuration attribute 'queryDelay' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "yqlEnvChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "yqlEnvChange", "description": "Fires when the value for the configuration attribute 'yqlEnv' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "configs": {"value": {"default": "''", "type": "String", "description": "Current value of the input node.", "guessedname": "value", "guessedtype": "property"}, "minQueryLength": {"default": "1", "type": "Number", "description": "Minimum number of characters that must be entered before a\n<code>query</code> event will be fired. A value of <code>0</code>\nallows empty queries; a negative value will effectively disable all\n<code>query</code> events.", "guessedname": "minQueryLength", "guessedtype": "property"}, "tokenInput": {"readonly": "", "type": "Plugin.TokenInput", "description": "If the <code>inputNode</code> specified at instantiation time has a\n<code>node-tokeninput</code> plugin attached to it, this attribute will\nbe a reference to the <code>Y.Plugin.TokenInput</code> instance.", "guessedname": "tokenInput", "guessedtype": "property"}, "yqlEnv": {"default": "null", "type": "String", "description": "YQL environment file URL to load when the <code>source</code> is set to\na YQL query. Set this to <code>null</code> to use the default Open Data\nTables environment file (http://datatables.org/alltables.env).", "guessedname": "yqlEnv", "guessedtype": "property"}, "queryDelimiter": {"default": "null", "type": "String|null", "description": "Query delimiter string. When a delimiter is configured, the input value\nwill be split on the delimiter, and only the last portion will be used in\nautocomplete queries and updated when the <code>query</code> attribute is\nmodified.", "guessedname": "queryDelimiter", "guessedtype": "property"}, "resultTextLocator": {"type": "Function|String|null", "description": "<p>\nLocator that should be used to extract a plain text string from a\nnon-string result item. The resulting text value will typically be the\nvalue that ends up being inserted into an input field or textarea when\nthe user of an autocomplete implementation selects a result.\n</p>\n<p>\nBy default, no locator is applied, and all results are assumed to be\nplain text strings. If all results are already plain text strings, you\ndon't need to define a locator.\n</p>\n<p>\nThe locator may be either a function (which will receive the raw result\nas an argument and must return a string) or a string representing an\nobject path, such as \"foo.bar.baz\" (which would return the value of\n<code>result.foo.bar.baz</code> if the result is an object).\n</p>\n<p>\nWhile <code>resultTextLocator</code> may be set to either a function or a\nstring, it will always be returned as a function that accepts a result\nargument and returns a string.\n</p>", "guessedname": "resultTextLocator", "guessedtype": "property"}, "resultFormatter": {"type": "Function|null", "description": "<p>\nFunction which will be used to format results. If provided, this function\nwill be called with two arguments after results have been received and\nfiltered: the query and an array of result objects. The formatter is\nexpected to return an array of HTML strings or Node instances containing\nthe desired HTML for each result.\n</p>\n<p>\nSee the documentation for the <code>results</code> event for a list of\nthe properties available on each result object.\n</p>\n<p>\nIf no <code>source</code> is set, the formatter will not be called.\n</p>", "guessedname": "resultFormatter", "guessedtype": "property"}, "maxResults": {"default": "0", "type": "Number", "description": "Maximum number of results to return. A value of <code>0</code> or less\nwill allow an unlimited number of results.", "guessedname": "maxResults", "guessedtype": "property"}, "results": {"description": "Current results, or an empty array if there are no results.", "default": "[]", "readonly": "", "guessedname": "results", "guessedtype": "property", "type": "Array"}, "yqlProtocol": {"default": "'http'", "type": "String", "description": "URL protocol to use when the <code>source</code> is set to a YQL query.", "guessedname": "yqlProtocol", "guessedtype": "property"}, "requestTemplate": {"default": "null", "type": "Function|String|null", "description": "<p>\nSource request template. This can be a function that accepts a query as a\nparameter and returns a request string, or it can be a string containing\nthe placeholder \"{query}\", which will be replaced with the actual\nURI-encoded query. In either case, the resulting string will be appended\nto the request URL when the <code>source</code> attribute is set to a\nremote DataSource, JSONP URL, or XHR URL (it will not be appended to YQL\nURLs).\n</p>\n<p>\nWhile <code>requestTemplate</code> may be set to either a function or\na string, it will always be returned as a function that accepts a\nquery argument and returns a string.\n</p>", "guessedname": "requestTemplate", "guessedtype": "property"}, "allowTrailingDelimiter": {"default": "false", "type": "Boolean", "description": "When a <code>queryDelimiter</code> is set, trailing delimiters will\nautomatically be stripped from the input value by default when the\ninput node loses focus. Set this to <code>true</code> to allow trailing\ndelimiters.", "guessedname": "allowTrailingDelimiter", "guessedtype": "property"}, "source": {"type": "Array|DataSource|Function|Node|Object|String|null", "description": "<p>\nSource for autocomplete results. The following source types are\nsupported:\n</p>\n<dl>\n<dt>Array</dt>\n<dd>\n<p>\n<i>Example:</i> <code>['first result', 'second result', 'etc']</code>\n</p>\n<p>\nThe full array will be provided to any configured filters for each\nquery. This is an easy way to create a fully client-side autocomplete\nimplementation.\n</p>\n</dd>\n<dt>DataSource</dt>\n<dd>\n<p>\nA <code>DataSource</code> instance or other object that provides a\nDataSource-like <code>sendRequest</code> method. See the\n<code>DataSource</code> documentation for details.\n</p>\n</dd>\n<dt>Function</dt>\n<dd>\n<p>\n<i>Example (synchronous):</i> <code>function (query) { return ['foo', 'bar']; }</code><br>\n<i>Example (async):</i> <code>function (query, callback) { callback(['foo', 'bar']); }</code>\n</p>\n<p>\nA function source will be called with the current query and a\ncallback function as parameters, and should either return an array of\nresults (for synchronous operation) or return nothing and pass an\narray of results to the provided callback (for asynchronous\noperation).\n</p>\n</dd>\n<dt>Object</dt>\n<dd>\n<p>\n<i>Example:</i> <code>{foo: ['foo result 1', 'foo result 2'], bar: ['bar result']}</code>\n</p>\n<p>\nAn object will be treated as a query hashmap. If a property on the\nobject matches the current query, the value of that property will be\nused as the response.\n</p>\n<p>\nThe response is assumed to be an array of results by default. If the\nresponse is not an array, provide a <code>resultListLocator</code> to\nprocess the response and return an array.\n</p>\n</dd>\n</dl>\n<p>\nIf the optional <code>autocomplete-sources</code> module is loaded, then\nthe following additional source types will be supported as well:\n</p>\n<dl>\n<dt>&lt;select&gt; Node</dt>\n<dd>\n<p>\nYou may provide a YUI Node instance wrapping a &lt;select&gt;\nelement, and the options in the list will be used as results. You\nwill also need to specify a <code>resultTextLocator</code> of 'text'\nor 'value', depending on what you want to use as the text of the\nresult.\n</p>\n<p>\nEach result will be an object with the following properties:\n</p>\n<dl>\n<dt>html (String)</dt>\n<dd>\n<p>HTML content of the &lt;option&gt; element.</p>\n</dd>\n<dt>index (Number)</dt>\n<dd>\n<p>Index of the &lt;option&gt; element in the list.</p>\n</dd>\n<dt>node (Y.Node)</dt>\n<dd>\n<p>Node instance referring to the original &lt;option&gt; element.</p>\n</dd>\n<dt>selected (Boolean)</dt>\n<dd>\n<p>Whether or not this item is currently selected in the\n&lt;select&gt; list.</p>\n</dd>\n<dt>text (String)</dt>\n<dd>\n<p>Text content of the &lt;option&gt; element.</p>\n</dd>\n<dt>value (String)</dt>\n<dd>\n<p>Value of the &lt;option&gt; element.</p>\n</dd>\n</dl>\n</dd>\n<dt>String (JSONP URL)</dt>\n<dd>\n<p>\n<i>Example:</i> <code>'http://example.com/search?q={query}&callback={callback}'</code>\n</p>\n<p>\nIf a URL with a <code>{callback}</code> placeholder is provided, it\nwill be used to make a JSONP request. The <code>{query}</code>\nplaceholder will be replaced with the current query, and the\n<code>{callback}</code> placeholder will be replaced with an\ninternally-generated JSONP callback name. Both placeholders must\nappear in the URL, or the request will fail. An optional\n<code>{maxResults}</code> placeholder may also be provided, and will\nbe replaced with the value of the maxResults attribute (or 1000 if\nthe maxResults attribute is 0 or less).\n</p>\n<p>\nThe response is assumed to be an array of results by default. If the\nresponse is not an array, provide a <code>resultListLocator</code> to\nprocess the response and return an array.\n</p>\n<p>\n<strong>The <code>jsonp</code> module must be loaded in order for\nJSONP URL sources to work.</strong> If the <code>jsonp</code> module\nis not already loaded, it will be loaded on demand if possible.\n</p>\n</dd>\n<dt>String (XHR URL)</dt>\n<dd>\n<p>\n<i>Example:</i> <code>'http://example.com/search?q={query}'</code>\n</p>\n<p>\nIf a URL without a <code>{callback}</code> placeholder is provided,\nit will be used to make a same-origin XHR request. The\n<code>{query}</code> placeholder will be replaced with the current\nquery. An optional <code>{maxResults}</code> placeholder may also be\nprovided, and will be replaced with the value of the maxResults\nattribute (or 1000 if the maxResults attribute is 0 or less).\n</p>\n<p>\nThe response is assumed to be a JSON array of results by default. If\nthe response is a JSON object and not an array, provide a\n<code>resultListLocator</code> to process the response and return an\narray. If the response is in some form other than JSON, you will\nneed to use a custom DataSource instance as the source.\n</p>\n<p>\n<strong>The <code>io-base</code> and <code>json-parse</code> modules\nmust be loaded in order for XHR URL sources to work.</strong> If\nthese modules are not already loaded, they will be loaded on demand\nif possible.\n</p>\n</dd>\n<dt>String (YQL query)</dt>\n<dd>\n<p>\n<i>Example:</i> <code>'select * from search.suggest where query=\"{query}\"'</code>\n</p>\n<p>\nIf a YQL query is provided, it will be used to make a YQL request.\nThe <code>{query}</code> placeholder will be replaced with the\ncurrent autocomplete query. This placeholder must appear in the YQL\nquery, or the request will fail. An optional\n<code>{maxResults}</code> placeholder may also be provided, and will\nbe replaced with the value of the maxResults attribute (or 1000 if\nthe maxResults attribute is 0 or less).\n</p>\n<p>\n<strong>The <code>yql</code> module must be loaded in order for YQL\nsources to work.</strong> If the <code>yql</code> module is not\nalready loaded, it will be loaded on demand if possible.\n</p>\n</dd>\n</dl>\n<p>\nAs an alternative to providing a source, you could simply listen for\n<code>query</code> events and handle them any way you see fit. Providing\na source is optional, but will usually be simpler.\n</p>", "guessedname": "source", "guessedtype": "property"}, "resultHighlighter": {"type": "Function|null", "description": "<p>\nFunction which will be used to highlight results. If provided, this\nfunction will be called with two arguments after results have been\nreceived and filtered: the query and an array of filtered result objects.\nThe highlighter is expected to return an array of highlighted result\ntext in the form of HTML strings.\n</p>\n<p>\nSee the documentation for the <code>results</code> event for a list of\nthe properties available on each result object.\n</p>\n<p>\nIf no <code>source</code> is set, the highlighter will not be called.\n</p>", "guessedname": "resultHighlighter", "guessedtype": "property"}, "query": {"description": "<p>\nCurrent query, or <code>null</code> if there is no current query.\n</p>\n<p>\nThe query might not be the same as the current value of the input\nnode, both for timing reasons (due to <code>queryDelay</code>) and\nbecause when one or more <code>queryDelimiter</code> separators are\nin use, only the last portion of the delimited input string will be\nused as the query value.\n</p>", "default": "null", "readonly": "", "guessedname": "query", "guessedtype": "property", "type": "String|null"}, "inputNode": {"guessedtype": "property", "type": "Node|HTMLElement|String", "description": "Node to monitor for changes, which will generate <code>query</code>\nevents when appropriate. May be either an input field or a textarea.", "guessedname": "inputNode", "writeonce": ""}, "sourceType": {"type": "String", "description": "<p>\nMay be used to force a specific source type, overriding the automatic\nsource type detection. It should almost never be necessary to do this,\nbut as they taught us in the Boy Scouts, one should always be prepared,\nso it's here if you need it. Be warned that if you set this attribute and\nsomething breaks, it's your own fault.\n</p>\n<p>\nSupported <code>sourceType</code> values are: 'array', 'datasource',\n'function', and 'object'.\n</p>\n<p>\nIf the <code>autocomplete-sources</code> module is loaded, the following\nadditional source types are supported: 'io', 'jsonp', 'select',\n'string', 'yql'\n</p>", "guessedname": "sourceType", "guessedtype": "property"}, "queryDelay": {"default": "100", "type": "Number", "description": "<p>\nNumber of milliseconds to delay after input before triggering a\n<code>query</code> event. If new input occurs before this delay is\nover, the previous input event will be ignored and a new delay will\nbegin.\n</p>\n<p>\nThis can be useful both to throttle queries to a remote data source\nand to avoid distracting the user by showing them less relevant\nresults before they've paused their typing.\n</p>", "guessedname": "queryDelay", "guessedtype": "property"}, "allowBrowserAutocomplete": {"default": "false", "type": "Boolean", "description": "Whether or not to enable the browser's built-in autocomplete\nfunctionality for input fields.", "guessedname": "allowBrowserAutocomplete", "guessedtype": "property"}, "resultListLocator": {"type": "Function|String|null", "description": "<p>\nLocator that should be used to extract an array of results from a\nnon-array response.\n</p>\n<p>\nBy default, no locator is applied, and all responses are assumed to be\narrays by default. If all responses are already arrays, you don't need to\ndefine a locator.\n</p>\n<p>\nThe locator may be either a function (which will receive the raw response\nas an argument and must return an array) or a string representing an\nobject path, such as \"foo.bar.baz\" (which would return the value of\n<code>result.foo.bar.baz</code> if the response is an object).\n</p>\n<p>\nWhile <code>resultListLocator</code> may be set to either a function or a\nstring, it will always be returned as a function that accepts a response\nargument and returns an array.\n</p>", "guessedname": "resultListLocator", "guessedtype": "property"}, "resultFilters": {"default": "[]", "type": "Array", "description": "<p>\nArray of local result filter functions. If provided, each filter\nwill be called with two arguments when results are received: the query\nand an array of result objects. See the documentation for the\n<code>results</code> event for a list of the properties available on each\nresult object.\n</p>\n<p>\nEach filter is expected to return a filtered or modified version of the\nresults array, which will then be passed on to subsequent filters, then\nthe <code>resultHighlighter</code> function (if set), then the\n<code>resultFormatter</code> function (if set), and finally to\nsubscribers to the <code>results</code> event.\n</p>\n<p>\nIf no <code>source</code> is set, result filters will not be called.\n</p>\n<p>\nPrepackaged result filters provided by the autocomplete-filters and\nautocomplete-filters-accentfold modules can be used by specifying the\nfilter name as a string, such as <code>'phraseMatch'</code> (assuming\nthe necessary filters module is loaded).\n</p>", "guessedname": "resultFilters", "guessedtype": "property"}}, "shortname": "AutoCompleteBase", "name": "AutoCompleteBase"}, "CharCounter": {"name": "CharCounter", "configs": {"input": {"default": "null", "type": "{Node | String}", "description": "Node or Selector for the input field. Required.", "guessedname": "input", "guessedtype": "property"}, "counter": {"default": "null", "type": "{Node | String}", "description": "Node or Selector to display the information of the counter.", "guessedname": "counter", "guessedtype": "property"}, "maxLength": {"default": "Infinity", "type": "Number", "description": "Max number of characters the <a\nhref=\"CharCounter.html#config_input\">input</a> can have.", "guessedname": "maxLength", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "<p><img src=\"assets/images/aui-char-counter/main.png\"/></p>\nA base class for CharCounter, providing:\n<ul>\n<li>Limit the number of characters allowed in an input box</li>\n<li>Display the number of characters left</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.CharCounter({\ninput: '#elementId',\ncounter: '#counterDisplayId',\nmaxLength: 10\n});\n</code></pre>\nCheck the list of <a href=\"CharCounter.html#configattributes\">Configuration Attributes</a> available for\nCharCounter."}], "namespace": "", "module": "aui-char-counter", "events": {"counterChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "counterChange", "description": "Fires when the value for the configuration attribute 'counter' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "maxLengthChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "maxLengthChange", "description": "Fires when the value for the configuration attribute 'maxLength' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "inputChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "inputChange", "description": "Fires when the value for the configuration attribute 'input' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "CharCounter", "methods": {"syncUI": {"protected": "", "description": "Sync the CharCounter UI. Lifecycle.", "guessedname": "syncUI", "guessedtype": "function"}, "_onInputChange": {"description": "Fired on input value change.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onInputChange", "guessedtype": "function"}, "checkLength": {"description": "Check the current value of the <a\nhref=\"CharCounter.html#config_input\">input</a>, truncate the data if\nneeded, and re-sync the UI. Fired from <a\nhref=\"CharCounter.html#method__onInputChange\">_onInputChange</a>.", "guessedname": "checkLength", "guessedtype": "function"}, "initializer": {"protected": "", "description": "Construction logic executed during CharCounter instantiation. Lifecycle.", "guessedname": "initializer", "guessedtype": "function"}, "_setMaxLength": {"return": {"type": "Number", "description": ""}, "description": "Setter for <a href=\"CharCounter.html#config_maxLength\">maxLength</a>.", "param": "{Number} v Value of the new <a\nhref=\"CharCounter.html#config_maxLenght\">maxLenght</a>.", "protected": "", "params": [{"type": "Number", "name": "v", "description": " Value of the new <a\nhref=\"CharCounter.html#config_maxLenght\">maxLenght</a>."}], "guessedname": "_setMaxLength", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Bind the events on the CharCounter UI. Lifecycle.", "guessedname": "bindUI", "guessedtype": "function"}, "destroy": {"protected": "", "description": "Descructor lifecycle implementation for the CharCounter class.\nPurges events attached to the node (and all child nodes).", "guessedname": "destroy", "guessedtype": "function"}}, "uses": ["AUI~input~handle"], "superclass": "Base", "file": "aui-char-counter.js", "guessedtype": "property", "extends": "Base", "shortname": "CharCounter", "properties": {"handler": {"protected": "", "type": "EventHandle", "description": "Event handler for the input <a\nhref=\"module_aui-event.html\">aui-event</a> event.", "guessedname": "handler", "guessedtype": "property"}, "CharCounter.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}, "CharCounter.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the CharCounter.", "guessedname": "ATTRS", "guessedtype": "property"}}, "description": "<p><img src=\"assets/images/aui-char-counter/main.png\"/></p>\nA base class for CharCounter, providing:\n<ul>\n<li>Limit the number of characters allowed in an input box</li>\n<li>Display the number of characters left</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.CharCounter({\ninput: '#elementId',\ncounter: '#counterDisplayId',\nmaxLength: 10\n});\n</code></pre>\nCheck the list of <a href=\"CharCounter.html#configattributes\">Configuration Attributes</a> available for\nCharCounter."}, "SliderValueRange": {"name": "SliderValueRange", "configs": {"max": {"default": "100", "type": "{ Number }", "description": "The value associated with the farthest bottom, right position of\nthe rail.  Can be less than the configured <code>min</code> if\nyou want values to increase from right-to-left or bottom-to-top.", "guessedname": "max", "guessedtype": "property"}, "value": {"default": "(inferred from current thumb position)", "type": "{ Number }", "description": "The value associated with the thumb's current position on the\nrail. Defaults to the value inferred from the thumb's current\nposition. Specifying value in the constructor will move the\nthumb to the position that corresponds to the supplied value.", "guessedname": "value", "guessedtype": "property"}, "min": {"default": "0", "type": "{ Number }", "description": "The value associated with the farthest top, left position of the\nrail.  Can be greater than the configured <code>max</code> if you\nwant values to increase from right-to-left or bottom-to-top.", "guessedname": "min", "guessedtype": "property"}}, "namespace": "", "module": "slider", "events": {"valueChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "valueChange", "description": "Fires when the value for the configuration attribute 'value' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "minChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "minChange", "description": "Fires when the value for the configuration attribute 'min' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "maxChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "maxChange", "description": "Fires when the value for the configuration attribute 'max' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "methods": {"setValue": {"return": {"type": "Slider", "description": ""}, "description": "Updates the current value.  Override this if you want to introduce\ninput value parsing or preprocessing.  Otherwise equivalent to\nslider.set( \"value\", v );", "chainable": "", "param": "val {Number} The new value", "params": [{"type": "Number", "name": "val", "description": "  The new value"}], "guessedname": "setValue", "guessedtype": "function"}, "_defThumbMoveFn": {"description": "Dispatch the new position of the thumb into the value setting\noperations.", "param": "e { EventFacade } The host's thumbMove event", "protected": "", "params": [{"type": " EventFacade ", "name": "e", "description": "  The host's thumbMove event"}], "guessedname": "_defThumbMoveFn", "guessedtype": "function"}, "_validateNewMax": {"return": {"type": " Boolean ", "description": "True for numbers.  False otherwise."}, "description": "Validates new values assigned to <code>max</code> attribute.  Numbers\nare acceptable.  Override this to enforce different rules.", "param": "value { mixed } Value assigned to <code>max</code> attribute.", "protected": "", "params": [{"type": " mixed ", "name": "value", "description": "  Value assigned to <code>max</code> attribute."}], "guessedname": "_validateNewMax", "guessedtype": "function"}, "_bindValueLogic": {"protected": "", "description": "Override of stub method in SliderBase that is called at the end of\nits bindUI stage of render().  Subscribes to internal events to\ntrigger UI and related state updates.", "guessedname": "_bindValueLogic", "guessedtype": "function"}, "_valueToOffset": {"return": {"type": " Number ", "description": "The pixel offset"}, "description": "Converts a value into a pixel offset for use in positioning\nthe thumb according to the reverse of the\n<code>_offsetToValue( xy )</code> operation.", "param": "val { Number } The value to map to pixel X or Y position", "protected": "", "params": [{"type": " Number ", "name": "val", "description": "  The value to map to pixel X or Y position"}], "guessedname": "_valueToOffset", "guessedtype": "function"}, "_verifyValue": {"protected": "", "description": "Verifies that the current value is within the min - max range.  If\nnot, value is set to either min or max, depending on which is\ncloser.", "guessedname": "_verifyValue", "guessedtype": "function"}, "_setNewValue": {"return": {"type": " Number ", "description": "Normalized and constrained value"}, "description": "Restricts new values assigned to <code>value</code> attribute to be\nbetween the configured <code>min</code> and <code>max</code>.\nRounds to nearest integer value.", "param": "value { Number } Value assigned to <code>value</code> attribute", "protected": "", "params": [{"type": " Number ", "name": "value", "description": "  Value assigned to <code>value</code> attribute"}], "guessedname": "_setNewValue", "guessedtype": "function"}, "_syncThumbPosition": {"protected": "", "description": "Move the thumb to appropriate position if necessary.  Also resets\nthe cached offsets and recalculates the conversion factor to\ntranslate position to value.", "guessedname": "_syncThumbPosition", "guessedtype": "function"}, "_afterMaxChange": {"description": "Update position according to new max value.  If the new max results\nin the current value being out of range, the value is set to the\ncloser of min or max.", "param": "e { EventFacade } The <code>max</code> attribute change event.", "protected": "", "params": [{"type": " EventFacade ", "name": "e", "description": "  The <code>max</code> attribute change event."}], "guessedname": "_afterMaxChange", "guessedtype": "function"}, "_validateNewMin": {"return": {"type": " Boolean ", "description": "True for numbers.  False otherwise."}, "description": "Validates new values assigned to <code>min</code> attribute.  Numbers\nare acceptable.  Override this to enforce different rules.", "param": "value { mixed } Value assigned to <code>min</code> attribute.", "protected": "", "params": [{"type": " mixed ", "name": "value", "description": "  Value assigned to <code>min</code> attribute."}], "guessedname": "_validateNewMin", "guessedtype": "function"}, "_afterValueChange": {"description": "Propagate change to the thumb position unless the change originated\nfrom the thumbMove event.", "param": "e { EventFacade } The <code>valueChange</code> event.", "protected": "", "params": [{"type": " EventFacade ", "name": "e", "description": "  The <code>valueChange</code> event."}], "guessedname": "_afterValueChange", "guessedtype": "function"}, "_setPosition": {"protected": "", "description": "Positions the thumb in accordance with the translated value.", "guessedname": "_setPosition", "guessedtype": "function"}, "_nearestValue": {"return": {"type": " Number ", "description": "Current min, max, or value if within range"}, "description": "Returns the nearest valid value to the value input.  If the provided\nvalue is outside the min - max range, accounting for min > max\nscenarios, the nearest of either min or max is returned.  Otherwise,\nthe provided value is returned.", "param": "value { mixed } Value to test against current min - max range", "protected": "", "params": [{"type": " mixed ", "name": "value", "description": "  Value to test against current min - max range"}], "guessedname": "_nearestValue", "guessedtype": "function"}, "_calculateFactor": {"protected": "", "description": "Calculates and caches\n(range between max and min) / (rail length)\nfor fast runtime calculation of position -&gt; value.", "guessedname": "_calculateFactor", "guessedtype": "function"}, "_afterMinChange": {"description": "Update position according to new min value.  If the new min results\nin the current value being out of range, the value is set to the\ncloser of min or max.", "param": "e { EventFacade } The <code>min</code> attribute change event.", "protected": "", "params": [{"type": " EventFacade ", "name": "e", "description": "  The <code>min</code> attribute change event."}], "guessedname": "_afterMinChange", "guessedtype": "function"}, "_offsetToValue": {"return": {"type": " mixed ", "description": "Value corresponding to the provided pixel offset"}, "description": "<p>Converts a pixel position into a value.  Calculates current\nthumb offset from the leading edge of the rail multiplied by the\nratio of <code>(max - min) / (constraining dim)</code>.</p>\n<p>Override this if you want to use a different value mapping\nalgorithm.</p>", "param": "offset { Number } X or Y pixel offset", "protected": "", "params": [{"type": " Number ", "name": "offset", "description": "  X or Y pixel offset"}], "guessedname": "_offsetToValue", "guessedtype": "function"}, "getValue": {"return": {"type": "Number", "description": ""}, "description": "Returns the current value.  Override this if you want to introduce\noutput formatting. Otherwise equivalent to slider.get( \"value\" );", "guessedname": "getValue", "guessedtype": "function"}, "_initSliderValueRange": {"protected": "", "description": "Stub for construction logic.  Override if extending this class and\nyou need to set something up during the initializer phase.", "guessedname": "_initSliderValueRange", "guessedtype": "function"}}, "file": "slider-value-range.js", "shortname": "SliderValueRange", "properties": {"_factor": {"protected": "", "type": "{Number}", "description": "Factor used to translate value -&gt; position -&gt; value.", "guessedname": "_factor", "guessedtype": "property"}, "ATTRS": {"description": "Attributes that will be added onto host class.", "protected": "", "static": "", "guessedname": "ATTRS", "guessedtype": "property", "type": "{Object}"}}, "description": "One class of value algorithm that can be built onto SliderBase.  By default,\nvalues range between 0 and 100, but you can configure these on the\nbuilt Slider class by setting the <code>min</code> and <code>max</code>\nconfigurations.  Set the initial value (will cause the thumb to move to the\nappropriate location on the rail) in configuration as well if appropriate."}, "rls": {"name": "rls", "namespace": "", "module": "yui", "guessedname": "rls_handleTimeout", "methods": {"rls_needs": {"description": "Check the environment and the local config to determine if a module has already been registered.", "param": "{String} mod The module to check", "params": [{"type": "String", "name": "mod", "description": " The module to check"}, {"type": "YUI", "name": "instance", "description": " The instance to check against."}], "private": "", "guessedname": "rls_needs", "guessedtype": "function"}, "rls_done": {"param": "{Array} data The modules loaded", "params": [{"type": "Array", "name": "data", "description": " The modules loaded"}], "description": "Calls the callback registered with Y.rls_oncomplete when the RLS request (and it's dependency requests) is done.", "guessedname": "rls_done", "guessedtype": "function"}, "rls_oncomplete": {"params": [{"type": "Callback", "name": "cb", "description": " The callback to execute when the RLS request is complete"}], "param": "{Callback} cb The callback to execute when the RLS request is complete", "guessedname": "rls_oncomplete", "guessedtype": "function"}, "$rls": {"static": "", "params": [{"type": "Object", "name": "req", "description": " The data returned from the RLS server"}, {"type": "String", "name": "req.css", "description": " Does this request need CSS? If so, load the same RLS url with &css=1 attached"}, {"type": "Array", "name": "req.module", "description": " The sorted list of modules to attach to the page."}], "param": "{Object} req The data returned from the RLS server", "private": ""}, "_rls": {"return": {"type": "string", "description": "the url for the remote loader service call, returns false if no modules are required to be fetched (they are in the ENV already)."}, "description": "Implentation for building the remote loader service url.", "since": "3.2.0", "private": "", "params": [{"type": "Array", "name": "what", "description": " the requested modules."}], "param": "{Array} what the requested modules.", "guessedname": "_rls", "guessedtype": "function"}, "rls_locals": {"description": "Checks the environment for local modules and deals with them before firing off an RLS request.\nThis needs to make sure that all dependencies are calculated before it can make an RLS request in\norder to make sure all remote dependencies are evaluated and their requirements are met.", "param": "{YUI} instance The YUI Instance we are working with.", "params": [{"type": "YUI", "name": "instance", "description": " The YUI Instance we are working with."}, {"type": "Array", "name": "argz", "description": " The requested modules."}, {"type": "Callback", "name": "cb", "description": " The callback to be executed when we are done"}, {"type": "YUI", "name": "cb.instance", "description": " The instance is passed back to the callback"}, {"type": "Array", "name": "cb.argz", "description": " The modified list or modules needed to require"}], "private": "", "guessedname": "rls_locals", "guessedtype": "function"}}, "file": "rls.js", "guessedtype": "function", "shortname": "rls", "properties": {"_rls_skins": {"type": "Array", "static": "", "description": "An array of skins loaded via RLS to populate the ENV with when making future requests.", "private": ""}, "_rls_active": {"type": "Object", "static": "", "description": "Hash to hang on to the calling RLS instance so we can deal with the return from the server.", "private": ""}}, "description": "RLS (Remote Loader Service) Support"}, "LoadingMask": {"name": "LoadingMask", "configs": {"messageEl": {"default": "Generated HTML div element.", "type": "String", "description": "Node element to display the message.", "guessedname": "messageEl", "guessedtype": "property"}, "strings": {"default": "{ loading: 'Loading&hellip;' }", "type": "Object", "description": "Strings used on the LoadingMask. See\n<a href=\"Widget.html#method_strings\">strings</a>.", "guessedname": "strings", "guessedtype": "property"}, "target": {"default": "null", "type": "Node | Widget", "description": "Node where the mask will be positioned and re-dimensioned.", "guessedname": "target", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "<p><img src=\"assets/images/aui-loading-mask/main.png\"/></p>\nA base class for LoadingMask, providing:\n<ul>\n<li>Cross browser mask functionality to cover an element or the entire page</li>\n<li>Customizable mask (i.e., background, opacity)</li>\n<li>Display a centered \"loading\" message on the masked node</li>\n</ul>\nQuick Example:<br/>\n<pre><code>node.plug(A.LoadingMask, { background: '#000' });</code></pre>\nCheck the list of <a href=\"LoadingMask.html#configattributes\">Configuration Attributes</a> available for\nLoadingMask."}], "namespace": "", "module": "aui-loading-mask", "events": {"messageElChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "messageElChange", "description": "Fires when the value for the configuration attribute 'messageEl' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "stringsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "stringsChange", "description": "Fires when the value for the configuration attribute 'strings' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "targetChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "targetChange", "description": "Fires when the value for the configuration attribute 'target' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "LoadingMask", "methods": {"hide": {"description": "Invoke the\n<a href=\"LoadingMask.html#property_overlayMask\">overlayMask</a>\n<code>hide</code> method."}, "show": {"description": "Invoke the\n<a href=\"LoadingMask.html#property_overlayMask\">overlayMask</a>\n<code>show</code> method."}, "_createDynamicAttrs": {"description": "Create dynamic attributes listeners to invoke the setter on\n<a href=\"LoadingMask.html#property_overlayMask\">overlayMask</a> after\nthe attribute is set on the LoadingMask instance.", "param": "{Object} config Object literal specifying widget configuration properties.", "protected": "", "params": [{"type": "Object", "name": "config", "description": " Object literal specifying widget configuration properties."}], "guessedname": "_createDynamicAttrs", "guessedtype": "function"}, "refreshMask": {"description": "Invoke the\n<a href=\"LoadingMask.html#property_overlayMask\">overlayMask</a>\n<code>refreshMask</code> method.", "guessedname": "refreshMask", "guessedtype": "function"}, "initializer": {"protected": "", "description": "Construction logic executed during LoadingMask instantiation. Lifecycle.", "guessedname": "initializer", "guessedtype": "function"}, "toggle": {"description": "Invoke the\n<a href=\"LoadingMask.html#property_overlayMask\">overlayMask</a>\n<code>toggle</code> method."}, "_afterVisibleChange": {"description": "Fires after the value of the\n<a href=\"LoadingMask.html#config_visible\">visible</a> attribute change.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_afterVisibleChange", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Bind the events on the LoadingMask UI. Lifecycle.", "guessedname": "bindUI", "guessedtype": "function"}, "_bindOverlayMaskUI": {"protected": "", "description": "Bind events to the\n<a href=\"LoadingMask.html#property_overlayMask\">overlayMask</a>.", "guessedname": "_bindOverlayMaskUI", "guessedtype": "function"}, "_renderOverlayMask": {"protected": "", "description": "Render\n<a href=\"LoadingMask.html#property_overlayMask\">overlayMask</a>\ninstance.", "guessedname": "_renderOverlayMask", "guessedtype": "function"}, "centerMessage": {"description": "Center the\n<a href=\"LoadingMask.html#config_messageEl\">messageEl</a> with the\n<a href=\"LoadingMask.html#config_target\">target</a> node.", "guessedname": "centerMessage", "guessedtype": "function"}, "renderUI": {"protected": "", "description": "Create the DOM structure for the LoadingMask. Lifecycle.", "guessedname": "renderUI", "guessedtype": "function"}}, "extends": "Plugin.Base", "superclass": "Plugin.Base", "file": "aui-loading-mask.js", "guessedtype": "property", "shortname": "LoadingMask", "properties": {"LoadingMask.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the LoadingMask.", "guessedname": "ATTRS", "guessedtype": "property"}, "LoadingMask.NS": {"type": "String", "static": "", "description": "Static property provides a string to identify the namespace.", "guessedname": "NS", "guessedtype": "property"}, "overlayMask": {"protected": "", "type": "OverlayMask", "description": "Stores the <a href=\"OverlayMask.html\">OverlayMask</a> used\ninternally.", "guessedname": "overlayMask", "guessedtype": "property"}, "LoadingMask.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}}, "description": "<p><img src=\"assets/images/aui-loading-mask/main.png\"/></p>\nA base class for LoadingMask, providing:\n<ul>\n<li>Cross browser mask functionality to cover an element or the entire page</li>\n<li>Customizable mask (i.e., background, opacity)</li>\n<li>Display a centered \"loading\" message on the masked node</li>\n</ul>\nQuick Example:<br/>\n<pre><code>node.plug(A.LoadingMask, { background: '#000' });</code></pre>\nCheck the list of <a href=\"LoadingMask.html#configattributes\">Configuration Attributes</a> available for\nLoadingMask."}, "Queue": {"name": "Queue", "constructors": [{"params": [{"type": "MIXED", "name": "item*", "description": " 0..n items to seed the queue."}], "description": "A simple FIFO queue.  Items are added to the Queue with add(1..n items) and\nremoved using next()."}], "namespace": "", "module": "yui", "methods": {"last": {"return": {"type": "MIXED", "description": "the last item in the queue."}, "description": "Get the last in the queue. LIFO support.", "guessedname": "last", "guessedtype": "function"}, "indexOf": {"return": {"type": "Number", "description": "the index of the item or -1 if not found"}, "description": "Returns the current index in the queue of the specified item", "param": "needle {MIXED} the item to search for", "params": [{"type": "MIXED", "name": "needle", "description": "  the item to search for"}], "guessedname": "indexOf", "guessedtype": "function"}, "_init": {"protected": "", "description": "Initialize the queue", "guessedname": "_init", "guessedtype": "function"}, "remove": {"param": "item {MIXED} an item in the queue", "params": [{"type": "MIXED", "name": "item", "description": "  an item in the queue"}], "description": "Removes the referenced item from the queue", "guessedname": "remove", "guessedtype": "function"}, "next": {"return": {"type": "MIXED", "description": "the next item in the queue."}, "description": "Get the next item in the queue. FIFO support", "guessedname": "next", "guessedtype": "function"}, "add": {"return": {"type": "object", "description": "this queue."}, "description": "Add 0..n items to the end of the queue.", "param": "{MIXED} item* 0..n items.", "params": [{"type": "MIXED", "name": "item*", "description": " 0..n items."}], "guessedname": "add", "guessedtype": "function"}, "promote": {"param": "item {MIXED} an item in the queue", "params": [{"type": "MIXED", "name": "item", "description": "  an item in the queue"}], "description": "Moves the referenced item to the head of the queue", "guessedname": "promote", "guessedtype": "function"}, "size": {"return": {"type": "Number", "description": "The size."}, "description": "Returns the current number of queued items.", "guessedname": "size", "guessedtype": "function"}}, "file": "aui.js", "shortname": "Queue", "properties": {"_q": {"protected": "", "type": "Array", "description": "The collection of enqueued items", "guessedname": "_q", "guessedtype": "property"}}, "description": "A simple FIFO queue.  Items are added to the Queue with add(1..n items) and\nremoved using next()."}, "BaseOptionsCellEditor": {"description": "Abstract class BaseOptionsCellEditor for options attribute support.\nCheck the list of <a href=\"BaseOptionsCellEditor.html#configattributes\">Configuration Attributes</a> available for\nBaseCellEditor.", "module": "aui-component", "abstract": "", "namespace": "", "param": "config {Object} Object literal specifying widget configuration properties.", "guessedname": "BaseOptionsCellEditor", "extends": "A.BaseCellEditor", "superclass": "A.BaseCellEditor", "file": "aui-datatable.js", "guessedtype": "property", "shortname": "BaseOptionsCellEditor", "name": "BaseOptionsCellEditor"}, "Selection": {"name": "Selection", "constructors": [{"description": "Wraps some common Selection/Range functionality into a simple object"}], "namespace": "", "module": "editor", "methods": {"wrapContent": {"return": {"type": "NodeList", "description": "A NodeList of all items in the selection."}, "description": "Get all elements inside a selection and wrap them with a new element and return a NodeList of all elements touched.", "param": "{String} tag The tag to wrap all selected items with.", "params": [{"type": "String", "name": "tag", "description": " The tag to wrap all selected items with."}], "guessedname": "wrapContent", "guessedtype": "function"}, "focusCursor": {"return": {"type": "Node", "description": ""}, "description": "Gets a stored cursor and focuses it for editing, must be called sometime after setCursor", "guessedname": "focusCursor", "guessedtype": "function"}, "getText": {"return": {"type": "String", "description": "The string of text"}, "description": "Returns the innerHTML of a node with all HTML tags removed.", "param": "{Node} node The Node instance to remove the HTML from", "static": "", "guessedname": "getText", "guessedtype": "function", "params": [{"type": "Node", "name": "node", "description": " The Node instance to remove the HTML from"}]}, "replace": {"return": {"type": "Node", "description": "The node inserted."}, "description": "Find and replace a string inside a text node and replace it with HTML focusing the node after \nto allow you to continue to type.", "param": "{String} se The string to search for.", "params": [{"type": "String", "name": "se", "description": " The string to search for."}, {"type": "String", "name": "re", "description": " The string of HTML to replace it with."}], "guessedname": "replace", "guessedtype": "function"}, "insertAtCursor": {"return": {"type": "Node", "description": "The inserted Node."}, "description": "Insert HTML at the current cursor position, this method gives you control over the text node to insert into and the offset where to put it.", "param": "{String} html The HTML to insert.", "params": [{"type": "String", "name": "html", "description": " The HTML to insert."}, {"type": "Node", "name": "node", "description": " The text node to break when inserting."}, {"type": "Number", "name": "offset", "description": " The left offset of the text node to break and insert the new content."}, {"type": "Boolean", "name": "collapse", "description": " Should the range be collapsed after insertion. default: false"}], "guessedname": "insertAtCursor", "guessedtype": "function"}, "removeCursor": {"return": {"type": "Node", "description": ""}, "description": "Remove the cursor placeholder from the DOM.", "param": "{Boolean} keep Setting this to true will keep the node, but remove the unique parts that make it the cursor.", "params": [{"type": "Boolean", "name": "keep", "description": " Setting this to true will keep the node, but remove the unique parts that make it the cursor."}], "guessedname": "removeCursor", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": ""}, "description": "Generic toString for logging.", "guessedname": "toString", "guessedtype": "function"}, "filterBlocks": {"static": "", "description": "Method attempts to replace all \"orphined\" text nodes in the main body by wrapping them with a <p>. Called from filter.", "guessedname": "filterBlocks", "guessedtype": "function"}, "cleanCursor": {"static": "", "description": "Called from Editor keydown to remove the \"extra\" space before the cursor.", "guessedname": "cleanCursor", "guessedtype": "function"}, "_wrapBlock": {"guessedname": "_wrapBlock", "static": "", "description": "Wraps an array of elements in a Block level tag", "private": "", "guessedtype": "function"}, "unfilter": {"static": "", "return": {"type": "String", "description": "The filtered HTML"}, "description": "Undoes what filter does enough to return the HTML from the Editor, then re-applies the filter.", "guessedname": "unfilter", "guessedtype": "function"}, "removeFontFamily": {"static": "", "description": "Utility method to remove dead font-family styles from an element.", "guessedname": "removeFontFamily", "guessedtype": "function"}, "selectNode": {"return": {"type": "Selection", "description": ""}, "description": "Select a Node (hilighting it).", "chainable": "", "param": "{Node} node The node to select", "params": [{"type": "Node", "name": "node", "description": " The node to select"}, {"type": "Boolean", "name": "collapse", "description": " Should the range be collapsed after insertion. default: false"}], "guessedname": "selectNode", "guessedtype": "function"}, "getSelected": {"return": {"type": "NodeList", "description": "A NodeList of all items in the selection."}, "description": "Get all the nodes in the current selection. This method will actually perform a filter first.\nThen it calls doc.execCommand('fontname', null, 'yui-tmp') to touch all nodes in the selection.\nThe it compiles a list of all nodes affected by the execCommand and builds a NodeList to return.", "guessedname": "getSelected", "guessedtype": "function"}, "setCursor": {"return": {"type": "Node", "description": ""}, "description": "Put a placeholder in the DOM at the current cursor position.", "guessedname": "setCursor", "guessedtype": "function"}, "resolve": {"return": {"type": "Node", "description": "The Resolved node"}, "description": "Resolve a node from the selection object and return a Node instance", "param": "{HTMLElement} n The HTMLElement to resolve. Might be a TextNode, gives parentNode.", "static": "", "guessedname": "resolve", "guessedtype": "function", "params": [{"type": "HTMLElement", "name": "n", "description": " The HTMLElement to resolve. Might be a TextNode, gives parentNode."}]}, "remove": {"chainable": "", "return": {"type": "Selection", "description": ""}, "description": "Destroy the range.", "guessedname": "remove", "guessedtype": "function"}, "filter": {"static": "", "description": "Performs a prefilter on all nodes in the editor. Looks for nodes with a style: fontFamily or font face\nIt then creates a dynamic class assigns it and removed the property. This is so that we don't lose\nthe fontFamily when selecting nodes.", "guessedname": "filter", "guessedtype": "function"}, "getCursor": {"return": {"type": "Node", "description": ""}, "description": "Get the placeholder in the DOM at the current cursor position.", "guessedname": "getCursor", "guessedtype": "function"}, "_swap": {"return": {"type": "HTMLElement", "description": "The new node"}, "description": "Swap an element, with another element", "private": "", "params": [{"type": "HTMLElement", "name": "n", "description": " The node to swap"}, {"type": "String", "name": "tag", "description": " The tag to use when creating the new element."}], "param": "{HTMLElement} n The node to swap", "guessedname": "_swap", "guessedtype": "function"}, "createRange": {"return": {"type": "RangeObject", "description": ""}, "description": "Wrapper for the different range creation methods.", "guessedname": "createRange", "guessedtype": "function"}, "_wrap": {"return": {"type": "HTMLElement", "description": "The wrapped node"}, "description": "Wrap an element, with another element", "private": "", "params": [{"type": "HTMLElement", "name": "n", "description": " The node to wrap"}, {"type": "String", "name": "tag", "description": " The tag to use when creating the new element."}], "param": "{HTMLElement} n The node to wrap", "guessedname": "_wrap", "guessedtype": "function"}, "insertContent": {"return": {"type": "Node", "description": "The inserted Node."}, "description": "Insert HTML at the current cursor position and return a Node instance of the newly inserted element.", "param": "{String} html The HTML to insert.", "params": [{"type": "String", "name": "html", "description": " The HTML to insert."}], "guessedname": "insertContent", "guessedtype": "function"}}, "file": "editor.js", "shortname": "Selection", "properties": {"TMP": {"static": "", "description": "The temporary fontname applied to a selection to retrieve their values: yui-tmp", "guessedname": "TMP", "guessedtype": "property"}, "isCollapsed": {"type": "Boolean", "description": "Flag to show if the range is collapsed or not", "guessedname": "isCollapsed", "guessedtype": "property"}, "ALL": {"static": "", "description": "The selector to use when looking for Nodes to cache the value of: [style],font[face]", "guessedname": "ALL", "guessedtype": "property"}, "BLOCKS": {"static": "", "description": "The selector to use when looking for block level items.", "guessedname": "BLOCKS", "guessedtype": "property"}, "focusNode": {"type": "Node", "description": "A Node instance of the parentNode of the focusNode of the range", "guessedname": "focusNode", "guessedtype": "property"}, "anchorOffset": {"type": "Number", "description": "The offset from the range object", "guessedname": "anchorOffset", "guessedtype": "property"}, "focusTextNode": {"type": "Node", "description": "A Node instance of the actual textNode of the range.", "guessedname": "focusTextNode", "guessedtype": "property"}, "text": {"type": "String", "description": "Range text value", "guessedname": "text", "guessedtype": "property"}, "_selection": {"private": "", "description": "The actual Selection/Range object", "guessedname": "_selection", "guessedtype": "property"}, "REG_NON": {"static": "", "description": "Regular Expression to determine if a string has a non-character in it", "guessedname": "REG_NON", "guessedtype": "property"}, "CURSOR": {"static": "", "description": "The default HTML used to focus the cursor..", "guessedname": "CURSOR", "guessedtype": "property"}, "REG_NOHTML": {"static": "", "description": "Regular Expression to remove all HTML from a string", "guessedname": "REG_NOHTML", "guessedtype": "property"}, "anchorTextNode": {"type": "Node", "description": "A Node instance of the actual textNode of the range.", "guessedname": "anchorTextNode", "guessedtype": "property"}, "REG_CHAR": {"static": "", "description": "Regular Expression to determine if a string has a character in it", "guessedname": "REG_CHAR", "guessedtype": "property"}, "anchorNode": {"type": "Node", "description": "A Node instance of the parentNode of the anchorNode of the range", "guessedname": "anchorNode", "guessedtype": "property"}, "REG_FONTFAMILY": {"static": "", "description": "Regular Expression used to find dead font-family styles", "guessedname": "REG_FONTFAMILY", "guessedtype": "property"}, "DEFAULT_TAG": {"static": "", "description": "The default tag to use when creating elements: span", "guessedname": "DEFAULT_TAG", "guessedtype": "property"}, "CUR_WRAPID": {"static": "", "description": "The id used to wrap the inner space of the cursor position", "guessedname": "CUR_WRAPID", "guessedtype": "property"}, "focusOffset": {"type": "Number", "description": "The offset from the range object", "guessedname": "focusOffset", "guessedtype": "property"}}, "description": "Wraps some common Selection/Range functionality into a simple object"}, "EditorBase": {"name": "EditorBase", "for": "EditorBase", "configs": {"content": {"description": "The content to load into the Editor Frame", "guessedname": "content", "guessedtype": "property"}, "defaultblock": {"type": "String", "description": "The default tag to use for block level items, defaults to: p", "guessedname": "defaultblock", "guessedtype": "property"}, "linkedcss": {"type": "String", "description": "An array of url's to external linked style sheets", "guessedname": "linkedcss", "guessedtype": "property"}, "dir": {"description": "The value of the dir attribute on the HTML element of the frame. Default: ltr", "guessedname": "dir", "guessedtype": "property"}, "extracss": {"type": "String", "description": "A string of CSS to add to the Head of the Editor", "guessedname": "extracss", "guessedtype": "property"}}, "constructors": [{"description": "Base class for Editor. Handles the business logic of Editor, no GUI involved only utility methods and events."}], "namespace": "", "module": "editor", "events": {"contentChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "contentChange", "description": "Fires when the value for the configuration attribute 'content' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "dirChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "dirChange", "description": "Fires when the value for the configuration attribute 'dir' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "ready": {"description": "Fired after the frame is ready.", "param": "{Event.Facade} event An Event Facade object.", "params": [{"type": "Event.Facade", "name": "event", "description": " An Event Facade object."}], "guessedname": "skinnable", "guessedtype": "property", "type": "{Event.Custom}"}, "nodeChange": {"type": "{Event.Custom}", "params": [{"type": "Event.Facade", "name": "event", "description": " An Event Facade object with the following specific properties added:\n<dl>\n<dt>changedEvent</dt><dd>The event that caused the nodeChange</dd>\n<dt>changedNode</dt><dd>The node that was interacted with</dd>\n<dt>changedType</dt><dd>The type of change: mousedown, mouseup, right, left, backspace, tab, enter, etc..</dd>\n<dt>commands</dt><dd>The list of execCommands that belong to this change and the dompath that's associated with the changedNode</dd>\n<dt>classNames</dt><dd>An array of classNames that are applied to the changedNode and all of it's parents</dd>\n<dt>dompath</dt><dd>A sorted array of node instances that make up the DOM path from the changedNode to body.</dd>\n<dt>backgroundColor</dt><dd>The cascaded backgroundColor of the changedNode</dd>\n<dt>fontColor</dt><dd>The cascaded fontColor of the changedNode</dd>\n<dt>fontFamily</dt><dd>The cascaded fontFamily of the changedNode</dd>\n<dt>fontSize</dt><dd>The cascaded fontSize of the changedNode</dd>\n</dl>"}], "description": "Fired from several mouse/key/paste event points.", "param": "{Event.Facade} event An Event Facade object with the following specific properties added:\n<dl>\n<dt>changedEvent</dt><dd>The event that caused the nodeChange</dd>\n<dt>changedNode</dt><dd>The node that was interacted with</dd>\n<dt>changedType</dt><dd>The type of change: mousedown, mouseup, right, left, backspace, tab, enter, etc..</dd>\n<dt>commands</dt><dd>The list of execCommands that belong to this change and the dompath that's associated with the changedNode</dd>\n<dt>classNames</dt><dd>An array of classNames that are applied to the changedNode and all of it's parents</dd>\n<dt>dompath</dt><dd>A sorted array of node instances that make up the DOM path from the changedNode to body.</dd>\n<dt>backgroundColor</dt><dd>The cascaded backgroundColor of the changedNode</dd>\n<dt>fontColor</dt><dd>The cascaded fontColor of the changedNode</dd>\n<dt>fontFamily</dt><dd>The cascaded fontFamily of the changedNode</dd>\n<dt>fontSize</dt><dd>The cascaded fontSize of the changedNode</dd>\n</dl>"}, "extracssChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "extracssChange", "description": "Fires when the value for the configuration attribute 'extracss' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "linkedcssChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "linkedcssChange", "description": "Fires when the value for the configuration attribute 'linkedcss' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "defaultblockChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "defaultblockChange", "description": "Fires when the value for the configuration attribute 'defaultblock' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "EditorBase", "methods": {"_onFrameKeyPress": {"private": "", "description": "Fires nodeChange event", "guessedname": "_onFrameKeyPress", "guessedtype": "function"}, "render": {"return": {"type": "EditorBase", "description": ""}, "description": "Renders the Y.Frame to the passed node.", "chainable": "", "param": "{Selector/HTMLElement/Node} node The node to append the Editor to", "params": [{"type": "Selector/HTMLElement/Node", "name": "node", "description": " The node to append the Editor to"}], "guessedname": "render", "guessedtype": "function"}, "copyStyles": {"param": "{Node} from The Node instance to copy the styles from", "params": [{"type": "Node", "name": "from", "description": " The Node instance to copy the styles from"}, {"type": "Node", "name": "to", "description": " The Node instance to copy the styles to"}], "description": "Copy certain styles from one node instance to another (used for new paragraph creation mainly)", "guessedname": "copyStyles", "guessedtype": "function"}, "_onPaste": {"private": "", "description": "Fires nodeChange event", "guessedname": "_onPaste", "guessedtype": "function"}, "focus": {"return": {"type": "EditorBase", "description": ""}, "description": "Focus the contentWindow of the iframe", "chainable": "", "param": "{Function} fn Callback function to execute after focus happens", "params": [{"type": "Function", "name": "fn", "description": " Callback function to execute after focus happens"}], "guessedname": "focus", "guessedtype": "function"}, "_defNodeChangeFn": {"description": "The default handler for the nodeChange event.", "param": "{Event} e The event", "params": [{"type": "Event", "name": "e", "description": " The event"}], "private": "", "guessedname": "_defNodeChangeFn", "guessedtype": "function"}, "_onFrameKeyDown": {"private": "", "description": "Fires nodeChange event", "guessedname": "_onFrameKeyDown", "guessedtype": "function"}, "_onFrameMouseDown": {"private": "", "description": "Fires nodeChange event", "guessedname": "_onFrameMouseDown", "guessedtype": "function"}, "hide": {"chainable": "", "return": {"type": "EditorBase", "description": ""}, "description": "Handles the hiding of the Editor instance. Currently only handles the iframe", "guessedname": "hide", "guessedtype": "function"}, "getInstance": {"return": {"type": "YUI", "description": "The YUI instance bound to the frame."}, "description": "Get the YUI instance of the frame", "guessedname": "getInstance", "guessedtype": "function"}, "show": {"chainable": "", "return": {"type": "EditorBase", "description": ""}, "description": "Handles the showing of the Editor instance. Currently only handles the iframe", "guessedname": "show", "guessedtype": "function"}, "_onFrameActivate": {"private": "", "description": "Moves the cached selection bookmark back so IE can place the cursor in the right place.", "guessedname": "_onFrameActivate", "guessedtype": "function"}, "getContent": {"return": {"type": "String", "description": "The filtered content of the Editor"}, "description": "(Un)Filters the content of the Editor, cleaning YUI related code. //TODO better filtering", "guessedname": "getContent", "guessedtype": "function"}, "getDomPath": {"param": "{Node} node The Node to start from", "params": [{"type": "Node", "name": "node", "description": " The Node to start from"}], "description": "Walk the dom tree from this node up to body, returning a reversed array of parents.", "guessedname": "getDomPath", "guessedtype": "function"}, "_afterFrameReady": {"private": "", "description": "After frame ready, bind mousedown & keyup listeners", "guessedname": "_afterFrameReady", "guessedtype": "function"}, "_resolveChangedNode": {"description": "Resolves the e.changedNode in the nodeChange event if it comes from the document. If\nthe event came from the document, it will get the last child of the last child of the document\nand return that instead.", "param": "{Node} n The node to resolve", "params": [{"type": "Node", "name": "n", "description": " The node to resolve"}], "private": "", "guessedname": "_resolveChangedNode", "guessedtype": "function"}, "_beforeFrameDeactivate": {"private": "", "description": "Caches the current cursor position in IE.", "guessedname": "_beforeFrameDeactivate", "guessedtype": "function"}, "NORMALIZE_FONTSIZE": {"static": "", "description": "Pulls the fontSize from a node, then checks for string values (x-large, x-small)\nand converts them to pixel sizes. If the parsed size is different from the original, it calls\nnode.setStyle to update the node with a pixel size for normalization.", "guessedname": "NORMALIZE_FONTSIZE", "guessedtype": "function"}, "_onFrameMouseUp": {"private": "", "description": "Fires nodeChange event", "guessedname": "_onFrameMouseUp", "guessedtype": "function"}, "execCommand": {"return": {"type": "Node/NodeList", "description": "The Node or Nodelist affected by the command. Only returns on override commands, not browser defined commands."}, "description": "Pass through to the frame.execCommand method", "param": "{String} cmd The command to pass: inserthtml, insertimage, bold", "params": [{"type": "String", "name": "cmd", "description": " The command to pass: inserthtml, insertimage, bold"}, {"type": "String", "name": "val", "description": " The optional value of the command: Helvetica"}], "guessedname": "execCommand", "guessedtype": "function"}, "FILTER_RGB": {"return": {"type": "", "description": "String"}, "description": "Converts an RGB color string to a hex color, example: rgb(0, 255, 0) converts to #00ff00", "param": "String css The CSS string containing rgb(#,#,#);", "static": "", "guessedname": "FILTER_RGB", "guessedtype": "function", "params": [{"type": "", "name": "String", "description": " css The CSS string containing rgb(#,#,#);"}]}, "_onFrameKeyUp": {"private": "", "description": "Fires nodeChange event for keyup on specific keys", "guessedname": "_onFrameKeyUp", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "editor.js", "guessedtype": "function", "shortname": "EditorBase", "properties": {"_currentSelectionTimer": {"private": "", "description": "Holds the timer for selection clearing", "guessedname": "_currentSelectionTimer", "guessedtype": "property"}, "USE": {"type": "Array", "static": "", "description": "The default modules to use inside the Frame", "guessedname": "USE", "guessedtype": "property"}, "_currentSelectionClear": {"private": "", "description": "Flag to determine if we can clear the selection or not.", "guessedname": "_currentSelectionClear", "guessedtype": "property"}, "NAME": {"static": "", "description": "The Class Name: editorBase", "guessedname": "NAME", "guessedtype": "property"}, "frame": {"description": "Internal reference to the Y.Frame instance", "guessedname": "frame", "guessedtype": "property"}, "NC_KEYS": {"type": "Object", "static": "", "description": "Hash table of keys to fire a nodeChange event for.", "guessedname": "NC_KEYS", "guessedtype": "property"}, "_lastBookmark": {"private": "", "description": "Holder for the selection bookmark in IE.", "guessedname": "_lastBookmark", "guessedtype": "property"}, "TABKEY": {"static": "", "description": "The HTML markup to use for the tabkey", "guessedname": "TABKEY", "guessedtype": "property"}, "_currentSelection": {"private": "", "description": "Caches a copy of the selection for key events. Only creating the selection on keydown", "guessedname": "_currentSelection", "guessedtype": "property"}, "STRINGS": {"static": "", "description": "Editor Strings.  By default contains only the `title` property for the\nTitle of frame document (default \"Rich Text Editor\").", "guessedname": "STRINGS", "guessedtype": "property"}, "TAG2CMD": {"static": "", "description": "A hash table of tags to their execcomand's", "guessedname": "TAG2CMD", "guessedtype": "property"}}, "description": "Base class for Editor. Handles the business logic of Editor, no GUI involved only utility methods and events."}, "DataType.XML": {"name": "DataType.XML", "description": "DataType.XML provides a set of utility functions to operate against XML documents.", "namespace": "", "module": "datatype", "guessedname": "LANG", "static": "", "file": "datatype-xml-format.js", "guessedtype": "property", "shortname": "DataType.XML", "methods": {"parse": {"return": {"type": "XMLDoc", "description": "XML Document."}, "description": "Converts data to type XMLDocument.", "param": "data {String} Data to convert.", "params": [{"type": "String", "name": "data", "description": "  Data to convert."}], "guessedname": "parse", "guessedtype": "function"}, "format": {"return": {"type": "String", "description": "String."}, "description": "Converts data to type XMLDocument.", "param": "data {XMLDoc} Data to convert.", "params": [{"type": "XMLDoc", "name": "data", "description": "  Data to convert."}], "guessedname": "format", "guessedtype": "function"}}}, "Recordset": {"name": "Recordset", "configs": {"records": {"type": "array", "description": "An array of records that the recordset is storing", "guessedname": "records", "guessedtype": "property"}, "key": {"type": "string", "description": "The ID to use as the key in the hash table.", "guessedname": "key", "guessedtype": "property"}, "table": {"type": "object", "description": "A hash table where the ID of the record is the key, and the record\ninstance is the value.", "guessedname": "table", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Configuration object with initial attribute values"}], "description": "The Recordset utility provides a standard way for dealing with\na collection of similar objects.\nProvides the base Recordset implementation, which can be extended to add\nadditional functionality, such as custom indexing. sorting, and filtering."}], "namespace": "", "module": "recordset", "guessedname": "Recordset", "methods": {"_defRemoveFn": {"private": "", "description": "Helper method called upon by remove() - it is used to remove record(s) from the recordset", "guessedname": "_defRemoveFn", "guessedtype": "function"}, "_defEmptyHash": {"private": "", "description": "Method called whenever \"recordset:empty\" event is fired. It empties the hash table.", "guessedname": "_defEmptyHash", "guessedtype": "function"}, "_defEmptyFn": {"private": "", "description": "Helper method called upon by empty() - it is used to empty the recordset", "guessedname": "_defEmptyFn", "guessedtype": "function"}, "initializer": {"protected": "", "description": "Publish default functions for events. Create the initial hash table.", "guessedname": "initializer", "guessedtype": "function"}, "_changeToRecord": {"return": {"type": "Record", "description": "A Record instance."}, "description": "Helper method - it takes an object bag and converts it to a Y.Record", "private": "", "params": [{"type": "Object|Record", "name": "obj", "description": "  Any objet literal or Y.Record instance"}], "param": "obj {Object|Record} Any objet literal or Y.Record instance", "guessedname": "_changeToRecord", "guessedtype": "function"}, "getLength": {"return": {"type": "Number", "description": "Number of records in the recordset"}, "description": "Returns the length of the recordset", "guessedname": "getLength", "guessedtype": "function"}, "getRecord": {"return": {"type": "Record", "description": "A Y.Record instance"}, "description": "Returns the record with particular ID or index", "param": "i {String, Number} The ID of the record if a string, or the index if a number.", "params": [{"type": "String, Number", "name": "i", "description": "  The ID of the record if a string, or the index if a number."}], "guessedname": "getRecord", "guessedtype": "function"}, "getRecordByIndex": {"return": {"type": "Record", "description": "A Y.Record instance"}, "description": "Returns the record at a particular index", "param": "i {Number} Index at which the required record resides", "params": [{"type": "Number", "name": "i", "description": "  Index at which the required record resides"}], "guessedname": "getRecordByIndex", "guessedtype": "function"}, "add": {"return": {"type": "Recordset", "description": "The updated recordset instance"}, "description": "Adds one or more Records to the RecordSet at the given index. If index is null, then adds the Records to the end of the RecordSet.", "param": "{Record|Object|Array} oData A Y.Record instance, An object literal of data or an array of object literals", "params": [{"type": "Record|Object|Array", "name": "oData", "description": " A Y.Record instance, An object literal of data or an array of object literals"}, {"type": "Number", "name": "[index]", "description": "  [index] Index at which to add the record(s)"}], "guessedname": "add", "guessedtype": "function"}, "_defAddHash": {"private": "", "description": "Method called whenever \"recordset:add\" event is fired. It adds the new record(s) to the hashtable.", "guessedname": "_defAddHash", "guessedtype": "function"}, "_syncHashTable": {"private": "", "description": "Syncs up the private hash methods with their appropriate triggering events.", "guessedname": "_syncHashTable", "guessedtype": "function"}, "_defRemoveHash": {"private": "", "description": "Method called whenever \"recordset:remove\" event is fired. It removes the record(s) from the recordset.", "guessedname": "_defRemoveHash", "guessedtype": "function"}, "empty": {"return": {"type": "Recordset", "description": "The updated recordset instance"}, "description": "Empties the recordset", "guessedname": "empty", "guessedtype": "function"}, "_defUpdateHash": {"private": "", "description": "Method called whenever \"recordset:update\" event is fired. It updates the record(s) by adding the new ones and removing the overwritten ones.", "guessedname": "_defUpdateHash", "guessedtype": "function"}, "getValuesByKey": {"return": {"type": "Array", "description": "An array of values for the given _key_ if supplied.\nOtherwise, an array of each record's data hash."}, "description": "Gets an array of values for a data _key_ in the set's records.  If no _key_\nis supplied, the returned array will contain the full data object for each\nrecord.", "param": "{String} [key] Data property to get from all records", "params": [{"type": "String", "name": "[key]", "description": " Data property to get from all records"}], "guessedname": "getValuesByKey", "guessedtype": "function"}, "update": {"return": {"type": "Recordset", "description": "The updated recordset instance"}, "description": "Updates the recordset with the new records passed in. Overwrites existing\nrecords when updating the index with the new records.", "param": "{Record|Object|Array} data A Y.Record instance, An object literal of\ndata or an array of object literals", "params": [{"type": "Record|Object|Array", "name": "data", "description": " A Y.Record instance, An object literal of\ndata or an array of object literals"}, {"type": "Number", "name": "[index]", "description": " The index to start updating from."}], "guessedname": "update", "guessedtype": "function"}, "getRecordsByIndex": {"return": {"type": "Array", "description": "An array of Y.Record instances"}, "description": "Returns a range of records beginning at particular index", "param": "index {Number} Index at which the required record resides", "params": [{"type": "Number", "name": "index", "description": "  Index at which the required record resides"}, {"type": "Number", "name": "range", "description": "  (Optional) Number of records to retrieve. The default is 1"}], "guessedname": "getRecordsByIndex", "guessedtype": "function"}, "_defUpdateFn": {"private": "", "description": "Helper method called upon by update() - it is used to update the recordset", "guessedname": "_defUpdateFn", "guessedtype": "function"}, "remove": {"return": {"type": "Recordset", "description": "The updated recordset instance"}, "description": "Removes one or more Records to the RecordSet at the given index. If index\nis null, then removes a single Record from the end of the RecordSet.", "param": "{Number} [index] Index at which to remove the record(s) from", "params": [{"type": "Number", "name": "[index]", "description": " Index at which to remove the record(s) from"}, {"type": "Number", "name": "[range]", "description": " Number of records to remove (including the one\nat the index)"}], "guessedname": "remove", "guessedtype": "function"}, "_setHashTable": {"private": "", "description": "Sets up the hashtable with all the records currently in the recordset", "guessedname": "_setHashTable", "guessedtype": "function"}, "_recordSetUpdated": {"private": "", "description": "Event that is fired whenever the recordset is changed. Note that multiple simultaneous changes still fires this event once. (ie: Adding multiple records via an array will only fire this event once at the completion of all the additions)", "guessedname": "_recordsetChanged", "guessedtype": "function"}, "_defAddFn": {"guessedname": "_defAddFn", "return": {"type": "Record", "description": "A Record instance."}, "description": "Helper method called upon by add() - it is used to create a new\nrecord(s) in the recordset", "private": "", "guessedtype": "function"}}, "uses": ["ArrayList"], "superclass": "Base", "file": "recordset-base.js", "guessedtype": "property", "extends": "Base", "shortname": "Recordset", "events": {"update": {"preventable": "_defUpdateFn", "description": "<p>At least one record is being updated. Additional properties of\nthe event are:</p>\n<dl>\n<dt>updated</dt>\n<dd>Array of records with updated values</dd>\n<dt>overwritten</dt>\n<dd>Array of current records that will be replaced</dd>\n<dt>index</dt>\n<dd>The starting index in the Recordset's internal\narray from which to update will apply</dd>\n</dl>\n<p>Preventing this event will cause the records NOT to be\nupdated in the Recordset's internal collection.</p>", "guessedname": "update", "guessedtype": "property"}, "remove": {"preventable": "_defRemoveFn", "description": "<p>At least one record is being removed. Additional properties of\nthe event are:</p>\n<dl>\n<dt>removed</dt>\n<dd>Array of records to be removed</dd>\n<dt>range</dt>\n<dd>Number of records to be removed</dd>\n<dt>index</dt>\n<dd>The starting index in the Recordset's internal\narray from which to remove records</dd>\n</dl>\n<p>Preventing this event will cause the records NOT to be\nremoved from the Recordset's internal collection.</p>", "guessedname": "remove", "guessedtype": "property"}, "recordsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "recordsChange", "description": "Fires when the value for the configuration attribute 'records' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "keyChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "keyChange", "description": "Fires when the value for the configuration attribute 'key' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "add": {"preventable": "_defAddFn", "description": "<p>At least one record is being added. Additional properties of\nthe event are:</p>\n<dl>\n<dt>added</dt>\n<dd>Array of new records to be added</dd>\n<dt>index</dt>\n<dd>The insertion index in the Recordset's internal\narray</dd>\n</dl>\n<p>Preventing this event will cause the new records NOT to be\nadded to the Recordset's internal collection.</p>", "guessedname": "add", "guessedtype": "property"}, "tableChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "tableChange", "description": "Fires when the value for the configuration attribute 'table' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "empty": {"preventable": "_defEmptyFn", "description": "The Recordset is being flushed of all records.", "guessedname": "empty", "guessedtype": "property"}}, "description": "The Recordset utility provides a standard way for dealing with\na collection of similar objects.\nProvides the base Recordset implementation, which can be extended to add\nadditional functionality, such as custom indexing. sorting, and filtering."}, "DataTable.Base": {"name": "DataTable.Base", "constructors": [{"description": "Base class for the DataTable widget."}], "namespace": "", "module": "datatable", "events": {"trTemplateChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "trTemplateChange", "description": "Fires when the value for the configuration attribute 'trTemplate' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "columnsetChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "columnsetChange", "description": "Fires when the value for the configuration attribute 'columnset' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "tdValueTemplateChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "tdValueTemplateChange", "description": "Fires when the value for the configuration attribute 'tdValueTemplate' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "summaryChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "summaryChange", "description": "Fires when the value for the configuration attribute 'summary' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "captionChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "captionChange", "description": "Fires when the value for the configuration attribute 'caption' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "thValueTemplateChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "thValueTemplateChange", "description": "Fires when the value for the configuration attribute 'thValueTemplate' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "recordsetChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "recordsetChange", "description": "Fires when the value for the configuration attribute 'recordset' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "configs": {"thValueTemplate": {"default": "'{value}'", "type": "String", "description": "Tokenized markup template for TH value.", "guessedname": "thValueTemplate", "guessedtype": "property"}, "recordset": {"type": "Array | Y.Recordset", "description": "Pointer to Recordset instance.", "guessedname": "recordset", "guessedtype": "property"}, "summary": {"type": "String", "description": "Summary.", "guessedname": "summary", "guessedtype": "property"}, "caption": {"type": "String", "description": "Caption", "guessedname": "caption", "guessedtype": "property"}, "columnset": {"type": "Array | Y.Columnset", "description": "Pointer to Columnset instance.", "guessedname": "columnset", "guessedtype": "property"}, "tdValueTemplate": {"default": "'{value}'", "type": "String", "description": "Tokenized markup template for TD value.", "guessedname": "tdValueTemplate", "guessedtype": "property"}, "trTemplate": {"default": "'<tr id=\"{id}\"></tr>'", "type": "String", "description": "Tokenized markup template for TR node creation.", "guessedname": "trTemplate", "guessedtype": "property"}}, "methods": {"_addCaptionNode": {"return": {"type": "", "description": "Y.Node"}, "description": "Creates and attaches CAPTION element to given container.", "param": "tableNode {Node} Parent node.", "protected": "", "params": [{"type": "Node", "name": "tableNode", "description": "  Parent node."}], "guessedname": "_addCaptionNode", "guessedtype": "function"}, "_uiSetCaption": {"description": "Updates caption.", "param": "val {String} New caption.", "protected": "", "params": [{"type": "String", "name": "val", "description": "  New caption."}], "guessedname": "_uiSetCaption", "guessedtype": "function"}, "_addTbodyTdNode": {"description": "Creates and attaches data cell element.", "param": "o {Object} {record, column, tr}.", "protected": "", "params": [{"type": "Object} {record, column, tr", "name": "o", "description": " ."}], "guessedname": "_addTbodyTdNode", "guessedtype": "function"}, "_afterCaptionChange": {"description": "Updates the UI if caption is changed.", "param": "e {Event} Custom event for the attribute change.", "protected": "", "params": [{"type": "Event", "name": "e", "description": "  Custom event for the attribute change."}], "guessedname": "_afterCaptionChange", "guessedtype": "function"}, "_addTableNode": {"return": {"type": "", "description": "Y.Node"}, "description": "Creates and attaches TABLE element to given container.", "param": "containerNode {Node} Parent node.", "protected": "", "params": [{"type": "Node", "name": "containerNode", "description": "  Parent node."}], "guessedname": "_addTableNode", "guessedtype": "function"}, "_addTbodyNode": {"return": {"type": "", "description": "Y.Node"}, "description": "Creates and attaches TBODY element to given container.", "param": "tableNode {Node} Parent node.", "protected": "", "params": [{"type": "Node", "name": "tableNode", "description": "  Parent node."}], "guessedname": "_addTbodyNode", "guessedtype": "function"}, "_setColumnset": {"return": {"type": "", "description": "Y.Columnset"}, "description": "Converts Array to Y.Columnset.", "private": "", "params": [{"type": "Array | Y.Columnset", "name": "columns", "description": ""}], "param": "columns {Array | Y.Columnset}", "guessedname": "_setColumnset", "guessedtype": "function"}, "_setRecordset": {"return": {"type": "", "description": "Y.Recordset"}, "description": "Converts Array to Y.Recordset.", "private": "", "params": [{"type": "Array | Y.Recordset", "name": "records", "description": ""}], "param": "records {Array | Y.Recordset}", "guessedname": "_setRecordset", "guessedtype": "function"}, "_attachTheadThNode": {"description": "Attaches header cell element.", "param": "o {Object} {value, column, tr}.", "protected": "", "params": [{"type": "Object} {value, column, tr", "name": "o", "description": " ."}], "guessedname": "_attachTheadThNode", "guessedtype": "function"}, "_attachTbodyTdNode": {"description": "Attaches data cell element.", "param": "o {Object} {record, column, tr, headers, classnames, value}.", "protected": "", "params": [{"type": "Object} {record, column, tr, headers, classnames, value", "name": "o", "description": " ."}], "guessedname": "_attachTbodyTdNode", "guessedtype": "function"}, "_addTheadNode": {"return": {"type": "", "description": "Y.Node"}, "description": "Creates and attaches THEAD element to given container.", "param": "tableNode {Node} Parent node.", "protected": "", "params": [{"type": "Node", "name": "tableNode", "description": "  Parent node."}], "guessedname": "_addTheadNode", "guessedtype": "function"}, "_createTheadThNode": {"return": {"type": "", "description": "Y.Node"}, "description": "Creates header cell element.", "param": "o {Object} {value, column, tr}.", "protected": "", "params": [{"type": "Object} {value, column, tr", "name": "o", "description": " ."}], "guessedname": "_createTheadThNode", "guessedtype": "function"}, "_addTbodyTrNode": {"description": "Creates and attaches data row element.", "param": "o {Object} {tbody, record}", "protected": "", "params": [{"type": "Object} {tbody, record", "name": "o", "description": ""}], "guessedname": "_addTbodyTrNode", "guessedtype": "function"}, "_afterSummaryChange": {"description": "Updates the UI if summary is changed.", "param": "e {Event} Custom event for the attribute change.", "protected": "", "params": [{"type": "Event", "name": "e", "description": "  Custom event for the attribute change."}], "guessedname": "_afterSummaryChange", "guessedtype": "function"}, "_uiSetColumnset": {"description": "Updates THEAD.", "param": "cs {Columnset} New Columnset.", "protected": "", "params": [{"type": "Columnset", "name": "cs", "description": "  New Columnset."}], "guessedname": "_uiSetColumnset", "guessedtype": "function"}, "_addTheadTrNode": {"description": "Creates and attaches header row element.", "param": "o {Object} {thead, columns}.", "protected": "", "params": [{"type": "Object} {thead, columns", "name": "o", "description": " ."}, {"type": "Boolean", "name": "isFirst", "description": "  Is first row."}, {"type": "Boolean", "name": "isFirst", "description": "  Is last row."}], "guessedname": "_addTheadTrNode", "guessedtype": "function"}, "_attachTheadTrNode": {"description": "Attaches header row element.", "param": "o {Object} {thead, columns, tr}.", "protected": "", "params": [{"type": "Object} {thead, columns, tr", "name": "o", "description": " ."}], "guessedname": "_attachTheadTrNode", "guessedtype": "function"}, "destructor": {"private": "", "description": "Destructor.", "guessedname": "destructor", "guessedtype": "function"}, "_addColgroupNode": {"return": {"type": "", "description": "Y.Node"}, "description": "Creates and attaches COLGROUP element to given TABLE.", "param": "tableNode {Node} Parent node.", "protected": "", "params": [{"type": "Node", "name": "tableNode", "description": "  Parent node."}], "guessedname": "_addColgroupNode", "guessedtype": "function"}, "_attachTbodyTrNode": {"description": "Attaches data row element.", "param": "o {Object} {tbody, record, tr}.", "protected": "", "params": [{"type": "Object} {tbody, record, tr", "name": "o", "description": " ."}], "guessedname": "_attachTbodyTrNode", "guessedtype": "function"}, "_addMessageNode": {"return": {"type": "", "description": "Y.Node"}, "description": "Creates and attaches message display element to given container.", "param": "tableNode {Node} Parent node.", "protected": "", "params": [{"type": "Node", "name": "tableNode", "description": "  Parent node."}], "guessedname": "_addMessageNode", "guessedtype": "function"}, "_createTheadTrNode": {"return": {"type": "", "description": "Y.Node"}, "description": "Creates header row element.", "param": "o {Object} {thead, columns}.", "protected": "", "params": [{"type": "Object} {thead, columns", "name": "o", "description": " ."}, {"type": "Boolean", "name": "isFirst", "description": "  Is first row."}, {"type": "Boolean", "name": "isLast", "description": "  Is last row."}], "guessedname": "_createTheadTrNode", "guessedtype": "function"}, "bindUI": {"private": "", "description": "Binds events.", "guessedname": "bindUI", "guessedtype": "function"}, "_uiSetRecordset": {"description": "Updates TBODY.", "param": "rs {Recordset} New Recordset.", "protected": "", "params": [{"type": "Recordset", "name": "rs", "description": "  New Recordset."}], "guessedname": "_uiSetRecordset", "guessedtype": "function"}, "_afterRecordsetChange": {"description": "Updates the UI if Recordset is changed.", "param": "e {Event} Custom event for the attribute change.", "protected": "", "params": [{"type": "Event", "name": "e", "description": "  Custom event for the attribute change."}], "guessedname": "_afterRecordsetChange", "guessedtype": "function"}, "_afterRecordsChange": {"description": "Updates the UI if Recordset records are changed.", "param": "e {Event} Custom event for the attribute change.", "protected": "", "params": [{"type": "Event", "name": "e", "description": "  Custom event for the attribute change."}], "guessedname": "_afterRecordsChange", "guessedtype": "function"}, "_afterColumnsetChange": {"description": "Updates the UI if Columnset is changed.", "param": "e {Event} Custom event for the attribute change.", "protected": "", "params": [{"type": "Event", "name": "e", "description": "  Custom event for the attribute change."}], "guessedname": "_afterColumnsetChange", "guessedtype": "function"}, "_createTbodyTrNode": {"return": {"type": "", "description": "Y.Node"}, "description": "Creates data row element.", "param": "o {Object} {tbody, record}", "protected": "", "params": [{"type": "Object} {tbody, record", "name": "o", "description": ""}], "guessedname": "_createTbodyTrNode", "guessedtype": "function"}, "_createTbodyTdNode": {"return": {"type": "", "description": "Y.Node"}, "description": "Creates data cell element.", "param": "o {Object} {record, column, tr}.", "protected": "", "params": [{"type": "Object} {record, column, tr", "name": "o", "description": " ."}], "guessedname": "_createTbodyTdNode", "guessedtype": "function"}, "syncUI": {"private": "", "description": "Syncs UI to intial state.", "guessedname": "syncUI", "guessedtype": "function"}, "formatDataCell": {"description": "Returns markup to insert into data cell element.", "param": "", "param o {object} {record, column, tr, headers, classnames}.": "", "params": [], "guessedname": "formatDataCell", "guessedtype": "function"}, "_uiSetSummary": {"description": "Updates summary.", "param": "val {String} New summary.", "protected": "", "params": [{"type": "String", "name": "val", "description": "  New summary."}], "guessedname": "_uiSetSummary", "guessedtype": "function"}, "_addTheadThNode": {"description": "Creates and attaches header cell element.", "param": "o {Object} {value, column, tr}.", "protected": "", "params": [{"type": "Object} {value, column, tr", "name": "o", "description": " ."}], "guessedname": "_addTheadThNode", "guessedtype": "function"}, "renderUI": {"private": "", "description": "Renders UI.", "guessedname": "renderUI", "guessedtype": "function"}}, "extends": "Widget", "superclass": "Widget", "file": "datatable-base.js", "shortname": "DataTable.Base", "properties": {"NAME": {"description": "Class name.", "value": "\"dataTable\"", "static": "", "guessedname": "NAME", "guessedtype": "property", "type": "String", "final": ""}, "_msgNode": {"guessedname": "_msgNode", "type": "Y.Node", "description": "Pointer to message display node.", "private": "", "guessedtype": "property"}, "thTemplate": {"default": "'<th id=\"{id}\" rowspan=\"{rowspan}\" colspan=\"{colspan}\" class=\"{classnames}\" abbr=\"{abbr}\"><div class=\"'+CLASS_LINER+'\">{value}</div></th>'", "type": "String", "description": "Tokenized markup template for TH node creation.", "guessedname": "thTemplate", "guessedtype": "property"}, "_theadNode": {"guessedname": "_theadNode", "type": "Y.Node", "description": "Pointer to THEAD node.", "private": "", "guessedtype": "property"}, "_tbodyNode": {"guessedname": "_tbodyNode", "type": "Y.Node", "description": "Pointer to TBODY node.", "private": "", "guessedtype": "property"}, "tdTemplate": {"default": "'<td headers=\"{headers}\"><div class=\"'+CLASS_LINER+'\">{value}</div></td>'", "type": "String", "description": "Tokenized markup template for TD node creation.", "guessedname": "tdTemplate", "guessedtype": "property"}}, "description": "Base class for the DataTable widget."}, "Do.AlterReturn": {"name": "Do.AlterReturn", "constructors": [{"params": [{"type": "String", "name": "msg", "description": "  (optional) Explanation of the altered return value"}, {"type": "any", "name": "newRetVal", "description": "  Return value passed to code that invoked the wrapped\nfunction."}], "description": "Return an AlterReturn object when you want to change the result returned\nfrom the core method to the caller.  Useful for Do.after subscribers."}], "namespace": "", "module": "event-custom", "guessedname": "AlterReturn", "file": "event-custom-base.js", "guessedtype": "function", "shortname": "Do.AlterReturn", "description": "Return an AlterReturn object when you want to change the result returned\nfrom the core method to the caller.  Useful for Do.after subscribers."}, "SyntheticEvent.Notifier": {"since": "3.2.0", "name": "SyntheticEvent.Notifier", "constructors": [{"params": [{"type": "EventHandle", "name": "handle", "description": "  the detach handle for the subscription to an\ninternal custom event used to execute the callback passed to\non(..) or delegate(..)"}, {"type": "Boolean", "name": "emitFacade", "description": "  take steps to ensure the first arg received by\nthe subscription callback is an event facade"}], "description": "<p>The triggering mechanism used by SyntheticEvents.</p>\n<p>Implementers should not instantiate these directly.  Use the Notifier\nprovided to the event's implemented <code>on(node, sub, notifier)</code> or\n<code>delegate(node, sub, notifier, filter)</code> methods.</p>"}], "namespace": "", "private": "", "methods": {"fire": {"description": "<p>Executes the subscription callback, passing the firing arguments as the\nfirst parameters to that callback. For events that are configured with\nemitFacade=true, it is common practice to pass the triggering DOMEventFacade\nas the first parameter.  Barring a proper DOMEventFacade or EventFacade\n(from a CustomEvent), a new EventFacade will be generated.  In that case, if\nfire() is called with a simple object, it will be mixed into the facade.\nOtherwise, the facade will be prepended to the callback parameters.</p>\n<p>For notifiers provided to delegate logic, the first argument should be an\nobject with a &quot;currentTarget&quot; property to identify what object to\ndefault as 'this' in the callback.  Typically this is gleaned from the\nDOMEventFacade or EventFacade, but if configured with emitFacade=false, an\nobject must be provided.  In that case, the object will be removed from the\ncallback parameters.</p>\n<p>Additional arguments passed during event subscription will be\nautomatically added after those passed to fire().</p>", "param": "e {EventFacade|DOMEventFacade|Object|any} (see description)", "params": [{"type": "EventFacade|DOMEventFacade|Object|any", "name": "e", "description": "  (see description)"}, {"type": "any", "name": "arg*", "description": "  additional arguments received by all subscriptions"}], "private": "", "guessedname": "fire", "guessedtype": "function"}}, "module": "event-simulate", "file": "event-synthetic.js", "shortname": "SyntheticEvent.Notifier", "description": "<p>The triggering mechanism used by SyntheticEvents.</p>\n<p>Implementers should not instantiate these directly.  Use the Notifier\nprovided to the event's implemented <code>on(node, sub, notifier)</code> or\n<code>delegate(node, sub, notifier, filter)</code> methods.</p>"}, "Event": {"name": "Event", "description": "The event utility provides functions to add and remove event listeners,\nevent cleansing.  It also tries to automatically remove listeners it\nregisters during the unload event.", "namespace": "", "module": "event", "guessedname": "dom_wrappers", "static": "", "file": "event-base.js", "guessedtype": "property", "shortname": "Event", "properties": {"DOMReady": {"type": "boolean", "static": "", "description": "True when the document is initially usable", "guessedname": "DOMReady", "guessedtype": "property"}, "_retryCount": {"guessedname": "_retryCount", "static": "", "description": "The number of times to poll after window.onload.  This number is\nincreased if additional late-bound handlers are requested after\nthe page load.", "private": "", "guessedtype": "property"}, "POLL_RETRYS": {"description": "The number of times we should look for elements that are not\nin the DOM at the time the event is requested after the document\nhas been loaded.  The default is 1000@amp;40 ms, so it will poll\nfor 40 seconds or until all outstanding handlers are bound\n(whichever comes first).", "static": "", "guessedname": "POLL_RETRYS", "guessedtype": "property", "type": "int", "final": ""}, "_dri": {"guessedname": "_dri", "static": "", "description": "document readystate poll handle", "private": "", "guessedtype": "property"}, "_wrappers": {"description": "Custom event wrappers for DOM events.  Key is\n'event:' + Element uid stamp + event type", "private": "", "static": "", "guessedname": "_wrappers", "guessedtype": "property", "type": "Y.Event.Custom"}, "_loadComplete": {"description": "True after the onload event has fired", "private": "", "static": "", "guessedname": "_loadComplete", "guessedtype": "property", "type": "boolean"}, "POLL_INTERVAL": {"description": "The poll interval in milliseconds", "static": "", "guessedname": "POLL_INTERVAL", "guessedtype": "property", "type": "int", "final": ""}, "_interval": {"guessedname": "_interval", "static": "", "description": "poll handle", "private": "", "guessedtype": "property"}, "_el_events": {"guessedname": "_el_events", "static": "", "description": "Custom event wrapper map DOM events.  Key is\nElement uid stamp.  Each item is a hash of custom event\nwrappers as provided in the _wrappers collection.  This\nprovides the infrastructure for getListeners.", "private": "", "guessedtype": "property"}, "lastError": {"type": "Error", "static": "", "description": "addListener/removeListener can throw errors in unexpected scenarios.\nThese errors are suppressed, the method returns false, and this property\nis set", "guessedname": "lastError", "guessedtype": "property"}, "_avail": {"guessedname": "_avail", "static": "", "description": "onAvailable listeners", "private": "", "guessedtype": "property"}}, "methods": {"nativeRemove": {"description": "Basic remove listener", "private": "", "static": "", "param": "{HTMLElement} el      the element to bind the handler to", "guessedname": "nativeRemove", "guessedtype": "property", "params": [{"type": "HTMLElement", "name": "el", "description": "      the element to bind the handler to"}, {"type": "string", "name": "type", "description": "   the type of event handler"}, {"type": "function", "name": "fn", "description": "      the callback to invoke"}, {"type": "boolen", "name": "capture", "description": " capture or bubble phase"}]}, "getListeners": {"return": {"type": "CustomEvent", "description": "the custom event wrapper for the DOM event(s)"}, "description": "Returns all listeners attached to the given element via addListener.\nOptionally, you can specify a specific type of event to return.", "param": "el {HTMLElement|string} the element or element id to inspect", "static": "", "guessedname": "getListeners", "guessedtype": "function", "params": [{"type": "HTMLElement|string", "name": "el", "description": "  the element or element id to inspect"}, {"type": "string", "name": "type", "description": "  optional type of listener to return. If\nleft out, all listeners will be returned"}]}, "getEvent": {"return": {"type": "Event", "description": "the event"}, "description": "Finds the event in the window object, the caller's arguments, or\nin the arguments of another method in the callstack.  This is\nexecuted automatically for events registered through the event\nmanager, so the implementer should not normally need to execute\nthis function at all.", "param": "{Event} e the event parameter from the handler", "static": "", "guessedname": "getEvent", "guessedtype": "function", "params": [{"type": "Event", "name": "e", "description": " the event parameter from the handler"}, {"type": "HTMLElement", "name": "el", "description": " the element the listener was attached to"}]}, "attach": {"return": {"type": "EventHandle", "description": "an object to that can be used to detach the listener"}, "description": "Adds an event listener", "param": "{String}   type     The type of event to append", "static": "", "guessedname": "attach", "guessedtype": "function", "params": [{"type": "String", "name": "type", "description": "     The type of event to append"}, {"type": "Function", "name": "fn", "description": "        The method the event invokes"}, {"type": "String|HTMLElement|Array|NodeList", "name": "el", "description": " An id, an element\nreference, or a collection of ids and/or elements to assign the\nlistener to."}, {"type": "Object", "name": "context", "description": " optional context object"}, {"type": "Boolean|object", "name": "args", "description": " 0..n arguments to pass to the callback"}]}, "_unload": {"guessedname": "_unload", "static": "", "description": "Removes all listeners registered by pe.event.  Called\nautomatically during the unload event.", "private": "", "guessedtype": "function"}, "purgeElement": {"description": "Removes all listeners attached to the given element via addListener.\nOptionally, the node's children can also be purged.\nOptionally, you can specify a specific type of event to remove.", "param": "{HTMLElement} el the element to purge", "static": "", "guessedname": "purgeElement", "guessedtype": "function", "params": [{"type": "HTMLElement", "name": "el", "description": " the element to purge"}, {"type": "boolean", "name": "recurse", "description": " recursively purge this element's children\nas well.  Use with caution."}, {"type": "string", "name": "type", "description": " optional type of listener to purge. If\nleft out, all listeners will be removed"}]}, "generateId": {"return": {"type": "string", "description": "the resulting id of the element"}, "description": "Generates an unique ID for the element if it does not already\nhave one.", "param": "el the element to create the id for", "static": "", "guessedname": "generateId", "guessedtype": "function", "params": [{"type": "", "name": "el", "description": " the element to create the id for"}]}, "_isValidCollection": {"return": {"type": "boolean", "description": "true if the object is array-like and populated"}, "description": "We want to be able to use getElementsByTagName as a collection\nto attach a group of events to.  Unfortunately, different\nbrowsers return different types of collections.  This function\ntests to determine if the object is array-like.  It will also\nfail if the object is an array, but is empty.", "deprecated": "was not meant to be used directly", "private": "", "static": "", "param": "o the object to test", "guessedname": "_isValidCollection", "guessedtype": "property", "params": [{"type": "", "name": "o", "description": " the object to test"}]}, "onContentReady": {"deprecated": "Use Y.on(\"contentready\")", "static": "", "params": [{"type": "string", "name": "id", "description": " the id of the element to look for."}, {"type": "function", "name": "fn", "description": " what to execute when the element is ready."}, {"type": "object", "name": "obj", "description": " an optional object to be passed back as\na parameter to fn."}, {"type": "boolean|object", "name": "override", "description": " If set to true, fn will execute\nin the context of p_obj.  If an object, fn will\nexectute in the context of that object"}], "description": "Works the same way as onAvailable, but additionally checks the\nstate of sibling elements to determine if the content of the\navailable element is safe to modify.\n<p>The callback is executed with a single parameter:\nthe custom object parameter, if provided.</p>", "param": "{string}   id the id of the element to look for."}, "startInterval": {"static": "", "private": "", "guessedname": "startInterval", "guessedtype": "function"}, "nativeAdd": {"description": "Adds a DOM event directly without the caching, cleanup, context adj, etc", "private": "", "static": "", "param": "{HTMLElement} el      the element to bind the handler to", "guessedname": "nativeAdd", "guessedtype": "property", "params": [{"type": "HTMLElement", "name": "el", "description": "      the element to bind the handler to"}, {"type": "string", "name": "type", "description": "   the type of event handler"}, {"type": "function", "name": "fn", "description": "      the callback to invoke"}, {"type": "boolen", "name": "capture", "description": " capture or bubble phase"}]}, "_clean": {"description": "Removes all object references and the DOM proxy subscription for\na given event for a DOM node.", "since": "3.4.0", "private": "", "static": "", "param": "wrapper {CustomEvent} Custom event proxy for the DOM\nsubscription", "guessedname": "_clean", "guessedtype": "function", "params": [{"type": "CustomEvent", "name": "wrapper", "description": "  Custom event proxy for the DOM\nsubscription"}]}, "_poll": {"guessedname": "_poll", "static": "", "description": "Polling function that runs before the onload event fires,\nattempting to attach to DOM Nodes as soon as they are\navailable", "private": "", "guessedtype": "function"}, "simulate": {"return": {"type": "void", "description": ""}, "description": "Simulates the event with the given name on a target.", "param": "{HTMLElement} target The DOM element that's the target of the event.", "static": "", "guessedname": "simulate", "guessedtype": "function", "params": [{"type": "HTMLElement", "name": "target", "description": " The DOM element that's the target of the event."}, {"type": "String", "name": "type", "description": " The type of event to simulate (i.e., \"click\")."}, {"type": "Object", "name": "options", "description": " (Optional) Extra options to copy onto the event object."}]}, "onAvailable": {"deprecated": "Use Y.on(\"available\")", "static": "", "params": [{"type": "string||string[]", "name": "id", "description": " the id of the element, or an array\nof ids to look for."}, {"type": "function", "name": "fn", "description": " what to execute when the element is found."}, {"type": "object", "name": "p_obj", "description": " an optional object to be passed back as\na parameter to fn."}, {"type": "boolean|object", "name": "p_override", "description": " If set to true, fn will execute\nin the context of p_obj, if set to an object it\nwill execute in the context of that object"}, {"type": "boolean", "name": "checkContent", "description": "  check child node readiness (onContentReady)"}], "description": "Executes the supplied callback when the item with the supplied\nid is found.  This is meant to be used to execute behavior as\nsoon as possible as the page loads.  If you use this after the\ninitial page load it will poll for a fixed time for the element.\nThe number of times it will poll and the frequency are\nconfigurable.  By default it will poll for 10 seconds.\n<p>The callback is executed with a single parameter:\nthe custom object parameter, if provided.</p>", "param": "{string||string[]}   id the id of the element, or an array\nof ids to look for."}, "detach": {"return": {"type": "boolean", "description": "true if the unbind was successful, false otherwise."}, "description": "Removes an event listener.  Supports the signature the event was bound\nwith, but the preferred way to remove listeners is using the handle\nthat is returned when using Y.on", "param": "{String} type the type of event to remove.", "static": "", "guessedname": "detach", "guessedtype": "function", "params": [{"type": "String", "name": "type", "description": " the type of event to remove."}, {"type": "Function", "name": "fn", "description": " the method the event invokes.  If fn is\nundefined, then all event handlers for the type of event are\nremoved."}, {"type": "String|HTMLElement|Array|NodeList|EventHandle", "name": "el", "description": " An\nevent handle, an id, an element reference, or a collection\nof ids and/or elements to remove the listener from."}]}, "_load": {"guessedname": "_load", "static": "", "description": "hook up any deferred listeners", "private": "", "guessedtype": "function"}, "define": {"return": {"type": "SyntheticEvent", "description": "the subclass implementation instance created to\nhandle event subscriptions of this type"}, "description": "<p>Defines a new event in the DOM event system.  Implementers are\nresponsible for monitoring for a scenario whereby the event is fired.  A\nnotifier object is provided to the functions identified below.  When the\ncriteria defining the event are met, call notifier.fire( [args] ); to\nexecute event subscribers.</p>\n<p>The first parameter is the name of the event.  The second parameter is a\nconfiguration object which define the behavior of the event system when the\nnew event is subscribed to or detached from.  The methods that should be\ndefined in this configuration object are <code>on</code>,\n<code>detach</code>, <code>delegate</code>, and <code>detachDelegate</code>.\nYou are free to define any other methods or properties needed to define your\nevent.  Be aware, however, that since the object is used to subclass\nSyntheticEvent, you should avoid method names used by SyntheticEvent unless\nyour intention is to override the default behavior.</p>\n<p>This is a list of properties and methods that you can or should specify\nin the configuration object:</p>\n<dl>\n<dt><code>on</code></dt>\n<dd><code>function (node, subscription, notifier)</code> The\nimplementation logic for subscription.  Any special setup you need to\ndo to create the environment for the event being fired--E.g. native\nDOM event subscriptions.  Store subscription related objects and\nstate on the <code>subscription</code> object.  When the\ncriteria have been met to fire the synthetic event, call\n<code>notifier.fire(e)</code>.  See Notifier's <code>fire()</code>\nmethod for details about what to pass as parameters.</dd>\n<dt><code>detach</code></dt>\n<dd><code>function (node, subscription, notifier)</code> The\nimplementation logic for cleaning up a detached subscription. E.g.\ndetach any DOM subscriptions added in <code>on</code>.</dd>\n<dt><code>delegate</code></dt>\n<dd><code>function (node, subscription, notifier, filter)</code> The\nimplementation logic for subscription via <code>Y.delegate</code> or\n<code>node.delegate</code>.  The filter is typically either a selector\nstring or a function.  You can use\n<code>Y.delegate.compileFilter(selectorString)</code> to create a\nfilter function from a selector string if needed.  The filter function\nexpects an event object as input and should output either null, a\nmatching Node, or an array of matching Nodes.  Otherwise, this acts\nlike <code>on</code> DOM event subscriptions.  Store subscription\nrelated objects and information on the <code>subscription</code>\nobject.  When the criteria have been met to fire the synthetic event,\ncall <code>notifier.fire(e)</code> as noted above.</dd>\n<dt><code>detachDelegate</code></dt>\n<dd><code>function (node, subscription, notifier)</code> The\nimplementation logic for cleaning up a detached delegate subscription.\nE.g. detach any DOM delegate subscriptions added in\n<code>delegate</code>.</dd>\n<dt><code>publishConfig</code></dt>\n<dd>(Object) The configuration object that will be used to instantiate\nthe underlying CustomEvent. See Notifier's <code>fire</code> method\nfor details.</dd>\n<dt><code>processArgs</code></dt\n<dd>\n<p><code>function (argArray, fromDelegate)</code> Optional method\nto extract any additional arguments from the subscription\nsignature.  Using this allows <code>on</code> or\n<code>delegate</code> signatures like\n<code>node.on(&quot;hover&quot;, overCallback,\noutCallback)</code>.</p>\n<p>When processing an atypical argument signature, make sure the\nargs array is returned to the normal signature before returning\nfrom the function.  For example, in the &quot;hover&quot; example\nabove, the <code>outCallback</code> needs to be <code>splice</code>d\nout of the array.  The expected signature of the args array for\n<code>on()</code> subscriptions is:</p>\n<pre>\n<code>[type, callback, target, contextOverride, argN...]</code>\n</pre>\n<p>And for <code>delegate()</code>:</p>\n<pre>\n<code>[type, callback, target, filter, contextOverride, argN...]</code>\n</pre>\n<p>where <code>target</code> is the node the event is being\nsubscribed for.  You can see these signatures documented for\n<code>Y.on()</code> and <code>Y.delegate()</code> respectively.</p>\n<p>Whatever gets returned from the function will be stored on the\n<code>subscription</code> object under\n<code>subscription._extra</code>.</p></dd>\n<dt><code>subMatch</code></dt>\n<dd>\n<p><code>function (sub, args)</code>  Compares a set of\nsubscription arguments against a Subscription object to determine\nif they match.  The default implementation compares the callback\nfunction against the second argument passed to\n<code>Y.on(...)</code> or <code>node.detach(...)</code> etc.</p>\n</dd>\n</dl>", "since": "3.1.0", "param": "type {String} the name of the event", "static": "", "guessedname": "define", "in": "", "params": [{"type": "String", "name": "type", "description": "  the name of the event"}, {"type": "Object", "name": "config", "description": "  the prototype definition for the new event (see above)"}, {"type": "Boolean", "name": "force", "description": "  override an existing event (use with caution)"}], "guessedtype": "function"}}}, "Shape": {"name": "Shape", "constructors": [{"params": [{"type": "Object", "name": "cfg", "description": " (optional) Attribute configs"}], "description": "<p>Base class for creating shapes.</p>\n<p>`Shape` is an abstract class and is not meant to be used directly. The following classes extend\n`Shape`.\n<ul>\n<li><a href=\"Circle.html\">`Circle`</a></li>\n<li><a href=\"Ellipse.html\">`Ellipse`</a></li>\n<li><a href=\"Rect.html\">`Rect`</a></li>\n<li><a href=\"Path.html\">`Path`</a></li>\n</ul>\n`Shape` can also be extended to create custom shape classes.</p>\n`Shape` has the following implementations based on browser capability.\n<ul>\n<li><a href=\"SVGShape.html\">`SVGShape`</a></li>\n<li><a href=\"VMLShape.html\">`VMLShape`</a></li>\n<li><a href=\"CanvasShape.html\">`CanvasShape`</a></li>\n</ul>\nIt is not necessary to interact with these classes directly. `Shape` will point to the appropriate implemention.</p>"}], "namespace": "", "module": "graphics", "methods": {"getXY": {"return": {"type": "", "description": "Array The XY position of the shape."}, "description": "Gets the current position of the node in page coordinates."}, "contains": {"return": {"type": "", "description": "Boolean Whether or not this shape is the needle or its ancestor."}, "params": [{"type": "Shape | HTMLElement", "name": "needle", "description": " The possible node or descendent"}], "description": "Determines whether the node is an ancestor of another HTML element in the DOM hierarchy.", "param": "{Shape | HTMLElement} needle The possible node or descendent"}, "translateX": {"params": [{"type": "Number", "name": "x", "description": " The value to translate."}], "description": "Translates the shape along the x-axis. When translating x and y coordinates,\nuse the `translate` method.", "param": "{Number} x The value to translate."}, "translateY": {"params": [{"type": "Number", "name": "y", "description": " The value to translate."}], "description": "Translates the shape along the y-axis. When translating x and y coordinates,\nuse the `translate` method.", "param": "{Number} y The value to translate."}, "skewX": {"params": [{"type": "Number", "name": "x", "description": " x-coordinate"}], "description": "Skews the shape around the x-axis.", "param": "{Number} x x-coordinate"}, "getBounds": {"return": {"type": "", "description": "Object"}, "description": "Returns the bounds for a shape.\nCalculates the a new bounding box from the original corner coordinates (base on size and position) and the transform matrix.\nThe calculated bounding box is used by the graphic instance to calculate its viewBox."}, "skew": {"params": [{"type": "Number", "name": "x", "description": " The value to skew on the x-axis."}, {"type": "Number", "name": "y", "description": " The value to skew on the y-axis."}], "description": "Skews the shape around the x-axis and y-axis.", "param": "{Number} x The value to skew on the x-axis."}, "removeClass": {"params": [{"type": "String", "name": "className", "description": " the class name to remove from the node's class attribute"}], "description": "Removes a class name from each node.", "param": "{String} className the class name to remove from the node's class attribute"}, "initializer": {"description": "Initializes the shape", "private": ""}, "init": {"protected": "", "description": "Init method, invoked during construction.\nCalls `initializer` method."}, "set": {"params": [{"type": "String|Object", "name": "name", "description": " The name of the attribute. Alternatively, an object of key value pairs can \nbe passed in to set multiple attributes at once."}, {"type": "Any", "name": "value", "description": " The value to set the attribute to. This value is ignored if an object is received as \nthe name param."}], "description": "Sets the value of an attribute.", "param": "{String|Object} name The name of the attribute. Alternatively, an object of key value pairs can \nbe passed in to set multiple attributes at once."}, "setXY": {"params": [{"type": "Array", "name": "Contains", "description": " x & y values for new position (coordinates are page-based)"}], "description": "Set the position of the shape in page coordinates, regardless of how the node is positioned.", "param": "{Array} Contains x & y values for new position (coordinates are page-based)"}, "scale": {"params": [{"type": "Number", "name": "val", "description": ""}], "description": "Specifies a 2d scaling operation.", "param": "{Number} val"}, "skewY": {"params": [{"type": "Number", "name": "y", "description": " y-coordinate"}], "description": "Skews the shape around the y-axis.", "param": "{Number} y y-coordinate"}, "compareTo": {"return": {"type": "Boolean", "description": "True if the nodes match, false if they do not."}, "params": [{"type": "HTMLElement | Node", "name": "refNode", "description": " The reference node to compare to the node."}], "description": "Compares nodes to determine if they match.\nNode instances can be compared to each other and/or HTMLElements.", "param": "{HTMLElement | Node} refNode The reference node to compare to the node."}, "test": {"return": {"type": "", "description": "Boolean Wheter or not the shape matches the selector."}, "params": [{"type": "String", "name": "selector", "description": " The CSS selector to test against."}], "description": "Test if the supplied node matches the supplied selector.", "param": "{String} selector The CSS selector to test against."}, "destroy": {"description": "Destroys the instance."}, "translate": {"params": [{"type": "Number", "name": "x", "description": " The value to transate on the x-axis."}, {"type": "Number", "name": "y", "description": " The value to translate on the y-axis."}], "description": "Specifies a 2d translation.", "param": "{Number} x The value to transate on the x-axis."}, "rotate": {"params": [{"type": "Number", "name": "deg", "description": " The degree of the rotation."}], "description": "Rotates the shape clockwise around it transformOrigin.", "param": "{Number} deg The degree of the rotation."}, "addClass": {"params": [{"type": "String", "name": "className", "description": " the class name to add to the node's class attribute"}], "description": "Add a class name to each node.", "param": "{String} className the class name to add to the node's class attribute"}}, "file": "graphics.js", "shortname": "Shape", "configs": {"node": {"readonly": "", "type": "HTMLElement", "description": "Dom node for the shape."}, "graphic": {"readonly": "", "type": "Graphic", "description": "Reference to the parent graphic instance"}, "visible": {"type": "Boolean", "description": "Indicates whether the shape is visible."}, "transformOrigin": {"type": "Array", "description": "An array of x, y values which indicates the transformOrigin in which to rotate the shape. Valid values range between 0 and 1 representing a \nfraction of the shape's corresponding bounding box dimension. The default value is [0.5, 0.5]."}, "transform": {"type": "String", "description": "<p>A string containing, in order, transform operations applied to the shape instance. The `transform` string can contain the following values:\n<dl>\n<dt>rotate</dt><dd>Rotates the shape clockwise around it transformOrigin.</dd>\n<dt>translate</dt><dd>Specifies a 2d translation.</dd>\n<dt>skew</dt><dd>Skews the shape around the x-axis and y-axis.</dd>\n<dt>scale</dt><dd>Specifies a 2d scaling operation.</dd>\n<dt>translateX</dt><dd>Translates the shape along the x-axis.</dd>\n<dt>translateY</dt><dd>Translates the shape along the y-axis.</dd>\n<dt>skewX</dt><dd>Skews the shape around the x-axis.</dd>\n<dt>skewY</dt><dd>Skews the shape around the y-axis.</dd>\n</dl>\n</p>\n<p>Applying transforms through the transform attribute will reset the transform matrix and apply a new transform. The shape class also contains corresponding methods for each transform\nthat will apply the transform to the current matrix. The below code illustrates how you might use the `transform` attribute to instantiate a recangle with a rotation of 45 degrees.</p>\nvar myRect = new Y.Rect({\ntype:\"rect\",\nwidth: 50,\nheight: 40,\ntransform: \"rotate(45)\"\n};\n<p>The code below would apply `translate` and `rotate` to an existing shape.</p>\nmyRect.set(\"transform\", \"translate(40, 50) rotate(45)\");"}, "width": {"type": "Number", "description": "Indicates the width of the shape"}, "stroke": {"type": "Object", "description": "Contains information about the stroke of the shape.\n<dl>\n<dt>color</dt><dd>The color of the stroke.</dd>\n<dt>weight</dt><dd>Number that indicates the width of the stroke.</dd>\n<dt>opacity</dt><dd>Number between 0 and 1 that indicates the opacity of the stroke. The default value is 1.</dd>\n<dt>dashstyle</dt>Indicates whether to draw a dashed stroke. When set to \"none\", a solid stroke is drawn. When set to an array, the first index indicates the\nlength of the dash. The second index indicates the length of gap.\n<dt>linecap</dt><dd>Specifies the linecap for the stroke. The following values can be specified:\n<dl>\n<dt>butt (default)</dt><dd>Specifies a butt linecap.</dd>\n<dt>square</dt><dd>Specifies a sqare linecap.</dd>\n<dt>round</dt><dd>Specifies a round linecap.</dd>\n</dl>\n</dd>\n<dt>linejoin</dt><dd>Specifies a linejoin for the stroke. The following values can be specified:\n<dl>\n<dt>round (default)</dt><dd>Specifies that the linejoin will be round.</dd>\n<dt>bevel</dt><dd>Specifies a bevel for the linejoin.</dd>\n<dt>miter limit</dt><dd>An integer specifying the miter limit of a miter linejoin. If you want to specify a linejoin of miter, you simply specify the limit as opposed to having\nseparate miter and miter limit values.</dd>\n</dl>\n</dd>\n</dl>"}, "y": {"type": "Number", "description": "Indicates the y position of shape."}, "x": {"type": "Number", "description": "Indicates the x position of shape."}, "height": {"type": "Number", "description": "Indicates the height of the shape"}, "id": {"type": "String", "description": "Unique id for class instance."}, "fill": {"type": "Object", "description": "Contains information about the fill of the shape. \n<dl>\n<dt>color</dt><dd>The color of the fill.</dd>\n<dt>opacity</dt><dd>Number between 0 and 1 that indicates the opacity of the fill. The default value is 1.</dd>\n<dt>type</dt><dd>Type of fill.\n<dl>\n<dt>solid</dt><dd>Solid single color fill. (default)</dd>\n<dt>linear</dt><dd>Linear gradient fill.</dd>\n<dt>radial</dt><dd>Radial gradient fill.</dd>\n</dl>\n</dd>\n</dl>\n<p>If a `linear` or `radial` is specified as the fill type. The following additional property is used:\n<dl>\n<dt>stops</dt><dd>An array of objects containing the following properties:\n<dl>\n<dt>color</dt><dd>The color of the stop.</dd>\n<dt>opacity</dt><dd>Number between 0 and 1 that indicates the opacity of the stop. The default value is 1. Note: No effect for IE 6 - 8</dd>\n<dt>offset</dt><dd>Number between 0 and 1 indicating where the color stop is positioned.</dd> \n</dl>\n</dd>\n<p>Linear gradients also have the following property:</p>\n<dt>rotation</dt><dd>Linear gradients flow left to right by default. The rotation property allows you to change the flow by rotation. (e.g. A rotation of 180 would make the gradient pain from right to left.)</dd>\n<p>Radial gradients have the following additional properties:</p>\n<dt>r</dt><dd>Radius of the gradient circle.</dd>\n<dt>fx</dt><dd>Focal point x-coordinate of the gradient.</dd>\n<dt>fy</dt><dd>Focal point y-coordinate of the gradient.</dd>\n<dt>cx</dt><dd>\n<p>The x-coordinate of the center of the gradient circle. Determines where the color stop begins. The default value 0.5.</p>\n<p><strong>Note: </strong>Currently, this property is not implemented for corresponding `CanvasShape` and `VMLShape` classes which are used on Android or IE 6 - 8.</p>\n</dd>\n<dt>cy</dt><dd>\n<p>The y-coordinate of the center of the gradient circle. Determines where the color stop begins. The default value 0.5.</p>\n<p><strong>Note: </strong>Currently, this property is not implemented for corresponding `CanvasShape` and `VMLShape` classes which are used on Android or IE 6 - 8.</p>\n</dd>\n</dl>"}}, "description": "<p>Base class for creating shapes.</p>\n<p>`Shape` is an abstract class and is not meant to be used directly. The following classes extend\n`Shape`.\n<ul>\n<li><a href=\"Circle.html\">`Circle`</a></li>\n<li><a href=\"Ellipse.html\">`Ellipse`</a></li>\n<li><a href=\"Rect.html\">`Rect`</a></li>\n<li><a href=\"Path.html\">`Path`</a></li>\n</ul>\n`Shape` can also be extended to create custom shape classes.</p>\n`Shape` has the following implementations based on browser capability.\n<ul>\n<li><a href=\"SVGShape.html\">`SVGShape`</a></li>\n<li><a href=\"VMLShape.html\">`VMLShape`</a></li>\n<li><a href=\"CanvasShape.html\">`CanvasShape`</a></li>\n</ul>\nIt is not necessary to interact with these classes directly. `Shape` will point to the appropriate implemention.</p>"}, "StackedAreaSplineSeries": {"name": "StackedAreaSplineSeries", "constructors": [{"description": "StackedAreaSplineSeries creates a stacked area chart with points data points connected by a curve."}], "namespace": "", "module": "charts", "events": {"typeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "typeChange", "description": "Fires when the value for the configuration attribute 'type' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "StackedAreaSplineSeries", "methods": {"drawSeries": {"protected": "", "description": "Draws the series.", "guessedname": "drawSeries", "guessedtype": "function"}}, "uses": ["CurveUtil", "StackingUtil"], "superclass": "AreaSeries", "file": "charts.js", "guessedtype": "property", "extends": "AreaSeries", "shortname": "StackedAreaSplineSeries", "configs": {"type": {"default": "stackedAreaSpline", "type": "String", "description": "Read-only attribute indicating the type of series.", "guessedname": "type", "guessedtype": "property"}}, "description": "StackedAreaSplineSeries creates a stacked area chart with points data points connected by a curve."}, "Test.Assert.ShouldFail": {"name": "Test.Assert.ShouldFail", "constructors": [{"params": [{"type": "String", "name": "message", "description": " The message to display when the error occurs."}], "description": "ShouldFail is subclass of Error that is thrown whenever\na test was expected to fail but did not."}], "namespace": "Test", "module": "test", "guessedname": "ShouldFail", "extends": "Assert.Error", "superclass": "Assert.Error", "file": "test.js", "guessedtype": "function", "shortname": "Assert.ShouldFail", "properties": {"name": {"type": "String", "description": "The name of the error that occurred.", "guessedname": "name", "guessedtype": "property"}}, "description": "ShouldFail is subclass of Error that is thrown whenever\na test was expected to fail but did not."}, "Test.Mock.Value": {"return": "{void}", "name": "Test.Mock.Value", "constructors": [{"params": [{"type": "Function", "name": "method", "description": " The method to run on the argument. This should\nthrow an assertion error if the value is invalid."}, {"type": "Array", "name": "originalArgs", "description": " The first few arguments to pass in\nto the method. The value to test and failure message are\nalways the last two arguments passed into method."}, {"type": "String", "name": "message", "description": " The message to display if validation fails. If\nnot specified, the default assertion error message is displayed."}], "description": "Defines a custom mock validator for a particular argument."}], "namespace": "Test", "module": "test", "guessedname": "Value", "static": "", "file": "test.js", "guessedtype": "function", "shortname": "Mock.Value", "properties": {"Function": {"type": "Function", "static": "", "description": "Mock argument validator that accepts onlyfunctions as valid.", "guessedname": "Function", "guessedtype": "property"}, "String": {"type": "Function", "static": "", "description": "Mock argument validator that accepts only String values as valid.", "guessedname": "String", "guessedtype": "property"}, "Object": {"type": "Function", "static": "", "description": "Mock argument validator that accepts only non-null objects values as valid.", "guessedname": "Object", "guessedtype": "property"}, "Number": {"type": "Function", "static": "", "description": "Mock argument validator that accepts only numeric values as valid.", "guessedname": "Number", "guessedtype": "property"}, "Boolean": {"type": "Function", "static": "", "description": "Mock argument validator that accepts only Boolean values as valid.", "guessedname": "Boolean", "guessedtype": "property"}, "Any": {"type": "Function", "static": "", "description": "Mock argument validator that accepts any value as valid.", "guessedname": "Any", "guessedtype": "function"}}, "description": "Defines a custom mock validator for a particular argument."}, "WidgetAutohide": {"name": "WidgetAutohide", "namespace": "", "module": "widget-autohide", "events": {"hideOnChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "hideOnChange", "description": "Fires when the value for the configuration attribute 'hideOn' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "configs": {"hideOn": {"type": "array", "description": "An array of objects corresponding to the nodes, events, and keycodes to hide the widget on.\nThe implementer can supply an array of objects, with each object having the following properties:\n<p>eventName: (string, required): The eventName to listen to.</p>\n<p>node: (Y.Node, optional): The Y.Node that will fire the event (defaults to the boundingBox of the widget)</p>\n<p>keyCode: (string, optional): If listening for key events, specify the keyCode</p>\n<p>By default, this attribute consists of one object which will cause the widget to hide if the\nescape key is pressed.</p>", "guessedname": "hideOn", "guessedtype": "property"}}, "methods": {"_detachUIHandlesAutohide": {"protected": "", "description": "Detaches all event listeners created by this extension", "guessedname": "_detachUIHandlesAutohide", "guessedtype": "function"}, "_uiSetHostVisibleAutohide": {"protected": "", "description": "Removes event listeners if widget is not visible, and attaches them otherwise.", "guessedname": "_uiSetHostVisibleAutohide", "guessedtype": "function"}, "_syncUIAutohide": {"protected": "", "description": "Syncs up the widget based on its current state. In particular, removes event listeners if\nwidget is not visible, and attaches them otherwise.\n<p>\nThis method in invoked after syncUI is invoked for the Widget class\nusing YUI's aop infrastructure.\n</p>", "guessedname": "_syncUIAutohide", "guessedtype": "function"}, "_bindUIAutohide": {"protected": "", "description": "Binds event listeners to the widget.\n<p>\nThis method in invoked after bindUI is invoked for the Widget class\nusing YUI's aop infrastructure.\n</p>", "guessedname": "_bindUIAutohide", "guessedtype": "function"}, "_afterHideOnChange": {"description": "Default function called when hideOn Attribute is changed. Remove existing listeners and create new listeners.", "guessedname": "_afterHideOnChange", "guessedtype": "function"}, "_attachUIHandlesAutohide": {"protected": "", "description": "Iterates through all objects in the hideOn attribute and creates event listeners.", "guessedname": "_attachUIHandlesAutohide", "guessedtype": "function"}, "_afterHostVisibleChangeAutohide": {"protected": "", "description": "Default function called when the visibility of the widget changes. Determines\nwhether to attach or detach event listeners based on the visibility of the widget.", "guessedname": "_afterHostVisibleChangeAutohide", "guessedtype": "function"}}, "param": "{Object} config User configuration object", "file": "widget-autohide.js", "shortname": "WidgetAutohide", "properties": {"ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute \nconfiguration introduced by WidgetAutohide.", "guessedname": "ATTRS", "guessedtype": "property"}}, "description": "The WidgetAutohide class provides the hideOn attribute which can\nbe used to hide the widget when certain events occur."}, "Test.Reporter": {"name": "Test.Reporter", "constructors": [{"params": [{"type": "String", "name": "url", "description": " The URL to submit the results to."}, {"type": "Function", "name": "format", "description": " (Optiona) A function that outputs the results in a specific format.\nDefault is Y.Test.Format.XML."}], "description": "An object capable of sending test results to a server."}], "namespace": "Test", "module": "test", "guessedname": "Reporter", "methods": {"report": {"return": {"type": "Void", "description": ""}, "description": "Sends the report to the server.", "param": "{Object} results The results object created by TestRunner.", "params": [{"type": "Object", "name": "results", "description": " The results object created by TestRunner."}], "guessedname": "report", "guessedtype": "function"}, "destroy": {"return": {"type": "Void", "description": ""}, "description": "Cleans up the memory associated with the TestReporter, removing DOM elements\nthat were created.", "guessedname": "destroy", "guessedtype": "function"}, "addField": {"return": {"type": "Void", "description": ""}, "description": "Adds a field to the form that submits the results.", "param": "{String} name The name of the field.", "params": [{"type": "String", "name": "name", "description": " The name of the field."}, {"type": "Variant", "name": "value", "description": " The value of the field."}], "guessedname": "addField", "guessedtype": "function"}}, "file": "test.js", "guessedtype": "function", "shortname": "Reporter", "properties": {"url": {"type": "String", "description": "The URL to submit the data to.", "guessedname": "url", "guessedtype": "property"}, "_form": {"guessedname": "_form", "type": "HTMLFormElement", "description": "The form element used to submit the results.", "private": "", "guessedtype": "property"}, "_fields": {"guessedname": "_fields", "type": "Object", "description": "Extra fields to submit with the request.", "private": "", "guessedtype": "property"}, "_iframe": {"guessedname": "_iframe", "type": "HTMLIFrameElement", "description": "Iframe used as a target for form submission.", "private": "", "guessedtype": "property"}, "format": {"type": "Function", "description": "The formatting function to call when submitting the data.", "guessedname": "format", "guessedtype": "property"}}, "description": "An object capable of sending test results to a server."}, "Calendar": {"guessedname": "Calendar", "name": "Calendar", "configs": {"maxDate": {"default": "null", "type": "String | Date", "description": "Maximum allowable date. Values supported by the Date\nconstructor are supported.", "guessedname": "maxDate", "guessedtype": "property"}, "headerContentNode": {"default": "Generated div element.", "type": "String", "description": "... If not\nspecified try to query using HTML_PARSER an element inside\ncontentBox which matches <code>aui-calendar-hd</code>.", "guessedname": "headerContentNode", "guessedtype": "property"}, "weekDays": {"default": "Generated div element.", "type": "String", "description": "... If not\nspecified try to query using HTML_PARSER an element inside\ncontentBox which matches <code>aui-calendar-week</code>.", "guessedname": "weekDays", "guessedtype": "property"}, "noneLinkNode": {"default": "Generated div element.", "type": "Node", "description": "DOM node reference to be the \"none\" link of the Calendar. If not\nspecified try to query using HTML_PARSER an element inside\ncontentBox which matches <code>aui-calendar-title</code>.", "guessedname": "noneLinkNode", "guessedtype": "property"}, "currentYear": {"default": "Current year", "type": "Number", "description": "Current year number.", "guessedname": "currentYear", "guessedtype": "property"}, "minimumDate": {"default": "null", "type": "Date", "description": "The minimum date that can be displayed by the calendar. The calendar will not\nallow dates earlier than this one to be set, and will reset any earlier date to\nthis date. Should be `null` if no minimum date is needed.", "guessedname": "minimumDate", "guessedtype": "property"}, "monthDays": {"default": "Generated div element.", "type": "String", "description": "... If not\nspecified try to query using HTML_PARSER an element inside\ncontentBox which matches <code>aui-calendar-day</code>.", "guessedname": "monthDays", "guessedtype": "property"}, "dateFormat": {"default": "%m/%d/%Y", "type": "String", "description": "The default date format string which can be overriden for\nlocalization support. The format must be valid according to\n<a href=\"DataType.Date.html\">A.DataType.Date.format</a>.", "guessedname": "dateFormat", "guessedtype": "property"}, "firstDayOfWeek": {"default": "0", "type": "Number", "description": "First day of the week: Sunday is 0, Monday is 1.", "guessedname": "firstDayOfWeek", "guessedtype": "property"}, "monthDaysNode": {"default": "Generated div element.", "type": "String", "description": "... If not\nspecified try to query using HTML_PARSER an element inside\ncontentBox which matches <code>aui-calendar-monthdays</code>.", "guessedname": "monthDaysNode", "guessedtype": "property"}, "blankDays": {"default": "Generated div element.", "type": "String", "description": "... If not\nspecified try to query using HTML_PARSER an element inside\ncontentBox which matches <code>aui-calendar-day-blank</code>.", "guessedname": "blankDays", "guessedtype": "property"}, "currentDay": {"default": "Current day", "type": "Number", "description": "Current day number.", "guessedname": "currentDay", "guessedtype": "property"}, "setValue": {"default": "true", "type": "boolean", "description": "If true set the selected date with the correct\n<a href=\"Calendar.html#config_dateFormat\">dateFormat</a> to the\nvalue of the input field which is hosting the Calendar.", "guessedname": "setValue", "guessedtype": "property"}, "iconPrevNode": {"default": "Generated div element.", "type": "String", "description": "... If not\nspecified try to query using HTML_PARSER an element inside\ncontentBox which matches <code>aui-calendar-prev</code>.", "guessedname": "iconPrevNode", "guessedtype": "property"}, "selectMultipleDates": {"default": "false", "type": "boolean", "description": "Wether accepts to select multiple dates.", "guessedname": "selectMultipleDates", "guessedtype": "property"}, "weekDaysNode": {"default": "Generated div element.", "type": "String", "description": "... If not\nspecified try to query using HTML_PARSER an element inside\ncontentBox which matches <code>aui-calendar-weekdays</code>.", "guessedname": "weekDaysNode", "guessedtype": "property"}, "todayLinkNode": {"default": "Generated div element.", "type": "Node", "description": "DOM node reference to be the \"today\" link of the Calendar. If not\nspecified try to query using HTML_PARSER an element inside\ncontentBox which matches <code>aui-calendar-title</code>.", "guessedname": "todayLinkNode", "guessedtype": "property"}, "paddingDaysEnd": {"default": "Generated div element.", "type": "NodeList", "description": "NodeList containing all the DOM elements for\neach blank day. If not specified try to query using HTML_PARSER\nan element inside contentBox which matches\n<code>aui-calendar-day-blank</code>.", "guessedname": "paddingDaysEnd", "guessedtype": "property"}, "headerTitleNode": {"default": "Generated div element.", "type": "String", "description": "... If not\nspecified try to query using HTML_PARSER an element inside\ncontentBox which matches <code>aui-calendar-title</code>.", "guessedname": "headerTitleNode", "guessedtype": "property"}, "paddingDaysStart": {"default": "Generated div element.", "type": "NodeList", "description": "NodeList containing all the DOM elements for\neach blank day. If not specified try to query using HTML_PARSER\nan element inside contentBox which matches\n<code>aui-calendar-day-blank</code>.", "guessedname": "paddingDaysStart", "guessedtype": "property"}, "date": {"default": "Today's date as set on the user's computer.", "type": "Date", "description": "The date corresponding to the current calendar view. Always\nnormalized to the first of the month that contains the date\nat assignment time. Used as the first date visible in the\ncalendar.", "guessedname": "date", "guessedtype": "property"}, "selectionMode": {"default": "single", "type": "String", "description": "A setting specifying the type of selection the calendar allows.\nPossible values include:\n<ul>\n<li>`single`</li> - One date at a time\n<li>`multiple-sticky</li> - Multiple dates, selected one at a time (the dates \"stick\")\n<li>`multiple`</li> - Multiple dates, selected with Ctrl/Meta keys for additional single\ndates, and Shift key for date ranges.", "guessedname": "selectionMode", "guessedtype": "property"}, "allowNone": {"default": "true", "type": "boolean", "description": "Wheather displays the \"none\" link on the Calendar footer.", "guessedname": "allowNone", "guessedtype": "property"}, "minDate": {"default": "null", "type": "Date | String", "description": "Minimum allowable date. Values supported by the Date\nconstructor are supported.", "guessedname": "minDate", "guessedtype": "property"}, "dates": {"default": "Current date", "type": "Array", "description": "Dates which the calendar will show as selected by default.", "guessedname": "dates", "guessedtype": "property"}, "maximumDate": {"default": "null", "type": "Date", "description": "The maximum date that can be displayed by the calendar. The calendar will not\nallow dates later than this one to be set, and will reset any later date to\nthis date. Should be `null` if no maximum date is needed.", "guessedname": "maximumDate", "guessedtype": "property"}, "iconNextNode": {"default": "Generated div element.", "type": "String", "description": "... If not\nspecified try to query using HTML_PARSER an element inside\ncontentBox which matches <code>aui-calendar-prev</code>.", "guessedname": "iconNextNode", "guessedtype": "property"}, "showOtherMonth": {"default": "true", "type": "boolean", "description": "Wheather displays the days for the other months.", "guessedname": "showOtherMonth", "guessedtype": "property"}, "currentMonth": {"default": "Current month", "type": "Number", "description": "Current month number.", "guessedname": "currentMonth", "guessedtype": "property"}, "showToday": {"default": "true", "type": "boolean", "description": "Wheather displays the \"today\" link on the Calendar footer.", "guessedname": "showToday", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Configuration object (see Configuration attributes)"}], "description": "Create a calendar view to represent a single or multiple\nmonth range of dates, rendered as a grid with date and\nweekday labels."}, {"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "<p><img src=\"assets/images/aui-calendar/main.png\"/></p>\nA base class for Calendar, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Setting Configuration Options</li>\n<li>Obtaining Selected Dates</li>\n<li>Creating International Calendars</li>\n<li>Customizing the Calendar</li>\n</ul>\nQuick Example:\n<pre><code>var instance = new A.Calendar({\ntrigger: '#input1',\ndates: ['09/14/2009', '09/15/2009'],\ndateFormat: '%d/%m/%y %A',\nsetValue: true,\nselectMultipleDates: true\n}).render();\n</code></pre>\nCheck the list of <a href=\"Calendar.html#configattributes\">Configuration Attributes</a> available for\nCalendar."}], "namespace": "", "module": "aui-calendar", "events": {"dateFormatChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "dateFormatChange", "description": "Fires when the value for the configuration attribute 'dateFormat' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "noneLinkNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "noneLinkNodeChange", "description": "Fires when the value for the configuration attribute 'noneLinkNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "paddingDaysEndChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "paddingDaysEndChange", "description": "Fires when the value for the configuration attribute 'paddingDaysEnd' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "showTodayChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "showTodayChange", "description": "Fires when the value for the configuration attribute 'showToday' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "todayLinkNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "todayLinkNodeChange", "description": "Fires when the value for the configuration attribute 'todayLinkNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "currentYearChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "currentYearChange", "description": "Fires when the value for the configuration attribute 'currentYear' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "maxDateChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "maxDateChange", "description": "Fires when the value for the configuration attribute 'maxDate' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "headerContentNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "headerContentNodeChange", "description": "Fires when the value for the configuration attribute 'headerContentNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "minDateChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "minDateChange", "description": "Fires when the value for the configuration attribute 'minDate' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "paddingDaysStartChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "paddingDaysStartChange", "description": "Fires when the value for the configuration attribute 'paddingDaysStart' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "weekDaysChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "weekDaysChange", "description": "Fires when the value for the configuration attribute 'weekDays' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "maximumDateChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "maximumDateChange", "description": "Fires when the value for the configuration attribute 'maximumDate' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "datesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "datesChange", "description": "Fires when the value for the configuration attribute 'dates' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "dateChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "dateChange", "description": "Fires when the value for the configuration attribute 'date' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "showOtherMonthChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "showOtherMonthChange", "description": "Fires when the value for the configuration attribute 'showOtherMonth' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "currentDayChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "currentDayChange", "description": "Fires when the value for the configuration attribute 'currentDay' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "monthDaysChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "monthDaysChange", "description": "Fires when the value for the configuration attribute 'monthDays' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "selectMultipleDatesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "selectMultipleDatesChange", "description": "Fires when the value for the configuration attribute 'selectMultipleDates' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "currentMonthChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "currentMonthChange", "description": "Fires when the value for the configuration attribute 'currentMonth' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "headerTitleNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "headerTitleNodeChange", "description": "Fires when the value for the configuration attribute 'headerTitleNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "iconNextNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "iconNextNodeChange", "description": "Fires when the value for the configuration attribute 'iconNextNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "firstDayOfWeekChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "firstDayOfWeekChange", "description": "Fires when the value for the configuration attribute 'firstDayOfWeek' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "monthDaysNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "monthDaysNodeChange", "description": "Fires when the value for the configuration attribute 'monthDaysNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "iconPrevNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "iconPrevNodeChange", "description": "Fires when the value for the configuration attribute 'iconPrevNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "blankDaysChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "blankDaysChange", "description": "Fires when the value for the configuration attribute 'blankDays' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "minimumDateChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "minimumDateChange", "description": "Fires when the value for the configuration attribute 'minimumDate' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "setValueChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "setValueChange", "description": "Fires when the value for the configuration attribute 'setValue' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "allowNoneChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "allowNoneChange", "description": "Fires when the value for the configuration attribute 'allowNone' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "weekDaysNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "weekDaysNodeChange", "description": "Fires when the value for the configuration attribute 'weekDaysNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "selectionModeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "selectionModeChange", "description": "Fires when the value for the configuration attribute 'selectionMode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "methods": {"_getLocaleMap": {"protected": "", "return": {"type": "Object", "description": ""}, "description": "Get the locale map containing the respective values for the\n<a href=\"Widget.html#config_locale\">locale</a> used.\n<pre><code>A.DataType.Date.Locale['pt-br'] = A.merge(\nA.DataType.Date.Locale['en'], {\na: ['Dom', 'Seg', 'Ter', 'Qua', 'Qui', 'Fri', 'Sat'],\nA: ['Domingo','Segunda-feira','Ter&ccedil;a-feira','Quarta-feira','Quinta-feira','Sexta-feira','Sabado'],\nb: ['Jan','Fev','Mar','Abr','Mai','Jun', 'Jul','Ago','Set','Out','Nov','Dez'],\nB: ['Janeiro','Fevereiro','Mar&ccedil;o','Abril','Maio','Junho', 'Julho','Agosto','Setembro','Outubro','Novembro','Dezembro'],\nc: '%a %d %b %Y %T %Z',\np: ['AM', 'PM'],\nP: ['am', 'pm'],\nr: '%I:%M:%S %p',\nx: '%d/%m/%y',\nX: '%T'\n}\n);</code></pre>", "guessedname": "_getLocaleMap", "guessedtype": "function"}, "subtractYear": {"description": "Subtracts one year from the current calendar view.", "guessedname": "subtractYear", "guessedtype": "function"}, "addYear": {"description": "Adds one year to the current calendar view.", "guessedname": "addYear", "guessedtype": "function"}, "_createEvents": {"private": "", "description": "Create the custom events used on the Calendar.", "guessedname": "_createEvents", "guessedtype": "function"}, "_renderStdContent": {"protected": "", "description": "Render Calendar bodyContent.", "guessedname": "_renderStdContent", "guessedtype": "function"}, "_clickCalendar": {"description": "Handles the calendar clicks based on selection mode.", "param": "{Event} ev A click event", "params": [{"type": "Event", "name": "ev", "description": " A click event"}], "private": "", "guessedname": "_clickCalendar", "guessedtype": "function"}, "getFirstDayOfWeek": {"return": {"type": "Number", "description": ""}, "description": "Get the first day of week of the passed year and month.", "param": "{Number} year Year in the format YYYY.", "params": [{"type": "Number", "name": "year", "description": " Year in the format YYYY."}, {"type": "Number", "name": "month", "description": " 0 for January 11 for December."}], "guessedname": "getFirstDayOfWeek", "guessedtype": "function"}, "subtractMonth": {"description": "Subtracts one month from the current calendar view.", "guessedname": "subtractMonth", "guessedtype": "function"}, "_syncHeader": {"protected": "", "description": "Sync Calendar header UI.", "guessedname": "_syncHeader", "guessedtype": "function"}, "removeDate": {"param": "{Date} date Date to remove", "params": [{"type": "Date", "name": "date", "description": " Date to remove"}], "description": "Remove the passed date from\n<a href=\"Calendar.html#config_dates\">dates</a>.", "guessedname": "removeDate", "guessedtype": "function"}, "initializer": {"protected": "", "description": "Designated initializer. Activates the navigation plugin for the calendar.", "guessedname": "initializer", "guessedtype": "function"}, "getDaysInMonth": {"return": {"type": "Number", "description": ""}, "description": "Get the number of days in the passed year and month.", "param": "{Number} year Year in the format YYYY.", "params": [{"type": "Number", "name": "year", "description": " Year in the format YYYY."}, {"type": "Number", "name": "month", "description": " 0 for January 11 for December."}], "guessedname": "getDaysInMonth", "guessedtype": "function"}, "_syncPaddingStart": {"protected": "", "description": "Sync Calendar padding start days UI.", "guessedname": "_syncPaddingStart", "guessedtype": "function"}, "_syncMonthDays": {"protected": "", "description": "Sync Calendar month days UI.", "guessedname": "_syncMonthDays", "guessedtype": "function"}, "_uiSetDates": {"protected": "", "description": "Sync the UI of the Calendar when dates attribute change.", "guessedname": "_uiSetDates", "guessedtype": "function"}, "formatDate": {"return": {"type": "String", "description": ""}, "description": "Format a date with the passed mask. Used on\n<a href=\"Calendar.html#config_dateFormat\">dateFormat</a>.", "param": "{Date} date", "params": [{"type": "Date", "name": "date", "description": ""}, {"type": "String", "name": "mask", "description": " See <a href=\"Calendar.html#config_dateFormat\">dateFormat</a>."}], "guessedname": "formatDate", "guessedtype": "function"}, "getCurrentDate": {"return": {"type": "Date", "description": ""}, "description": "Get current date.", "guessedname": "getCurrentDate", "guessedtype": "function"}, "_getSelectEventData": {"protected": "", "return": {"type": "", "description": ""}, "description": "Object data containing all the information needed to the select event.", "guessedname": "_getSelectEventData", "guessedtype": "function"}, "_renderPaddingDaysEnd": {"protected": "", "description": "Render Calendar DOM padding days elements. Padding days are used to show other month day values.", "guessedname": "_renderPaddingDaysEnd", "guessedtype": "function"}, "_getMonthOverlapDaysOffset": {"protected": "", "return": {"type": "", "description": "number"}, "description": "Get the number of days with overlaps the first day of the month and the first day of the first week of the month.", "guessedname": "_getMonthOverlapDaysOffset", "guessedtype": "function"}, "isOutOfRangeDate": {"param": "{Date} date Date to be checked.", "params": [{"type": "Date", "name": "date", "description": " Date to be checked."}], "description": "Check if the passed date is out of range. Compared with the\n<a href=\"Calendar.html#config_minDate\">minDate</a> and\n<a href=\"Calendar.html#config_maxDate\">maxDate</a>.", "guessedname": "isOutOfRangeDate", "guessedtype": "function"}, "_renderMonthDays": {"protected": "", "description": "Render Calendar DOM month days elements.", "guessedname": "_renderMonthDays", "guessedtype": "function"}, "parseDate": {"return": {"type": "Date", "description": ""}, "description": "Parse a string to a Date object.", "param": "{String} dateString", "params": [{"type": "String", "name": "dateString", "description": ""}], "guessedname": "parseDate", "guessedtype": "function"}, "_uiSetShowOtherMonth": {"protected": "", "description": "Sync the UI of the Calendar when showOtherMonth attribute change.", "guessedname": "_uiSetShowOtherMonth", "guessedtype": "function"}, "_renderBlankDays": {"protected": "", "description": "Render Calendar DOM blank days elements. Blank days are used to align\nwith the week day column.", "guessedname": "_renderBlankDays", "guessedtype": "function"}, "selectNextMonth": {"param": "{EventFacade} event", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Navigate to the next month. Fired from the next icon on the Calendar\nheader.", "guessedname": "selectNextMonth", "guessedtype": "function"}, "_syncSelectedDays": {"protected": "", "description": "Sync Calendar selected days UI.", "guessedname": "_syncSelectedDays", "guessedtype": "function"}, "_restrictDate": {"description": "Util method to disable day nodes between\n<a href=\"Calendar.html#config_minDate\">minDate</a> and\n<a href=\"Calendar.html#config_maxDate\">maxDate</a>.", "param": "{Date} currentDate Current date showed on the Calendar.", "protected": "", "params": [{"type": "Date", "name": "currentDate", "description": " Current date showed on the Calendar."}, {"type": "Node", "name": "monthDayNode", "description": " Day node to be disabled."}], "guessedname": "_restrictDate", "guessedtype": "function"}, "getFormattedSelectedDates": {"return": {"type": "Array", "description": ""}, "description": "Get the selected dates formatted by the\n<a href=\"Calendar.html#config_dateFormat\">dateFormat</a>.", "guessedname": "getFormattedSelectedDates", "guessedtype": "function"}, "_getMonthNameShort": {"return": {"type": "String", "description": ""}, "description": "Get a short month name of the passed month from the locale map.", "param": "{Number} month", "protected": "", "params": [{"type": "Number", "name": "month", "description": ""}], "guessedname": "_getMonthNameShort", "guessedtype": "function"}, "_renderTitleNode": {"protected": "", "description": "Render Calendar title node element.", "guessedname": "_renderTitleNode", "guessedtype": "function"}, "_uiSetCurrentMonth": {"protected": "", "description": "Sync the UI of the Calendar when currentMonth attribute change.", "guessedname": "_uiSetCurrentMonth", "guessedtype": "function"}, "_renderPaddingDaysStart": {"protected": "", "description": "Render Calendar DOM padding days elements. Padding days are used to show other month day values.", "guessedname": "_renderPaddingDaysStart", "guessedtype": "function"}, "getFirstDate": {"return": {"type": "Date", "description": ""}, "description": "Get the Date for the first day of the passed year and month.", "param": "{Number} year Year in the format YYYY.", "params": [{"type": "Number", "name": "year", "description": " Year in the format YYYY."}, {"type": "Number", "name": "month", "description": " 0 for January 11 for December."}], "guessedname": "getFirstDate", "guessedtype": "function"}, "setCurrentDate": {"param": "{Date} date", "params": [{"type": "Date", "name": "date", "description": ""}], "description": "Update the currentDay, currentMonth and currentYear values.", "guessedname": "setCurrentDate", "guessedtype": "function"}, "_bindDelegateDOMEvents": {"private": "", "description": "Bind DOM events to the UI.", "guessedname": "_bindDelegateDOMEvents", "guessedtype": "function"}, "_handleSelectEvent": {"description": "Fires the calendar:select event.", "param": "{EventFacade} event calendar:select event facade", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " calendar:select event facade"}], "guessedname": "_handleSelectEvent", "guessedtype": "function"}, "getLastDate": {"return": {"type": "Date", "description": ""}, "description": "Get the Date for the last day of the passed year and month.", "param": "{Number} year Year in the format YYYY.", "params": [{"type": "Number", "name": "year", "description": " Year in the format YYYY."}, {"type": "Number", "name": "month", "description": " 0 for January 11 for December."}], "guessedname": "getLastDate", "guessedtype": "function"}, "_normalizeYearMonth": {"return": {"type": "Object", "description": ""}, "description": "Returns an Object with the current day, month and year.", "param": "{Number} year Year in the format YYYY.", "protected": "", "params": [{"type": "Number", "name": "year", "description": " Year in the format YYYY."}, {"type": "Number", "name": "month", "description": " 0 for January 11 for December."}, {"type": "Number", "name": "day", "description": ""}], "guessedname": "_normalizeYearMonth", "guessedtype": "function"}, "_renderIconControls": {"protected": "", "description": "Render Calendar icon controls elements.", "guessedname": "_renderIconControls", "guessedtype": "function"}, "_compareDates": {"return": {"type": "boolean", "description": ""}, "description": "Compare two dates.", "param": "{Date} d1", "protected": "", "params": [{"type": "Date", "name": "d1", "description": ""}, {"type": "Date", "name": "d2", "description": ""}], "guessedname": "_compareDates", "guessedtype": "function"}, "_setYear": {"return": {"type": "", "description": "number"}, "description": "Setter for the <a href=\"Calendar.html#config_dates\">currentYear</a> attribute.", "param": "int value", "protected": "", "params": [{"type": "", "name": "int", "description": " value"}], "guessedname": "_setYear", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Bind the events on the Calendar UI. Lifecycle.", "guessedname": "bindUI", "guessedtype": "function"}, "_setDay": {"return": {"type": "", "description": "number"}, "description": "Setter for the <a href=\"Calendar.html#config_dates\">currentDay</a> attribute.", "param": "int value", "protected": "", "params": [{"type": "", "name": "int", "description": " value"}], "guessedname": "_setDay", "guessedtype": "function"}, "_valuePaddingDaysEnd": {"protected": "", "description": "Default value for paddingDaysEnd attribute, passed as valueFn.", "guessedname": "_valuePaddingDaysEnd", "guessedtype": "function"}, "_getDayNameMin": {"return": {"type": "String", "description": ""}, "description": "Get a very short day name of the passed weekDay from the locale map.", "param": "{Number} weekDay", "protected": "", "params": [{"type": "Number", "name": "weekDay", "description": ""}], "guessedname": "_getDayNameMin", "guessedtype": "function"}, "selectCurrentDate": {"protected": "", "description": "Select the current date returned by\n<a href=\"Calendar.html#method_getCurrentDate\">getCurrentDate</a>.", "guessedname": "selectCurrentDate", "guessedtype": "function"}, "navigateMonth": {"param": "{Number} offset Offset of the number of months to navigate.\nCould be a positive or a negative offset.", "params": [{"type": "Number", "name": "offset", "description": " Offset of the number of months to navigate.\nCould be a positive or a negative offset."}], "description": "Navigate through months and re-sync the UI.", "guessedname": "navigateMonth", "guessedtype": "function"}, "_getDayName": {"return": {"type": "String", "description": ""}, "description": "Get the day name of the passed weekDay from the locale map.", "param": "{Number} weekDay", "protected": "", "params": [{"type": "Number", "name": "weekDay", "description": ""}], "guessedname": "_getDayName", "guessedtype": "function"}, "_bindDelegateMonthDays": {"private": "", "description": "Delegate DOM events to the UI.", "guessedname": "_bindDelegateMonthDays", "guessedtype": "function"}, "_valuePaddingDaysStart": {"protected": "", "description": "Default value for paddingDaysStart attribute, passed as valueFn.", "guessedname": "_valuePaddingDaysStart", "guessedtype": "function"}, "_selectDate": {"protected": "", "description": "Select the current date returned by\n<a href=\"Calendar.html#method_getCurrentDate\">getCurrentDate</a>.", "guessedname": "_selectDate", "guessedtype": "function"}, "getDetailedSelectedDates": {"return": {"type": "Array", "description": ""}, "description": "Get an Array with selected dates with detailed information (day, month, year).\n<pre><code>[{\nyear: date.getFullYear(),\nmonth: date.getMonth(),\nday: date.getDate()\n}]</code></pre>", "guessedname": "getDetailedSelectedDates", "guessedtype": "function"}, "_uiSetShowToday": {"protected": "", "description": "Sync the UI of the Calendar when showToday attribute change.", "guessedname": "_uiSetAllowNone", "guessedtype": "function"}, "_valueBlankDays": {"protected": "", "description": "Default value for blankDays attribute, passed as valueFn.", "guessedname": "_valueBlankDays", "guessedtype": "function"}, "isAlreadySelected": {"return": {"type": "boolean", "description": ""}, "description": "Check if a date is already selected.", "param": "{Date} date Date to be checked.", "params": [{"type": "Date", "name": "date", "description": " Date to be checked."}], "guessedname": "isAlreadySelected", "guessedtype": "function"}, "findMonthStart": {"return": {"type": "Number", "description": ""}, "description": "Get the first day of the month of the passed year.", "param": "{Number} year Year in the format YYYY.", "params": [{"type": "Number", "name": "year", "description": " Year in the format YYYY."}, {"type": "Number", "name": "month", "description": " 0 for January 11 for December."}], "guessedname": "findMonthStart", "guessedtype": "function"}, "_onMouseEnterDays": {"description": "Fires on mouseenter days elements.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onMouseEnterDays", "guessedtype": "function"}, "_valueMonthDays": {"protected": "", "description": "Default value for monthDays attribute, passed as valueFn.", "guessedname": "_valueMonthDays", "guessedtype": "function"}, "_syncStdContent": {"protected": "", "description": "Sync Calendar StdContent.", "guessedname": "_syncStdContent", "guessedtype": "function"}, "addMonth": {"description": "Adds one month to the current calendar view.", "guessedname": "addMonth", "guessedtype": "function"}, "_getDayNameShort": {"return": {"type": "String", "description": ""}, "description": "Get a short day name of the passed weekDay from the locale map.", "param": "{Number} weekDay", "protected": "", "params": [{"type": "Number", "name": "weekDay", "description": ""}], "guessedname": "_getDayNameShort", "guessedtype": "function"}, "_syncDays": {"protected": "", "description": "Sync Calendar days UI.", "guessedname": "_syncDays", "guessedtype": "function"}, "selectPrevMonth": {"param": "{EventFacade} event", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Navigate to the previous month. Fired from the previous icon on the\nCalendar header.", "guessedname": "selectPrevMonth", "guessedtype": "function"}, "getSelectedDates": {"return": {"type": "Array", "description": ""}, "description": "Get the selected dates.", "guessedname": "getSelectedDates", "guessedtype": "function"}, "_getMonthName": {"return": {"type": "String", "description": ""}, "description": "Get a month name of the passed month from the locale map.", "param": "{Number} month", "protected": "", "params": [{"type": "Number", "name": "month", "description": ""}], "guessedname": "_getMonthName", "guessedtype": "function"}, "_setDates": {"return": {"type": "Array", "description": ""}, "description": "Setter for the <a href=\"Calendar.html#config_dates\">dates</a> attribute.", "param": "{Array} value", "protected": "", "params": [{"type": "Array", "name": "value", "description": ""}], "guessedname": "_setDates", "guessedtype": "function"}, "_bindCalendarEvents": {"protected": "", "description": "Overrides the _bindCalendarEvents placeholder in CalendarBase\nand binds calendar events during bindUI stage.", "guessedname": "_bindCalendarEvents", "guessedtype": "function"}, "_uiSetCurrentYear": {"protected": "", "description": "Sync the UI of the Calendar when currentYear attribute change.", "guessedname": "_uiSetCurrentYear", "guessedtype": "function"}, "syncUI": {"protected": "", "description": "syncUI implementation\nUpdate the scroll position, based on the current value of scrollY", "guessedname": "syncUI", "guessedtype": "function"}, "_setMinMaxDate": {"return": {"type": "Date", "description": ""}, "description": "Setter for the <a href=\"Calendar.html#config_maxDates\">maxDates</a> or\n<a href=\"Calendar.html#config_mainDates\">minDates</a> attributes.", "param": "{Date} value", "protected": "", "params": [{"type": "Date", "name": "value", "description": ""}], "guessedname": "_setMinMaxDate", "guessedtype": "function"}, "_bindDelegate": {"private": "", "description": "Bind DOM events to the UI.", "guessedname": "_bindDelegate", "guessedtype": "function"}, "_renderWeekDays": {"protected": "", "description": "Render Calendar DOM week days elements.", "guessedname": "_renderWeekDays", "guessedtype": "function"}, "_valueWeekDays": {"protected": "", "description": "Default value for weekDays attribute, passed as valueFn.", "guessedname": "_valueWeekDays", "guessedtype": "function"}, "_syncPaddingEnd": {"protected": "", "description": "Sync Calendar padding end days UI.", "guessedname": "_syncPaddingEnd", "guessedtype": "function"}, "_defSelectFn": {"description": "Default calendar:select handler", "param": "{EventFacade} event The Event object", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " The Event object"}], "guessedname": "_defSelectFn", "guessedtype": "function"}, "_syncView": {"protected": "", "description": "Sync Calendar header, days and selected days UI.", "guessedname": "_syncView", "guessedtype": "function"}, "selectToday": {"description": "Select today date on the Calendar.", "guessedname": "selectToday", "guessedtype": "function"}, "eachSelectedDate": {"param": "{function} fn Callback to be executed for each date.", "params": [{"type": "function", "name": "fn", "description": " Callback to be executed for each date."}, {"type": "Dates", "name": "dates", "description": " Optional dates Array to loop through. If not passed it will use\nthe <a href=\"Calendar.html#config_dates\">dates</a>."}], "description": "Loop each date from <a href=\"Calendar.html#config_dates\">dates</a> and\nexecutes a callback.", "guessedname": "eachSelectedDate", "guessedtype": "function"}, "_onMouseLeaveDays": {"description": "Fires on mouseleave days elements.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onMouseLeaveDays", "guessedtype": "function"}, "_setMonth": {"return": {"type": "", "description": "number"}, "description": "Setter for the <a href=\"Calendar.html#config_dates\">currentMonth</a> attribute.", "param": "int value", "protected": "", "params": [{"type": "", "name": "int", "description": " value"}], "guessedname": "_setMonth", "guessedtype": "function"}, "clear": {"description": "Clear all selected dates on the Calendar.", "guessedname": "clear", "guessedtype": "function"}, "renderUI": {"protected": "", "description": "Create the DOM structure for the Calendar. Lifecycle.", "guessedname": "renderUI", "guessedtype": "function"}, "_onClickDays": {"description": "Fires on click days elements.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onClickDays", "guessedtype": "function"}}, "extends": "CalendarBase", "superclass": "OverlayContext", "file": "aui-calendar-debug.js", "guessedtype": "property", "shortname": "Calendar", "properties": {"NAME": {"description": "The identity of the widget.", "default": "'Calendar'", "readonly": "", "protected": "", "static": "", "guessedname": "NAME", "guessedtype": "property", "type": "String"}, "_lastSelectedDate": {"description": "A property tracking the last selected date on the calendar, for the\npurposes of multiple selection.", "default": "null", "private": "", "guessedname": "_lastSelectedDate", "guessedtype": "property", "type": "Date"}, "ProgressBar.HTML_PARSER": {"type": "Object", "static": "", "description": "Object hash, defining how attribute values are to be parsed from\nmarkup contained in the widget's content box.", "guessedname": "HTML_PARSER", "guessedtype": "property"}, "Calendar.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}, "ATTRS": {"description": "Static property used to define the default attribute configuration of\nthe Widget.", "protected": "", "static": "", "guessedname": "ATTRS", "guessedtype": "property", "type": "{Object}"}, "Calendar.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the Calendar.", "guessedname": "ATTRS", "guessedtype": "property"}}, "description": "Create a calendar view to represent a single or multiple\nmonth range of dates, rendered as a grid with date and\nweekday labels."}, "VMLPath": {"name": "VMLPath", "namespace": "", "module": "graphics", "guessedname": "VMLPath", "methods": {"_updateHandler": {"private": "", "description": "Updates `Shape` based on attribute changes.", "guessedname": "_updateHandler", "guessedtype": "function"}}, "extends": "VMLShape", "superclass": "VMLShape", "file": "graphics-vml-debug.js", "guessedtype": "function", "shortname": "VMLPath", "configs": {"width": {"type": "Number", "description": "Indicates the width of the shape", "guessedname": "width", "guessedtype": "property"}, "path": {"readonly": "", "type": "String", "description": "Indicates the path used for the node.", "guessedname": "path", "guessedtype": "property"}, "height": {"type": "Number", "description": "Indicates the height of the shape", "guessedname": "height", "guessedtype": "property"}}, "description": "<a href=\"http://www.w3.org/TR/NOTE-VML\">VML</a> implementation of the <a href=\"Path.html\">`Path`</a> class. \n`VMLPath` is not intended to be used directly. Instead, use the <a href=\"Path.html\">`Path`</a> class. \nIf the browser lacks <a href=\"http://www.w3.org/TR/SVG/\">SVG</a> and <a href=\"http://www.w3.org/TR/html5/the-canvas-element.html\">Canvas</a> \ncapabilities, the <a href=\"Path.html\">`Path`</a> class will point to the `VMLPath` class."}, "UA": {"name": "UA", "namespace": "", "module": "yui", "methods": {"parseUA": {"description": "Static method on `YUI.Env` for parsing a UA string.  Called at instantiation\nto populate `Y.UA`.", "param": "{String} [subUA=navigator.userAgent] UA string to parse", "returns": "{Object} The Y.UA object", "static": "", "guessedname": "parseUA", "guessedtype": "function", "params": [{"type": "String", "name": "[subUA=navigator.userAgent]", "description": " UA string to parse"}]}, "Env.parseUA": {"description": "Static method for parsing the UA string. Defaults to assigning it's value to Y.UA", "param": "{String} subUA Parse this UA string instead of navigator.userAgent", "returns": "{Object} The Y.UA object", "static": "", "guessedname": "parseUA", "guessedtype": "function", "params": [{"type": "String", "name": "subUA", "description": " Parse this UA string instead of navigator.userAgent"}]}}, "static": "", "file": "aui.js", "shortname": "UA", "properties": {"ipad": {"type": "float", "static": "", "description": "Detects Apple iPad's OS version", "guessedname": "ipad", "guessedtype": "property"}, "os": {"description": "The operating system.  Currently only detecting windows or macintosh", "default": "null", "static": "", "guessedname": "os", "guessedtype": "property", "type": "string"}, "secure": {"type": "boolean", "static": "", "description": "Set to true if the page appears to be in SSL", "guessedname": "secure", "guessedtype": "property"}, "opera": {"type": "float", "static": "", "description": "Opera version number or 0.  Example: 9.2", "guessedname": "opera", "guessedtype": "property"}, "ie": {"type": "float", "static": "", "description": "Internet Explorer version number or 0.  Example: 6", "guessedname": "ie", "guessedtype": "property"}, "ipod": {"type": "float", "static": "", "description": "Detects Apples iPod's OS version", "guessedname": "ipod", "guessedtype": "property"}, "ios": {"description": "General truthy check for iPad, iPhone or iPod", "default": "null", "static": "", "guessedname": "ios", "guessedtype": "property", "type": "float"}, "webos": {"type": "float", "static": "", "description": "Detects Palms WebOS version", "guessedname": "webos", "guessedtype": "property"}, "air": {"type": "float", "description": "Adobe AIR version number or 0.  Only populated if webkit is detected.\nExample: 1.0", "guessedname": "air", "guessedtype": "property"}, "chrome": {"type": "float", "static": "", "description": "Chrome will be detected as webkit, but this property will also\nbe populated with the Chrome version number", "guessedname": "chrome", "guessedtype": "property"}, "caja": {"type": "float", "description": "Google Caja version number or 0.", "guessedname": "caja", "guessedtype": "property"}, "mobile": {"description": "The mobile property will be set to a string containing any relevant\nuser agent information when a modern mobile browser is detected.\nCurrently limited to Safari on the iPhone/iPod Touch, Nokia N-series\ndevices with the WebKit-based browser, and Opera Mini.", "default": "null", "static": "", "guessedname": "mobile", "guessedtype": "property", "type": "string"}, "safari": {"type": "float", "static": "", "description": "Safari will be detected as webkit, but this property will also\nbe populated with the Safari version number", "guessedname": "safari", "guessedtype": "property"}, "webkit": {"type": "float", "static": "", "description": "AppleWebKit version.  KHTML browsers that are not WebKit browsers\nwill evaluate to 1, other browsers 0.  Example: 418.9\n<pre>\nSafari 1.3.2 (312.6): 312.8.1 <-- Reports 312.8 -- currently the\nlatest available for Mac OSX 10.3.\nSafari 2.0.2:         416     <-- hasOwnProperty introduced\nSafari 2.0.4:         418     <-- preventDefault fixed\nSafari 2.0.4 (419.3): 418.9.1 <-- One version of Safari may run\ndifferent versions of webkit\nSafari 2.0.4 (419.3): 419     <-- Tiger installations that have been\nupdated, but not updated\nto the latest patch.\nWebkit 212 nightly:   522+    <-- Safari 3.0 precursor (with native\nSVG and many major issues fixed).\nSafari 3.0.4 (523.12) 523.12  <-- First Tiger release - automatic\nupdate from 2.x via the 10.4.11 OS patch.\nWebkit nightly 1/2008:525+    <-- Supports DOMContentLoaded event.\nyahoo.com user agent hack removed.\n</pre>\nhttp://en.wikipedia.org/wiki/Safari_version_history", "guessedname": "webkit", "guessedtype": "property"}, "android": {"type": "float", "static": "", "description": "Detects Googles Android OS version", "guessedname": "android", "guessedtype": "property"}, "gecko": {"type": "float", "static": "", "description": "Gecko engine revision number.  Will evaluate to 1 if Gecko\nis detected but the revision could not be found. Other browsers\nwill be 0.  Example: 1.8\n<pre>\nFirefox 1.0.0.4: 1.7.8   <-- Reports 1.7\nFirefox 1.5.0.9: 1.8.0.9 <-- 1.8\nFirefox 2.0.0.3: 1.8.1.3 <-- 1.81\nFirefox 3.0   <-- 1.9\nFirefox 3.5   <-- 1.91\n</pre>", "guessedname": "gecko", "guessedtype": "property"}, "iphone": {"type": "float", "static": "", "description": "Detects Apple iPhone's OS version", "guessedname": "iphone", "guessedtype": "property"}}, "description": "YUI user agent detection.\nDo not fork for a browser if it can be avoided.  Use feature detection when\nyou can.  Use the user agent as a last resort.  For all fields listed\nas @type float, UA stores a version number for the browser engine,\n0 otherwise.  This value may or may not map to the version number of\nthe browser using the engine.  The value is presented as a float so\nthat it can easily be used for boolean evaluation as well as for\nlooking for a particular range of versions.  Because of this,\nsome of the granularity of the version info may be lost.  The fields that\nare @type string default to null.  The API docs list the values that\nthese fields can have."}, "Axis": {"name": "Axis", "configs": {"node": {"type": "HTMLElement", "description": "Contains the contents of the axis.", "guessedname": "node", "guessedtype": "property"}, "tickPoints": {"type": "Array", "description": "Collection of points used for placement of labels and ticks along the axis.", "guessedname": "tickPoints", "guessedtype": "property"}, "graphic": {"type": "Graphic", "description": "The graphic in which the axis line and ticks will be rendered.", "guessedname": "graphic", "guessedtype": "property"}, "title": {"type": "String", "description": "Title for the axis. When specified, the title will display. The position of the title is determined by the axis position. \n<dl>\n<dt>top</dt><dd>Appears above the axis and it labels. The default rotation is 0.</dd>\n<dt>right</dt><dd>Appears to the right of the axis and its labels. The default rotation is 90.</dd>\n<dt>bottom</dt><dd>Appears below the axis and its labels. The default rotation is 0.</dd>\n<dt>left</dt><dd>Appears to the left of the axis and its labels. The default rotation is -90.</dd>\n</dl>", "guessedname": "title", "guessedtype": "property"}, "labelFunctionScope": {"type": "Object", "description": "Object which should have by the labelFunction", "guessedname": "labelFunctionScope", "guessedtype": "property"}, "leftTickOffset": {"type": "Number", "description": "Distance determined by the tick styles used to calculate the distance between the axis\nline in relation to the left of the axis.", "guessedname": "leftTickOffset", "guessedtype": "property"}, "bottomTickOffset": {"type": "Number", "description": "Distance determined by the tick styles used to calculate the distance between the axis\nline in relation to the bottom of the axis.", "guessedname": "bottomTickOffset", "guessedtype": "property"}, "labels": {"type": "Array", "description": "Collection of labels used to render the axis.", "guessedname": "labels", "guessedtype": "property"}, "maxLabelSize": {"protected": "", "type": "Number", "description": "Length in pixels of largest text bounding box. Used to calculate the height of the axis.", "guessedname": "maxLabelSize", "guessedtype": "property"}, "edgeOffset": {"protected": "", "type": "Number", "description": "Difference betweend the first/last tick and edge of axis.", "guessedname": "edgeOffset", "guessedtype": "property"}, "position": {"type": "String", "description": "Direction of the axis.", "guessedname": "position", "guessedtype": "property"}, "styles": {"type": "Object", "description": "Style properties used for drawing an axis. This attribute is inherited from `Renderer`. Below are the default values:\n<dl>\n<dt>majorTicks</dt><dd>Properties used for drawing ticks.\n<dl>\n<dt>display</dt><dd>Position of the tick. Possible values are `inside`, `outside`, `cross` and `none`. The\ndefault value is `inside`.</dd>\n<dt>length</dt><dd>The length (in pixels) of the tick. The default value is 4.</dd>\n<dt>color</dt><dd>The color of the tick. The default value is `#dad8c9`</dd>\n<dt>weight</dt><dd>Number indicating the width of the tick. The default value is 1.</dd>\n<dt>alpha</dt><dd>Number from 0 to 1 indicating the opacity of the tick. The default value is 1.</dd>\n</dl>\n</dd>\n<dt>line</dt><dd>Properties used for drawing the axis line. \n<dl>\n<dt>weight</dt><dd>Number indicating the width of the axis line. The default value is 1.</dd>\n<dt>color</dt><dd>The color of the axis line. The default value is `#dad8c9`.</dd>\n<dt>alpha</dt><dd>Number from 0 to 1 indicating the opacity of the tick. The default value is 1.</dd>\n</dl>\n</dd>\n<dt>majorUnit</dt><dd>Properties used to calculate the `majorUnit` for the axis. \n<dl>\n<dt>determinant</dt><dd>The algorithm used for calculating distance between ticks. The possible options are `count` and `distance`. If\nthe `determinant` is `count`, the axis ticks will spaced so that a specified number of ticks appear on the axis. If the `determinant`\nis `distance`, the axis ticks will spaced out according to the specified distance. The default value is `count`.</dd>\n<dt>count</dt><dd>Number of ticks to appear on the axis when the `determinant` is `count`. The default value is 11.</dd>\n<dt>distance</dt><dd>The distance (in pixels) between ticks when the `determinant` is `distance`. The default value is 75.</dd>\n</dl>\n</dd>\n<dt>label</dt><dd>Properties and styles applied to the axis labels.\n<dl>\n<dt>color</dt><dd>The color of the labels. The default value is `#808080`.</dd>\n<dt>alpha</dt><dd>Number between 0 and 1 indicating the opacity of the labels. The default value is 1.</dd>\n<dt>fontSize</dt><dd>The font-size of the labels. The default value is 85%</dd>\n<dt>rotation</dt><dd>The rotation, in degrees (between -90 and 90) of the labels. The default value is 0.</dd>\n<dt>margin</dt><dd>The distance between the label and the axis/tick. Depending on the position of the `Axis`, only one of the properties used.\n<dl>\n<dt>top</dt><dd>Pixel value used for an axis with a `position` of `bottom`. The default value is 4.</dd>\n<dt>right</dt><dd>Pixel value used for an axis with a `position` of `left`. The default value is 4.</dd>\n<dt>bottom</dt><dd>Pixel value used for an axis with a `position` of `top`. The default value is 4.</dd>\n<dt>left</dt><dd>Pixel value used for an axis with a `position` of `right`. The default value is 4.</dd>\n</dl>\n</dd>\n</dl>\n</dd>\n</dl>"}, "path": {"readonly": "", "type": "Shape", "guessedname": "path", "private": "", "guessedtype": "property"}, "topTickOffset": {"type": "Number", "description": "Distance determined by the tick styles used to calculate the distance between the axis\nline in relation to the top of the axis.", "guessedname": "topTickOffset", "guessedtype": "property"}, "rightTickOffset": {"type": "Number", "description": "Distance determined by the tick styles used to calculate the distance between the axis\nline in relation to the right side of the axis.", "guessedname": "rightTickOffset", "guessedtype": "property"}, "overlapGraph": {"type": "Boolean", "description": "Indicates whether the axis overlaps the graph. If an axis is the inner most axis on a given\nposition and the tick position is inside or cross, the axis will need to overlap the graph.", "guessedname": "overlapGraph", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": " (optional) Configuration parameters for the Chart."}], "description": "The Axis class. Generates axes for a chart."}], "namespace": "", "module": "charts", "events": {"bottomTickOffsetChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "bottomTickOffsetChange", "description": "Fires when the value for the configuration attribute 'bottomTickOffset' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "positionChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "positionChange", "description": "Fires when the value for the configuration attribute 'position' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "stylesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "stylesChange", "description": "Fires when the value for the configuration attribute 'styles' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "leftTickOffsetChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "leftTickOffsetChange", "description": "Fires when the value for the configuration attribute 'leftTickOffset' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "graphicChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "graphicChange", "description": "Fires when the value for the configuration attribute 'graphic' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "pathChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "pathChange", "description": "Fires when the value for the configuration attribute 'path' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "nodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "nodeChange", "description": "Fires when the value for the configuration attribute 'node' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "labelsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "labelsChange", "description": "Fires when the value for the configuration attribute 'labels' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "overlapGraphChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "overlapGraphChange", "description": "Fires when the value for the configuration attribute 'overlapGraph' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "labelFunctionScopeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "labelFunctionScopeChange", "description": "Fires when the value for the configuration attribute 'labelFunctionScope' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "titleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "titleChange", "description": "Fires when the value for the configuration attribute 'title' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "edgeOffsetChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "edgeOffsetChange", "description": "Fires when the value for the configuration attribute 'edgeOffset' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "topTickOffsetChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "topTickOffsetChange", "description": "Fires when the value for the configuration attribute 'topTickOffset' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "rightTickOffsetChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "rightTickOffsetChange", "description": "Fires when the value for the configuration attribute 'rightTickOffset' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "tickPointsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "tickPointsChange", "description": "Fires when the value for the configuration attribute 'tickPoints' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "maxLabelSizeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "maxLabelSizeChange", "description": "Fires when the value for the configuration attribute 'maxLabelSize' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "Axis", "methods": {"getLineEnd": {"guessedname": "getLineEnd", "return": {"type": "", "description": "Object"}, "description": "Gets the end point of an axis.", "private": "", "guessedtype": "function"}, "_setCanvas": {"private": "", "description": "Creates a graphic instance to be used for the axis line and ticks.", "guessedname": "_setCanvas", "guessedtype": "function"}, "drawLine": {"description": "Draws a line segment between 2 points", "param": "{Object} startPoint x and y coordinates for the start point of the line segment", "params": [{"type": "Object", "name": "startPoint", "description": " x and y coordinates for the start point of the line segment"}, {"type": "Object", "name": "endPoint", "description": " x and y coordinates for the for the end point of the line segment"}, {"type": "Object", "name": "line", "description": " styles (weight, color and alpha to be applied to the line segment)"}], "private": "", "guessedname": "drawLine", "guessedtype": "function"}, "getLastPoint": {"guessedname": "getLastPoint", "return": {"type": "", "description": "Object"}, "description": "Calculates the placement of last tick on an axis.", "private": "", "guessedtype": "function"}, "_clearLabelCache": {"private": "", "description": "Removes axis labels from the dom and clears the label cache.", "guessedname": "_clearLabelCache", "guessedtype": "function"}, "_updateTitle": {"private": "", "description": "Updates the content and style properties for a title field.", "guessedname": "_updateTitle", "guessedtype": "function"}, "_dataChangeHandler": {"description": "Handles change to the dataProvider", "param": "{Object} e Event object", "params": [{"type": "Object", "name": "e", "description": " Event object"}], "private": "", "guessedname": "_dataChangeHandler", "guessedtype": "function"}, "getLabel": {"return": {"type": "", "description": "HTMLElement"}, "description": "Creates or updates an axis label.", "private": "", "params": [{"type": "Object", "name": "pt", "description": " x and y coordinates for the label"}, {"type": "Object", "name": "styles", "description": " styles applied to label"}], "param": "{Object} pt x and y coordinates for the label", "guessedname": "getLabel", "guessedtype": "function"}, "_drawAxis": {"private": "", "description": "Draws an axis.", "guessedname": "_drawAxis", "guessedtype": "function"}, "getFirstPoint": {"return": {"type": "", "description": "Object"}, "description": "Gets the position of the first point on an axis.", "private": "", "params": [{"type": "Object", "name": "pt", "description": " Object containing x and y coordinates."}], "param": "{Object} pt Object containing x and y coordinates.", "guessedname": "getFirstPoint", "guessedtype": "function"}, "getNextPoint": {"return": {"type": "", "description": "Object"}, "description": "Gets the position of the next point on an axis.", "private": "", "params": [{"type": "Object", "name": "point", "description": " Object containing x and y coordinates."}, {"type": "Number", "name": "majorUnitDistance", "description": " Distance in pixels between ticks."}], "param": "{Object} point Object containing x and y coordinates.", "guessedname": "getNextPoint", "guessedtype": "function"}, "getLength": {"guessedname": "getLength", "return": {"type": "", "description": "Number"}, "description": "Calcuates the width or height of an axis depending on its direction.", "private": "", "guessedtype": "function"}, "_rotate": {"description": "Rotates and positions a text field.", "param": "{HTMLElement} label text field to rotate and position", "params": [{"type": "HTMLElement", "name": "label", "description": " text field to rotate and position"}, {"type": "Object", "name": "props", "description": " properties to be applied to the text field."}], "private": "", "guessedname": "_rotate", "guessedtype": "function"}, "_updateHandler": {"description": "Handles changes to axis.", "param": "{Object} e Event object", "params": [{"type": "Object", "name": "e", "description": " Event object"}], "private": "", "guessedname": "_updateHandler", "guessedtype": "function"}, "_handleSizeChange": {"description": "Updates the axis when the size changes.", "param": "{Object} e Event object.", "params": [{"type": "Object", "name": "e", "description": " Event object."}], "private": "", "guessedname": "_handleSizeChange", "guessedtype": "function"}, "_getDefaultStyles": {"protected": "", "return": {"type": "", "description": "Object"}, "description": "Gets the default value for the `styles` attribute. Overrides\nbase implementation.", "guessedname": "_getDefaultStyles", "guessedtype": "function"}, "_createLabelCache": {"private": "", "description": "Creates a cache of labels that can be re-used when the axis redraws.", "guessedname": "_createLabelCache", "guessedtype": "function"}, "_updatePathElement": {"private": "", "description": "Updates path.", "guessedname": "_updatePathElement", "guessedtype": "function"}, "getPosition": {"description": "Calculates position on the axis.", "param": "{Object} point contains x and y values", "params": [{"type": "Object", "name": "point", "description": " contains x and y values"}], "private": "", "guessedname": "getPosition", "guessedtype": "function"}, "syncUI": {"private": "", "guessedname": "syncUI", "guessedtype": "function"}, "_getTextRotationProps": {"return": {"type": "", "description": "Object"}, "description": "Generates the properties necessary for rotating and positioning a text field.", "private": "", "params": [{"type": "Object", "name": "styles", "description": " properties for the text field"}], "param": "{Object} styles properties for the text field", "guessedname": "_getTextRotationProps", "guessedtype": "function"}, "renderUI": {"private": "", "guessedname": "renderUI", "guessedtype": "function"}}, "uses": ["Renderer"], "superclass": "Widget", "file": "charts.js", "guessedtype": "property", "extends": "Widget", "shortname": "Axis", "properties": {"_layoutClasses": {"guessedname": "_layoutClasses", "type": "Object", "description": "Maps key values to classes containing layout algorithms", "private": "", "guessedtype": "property"}}, "description": "The Axis class. Generates axes for a chart."}, "DataSourceJSONSchema": {"name": "DataSourceJSONSchema", "namespace": "", "module": "datasource", "guessedname": "DataSourceJSONSchema", "methods": {"_beforeDefDataFn": {"description": "Parses raw data into a normalized response. To accommodate XHR responses,\nwill first look for data in data.responseText. Otherwise will just work\nwith data.", "param": "tId {Number} Unique transaction ID.", "protected": "", "params": [{"type": "Number", "name": "tId", "description": "  Unique transaction ID."}, {"type": "Object", "name": "request", "description": "  The request."}, {"type": "Object", "name": "callback", "description": "  The callback object with the following properties:\n<dl>\n<dt>success (Function)</dt> <dd>Success handler.</dd>\n<dt>failure (Function)</dt> <dd>Failure handler.</dd>\n</dl>"}, {"type": "Object", "name": "data", "description": "  Raw data."}], "guessedname": "_beforeDefDataFn", "guessedtype": "function"}, "initializer": {"description": "Internal init() handler.", "param": "config {Object} Config object.", "params": [{"type": "Object", "name": "config", "description": "  Config object."}], "private": "", "guessedname": "initializer", "guessedtype": "function"}}, "extends": "Plugin.Base", "superclass": "Plugin.Base", "file": "datasource-jsonschema.js", "guessedtype": "function", "shortname": "DataSourceJSONSchema", "properties": {"NS": {"description": "The namespace for the plugin. This will be the property on the host which\nreferences the plugin instance.", "value": "\"schema\"", "static": "", "guessedname": "NS", "guessedtype": "property", "type": "String", "final": ""}, "NAME": {"description": "Class name.", "value": "\"dataSourceJSONSchema\"", "static": "", "guessedname": "NAME", "guessedtype": "property", "type": "String", "final": ""}}, "description": "Adds schema-parsing to the DataSource Utility."}, "YQL": {"name": "YQL", "constructors": [{"params": [{"type": "String", "name": "sql", "description": " The SQL statement to execute"}, {"type": "Function", "name": "callback", "description": " The callback to execute after the query (optional)."}, {"type": "Object", "name": "params", "description": " An object literal of extra parameters to pass along (optional)."}, {"type": "Object", "name": "opts", "description": " An object literal of configuration options (optional): proto (http|https), base (url)"}], "description": "This class adds a sugar class to allow access to YQL (http://developer.yahoo.com/yql/)."}], "namespace": "", "module": "yql", "guessedname": "YQL", "file": "yql.js", "guessedtype": "function", "shortname": "YQL", "description": "This class adds a sugar class to allow access to YQL (http://developer.yahoo.com/yql/)."}, "TreeNodeIO": {"name": "TreeNodeIO", "configs": {"loaded": {"default": "false", "type": "boolean", "description": "Whether the current TreeNode has loaded the content.", "guessedname": "loaded", "guessedtype": "property"}, "loading": {"default": "false", "type": "boolean", "description": "Whether the current TreeNode IO transaction is loading.", "guessedname": "loading", "guessedtype": "property"}, "cache": {"default": "true", "type": "boolean", "description": "Whether the current TreeNode should cache the loaded content or not.", "guessedname": "cache", "guessedtype": "property"}, "io": {"default": "Default IO Configuration.", "type": "Object", "description": "IO options for the current TreeNode load the children.", "guessedname": "io", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "A base class for TreeNodeIO, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Ajax support to load the children of the current TreeNode</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var treeNodeIO = new A.TreeNodeIO({\nlabel: 'TreeNodeIO',\ncache: false,\nio: {\nurl: 'assets/content.html'\n}\n});\n</code></pre>\nCheck the list of <a href=\"TreeNodeIO.html#configattributes\">Configuration Attributes</a> available for\nTreeNodeIO."}], "namespace": "", "module": "aui-tree", "events": {"loadingChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "loadingChange", "description": "Fires when the value for the configuration attribute 'loading' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "loadedChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "loadedChange", "description": "Fires when the value for the configuration attribute 'loaded' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "ioChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "ioChange", "description": "Fires when the value for the configuration attribute 'io' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "cacheChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "cacheChange", "description": "Fires when the value for the configuration attribute 'cache' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "TreeNodeIO", "methods": {"_createEvents": {"private": "", "description": "Create custom events.", "guessedname": "_createEvents", "guessedtype": "function"}, "ioFailureHandler": {"description": "IO Failure handler.", "guessedname": "ioFailureHandler", "guessedtype": "function"}, "_syncPaginatorIOData": {"protected": "", "description": "Adds two extra IO data parameter to the request to handle the\npaginator. By default these parameters are <code>limit</code> and\n<code>start</code>.", "guessedname": "_syncPaginatorIOData", "guessedtype": "function"}, "ioCompleteHandler": {"description": "IO Complete handler.", "guessedname": "ioCompleteHandler", "guessedtype": "function"}, "initIO": {"description": "Initialize the IO transaction setup on the <a\nhref=\"TreeNode.html#config_io\">io</a> attribute.", "guessedname": "initIO", "guessedtype": "function"}, "ioStartHandler": {"description": "IO Start handler.", "guessedname": "ioStartHandler", "guessedtype": "function"}, "_defPaginatorClickFn": {"description": "Default paginatorClick event handler. Increment the\n<code>paginator.start</code> to the next <code>paginator.limit</code>.", "param": "{EventFacade} event The Event object", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " The Event object"}], "guessedname": "_defPaginatorClickFn", "guessedtype": "function"}, "_syncPaginatorUI": {"protected": "", "description": "Sync the paginator link UI.", "guessedname": "_syncPaginatorUI", "guessedtype": "function"}, "_setIO": {"return": {"type": "Object", "description": ""}, "description": "Setter for <a href=\"TreeNodeIO.html#config_io\">io</a>.", "param": "{Object} v", "protected": "", "params": [{"type": "Object", "name": "v", "description": ""}], "guessedname": "_setIO", "guessedtype": "function"}, "_inheritOwnerTreeAttrs": {"protected": "", "description": "If not specified on the TreeNode some attributes are inherited from the\nownerTree by this method.", "guessedname": "_inheritOwnerTreeAttrs", "guessedtype": "function"}, "_bindPaginatorUI": {"protected": "", "description": "Bind events to the paginator \"show more\" link.", "guessedname": "_bindPaginatorUI", "guessedtype": "function"}, "_handlePaginatorClickEvent": {"description": "Fires the paginatorClick event.", "param": "{EventFacade} event paginatorClick event facade", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " paginatorClick event facade"}], "guessedname": "_handlePaginatorClickEvent", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Bind the events on the TreeNodeIO UI. Lifecycle.", "guessedname": "bindUI", "guessedtype": "function"}, "ioSuccessHandler": {"description": "IO Success handler.", "guessedname": "ioSuccessHandler", "guessedtype": "function"}}, "extends": "TreeNode", "superclass": "TreeNode", "file": "aui-tree.js", "guessedtype": "property", "shortname": "TreeNodeIO", "properties": {"TreeNode.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the TreeNode.", "guessedname": "ATTRS", "guessedtype": "property"}, "TreeNode.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}}, "description": "A base class for TreeNodeIO, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Ajax support to load the children of the current TreeNode</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var treeNodeIO = new A.TreeNodeIO({\nlabel: 'TreeNodeIO',\ncache: false,\nio: {\nurl: 'assets/content.html'\n}\n});\n</code></pre>\nCheck the list of <a href=\"TreeNodeIO.html#configattributes\">Configuration Attributes</a> available for\nTreeNodeIO."}, "CanvasEllipse": {"name": "CanvasEllipse", "constructors": [{"description": "<a href=\"http://www.w3.org/TR/html5/the-canvas-element.html\">Canvas</a> implementation of the <a href=\"Ellipse.html\">`Ellipse`</a> class. \n`CanvasEllipse` is not intended to be used directly. Instead, use the <a href=\"Ellipse.html\">`Ellipse`</a> class. \nIf the browser lacks <a href=\"http://www.w3.org/TR/SVG/\">SVG</a> capabilities but has \n<a href=\"http://www.w3.org/TR/html5/the-canvas-element.html\">Canvas</a> capabilities, the <a href=\"Ellipse.html\">`Ellipse`</a> \nclass will point to the `CanvasEllipse` class."}], "namespace": "", "module": "graphics", "guessedname": "CanvasEllipse", "methods": {"_draw": {"private": "", "description": "Draws the shape.", "guessedname": "_draw", "guessedtype": "function"}}, "file": "graphics-canvas.js", "guessedtype": "function", "shortname": "CanvasEllipse", "properties": {"_type": {"guessedname": "_type", "type": "String", "description": "Indicates the type of shape", "private": "", "guessedtype": "property"}}, "description": "<a href=\"http://www.w3.org/TR/html5/the-canvas-element.html\">Canvas</a> implementation of the <a href=\"Ellipse.html\">`Ellipse`</a> class. \n`CanvasEllipse` is not intended to be used directly. Instead, use the <a href=\"Ellipse.html\">`Ellipse`</a> class. \nIf the browser lacks <a href=\"http://www.w3.org/TR/SVG/\">SVG</a> capabilities but has \n<a href=\"http://www.w3.org/TR/html5/the-canvas-element.html\">Canvas</a> capabilities, the <a href=\"Ellipse.html\">`Ellipse`</a> \nclass will point to the `CanvasEllipse` class."}, "ColorPicker": {"name": "ColorPicker", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "A base class for ColorPicker, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>ColorPicker utility</li>\n</ul>\nCheck the list of <a href=\"ColorPicker.html#configattributes\">Configuration Attributes</a> available for\nColorPicker."}], "namespace": "", "module": "aui-color-picker", "guessedname": "ColorPicker", "methods": {"bindUI": {"protected": "", "description": "Bind the events on the ColorPicker UI. Lifecycle.", "guessedname": "bindUI", "guessedtype": "function"}, "syncUI": {"protected": "", "description": "Sync the ColorPicker UI. Lifecycle.", "guessedname": "syncUI", "guessedtype": "function"}, "renderUI": {"protected": "", "description": "Create the DOM structure for the ColorPicker. Lifecycle.", "guessedname": "renderUI", "guessedtype": "function"}}, "extends": "OverlayContext", "superclass": "OverlayContext", "file": "aui-color-picker.js", "guessedtype": "property", "shortname": "ColorPicker", "properties": {"ColorPicker.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the ColorPicker.", "guessedname": "ATTRS", "guessedtype": "property"}, "ColorPicker.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}}, "description": "A base class for ColorPicker, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>ColorPicker utility</li>\n</ul>\nCheck the list of <a href=\"ColorPicker.html#configattributes\">Configuration Attributes</a> available for\nColorPicker."}, "Matrix": {"name": "Matrix", "constructors": [{"description": "Matrix is a class that allows for the manipulation of a transform matrix.\nThis class is a work in progress."}], "namespace": "", "module": "graphics", "guessedname": "Matrix", "methods": {"applyCSSText": {"return": "Array", "description": "Parses a string and updates the matrix.", "param": "{String} val A css transform string", "params": [{"type": "String", "name": "val", "description": " A css transform string"}], "guessedname": "applyCSSText", "guessedtype": "function"}, "toCSSText": {"return": {"type": "", "description": "String"}, "description": "Returns a string of text that can be used to populate a the css transform property of an element.", "guessedname": "toCSSText", "guessedtype": "function"}, "scale": {"param": "{Number} val", "params": [{"type": "Number", "name": "val", "description": ""}], "description": "Applies a scale transform", "guessedname": "scale", "guessedtype": "function"}, "multiple": {"param": "{Number} a", "params": [{"type": "Number", "name": "a", "description": ""}, {"type": "Number", "name": "b", "description": ""}, {"type": "Number", "name": "c", "description": ""}, {"type": "Number", "name": "d", "description": ""}, {"type": "Number", "name": "dx", "description": ""}, {"type": "Number", "name": "dy", "description": ""}], "description": "Updates the matrix.", "guessedname": "multiply", "guessedtype": "function"}, "_round": {"private": "", "description": "Rounds values", "guessedname": "_round", "guessedtype": "function"}, "skew": {"param": "{Number} x The value to skew on the x-axis.", "params": [{"type": "Number", "name": "x", "description": " The value to skew on the x-axis."}, {"type": "Number", "name": "y", "description": " The value to skew on the y-axis."}], "description": "Applies a skew transformation.", "guessedname": "skew", "guessedtype": "function"}, "rad2deg": {"return": {"type": "", "description": "Number"}, "description": "Converts a radian value to a degree.", "param": "{Number} rad Radian value to be converted.", "params": [{"type": "Number", "name": "rad", "description": " Radian value to be converted."}], "guessedname": "rad2deg", "guessedtype": "function"}, "deg2rad": {"return": {"type": "", "description": "Number"}, "description": "Converts a degree value to a radian.", "param": "{Number} deg Degree value to be converted to radian.", "params": [{"type": "Number", "name": "deg", "description": " Degree value to be converted to radian."}], "guessedname": "deg2rad", "guessedtype": "function"}, "init": {"param": "{Object} config Specified key value pairs for matrix properties. If a property is not explicitly defined in the config argument,\nthe default value will be used.", "params": [{"type": "Object", "name": "config", "description": " Specified key value pairs for matrix properties. If a property is not explicitly defined in the config argument,\nthe default value will be used."}], "description": "Initializes a matrix.", "guessedname": "init", "guessedtype": "function"}, "rotate": {"param": "{Number} deg The degree of the rotation.", "params": [{"type": "Number", "name": "deg", "description": " The degree of the rotation."}], "description": "Applies a rotate transform.", "guessedname": "rotate", "guessedtype": "function"}, "skewY": {"param": "{Number} y y-coordinate", "params": [{"type": "Number", "name": "y", "description": " y-coordinate"}], "description": "Applies a skew to the y-coordinate", "guessedname": "skewY", "guessedtype": "function"}, "skewX": {"param": "{Number} x x-coordinate", "params": [{"type": "Number", "name": "x", "description": " x-coordinate"}], "description": "Applies a skew to the x-coordinate", "guessedname": "skewX", "guessedtype": "function"}, "toFilterText": {"return": {"type": "", "description": "String"}, "description": "Returns a string that can be used to populate the css filter property of an element.", "guessedname": "toFilterText", "guessedtype": "function"}, "translate": {"param": "{Number} x The value to transate on the x-axis.", "params": [{"type": "Number", "name": "x", "description": " The value to transate on the x-axis."}, {"type": "Number", "name": "y", "description": " The value to translate on the y-axis."}], "description": "Applies translate transformation.", "guessedname": "translate", "guessedtype": "function"}}, "file": "graphics.js", "guessedtype": "function", "shortname": "Matrix", "properties": {"_rounder": {"private": "", "description": "Used as value for the _rounding method.", "guessedname": "_rounder", "guessedtype": "property"}, "_defaults": {"private": "", "description": "Default values for the matrix", "guessedname": "_defaults", "guessedtype": "property"}}, "description": "Matrix is a class that allows for the manipulation of a transform matrix.\nThis class is a work in progress."}, "ImageViewer": {"name": "ImageViewer", "configs": {"links": {"type": "String | NodeList", "description": "Selector or NodeList containing the links where the ImageViewer\nextracts the information to generate the thumbnails.", "guessedname": "links", "guessedtype": "property"}, "image": {"description": "Image node element used to load the images.", "default": "Generated img element.", "readonly": "", "guessedname": "image", "guessedtype": "property", "type": "Node"}, "totalLinks": {"description": "Helper attribute to get the <code>size</code> of the <a\nhref=\"ImageViewer.html#config_links\">links</a> NodeList.", "default": "true", "readonly": "", "guessedname": "totalLinks", "guessedtype": "property", "type": "boolean"}, "arrowRightEl": {"description": "The element to be used as arrow right.", "default": "Generated HTML div element.", "readonly": "", "guessedname": "arrowRightEl", "guessedtype": "property", "type": "Node"}, "infoTemplate": {"default": "'Image {current} of {total}'", "type": "String", "description": "String template used to display the information.", "guessedname": "infoTemplate", "guessedtype": "property"}, "loader": {"default": "Generated HTML div element.", "type": "Node", "description": "HTML element to house the <code>img</code> which is being loaded.", "guessedname": "loader", "guessedtype": "property"}, "infoEl": {"description": "The element to be used as info.", "default": "Generated HTML div element.", "readonly": "", "guessedname": "infoEl", "guessedtype": "property", "type": "Node"}, "preloadAllImages": {"default": "false", "type": "boolean", "description": "Preload all images grabbed from the <a\nhref=\"ImageViewer.html#config_links\">links</a> attribute.", "guessedname": "preloadAllImages", "guessedtype": "property"}, "closeEl": {"description": "The element to be used as close.", "default": "Generated HTML div element.", "readonly": "", "guessedname": "closeEl", "guessedtype": "property", "type": "Node"}, "captionFromTitle": {"default": "true", "type": "boolean", "description": "If <code>true</code> the <a\nhref=\"ImageViewer.html#config_caption\">caption</a> will be pulled\nfrom the title DOM attribute.", "guessedname": "captionFromTitle", "guessedtype": "property"}, "imageAnim": {"default": "Predefined <a href=\"Anim.html\">Anim</a> configuration.", "type": "Object", "description": "Configuration attributes passed to the <a href=\"Anim.html\">Anim</a>\nclass.", "guessedname": "imageAnim", "guessedtype": "property"}, "loading": {"default": "false", "type": "boolean", "description": "Whether the image is during a loading state.", "guessedname": "loading", "guessedtype": "property"}, "showClose": {"default": "true", "type": "boolean", "description": "Show close icon control.", "guessedname": "showClose", "guessedtype": "property"}, "maxWidth": {"default": "Infinity", "type": "Number", "description": "The maximum width of the element", "guessedname": "maxWidth", "guessedtype": "property"}, "showArrows": {"default": "true", "type": "boolean", "description": "Show the arrow controls.", "guessedname": "showArrows", "guessedtype": "property"}, "anim": {"default": "true", "type": "boolean", "description": "If <code>true</code> the navigation is animated.", "guessedname": "anim", "guessedtype": "property"}, "arrowLeftEl": {"description": "The element to be used as arrow left.", "default": "Generated HTML div element.", "readonly": "", "guessedname": "arrowLeftEl", "guessedtype": "property", "type": "Node"}, "centered": {"default": "true", "type": "boolean", "description": "If <code>true</code> the Overlay with the image will be positioned\non the center of the viewport.", "guessedname": "centered", "guessedtype": "property"}, "captionEl": {"description": "The element to be used as caption.", "default": "Generated HTML div element.", "readonly": "", "guessedname": "captionEl", "guessedtype": "property", "type": "Node"}, "loadingEl": {"default": "Generated HTML div element.", "type": "Node", "description": "The element to be used as loading.", "guessedname": "loadingEl", "guessedtype": "property"}, "maxHeight": {"default": "Infinity", "type": "Number", "description": "The maximum height of the element", "guessedname": "maxHeight", "guessedtype": "property"}, "caption": {"default": "''", "type": "String", "description": "The caption of the displayed image.", "guessedname": "caption", "guessedtype": "property"}, "currentIndex": {"default": "0", "type": "Number", "description": "Index of the current image.", "guessedname": "currentIndex", "guessedtype": "property"}, "modal": {"default": "{ opacity: .8, background: '#000' }", "type": "boolean | Object", "description": "Displays the modal <a href=\"OverlayMask.html\">OverlayMask</a> on\nthe viewport. Set to <code>false</code> to disable.", "guessedname": "modal", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "<p><img src=\"assets/images/aui-image-viewer-base/main.png\"/></p>\nA base class for ImageViewer, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Displays an image in a Overlay</li>\n<li>Keyboard navigation support</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.ImageViewer({\nlinks: '#gallery1 a',\ncaption: 'Liferay Champion Soccer',\ncaptionFromTitle: true,\npreloadNeighborImages: true,\npreloadAllImages: true,\nshowInfo: true\n}).render();\n</code></pre>\nCheck the list of <a href=\"ImageViewer.html#configattributes\">Configuration Attributes</a> available for\nImageViewer."}], "namespace": "", "module": "aui-image-viewer", "events": {"preloadAllImagesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "preloadAllImagesChange", "description": "Fires when the value for the configuration attribute 'preloadAllImages' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "load": {"type": "{Event.Custom}", "params": [{"type": "Event.Facade", "name": "event", "description": " The load event."}], "description": "Handles the load event. Fired when a image is laoded.", "param": "{Event.Facade} event The load event."}, "infoTemplateChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "infoTemplateChange", "description": "Fires when the value for the configuration attribute 'infoTemplate' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "modalChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "modalChange", "description": "Fires when the value for the configuration attribute 'modal' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "loaderChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "loaderChange", "description": "Fires when the value for the configuration attribute 'loader' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "request": {"type": "{Event.Custom}", "params": [{"type": "Event.Facade", "name": "event", "description": " The load event."}], "description": "Handles the request event. Fired when a image is requested.", "param": "{Event.Facade} event The load event."}, "maxWidthChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "maxWidthChange", "description": "Fires when the value for the configuration attribute 'maxWidth' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "linksChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "linksChange", "description": "Fires when the value for the configuration attribute 'links' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "imageAnimChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "imageAnimChange", "description": "Fires when the value for the configuration attribute 'imageAnim' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "showCloseChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "showCloseChange", "description": "Fires when the value for the configuration attribute 'showClose' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "infoElChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "infoElChange", "description": "Fires when the value for the configuration attribute 'infoEl' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "currentIndexChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "currentIndexChange", "description": "Fires when the value for the configuration attribute 'currentIndex' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "arrowRightElChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "arrowRightElChange", "description": "Fires when the value for the configuration attribute 'arrowRightEl' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "totalLinksChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "totalLinksChange", "description": "Fires when the value for the configuration attribute 'totalLinks' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "maxHeightChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "maxHeightChange", "description": "Fires when the value for the configuration attribute 'maxHeight' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "arrowLeftElChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "arrowLeftElChange", "description": "Fires when the value for the configuration attribute 'arrowLeftEl' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "showArrowsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "showArrowsChange", "description": "Fires when the value for the configuration attribute 'showArrows' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "captionFromTitleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "captionFromTitleChange", "description": "Fires when the value for the configuration attribute 'captionFromTitle' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "anim": {"type": "{Event.Custom}", "params": [{"type": "Event.Facade", "name": "event", "description": " The load event."}], "description": "Handles the anim event. Fired when the image anim ends.", "param": "{Event.Facade} event The load event."}, "animChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "animChange", "description": "Fires when the value for the configuration attribute 'anim' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "captionElChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "captionElChange", "description": "Fires when the value for the configuration attribute 'captionEl' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "loadingElChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "loadingElChange", "description": "Fires when the value for the configuration attribute 'loadingEl' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "loadingChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "loadingChange", "description": "Fires when the value for the configuration attribute 'loading' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "imageChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "imageChange", "description": "Fires when the value for the configuration attribute 'image' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "captionChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "captionChange", "description": "Fires when the value for the configuration attribute 'caption' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "centeredChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "centeredChange", "description": "Fires when the value for the configuration attribute 'centered' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "closeElChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "closeElChange", "description": "Fires when the value for the configuration attribute 'closeEl' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "ImageViewer", "methods": {"_onClickCloseEl": {"description": "Fires the click event on the close icon.", "param": "{EventFacade} event click event facade", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " click event facade"}], "guessedname": "_onClickCloseEl", "guessedtype": "function"}, "preloadImage": {"param": "{Number} currentIndex", "params": [{"type": "Number", "name": "currentIndex", "description": ""}], "description": "Preload an image based on its <code>index</code>.", "guessedname": "preloadImage", "guessedtype": "function"}, "_getInfoTemplate": {"return": {"type": "String", "description": "Parsed string."}, "description": "Get the <a href=\"ImageViewer.html#config_info\">info</a> template.", "param": "{String} v template", "protected": "", "params": [{"type": "String", "name": "v", "description": " template"}], "guessedname": "_getInfoTemplate", "guessedtype": "function"}, "hasNext": {"return": {"type": "boolean", "description": ""}, "description": "Check if there is a next element to navigate.", "guessedname": "hasNext", "guessedtype": "function"}, "show": {"description": "Show the ImageViewer UI.", "guessedname": "show", "guessedtype": "function"}, "showLoading": {"description": "Show the loading icon.", "guessedname": "showLoading", "guessedtype": "function"}, "hasLink": {"return": {"type": "boolean", "description": ""}, "description": "Check if there is a node reference for the <code>currentIndex</code>.", "param": "{Number} currentIndex", "params": [{"type": "Number", "name": "currentIndex", "description": ""}], "guessedname": "hasLink", "guessedtype": "function"}, "preloadAllImages": {"description": "Preload all images.", "guessedname": "preloadAllImages", "guessedtype": "function"}, "getLink": {"return": {"type": "Node", "description": ""}, "description": "Get the Node reference to the <code>currentIndex</code> element from\nthe <a href=\"ImageViewer.html#config_links\">links</a>.", "param": "{Number} currentIndex", "params": [{"type": "Number", "name": "currentIndex", "description": ""}], "guessedname": "getLink", "guessedtype": "function"}, "_getRatio": {"return": {"type": "Number", "description": ""}, "description": "Calculate the resize ratio for the loaded image.", "param": "{Number} width Image width", "protected": "", "params": [{"type": "Number", "name": "width", "description": " Image width"}, {"type": "Number", "name": "height", "description": " Image height"}], "guessedname": "_getRatio", "guessedtype": "function"}, "close": {"description": "Close the ImageViewer.", "guessedname": "close", "guessedtype": "function"}, "_createPreloadImage": {"protected": "", "description": "Creates the preload image instance, and add's it \nto the internal pool.", "guessedname": "_createPreloadImage", "guessedtype": "function"}, "next": {"description": "Load the next image.", "guessedname": "next", "guessedtype": "function"}, "_afterLoadingChange": {"description": "Fires after the value of the\n<a href=\"ImageViewer.html#config_loading\">loading</a> attribute change.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_afterLoadingChange", "guessedtype": "function"}, "hideMask": {"description": "Hide the <a href=\"OverlayMask.html\">OverlayMask</a> used when <a\nhref=\"ImageViewer.html#config_modal\">modal</a> is <code>true</code>.", "guessedname": "hideMask", "guessedtype": "function"}, "_renderControls": {"protected": "", "description": "Render the controls UI.", "guessedname": "_renderControls", "guessedtype": "function"}, "_displayLoadedImage": {"description": "Display the image once it's been loaded.", "param": "{Node} image The loaded image", "protected": "", "params": [{"type": "Node", "name": "image", "description": " The loaded image"}], "guessedname": "_displayLoadedImage", "guessedtype": "function"}, "destructor": {"protected": "", "description": "Descructor lifecycle implementation for the ImageViewer class.\nPurges events attached to the node (and all child nodes).", "guessedname": "destructor", "guessedtype": "function"}, "hasPrev": {"return": {"type": "boolean", "description": ""}, "description": "Check if there is a previous element to navigate.", "guessedname": "hasPrev", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Bind the events on the ImageViewer UI. Lifecycle.", "guessedname": "bindUI", "guessedtype": "function"}, "loadImage": {"param": "{String} src Image src.", "params": [{"type": "String", "name": "src", "description": " Image src."}], "description": "Load an image <code>src</code> on the ImageViewer.", "guessedname": "loadImage", "guessedtype": "function"}, "_renderFooter": {"protected": "", "description": "Render the footer UI.", "guessedname": "_renderFooter", "guessedtype": "function"}, "_syncCaptionUI": {"protected": "", "description": "Sync the caption UI.", "guessedname": "_syncCaptionUI", "guessedtype": "function"}, "_onClickLinks": {"description": "Fires the click event on the links.", "param": "{EventFacade} event click event facade", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " click event facade"}], "guessedname": "_onClickLinks", "guessedtype": "function"}, "showMask": {"description": "Show the the OverlayMask used on the <a\nhref=\"ImageViewer.html#config_modal\">modal</a>.", "guessedname": "showMask", "guessedtype": "function"}, "_clearPreloadImageFn": {"protected": "", "description": "Removes the references to the preload images to free up memory", "guessedname": "_clearPreloadImageFn", "guessedtype": "function"}, "_syncControlsUI": {"protected": "", "description": "Sync the controls UI.", "guessedname": "_syncControlsUI", "guessedtype": "function"}, "_syncInfoUI": {"protected": "", "description": "Sync the info UI.", "guessedname": "_syncInfoUI", "guessedtype": "function"}, "_afterVisibleChange": {"description": "Fires after the value of the\n<a href=\"ImageViewer.html#config_visible\">visible</a> attribute change.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_afterVisibleChange", "guessedtype": "function"}, "_onClickRightArrow": {"description": "Fires the click event on the right arrow icon.", "param": "{EventFacade} event click event facade", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " click event facade"}], "guessedname": "_onClickRightArrow", "guessedtype": "function"}, "_onClickLeftArrow": {"description": "Fires the click event on the left arrow icon.", "param": "{EventFacade} event click event facade", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " click event facade"}], "guessedname": "_onClickLeftArrow", "guessedtype": "function"}, "_uiSetImageSize": {"description": "Set the size of the image and the overlay respecting the\nmaxHeight/maxWidth ratio.", "param": "{HTMLImage} image Image", "protected": "", "params": [{"type": "HTMLImage", "name": "image", "description": " Image"}], "guessedname": "_uiSetImageSize", "guessedtype": "function"}, "_syncImageViewerUI": {"protected": "", "description": "Sync the ImageViewer UI.", "guessedname": "_syncImageViewerUI", "guessedtype": "function"}, "hideControls": {"description": "Hide all UI controls (i.e., arrows, close icon etc).", "guessedname": "hideControls", "guessedtype": "function"}, "getCurrentLink": {"return": {"type": "Node", "description": ""}, "description": "Get the current loaded node link reference.", "guessedname": "getCurrentLink", "guessedtype": "function"}, "_onKeyInteraction": {"description": "Handles the key interaction (i.e., next, prev etc).", "param": "{EventFacade} event click event facade", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " click event facade"}], "guessedname": "_onKeyInteraction", "guessedtype": "function"}, "_onLoadImage": {"description": "Fires on a image load.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onLoadImage", "guessedtype": "function"}, "_afterRender": {"description": "Fires after the ImageViewer render phase.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_afterRender", "guessedtype": "function"}, "renderUI": {"protected": "", "description": "Create the DOM structure for the ImageViewer. Lifecycle.", "guessedname": "renderUI", "guessedtype": "function"}}, "extends": "OverlayBase", "superclass": "OverlayBase", "file": "aui-image-viewer-debug.js", "guessedtype": "property", "shortname": "ImageViewer", "properties": {"ImageViewer.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}, "_keyHandler": {"protected": "", "type": "EventHandler", "description": "Handler for the key events.", "guessedname": "_keyHandler", "guessedtype": "property"}, "ImageViewer.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the ImageViewer.", "guessedname": "ATTRS", "guessedtype": "property"}}, "description": "<p><img src=\"assets/images/aui-image-viewer-base/main.png\"/></p>\nA base class for ImageViewer, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Displays an image in a Overlay</li>\n<li>Keyboard navigation support</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.ImageViewer({\nlinks: '#gallery1 a',\ncaption: 'Liferay Champion Soccer',\ncaptionFromTitle: true,\npreloadNeighborImages: true,\npreloadAllImages: true,\nshowInfo: true\n}).render();\n</code></pre>\nCheck the list of <a href=\"ImageViewer.html#configattributes\">Configuration Attributes</a> available for\nImageViewer."}, "DOM": {"name": "DOM", "namespace": "", "module": "dom", "guessedname": "Y_DOM", "methods": {"_getRegExp": {"return": {"type": "RegExp", "description": "An instance of RegExp"}, "description": "Memoizes dynamic regular expressions to boost runtime performance.", "private": "", "params": [{"type": "String", "name": "str", "description": " The string to convert to a regular expression."}, {"type": "String", "name": "flags", "description": " optional An optinal string of flags."}], "param": "{String} str The string to convert to a regular expression.", "guessedname": "_getRegExp", "guessedtype": "function"}, "getComputedStyle": {"return": {"type": "String", "description": "The computed value of the style property."}, "description": "Returns the computed style for the given node.", "param": "{HTMLElement} An HTMLElement to get the style from.", "params": [{"type": "HTMLElement", "name": "An", "description": " HTMLElement to get the style from."}, {"type": "String", "name": "att", "description": " The style property to get."}], "guessedname": "getComputedStyle", "guessedtype": "function"}, "addHTML": {"param": "{HTMLElement} node The node to insert into", "params": [{"type": "HTMLElement", "name": "node", "description": " The node to insert into"}, {"type": "HTMLElement | Array | HTMLCollection", "name": "content", "description": " The content to be inserted"}, {"type": "HTMLElement", "name": "where", "description": " Where to insert the content\nIf no \"where\" is given, content is appended to the node\nPossible values for \"where\"\n<dl>\n<dt>HTMLElement</dt>\n<dd>The element to insert before</dd>\n<dt>\"replace\"</dt>\n<dd>Replaces the existing HTML</dd>\n<dt>\"before\"</dt>\n<dd>Inserts before the existing HTML</dd>\n<dt>\"before\"</dt>\n<dd>Inserts content before the node</dd>\n<dt>\"after\"</dt>\n<dd>Inserts content after the node</dd>\n</dl>"}], "description": "Inserts content in a node at the given location", "guessedname": "addHTML", "guessedtype": "function"}, "getText": {"return": {"type": "String", "description": "The text content of the element (includes text of any descending elements)."}, "description": "Returns the text content of the HTMLElement.", "param": "{HTMLElement} element The html element.", "params": [{"type": "HTMLElement", "name": "element", "description": " The html element."}], "guessedname": "getText", "guessedtype": "property"}, "setStyle": {"param": "{HTMLElement} An HTMLElement to apply the style to.", "params": [{"type": "HTMLElement", "name": "An", "description": " HTMLElement to apply the style to."}, {"type": "String", "name": "att", "description": " The style property to set."}, {"type": "String|Number", "name": "val", "description": " The value."}], "description": "Sets a style property for a given element.", "guessedname": "setStyle", "guessedtype": "function"}, "getX": {"return": {"type": "Int", "description": "The X position of the element"}, "description": "Gets the current X position of an element based on page coordinates. \nElement must be part of the DOM tree to have page coordinates\n(display:none or elements not appended return false).", "param": "element The target element", "params": [{"type": "", "name": "element", "description": " The target element"}], "guessedname": "getX", "guessedtype": "function"}, "getY": {"return": {"type": "Int", "description": "The Y position of the element"}, "description": "Gets the current Y position of an element based on page coordinates. \nElement must be part of the DOM tree to have page coordinates\n(display:none or elements not appended return false).", "param": "element The target element", "params": [{"type": "", "name": "element", "description": " The target element"}], "guessedname": "getY", "guessedtype": "function"}, "inRegion": {"return": {"type": "Boolean", "description": "True if in region, false if not."}, "description": "Check if any part of this node is in the passed region", "param": "{Object} node2 The node to get the region from or an Object literal of the region\n$param {Boolean} all Should all of the node be inside the region", "params": [{"type": "Object} node2 The node to get the region from or an Object literal of the region\n$param {Boolean", "name": "all", "description": " Should all of the node be inside the region"}, {"type": "Object", "name": "altRegion", "description": " An object literal containing the region for this node if we already have the data (for performance i.e. DragDrop)"}], "guessedname": "inRegion", "guessedtype": "function"}, "viewportRegion": {"return": {"type": "Object", "description": "Object literal containing the following about the visible region of the viewport: (top, right, bottom, left)"}, "description": "Returns an Object literal containing the following about the visible region of viewport: (top, right, bottom, left)", "guessedname": "viewportRegion", "guessedtype": "function"}, "setWidth": {"param": "{HTMLElement} element The DOM element.", "params": [{"type": "HTMLElement", "name": "element", "description": " The DOM element."}, {"type": "String|Int", "name": "size", "description": " The pixel height to size to"}], "description": "Sets the width of the element to the given size, regardless\nof box model, border, padding, etc.", "guessedname": "setWidth", "guessedtype": "function"}, "inViewportRegion": {"return": {"type": "Boolean", "description": "True if in region, false if not."}, "description": "Check if any part of this element is in the viewport", "param": "{HTMLElement} element The DOM element.", "params": [{"type": "HTMLElement", "name": "element", "description": " The DOM element."}, {"type": "Boolean", "name": "all", "description": " Should all of the node be inside the region"}, {"type": "Object", "name": "altRegion", "description": " An object literal containing the region for this node if we already have the data (for performance i.e. DragDrop)"}], "guessedname": "inViewportRegion", "guessedtype": "function"}, "_bruteContains": {"return": {"type": "Boolean", "description": "Whether or not the element is or contains the needle."}, "description": "Brute force version of contains.\nUsed for browsers without contains support for non-HTMLElement Nodes (textNodes, etc).", "private": "", "params": [{"type": "HTMLElement", "name": "element", "description": " The containing html element."}, {"type": "HTMLElement", "name": "needle", "description": " The html element that may be contained."}], "param": "{HTMLElement} element The containing html element.", "guessedname": "_bruteContains", "guessedtype": "function"}, "setX": {"param": "element The target element", "params": [{"type": "", "name": "element", "description": " The target element"}, {"type": "Int", "name": "x", "description": " The X values for new position (coordinates are page-based)"}], "description": "Set the X position of an html element in page coordinates, regardless of how the element is positioned.\nThe element(s) must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).", "guessedname": "setX", "guessedtype": "function"}, "create": {"return": {"type": "HTMLElement|DocumentFragment", "description": "returns a single HTMLElement \nwhen creating one node, and a documentFragment when creating\nmultiple nodes."}, "description": "Creates a new dom node using the provided markup string.", "param": "{String} html The markup used to create the element", "params": [{"type": "String", "name": "html", "description": " The markup used to create the element"}, {"type": "HTMLDocument", "name": "doc", "description": " An optional document context"}], "guessedname": "create", "guessedtype": "function"}, "contains": {"return": {"type": "Boolean", "description": "Whether or not the element is or contains the needle."}, "description": "Determines whether or not one HTMLElement is or contains another HTMLElement.", "param": "{HTMLElement} element The containing html element.", "params": [{"type": "HTMLElement", "name": "element", "description": " The containing html element."}, {"type": "HTMLElement", "name": "needle", "description": " The html element that may be contained."}], "guessedname": "contains", "guessedtype": "function"}, "replaceClass": {"param": "{HTMLElement} element The DOM element", "params": [{"type": "HTMLElement", "name": "element", "description": " The DOM element"}, {"type": "String", "name": "oldClassName", "description": " the class name to be replaced"}, {"type": "String", "name": "newClassName", "description": " the class name that will be replacing the old class name"}], "description": "Replace a class with another class for a given element.\nIf no oldClassName is present, the newClassName is simply added.", "guessedname": "replaceClass", "guessedtype": "function"}, "winHeight": {"return": {"type": "Number", "description": "The current height of the viewport."}, "description": "Returns the inner height of the viewport (exludes scrollbar).", "guessedname": "winHeight", "guessedtype": "function"}, "setStyles": {"param": "{HTMLElement} node An HTMLElement to apply the styles to.", "params": [{"type": "HTMLElement", "name": "node", "description": " An HTMLElement to apply the styles to."}, {"type": "Object", "name": "hash", "description": " An object literal of property:value pairs."}], "description": "Sets multiple style properties.", "guessedname": "setStyles", "guessedtype": "function"}, "intersect": {"return": {"type": "Object", "description": "Object literal containing the following intersection data: (top, right, bottom, left, area, yoff, xoff, inRegion)"}, "description": "Find the intersect information for the passes nodes.", "param": "{HTMLElement} element The first element", "params": [{"type": "HTMLElement", "name": "element", "description": " The first element"}, {"type": "HTMLElement | Object", "name": "element2", "description": " The element or region to check the interect with"}, {"type": "Object", "name": "altRegion", "description": " An object literal containing the region for the first element if we already have the data (for performance i.e. DragDrop)"}], "guessedname": "intersect", "guessedtype": "function"}, "toggleClass": {"param": "{HTMLElement} element The DOM element", "params": [{"type": "HTMLElement", "name": "element", "description": " The DOM element"}, {"type": "String", "name": "className", "description": " the class name to be toggled"}, {"type": "Boolean", "name": "addClass", "description": " optional boolean to indicate whether class\nshould be added or removed regardless of current state"}], "description": "If the className exists on the node it is removed, if it doesn't exist it is added.", "guessedname": "toggleClass", "guessedtype": "function"}, "inDoc": {"return": {"type": "Boolean", "description": "Whether or not the element is attached to the document."}, "description": "Determines whether or not the HTMLElement is part of the document.", "param": "{HTMLElement} element The containing html element.", "params": [{"type": "HTMLElement", "name": "element", "description": " The containing html element."}, {"type": "HTMLElement", "name": "doc", "description": " optional The document to check."}], "guessedname": "inDoc", "guessedtype": "function"}, "swapXY": {"return": {"type": "Node", "description": ""}, "description": "Swap the xy position with another node", "param": "{Node} node The node to swap with", "params": [{"type": "Node", "name": "node", "description": " The node to swap with"}, {"type": "Node", "name": "otherNode", "description": " The other node to swap with"}], "guessedname": "swapXY", "guessedtype": "function"}, "addClass": {"param": "{HTMLElement} element The DOM element.", "params": [{"type": "HTMLElement", "name": "element", "description": " The DOM element."}, {"type": "String", "name": "className", "description": " the class name to add to the class attribute"}], "description": "Adds a class name to a given DOM element.", "guessedname": "addClass", "guessedtype": "function"}, "getXY": {"return": {"type": "Array", "description": "The XY position of the element\nTODO: test inDocument/display?"}, "description": "Gets the current position of an element based on page coordinates. \nElement must be part of the DOM tree to have page coordinates\n(display:none or elements not appended return false).", "param": "element The target element", "params": [{"type": "", "name": "element", "description": " The target element"}], "guessedname": "getXY", "guessedtype": "function"}, "winWidth": {"return": {"type": "Number", "description": "The current width of the viewport."}, "description": "Returns the inner width of the viewport (exludes scrollbar).", "guessedname": "winWidth", "guessedtype": "function"}, "removeClass": {"param": "{HTMLElement} element The DOM element.", "params": [{"type": "HTMLElement", "name": "element", "description": " The DOM element."}, {"type": "String", "name": "className", "description": " the class name to remove from the class attribute"}], "description": "Removes a class name from a given element.", "guessedname": "removeClass", "guessedtype": "function"}, "docScrollY": {"return": {"type": "Number", "description": "The current amount the screen is scrolled vertically."}, "description": "Amount page has been scroll vertically", "guessedname": "docScrollY", "guessedtype": "function"}, "getAttibute": {"return": {"type": "String", "description": "The current value of the attribute."}, "description": "Provides a normalized attribute interface.", "param": "{HTMLElement} el The target element for the attribute.", "params": [{"type": "HTMLElement", "name": "el", "description": " The target element for the attribute."}, {"type": "String", "name": "attr", "description": " The attribute to get."}], "guessedname": "getAttribute", "guessedtype": "function"}, "docHeight": {"return": {"type": "Number", "description": "The current height of the document."}, "description": "Document height", "guessedname": "docHeight", "guessedtype": "function"}, "docScrollX": {"return": {"type": "Number", "description": "The current amount the screen is scrolled horizontally."}, "description": "Amount page has been scroll horizontally", "guessedname": "docScrollX", "guessedtype": "function"}, "getStyle": {"param": "{HTMLElement} An HTMLElement to get the style from.", "params": [{"type": "HTMLElement", "name": "An", "description": " HTMLElement to get the style from."}, {"type": "String", "name": "att", "description": " The style property to get."}], "description": "Returns the current style value for the given property.", "guessedname": "getStyle", "guessedtype": "function"}, "setXY": {"param": "element The target element", "params": [{"type": "", "name": "element", "description": " The target element"}, {"type": "Array", "name": "xy", "description": " Contains X & Y values for new position (coordinates are page-based)"}, {"type": "Boolean", "name": "noRetry", "description": " By default we try and set the position a second time if the first fails"}], "description": "Set the position of an html element in page coordinates.\nThe element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).", "guessedname": "setXY", "guessedtype": "function"}, "_getWin": {"return": {"type": "Object", "description": "The window for the given element or the default window."}, "description": "returns the appropriate window.", "private": "", "params": [{"type": "HTMLElement", "name": "element", "description": " optional Target element."}], "param": "{HTMLElement} element optional Target element.", "guessedname": "_getWin", "guessedtype": "function"}, "byId": {"return": {"type": "HTMLElement | null", "description": "The HTMLElement with the id, or null if none found."}, "description": "Returns the HTMLElement with the given ID (Wrapper for document.getElementById).", "param": "{String} id the id attribute", "params": [{"type": "String", "name": "id", "description": " the id attribute"}, {"type": "Object", "name": "doc", "description": " optional The document to search. Defaults to current document"}], "guessedname": "byId", "guessedtype": "function"}, "setY": {"param": "element The target element", "params": [{"type": "", "name": "element", "description": " The target element"}, {"type": "Int", "name": "y", "description": " The Y values for new position (coordinates are page-based)"}], "description": "Set the Y position of an html element in page coordinates, regardless of how the element is positioned.\nThe element(s) must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).", "guessedname": "setY", "guessedtype": "function"}, "setHeight": {"param": "{HTMLElement} element The DOM element.", "params": [{"type": "HTMLElement", "name": "element", "description": " The DOM element."}, {"type": "String|Int", "name": "size", "description": " The pixel height to size to"}], "description": "Sets the height of the element to the given size, regardless\nof box model, border, padding, etc.", "guessedname": "setHeight", "guessedtype": "function"}, "elementByAxis": {"return": {"type": "HTMLElement | null", "description": "The matching element or null if none found."}, "description": "Searches the element by the given axis for the first matching element.", "param": "{HTMLElement} element The html element.", "params": [{"type": "HTMLElement", "name": "element", "description": " The html element."}, {"type": "String", "name": "axis", "description": " The axis to search (parentNode, nextSibling, previousSibling)."}, {"type": "Function", "name": "fn", "description": " optional An optional boolean test to apply."}, {"type": "Boolean", "name": "all", "description": " optional Whether all node types should be returned, or just element nodes.\nThe optional function is passed the current HTMLElement being tested as its only argument.\nIf no function is given, the first element is returned."}], "guessedname": "elementByAxis", "guessedtype": "function"}, "docWidth": {"return": {"type": "Number", "description": "The current width of the document."}, "description": "Document width", "guessedname": "docWidth", "guessedtype": "function"}, "setText": {"param": "{HTMLElement} element The html element.", "params": [{"type": "HTMLElement", "name": "element", "description": " The html element."}, {"type": "String", "name": "content", "description": " The content to add."}], "description": "Sets the text content of the HTMLElement.", "guessedname": "setText", "guessedtype": "property"}, "setAttribute": {"param": "{HTMLElement} el The target element for the attribute.", "params": [{"type": "HTMLElement", "name": "el", "description": " The target element for the attribute."}, {"type": "String", "name": "attr", "description": " The attribute to set."}, {"type": "String", "name": "val", "description": " The value of the attribute."}], "description": "Provides a normalized attribute interface.", "guessedname": "setAttribute", "guessedtype": "function"}, "hasClass": {"return": {"type": "Boolean", "description": "Whether or not the element has the given class."}, "description": "Determines whether a DOM element has the given className.", "param": "{HTMLElement} element The DOM element.", "params": [{"type": "HTMLElement", "name": "element", "description": " The DOM element."}, {"type": "String", "name": "className", "description": " the class name to search for"}], "guessedname": "hasClass", "guessedtype": "function"}, "region": {"return": {"type": "Object", "description": "Object literal containing the following about this element: (top, right, bottom, left)"}, "description": "Returns an Object literal containing the following about this element: (top, right, bottom, left)", "param": "{HTMLElement} element The DOM element.", "params": [{"type": "HTMLElement", "name": "element", "description": " The DOM element."}], "guessedname": "region", "guessedtype": "function"}, "_getDoc": {"return": {"type": "Object", "description": "The document for the given element or the default document."}, "description": "returns the appropriate document.", "private": "", "params": [{"type": "HTMLElement", "name": "element", "description": " optional Target element."}], "param": "{HTMLElement} element optional Target element.", "guessedname": "_getDoc", "guessedtype": "function"}}, "file": "dom-core.js", "guessedtype": "property", "shortname": "DOM", "description": "Provides DOM helper methods."}, "StackedAxis": {"name": "StackedAxis", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " (optional) Configuration parameters for the Chart."}], "description": "StackedAxis manages stacked numeric data on an axis."}], "namespace": "", "module": "charts", "methods": {"_updateMinAndMax": {"private": "", "description": "Calculates the maximum and minimum values for the `Axis`.", "guessedname": "_updateMinAndMax", "guessedtype": "function"}}, "extends": "NumericAxis", "superclass": "NumericAxis", "file": "charts.js", "shortname": "StackedAxis", "description": "StackedAxis manages stacked numeric data on an axis."}, "Graph": {"name": "Graph", "configs": {"styles": {"type": "Object", "description": "Style properties used for drawing a background. Below are the default values:\n<dl>\n<dt>background</dt><dd>An object containing the following values:\n<dl>\n<dt>fill</dt><dd>Defines the style properties for the fill. Contains the following values:\n<dl>\n<dt>color</dt><dd>Color of the fill. The default value is #faf9f2.</dd>\n<dt>alpha</dt><dd>Number from 0 to 1 indicating the opacity of the background fill. The default value is 1.</dd>\n</dl>\n</dd>\n<dt>border</dt><dd>Defines the style properties for the border. Contains the following values:\n<dl>\n<dt>color</dt><dd>Color of the border. The default value is #dad8c9.</dd>\n<dt>alpha</dt><dd>Number from 0 to 1 indicating the opacity of the background border. The default value is 1.</dd>\n<dt>weight</dt><dd>Number indicating the width of the border. The default value is 1.</dd>\n</dl>\n</dd>\n</dl>\n</dd>\n</dl>"}, "verticalGridlines": {"default": "null", "type": "Gridlines", "description": "Reference to the vertical `Gridlines` instance.", "guessedname": "verticalGridlines", "guessedtype": "property"}, "graphic": {"readonly": "", "type": "Graphic", "description": "Reference to graphic instance used for series.", "guessedname": "graphic", "guessedtype": "property"}, "showBackground": {"default": "true", "type": "Boolean", "description": "Indicates whether the `Graph` has a background.", "guessedname": "showBackground", "guessedtype": "property"}, "gridlines": {"readonly": "", "type": "Graphic", "description": "Reference to graphic instance used for gridlines.", "guessedname": "gridlines", "guessedtype": "property"}, "seriesCollection": {"type": "CartesianSeries", "description": "Collection of series. When setting the `seriesCollection` the array can contain a combination of either\n`CartesianSeries` instances or object literals with properties that will define a series.", "guessedname": "seriesCollection", "guessedtype": "property"}, "background": {"readonly": "", "type": "Graphic", "description": "Reference to graphic instance used for the background.", "guessedname": "background", "guessedtype": "property"}, "horizontalGridlines": {"default": "null", "type": "Gridlines", "description": "Reference to the horizontal `Gridlines` instance.", "guessedname": "horizontalGridlines", "guessedtype": "property"}, "seriesDictionary": {"readonly": "", "type": "Object", "description": "Read-only hash lookup for all series on in the `Graph`.", "guessedname": "seriesDictionary", "guessedtype": "property"}}, "constructors": [{"description": "Graph manages and contains series instances for a `CartesianChart`\ninstance."}], "namespace": "", "module": "charts", "events": {"seriesCollectionChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "seriesCollectionChange", "description": "Fires when the value for the configuration attribute 'seriesCollection' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "showBackgroundChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "showBackgroundChange", "description": "Fires when the value for the configuration attribute 'showBackground' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "graphicChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "graphicChange", "description": "Fires when the value for the configuration attribute 'graphic' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "backgroundChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "backgroundChange", "description": "Fires when the value for the configuration attribute 'background' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "seriesDictionaryChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "seriesDictionaryChange", "description": "Fires when the value for the configuration attribute 'seriesDictionary' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "verticalGridlinesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "verticalGridlinesChange", "description": "Fires when the value for the configuration attribute 'verticalGridlines' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "gridlinesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "gridlinesChange", "description": "Fires when the value for the configuration attribute 'gridlines' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "horizontalGridlinesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "horizontalGridlinesChange", "description": "Fires when the value for the configuration attribute 'horizontalGridlines' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "stylesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "stylesChange", "description": "Fires when the value for the configuration attribute 'styles' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "Graph", "methods": {"_parseSeriesCollection": {"description": "Parses series instances to be displayed in the graph.", "param": "{Array} Collection of `CartesianSeries` instances or objects container `CartesianSeries` attributes values.", "params": [{"type": "Array", "name": "Collection", "description": " of `CartesianSeries` instances or objects container `CartesianSeries` attributes values."}], "private": "", "guessedname": "_parseSeriesCollection", "guessedtype": "function"}, "syncUI": {"private": "", "guessedname": "syncUI", "guessedtype": "function"}, "_drawSeries": {"private": "", "description": "Draws each series.", "guessedname": "_drawSeries", "guessedtype": "function"}, "addDispatcher": {"description": "Adds dispatcher to a `_dispatcher` used to\nto ensure all series have redrawn before for firing event.", "param": "{CartesianSeries} val series instance to add", "protected": "", "params": [{"type": "CartesianSeries", "name": "val", "description": " series instance to add"}], "guessedname": "addDispatcher", "guessedtype": "function"}, "getSeriesByIndex": {"return": {"type": "", "description": "CartesianSeries"}, "description": "Returns a series instance based on an index.", "param": "{Number} val index of the series", "params": [{"type": "Number", "name": "val", "description": " index of the series"}], "guessedname": "getSeriesByIndex", "guessedtype": "function"}, "createSeries": {"description": "Creates a `CartesianSeries` instance from an object containing attribute key value pairs.", "param": "{Object} seriesData Series attribute key value pairs.", "params": [{"type": "Object", "name": "seriesData", "description": " Series attribute key value pairs."}], "private": "", "guessedname": "_createSeries", "guessedtype": "function"}, "_updateStyles": {"private": "", "description": "Updates the `Graph` styles.", "guessedname": "_updateStyles", "guessedtype": "function"}, "_drawingCompleteHandler": {"description": "Event handler for series drawingComplete event.", "param": "{Object} e Event object.", "params": [{"type": "Object", "name": "e", "description": " Event object."}], "private": "", "guessedname": "_drawingCompleteHandler", "guessedtype": "function"}, "getSeriesByKey": {"return": {"type": "", "description": "CartesianSeries"}, "description": "Returns a series instance based on a key value.", "param": "{String} val key value of the series", "params": [{"type": "String", "name": "val", "description": " key value of the series"}], "guessedname": "getSeriesByKey", "guessedtype": "function"}, "_addSeries": {"description": "Adds a series to the graph.", "param": "{CartesianSeries} series Series to add to the graph.", "params": [{"type": "CartesianSeries", "name": "series", "description": " Series to add to the graph."}], "private": "", "guessedname": "_addSeries", "guessedtype": "function"}, "_getSeries": {"return": {"type": "", "description": "CartesianSeries"}, "description": "Returns a specific `CartesianSeries` class based on key value.", "private": "", "params": [{"type": "String", "name": "type", "description": " Key value for the series class."}], "param": "{String} type Key value for the series class.", "guessedname": "_getSeries", "guessedtype": "function"}, "bindUI": {"private": "", "guessedname": "bindUI", "guessedtype": "function"}, "_markerEventHandler": {"description": "Event handler for marker events.", "param": "{Object} e Event object.", "params": [{"type": "Object", "name": "e", "description": " Event object."}], "private": "", "guessedname": "_markerEventHandler", "guessedtype": "function"}, "_getDefaultStyles": {"protected": "", "return": {"type": "", "description": "Object"}, "description": "Gets the default value for the `styles` attribute. Overrides\nbase implementation.", "guessedname": "_getDefaultStyles", "guessedtype": "function"}, "_sizeChangeHandler": {"description": "Event handler for size changes.", "param": "{Object} e Event object.", "params": [{"type": "Object", "name": "e", "description": " Event object."}], "private": "", "guessedname": "_sizeChangeHandler", "guessedtype": "function"}}, "uses": ["Renderer"], "superclass": "Widget", "file": "charts.js", "guessedtype": "property", "extends": "Widget", "shortname": "Graph", "properties": {"_seriesDictionary": {"guessedname": "_seriesDictionary", "type": "Object", "description": "Object containing key value pairs of `CartesianSeries` instances.", "private": "", "guessedtype": "property"}, "_dispatchers": {"guessedname": "_dispatchers", "type": "Array", "description": "Collection of `CartesianSeries` instances to be redrawn.", "private": "", "guessedtype": "property"}, "seriesTypes": {"guessedname": "seriesTypes", "type": "Object", "description": "Object of arrays containing series mapped to a series type.", "private": "", "guessedtype": "property"}, "_seriesCollection": {"guessedname": "_seriesCollection", "type": "Array", "description": "Collection of series to be displayed in the graph.", "private": "", "guessedtype": "property"}}, "description": "Graph manages and contains series instances for a `CartesianChart`\ninstance."}, "Plugin.Flick": {"properties": {"NAME": {"description": "The NAME of the Flick class. Used to prefix events generated\nby the plugin.", "default": "\"pluginFlick\"", "static": "", "guessedname": "NAME", "guessedtype": "property", "type": "String"}, "SNAP_DURATION": {"description": "The duration to use for the bounce snap-back transition", "default": "400", "static": "", "guessedname": "SNAP_DURATION", "guessedtype": "property", "type": "Number"}, "VELOCITY_THRESHOLD": {"description": "The threshold used to determine when the decelerated velocity of the node\nis practically 0.", "default": "0.015", "static": "", "guessedname": "VELOCITY_THRESHOLD", "guessedtype": "property", "type": "Number"}, "EASING": {"description": "The default easing to use for the main flick movement transition", "default": "'cubic-bezier(0, 0.1, 0, 1.0)'", "static": "", "guessedname": "EASING", "guessedtype": "property", "type": "String"}, "NS": {"description": "The namespace for the plugin. This will be the property on the node, which will \nreference the plugin instance, when it's plugged in.", "default": "\"flick\"", "static": "", "guessedname": "NS", "guessedtype": "property", "type": "String"}, "CLASS_NAMES": {"type": "Object", "static": "", "description": "The default CSS class names used by the plugin", "guessedname": "CLASS_NAMES", "guessedtype": "property"}, "SNAP_EASING": {"description": "The default easing to use for the bounce snap-back transition", "default": "'ease-out'", "static": "", "guessedname": "SNAP_EASING", "guessedtype": "property", "type": "String"}}, "name": "Plugin.Flick", "namespace": "Plugin", "module": "node-flick", "events": {"minVelocityChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "minVelocityChange", "description": "Fires when the value for the configuration attribute 'minVelocity' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "durationChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "durationChange", "description": "Fires when the value for the configuration attribute 'duration' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "decelerationChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "decelerationChange", "description": "Fires when the value for the configuration attribute 'deceleration' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "bounceChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "bounceChange", "description": "Fires when the value for the configuration attribute 'bounce' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "boundingBoxChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "boundingBoxChange", "description": "Fires when the value for the configuration attribute 'boundingBox' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "bounceDistanceChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "bounceDistanceChange", "description": "Fires when the value for the configuration attribute 'bounceDistance' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "easingChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "easingChange", "description": "Fires when the value for the configuration attribute 'easing' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "methods": {"_bounce": {"description": "Internal utility method to constrain the offset value\nbased on the bounce criteria.", "param": "{Number} x The offset value to constrain.", "params": [{"type": "Number", "name": "x", "description": " The offset value to constrain."}, {"type": "Number", "name": "max", "description": " The max offset value."}], "private": "", "guessedname": "_bounce", "guessedtype": "function"}, "_move": {"description": "Internal utility method to move the node to a given XY position,\nusing transitions, if specified.", "param": "{Number} x The X offset position", "params": [{"type": "Number", "name": "x", "description": " The X offset position"}, {"type": "Number", "name": "y", "description": " The Y offset position"}, {"type": "Number", "name": "duration", "description": " The duration to use for the transition animation"}, {"type": "String", "name": "easing", "description": " The easing to use for the transition animation."}], "private": "", "guessedname": "_move", "guessedtype": "function"}, "setBounds": {"description": "Sets the min/max boundaries for the flick animation,\nbased on the boundingBox dimensions.", "guessedname": "setBounds", "guessedtype": "function"}, "_flickFrame": {"protected": "", "description": "Executes a single frame in the flick animation", "guessedname": "_flickAnim", "guessedtype": "function"}, "_killTimer": {"private": "", "description": "Stop the animation timer", "guessedname": "_killTimer", "guessedtype": "function"}, "initializer": {"param": "{Object} config The user configuration for the plugin", "params": [{"type": "Object", "name": "config", "description": " The user configuration for the plugin"}], "description": "The initializer lifecycle implementation.", "guessedname": "initializer", "guessedtype": "function"}, "_renderClasses": {"protected": "", "description": "Adds the CSS classes, necessary to set up overflow/position properties on the\nnode and boundingBox.", "guessedname": "_renderClasses", "guessedtype": "function"}, "_onFlick": {"description": "The flick event listener. Kicks off the flick animation.", "param": "e {EventFacade} The flick event facade, containing e.flick.distance, e.flick.velocity etc.", "protected": "", "params": [{"type": "EventFacade", "name": "e", "description": "  The flick event facade, containing e.flick.distance, e.flick.velocity etc."}], "guessedname": "_onFlick", "guessedtype": "function"}, "_setX": {"description": "Internal utility method to set the X offset position", "param": "{Number} val", "params": [{"type": "Number", "name": "val", "description": ""}], "private": "", "guessedname": "_setX", "guessedtype": "function"}, "_setY": {"description": "Internal utility method to set the Y offset position", "param": "{Number} val", "params": [{"type": "Number", "name": "val", "description": ""}], "private": "", "guessedname": "_setY", "guessedtype": "function"}, "_anim": {"description": "Internal utility method to perform the transition step", "param": "{Number} x The X offset position", "params": [{"type": "Number", "name": "x", "description": " The X offset position"}, {"type": "Number", "name": "y", "description": " The Y offset position"}, {"type": "Number", "name": "duration", "description": " The duration to use for the transition animation"}, {"type": "String", "name": "easing", "description": " The easing to use for the transition animation."}], "private": "", "guessedname": "_anim", "guessedtype": "function"}}, "param": "{Object} config The initial attribute values for the plugin", "file": "node-flick.js", "shortname": "Flick", "configs": {"minVelocity": {"default": "0", "type": "Number", "description": "The minimum flick gesture velocity (px/ms) at which to trigger the flick response", "guessedname": "minVelocity", "guessedtype": "property"}, "bounce": {"default": "0.7", "type": "Number", "description": "Drag coefficient for intertial scrolling at the upper\nand lower boundaries of the scrollview. Set to 0 to \ndisable \"rubber-banding\".", "guessedname": "bounce", "guessedtype": "property"}, "duration": {"default": "null", "type": "Number", "description": "The custom duration to apply to the flick animation. By default,\nthe animation duration is controlled by the deceleration factor.", "guessedname": "duration", "guessedtype": "property"}, "deceleration": {"default": "0.98", "description": "Drag coefficent for inertial scrolling. The closer to 1 this\nvalue is, the less friction during scrolling.", "guessedname": "deceleration", "guessedtype": "property"}, "boundingBox": {"default": "parentNode", "type": "Node", "description": "The constraining box relative to which the flick animation and bounds should be calculated.", "guessedname": "boundingBox", "guessedtype": "property"}, "easing": {"default": "null", "type": "String", "description": "The custom transition easing to use for the flick animation. If not\nprovided defaults to internally to Flick.EASING, or Flick.SNAP_EASING based\non whether or not we're animating the flick or bounce step.", "guessedname": "easing", "guessedtype": "property"}, "bounceDistance": {"default": "150", "type": "Number", "description": "The bounce distance in pixels", "guessedname": "bounceDistance", "guessedtype": "property"}}, "description": "A plugin class which can be used to animate the motion of a node, in response to a flick gesture."}, "Cache": {"name": "Cache", "configs": {"max": {"default": "0", "type": "Number", "description": "Maximum number of entries the Cache can hold.\nSet to 0 to turn off caching.", "guessedname": "max", "guessedtype": "property"}, "entries": {"type": "Array", "description": "Cached entries.", "guessedname": "entries", "guessedtype": "property"}, "uniqueKeys": {"type": "Boolean", "description": "Validate uniqueness of stored keys. Default is false and\nis more performant.", "guessedname": "uniqueKeys", "guessedtype": "property"}, "expires": {"default": "0", "type": "Date | Number", "description": "Absolute Date when data expires or\nrelative number of milliseconds. Zero disables expiration.", "guessedname": "expires", "guessedtype": "property"}, "size": {"type": "Number", "description": "Number of entries currently cached.", "guessedname": "size", "guessedtype": "property"}}, "constructors": [{"description": "Base class for the YUI Cache utility."}], "namespace": "", "module": "cache", "events": {"sizeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "sizeChange", "description": "Fires when the value for the configuration attribute 'size' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "retrieve": {"params": [{"type": "Event.Facade", "name": "e", "description": "  Event Facade with the following properties:\n<dl>\n<dt>entry (Object)</dt> <dd>The retrieved entry.</dd>\n</dl>"}], "description": "Fired when an entry is retrieved from the cache.", "param": "e {Event.Facade} Event Facade with the following properties:\n<dl>\n<dt>entry (Object)</dt> <dd>The retrieved entry.</dd>\n</dl>"}, "entriesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "entriesChange", "description": "Fires when the value for the configuration attribute 'entries' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "uniqueKeysChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "uniqueKeysChange", "description": "Fires when the value for the configuration attribute 'uniqueKeys' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "flush": {"description": "Fired when the cache is flushed.", "param": "e {Event.Facade} Event Facade object.", "params": [{"type": "Event.Facade", "name": "e", "description": "  Event Facade object."}], "guessedname": "defaultFn", "guessedtype": "property", "preventable": "_defFlushFn"}, "request": {"params": [{"type": "Event.Facade", "name": "e", "description": "  Event Facade with the following properties:\n<dl>\n<dt>request (Object)</dt> <dd>The request object.</dd>\n</dl>"}], "description": "Fired when an entry is requested from the cache.", "param": "e {Event.Facade} Event Facade with the following properties:\n<dl>\n<dt>request (Object)</dt> <dd>The request object.</dd>\n</dl>"}, "add": {"description": "Fired when an entry is added.", "param": "e {Event.Facade} Event Facade with the following properties:\n<dl>\n<dt>entry (Object)</dt> <dd>The cached entry.</dd>\n</dl>", "params": [{"type": "Event.Facade", "name": "e", "description": "  Event Facade with the following properties:\n<dl>\n<dt>entry (Object)</dt> <dd>The cached entry.</dd>\n</dl>"}], "guessedname": "defaultFn", "guessedtype": "property", "preventable": "_defAddFn"}, "maxChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "maxChange", "description": "Fires when the value for the configuration attribute 'max' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "expiresChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "expiresChange", "description": "Fires when the value for the configuration attribute 'expires' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "Cache", "methods": {"retrieve": {"return": {"type": "Object", "description": "Cached object with the properties request and response, or null."}, "description": "Retrieves cached object for given request, if available, and refreshes\nentry in the cache. Returns null if there is no cache match.", "param": "request {Object} Request object.", "params": [{"type": "Object", "name": "request", "description": "  Request object."}], "guessedname": "retrieve", "guessedtype": "function"}, "_setMax": {"protected": "", "description": "Sets max.", "guessedname": "_setMax", "guessedtype": "function"}, "_getEntries": {"protected": "", "description": "Gets all entries.", "guessedname": "_getEntries", "guessedtype": "function"}, "add": {"param": "request {Object} Request value.", "params": [{"type": "Object", "name": "request", "description": "  Request value."}, {"type": "Object", "name": "response", "description": "  Response value."}], "description": "Adds a new entry to the cache of the format\n{request:request, response:response, cached:cached, expires:expires}.\nIf cache is full, evicts the stalest entry before adding the new one.", "guessedname": "add", "guessedtype": "function"}, "destructor": {"description": "Internal destroy() handler.", "private": "", "guessedname": "destructor", "guessedtype": "function"}, "_defFlushFn": {"description": "Flushes cache.", "param": "e {Event.Facade} Event Facade object.", "protected": "", "params": [{"type": "Event.Facade", "name": "e", "description": "  Event Facade object."}], "guessedname": "_defFlushFn", "guessedtype": "function"}, "_isMatch": {"return": {"type": "Boolean", "description": "True if current request matches given cached request, false otherwise."}, "description": "Default overridable method compares current request with given cache entry.\nReturns true if current request matches the cached request, otherwise\nfalse. Implementers should override this method to customize the\ncache-matching algorithm.", "param": "request {Object} Request object.", "protected": "", "params": [{"type": "Object", "name": "request", "description": "  Request object."}, {"type": "Object", "name": "entry", "description": "  Cached entry."}], "guessedname": "_isMatch", "guessedtype": "function"}, "flush": {"description": "Flushes cache.", "guessedname": "flush", "guessedtype": "function"}, "_getSize": {"protected": "", "description": "Gets size.", "guessedname": "_getSize", "guessedtype": "function"}, "initializer": {"description": "Internal init() handler.", "param": "config {Object} Config object.", "params": [{"type": "Object", "name": "config", "description": "  Config object."}], "private": "", "guessedname": "initializer", "guessedtype": "function"}, "_defAddFn": {"description": "Adds entry to cache.", "param": "e {Event.Facade} Event Facade with the following properties:\n<dl>\n<dt>entry (Object)</dt> <dd>The cached entry.</dd>\n</dl>", "protected": "", "params": [{"type": "Event.Facade", "name": "e", "description": "  Event Facade with the following properties:\n<dl>\n<dt>entry (Object)</dt> <dd>The cached entry.</dd>\n</dl>"}], "guessedname": "_defAddFn", "guessedtype": "function"}, "_position": {"return": {"type": "Number", "description": "Array position if found, null otherwise."}, "description": "Returns position of a request in the entries array, otherwise null.", "param": "request {Object} Request object.", "protected": "", "params": [{"type": "Object", "name": "request", "description": "  Request object."}], "guessedname": "_position", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "cache-base.js", "guessedtype": "function", "shortname": "Cache", "properties": {"_entries": {"guessedname": "_entries", "type": "Object[]", "description": "Array of request/response objects indexed chronologically.", "private": "", "guessedtype": "property"}, "NAME": {"description": "Class name.", "value": "\"cache\"", "static": "", "guessedname": "NAME", "guessedtype": "property", "type": "String", "final": ""}}, "description": "Base class for the YUI Cache utility."}, "ImgLoadImgObj": {"properties": {"_imgEl": {"guessedname": "_imgEl", "type": "Object", "description": "The Node object returned from <code>Y.one</code>, to avoid repeat calls to access the DOM.", "private": "", "guessedtype": "property"}, "_fetched": {"guessedname": "_fetched", "type": "Boolean", "description": "Whether this image has already been fetched.\nIn the case of fold-conditional groups, images won't be fetched twice.", "private": "", "guessedtype": "property"}, "_yPos": {"guessedname": "_yPos", "type": "Int", "description": "The vertical position returned from <code>getY</code>, to avoid repeat calls to access the DOM.\nThe Y position is checked only for images registered with fold-conditional groups. The position is checked first at page load (domready)\nand this caching enhancement assumes that the image's vertical position won't change after that first check.", "private": "", "guessedtype": "property"}}, "name": "ImgLoadImgObj", "constructors": [{"description": "Image objects to be registered with the groups"}], "namespace": "", "module": "imageloader", "events": {"isPngChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "isPngChange", "description": "Fires when the value for the configuration attribute 'isPng' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "heightChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "heightChange", "description": "Fires when the value for the configuration attribute 'height' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "sizingMethodChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "sizingMethodChange", "description": "Fires when the value for the configuration attribute 'sizingMethod' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "domIdChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "domIdChange", "description": "Fires when the value for the configuration attribute 'domId' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "setVisibleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "setVisibleChange", "description": "Fires when the value for the configuration attribute 'setVisible' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "enabledChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "enabledChange", "description": "Fires when the value for the configuration attribute 'enabled' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "bgUrlChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "bgUrlChange", "description": "Fires when the value for the configuration attribute 'bgUrl' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "srcUrlChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "srcUrlChange", "description": "Fires when the value for the configuration attribute 'srcUrl' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "widthChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "widthChange", "description": "Fires when the value for the configuration attribute 'width' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "ImgLoadImgObj", "methods": {"_getYPos": {"guessedname": "_getYPos", "returns": "{Object} The Y position of the image", "description": "Gets the Y position of the node in page coordinates.\nExpects that the page-coordinate position of the image won't change.", "private": "", "guessedtype": "function"}, "_getImgEl": {"guessedname": "_getImgEl", "returns": "{Object} DOM element of the image as a <code>Y.Node</code> object", "description": "Gets the object (as a <code>Y.Node</code>) of the DOM element indicated by \"<code>domId</code>\".", "private": "", "guessedtype": "function"}, "_init": {"private": "", "description": "Initialize all private members needed for the group.", "guessedname": "_init", "guessedtype": "function"}, "fetch": {"return": {"type": "Boolean", "description": "Whether the image has been fetched (either during this execution or previously)"}, "description": "Displays the image; puts the URL into the DOM.\nThis method shouldn't be called externally, but is not private in the rare event that it needs to be called immediately.", "param": "{Int} withinY  The pixel distance from the top of the page, for which if the image lies within, it will be fetched. Undefined indicates that no check should be made, and the image should always be fetched", "params": [{"type": "Int", "name": "withinY", "description": "  The pixel distance from the top of the page, for which if the image lies within, it will be fetched. Undefined indicates that no check should be made, and the image should always be fetched"}], "guessedname": "fetch", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "imageloader.js", "guessedtype": "function", "shortname": "ImgLoadImgObj", "configs": {"isPng": {"type": "Boolean", "description": "Whether the image is a PNG.\nPNG images get special treatment in that the URL is specified through AlphaImageLoader for IE, versions 6 and earlier.\nOnly used with background images.", "guessedname": "isPng", "guessedtype": "property"}, "srcUrl": {"type": "String", "description": "Source URL for the image.\nFor an image whose URL is specified by a \"<code>src</code>\" attribute in the DOM element.", "guessedname": "srcUrl", "guessedtype": "property"}, "enabled": {"type": "String", "description": "AlphaImageLoader <code>enabled</code> property to be set for the image.\nOnly set if <code>isPng</code> value for this image is set to <code>true</code>.\nDefaults to <code>true</code>.", "guessedname": "enabled", "guessedtype": "property"}, "domId": {"type": "String", "description": "HTML DOM id of the image element.", "guessedname": "domId", "guessedtype": "property"}, "height": {"type": "Int", "description": "Pixel height of the image. Will be set as a <code>height</code> attribute on the DOM element after the image is fetched.\nDefaults to the natural height of the image (no <code>height</code> attribute will be set).\nUsually only used with src images.", "guessedname": "height", "guessedtype": "property"}, "width": {"type": "Int", "description": "Pixel width of the image. Will be set as a <code>width</code> attribute on the DOM element after the image is fetched.\nDefaults to the natural width of the image (no <code>width</code> attribute will be set).\nUsually only used with src images.", "guessedname": "width", "guessedtype": "property"}, "sizingMethod": {"type": "String", "description": "AlphaImageLoader <code>sizingMethod</code> property to be set for the image.\nOnly set if <code>isPng</code> value for this image is set to <code>true</code>.\nDefaults to <code>scale</code>.", "guessedname": "sizingMethod", "guessedtype": "property"}, "bgUrl": {"type": "String", "description": "Background URL for the image.\nFor an image whose URL is specified by \"<code>background-image</code>\" in the element's style.", "guessedname": "bgUrl", "guessedtype": "property"}, "setVisible": {"type": "Boolean", "description": "Whether the image's <code>style.visibility</code> should be set to <code>visible</code> after the image is fetched.\nUsed when setting images as <code>visibility:hidden</code> prior to image fetching.", "guessedname": "setVisible", "guessedtype": "property"}}, "description": "Image objects to be registered with the groups"}, "Plugin.CalendarNavigator": {"name": "Plugin.CalendarNavigator", "namespace": "Plugin", "module": "calendarnavigator", "events": {"shiftByMonthsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "shiftByMonthsChange", "description": "Fires when the value for the configuration attribute 'shiftByMonths' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "configs": {"shiftByMonths": {"default": "1 (months)", "type": "Number", "description": "The number of months to shift by when the control arrows are clicked.", "guessedname": "shiftByMonths", "guessedtype": "property"}}, "methods": {"_renderPrevControls": {"private": "", "description": "Private render assist method that renders the previous month control", "guessedname": "_renderPrevControls", "guessedtype": "function"}, "_addMonths": {"description": "Private utility method that adds months to the host calendar date\nbased on the control click and the shiftByMonths property.", "param": "{Event} ev Click event from the controls", "protected": "", "params": [{"type": "Event", "name": "ev", "description": " Click event from the controls"}], "guessedname": "_addMonths", "guessedtype": "function"}, "_subtractMonths": {"description": "Private utility method that subtracts months from the host calendar date\nbased on the control click and the shiftByMonths property.", "param": "{Event} ev Click event from the controls", "protected": "", "params": [{"type": "Event", "name": "ev", "description": " Click event from the controls"}], "guessedname": "_subtractMonths", "guessedtype": "function"}, "destructor": {"description": "The initializer destructor implementation. Responsible for destroying the initialized\ncontrol mechanisms.", "guessedname": "destructor", "guessedtype": "function"}, "_initNavigationControls": {"protected": "", "description": "Protected render assist method that initialized and renders the navigation controls.", "guessedname": "_initNavigationControls", "guessedtype": "function"}, "initializer": {"param": "{Object} config The user configuration for the plugin", "params": [{"type": "Object", "name": "config", "description": " The user configuration for the plugin"}], "description": "The initializer lifecycle implementation. Modifies the host widget's \nrender to add navigation controls.", "guessedname": "initializer", "guessedtype": "function"}, "_renderNextControls": {"private": "", "description": "Private render assist method that renders the next month control", "guessedname": "_renderNextControls", "guessedtype": "function"}}, "extends": "Plugin.Base", "superclass": "Plugin.Base", "file": "calendarnavigator.js", "shortname": "CalendarNavigator", "properties": {"NAME": {"description": "The NAME of the CalendarNavigator class. Used to prefix events generated\nby the plugin class.", "default": "\"pluginCalendarNavigator\"", "static": "", "guessedname": "NAME", "guessedtype": "property", "type": "String"}, "CALENDARNAV_STRINGS": {"description": "The CSS classnames for the calendar navigator controls.", "readonly": "", "protected": "", "static": "", "guessedname": "CALENDARNAV_STRINGS", "guessedtype": "property", "type": "Object"}, "ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute \nconfiguration for the plugin.", "guessedname": "ATTRS", "guessedtype": "property"}, "PREV_MONTH_CONTROL_TEMPLATE": {"description": "The template for the calendar navigator previous month control.", "protected": "", "static": "", "guessedname": "PREV_MONTH_CONTROL_TEMPLATE", "guessedtype": "property", "type": "String"}, "NS": {"description": "The namespace for the plugin. This will be the property on the widget, which will \nreference the plugin instance, when it's plugged in.", "default": "\"navigator\"", "static": "", "guessedname": "NS", "guessedtype": "property", "type": "String"}, "NEXT_MONTH_CONTROL_TEMPLATE": {"description": "The template for the calendar navigator next month control.", "readonly": "", "protected": "", "static": "", "guessedname": "NEXT_MONTH_CONTROL_TEMPLATE", "guessedtype": "property", "type": "String"}}, "description": "A plugin class which adds navigation controls to Calendar."}, "DataSchema.Base": {"name": "DataSchema.Base", "namespace": "", "module": "dataschema", "guessedname": "SchemaBase", "methods": {"parse": {"return": {"type": "Object", "description": "Type-converted value."}, "description": "Applies field parser, if defined", "param": "value {Object} Original value.", "params": [{"type": "Object", "name": "value", "description": "  Original value."}, {"type": "Object", "name": "field", "description": "  Field."}], "guessedname": "parse", "guessedtype": "function"}, "apply": {"return": {"type": "Object", "description": "Schema-parsed data."}, "description": "Overridable method returns data as-is.", "param": "schema {Object} Schema to apply.", "static": "", "guessedname": "apply", "guessedtype": "function", "params": [{"type": "Object", "name": "schema", "description": "  Schema to apply."}, {"type": "Object", "name": "data", "description": "  Data."}]}}, "static": "", "file": "dataschema-base.js", "guessedtype": "property", "shortname": "DataSchema.Base", "description": "Base class for the YUI DataSchema Utility."}, "A.DataType.DateMath": {"name": "A.DataType.DateMath", "namespace": "", "module": "aui-datatype", "guessedname": "L", "methods": {"compare": {"return": {"type": "boolean", "description": ""}, "description": "Compare dates.", "param": "{Date} d1\tThe JavaScript Date object to compare", "params": [{"type": "Date", "name": "d1", "description": "\tThe JavaScript Date object to compare"}, {"type": "Date", "name": "d2", "description": "\tThe JavaScript Date object to compare"}], "guessedname": "compare", "guessedtype": "function"}, "safeClearTime": {"return": {"type": "Date", "description": "The JavaScript Date cleared of all time fields"}, "description": "Clears the time fields from a given date, effectively setting the time to\n12 noon. This is \"safe\" because clones the date before clear, not affecting\nthe passed reference.", "param": "{Date}\tdate\tThe JavaScript Date for which the time fields will be cleared", "params": [{"type": "Date", "name": "date", "description": "\tThe JavaScript Date for which the time fields will be cleared"}], "guessedname": "safeClearTime", "guessedtype": "function"}, "getFirstDayOfWeek": {"return": {"type": "Date", "description": "The first day of the week"}, "description": "Get the first day of the week, for the give date.", "param": "{Date} dt The date in the week for which the first day is required.", "params": [{"type": "Date", "name": "dt", "description": " The date in the week for which the first day is required."}, {"type": "Number", "name": "startOfWeek", "description": " The index for the first day of the week, 0 = Sun, 1 = Mon ... 6 = Sat (defaults to 0)"}], "guessedname": "getFirstDayOfWeek", "guessedtype": "function"}, "isMonWedOrFri": {"return": {"type": "", "description": "boolean"}, "description": "Chechs if the passed date is a Monday, Wednesday or Friday.", "param": "{Date} date Date", "params": [{"type": "Date", "name": "date", "description": " Date"}], "guessedname": "isMonWedOrFri", "guessedtype": "function"}, "clearTime": {"return": {"type": "Date", "description": "The JavaScript Date cleared of all time fields"}, "description": "Clears the time fields from a given date, effectively setting the time to 12 noon.", "param": "{Date}\tdate\tThe JavaScript Date for which the time fields will be cleared", "params": [{"type": "Date", "name": "date", "description": "\tThe JavaScript Date for which the time fields will be cleared"}], "guessedname": "clearTime", "guessedtype": "function"}, "getJan1": {"return": {"type": "Date", "description": "January 1 of the calendar year specified."}, "description": "Retrieves a JavaScript Date object representing January 1 of any given year.", "param": "{Number} calendarYear\t\tThe calendar year for which to retrieve January 1", "params": [{"type": "Number", "name": "calendarYear", "description": "\t\tThe calendar year for which to retrieve January 1"}], "guessedname": "getJan1", "guessedtype": "function"}, "findMonthStart": {"return": {"type": "Date", "description": "The JavaScript Date representing the first day of the month"}, "description": "Gets the first day of a month containing a given date.", "param": "{Date}\tdate\tThe JavaScript Date used to calculate the month start", "params": [{"type": "Date", "name": "date", "description": "\tThe JavaScript Date used to calculate the month start"}], "guessedname": "findMonthStart", "guessedtype": "function"}, "_addDays": {"description": "Private helper method to account for bug in Safari 2 (webkit < 420)\nwhen Date.setDate(n) is called with n less than -128 or greater than 127.\n<p>\nFix approach and original findings are available here:\nhttp://brianary.blogspot.com/2006/03/safari-date-bug.html\n</p>", "param": "{Date} d JavaScript date object", "params": [{"type": "Date", "name": "d", "description": " JavaScript date object"}, {"type": "Number", "name": "nDays", "description": " The number of days to add to the date object (can be negative)"}], "private": "", "guessedname": "_addDays", "guessedtype": "function"}, "before": {"return": {"type": "Boolean", "description": "true if the date occurs before the compared date; false if not."}, "description": "Determines whether a given date is before another date on the calendar.", "param": "{Date} date\t\tThe Date object to compare with the compare argument", "params": [{"type": "Date", "name": "date", "description": "\t\tThe Date object to compare with the compare argument"}, {"type": "Date", "name": "compareTo", "description": "\tThe Date object to use for the comparison"}], "guessedname": "before", "guessedtype": "function"}, "getSecondsOffset": {"return": {"type": "Number", "description": "The number of seconds"}, "description": "Calculates the number of seconds between the specified dates.", "param": "{Date}\td1 Date 1", "params": [{"type": "Date", "name": "d1", "description": " Date 1"}, {"type": "Date", "name": "d2", "description": " Date 2"}], "guessedname": "getSecondsOffset", "guessedtype": "function"}, "getHoursOffset": {"return": {"type": "Number", "description": "The number of hours"}, "description": "Calculates the number of hours between the specified dates.", "param": "{Date}\td1 Date 1", "params": [{"type": "Date", "name": "d1", "description": " Date 1"}, {"type": "Date", "name": "d2", "description": " Date 2"}], "guessedname": "getHoursOffset", "guessedtype": "function"}, "add": {"return": {"type": "Date", "description": "The resulting Date object"}, "description": "Adds the specified amount of time to the this instance.", "param": "{Date} date\tThe JavaScript Date object to perform addition on", "params": [{"type": "Date", "name": "date", "description": "\tThe JavaScript Date object to perform addition on"}, {"type": "String", "name": "field", "description": "\tThe field constant to be used for performing addition."}, {"type": "Number", "name": "amount", "description": "\tThe number of units (measured in the field constant) to add to the date."}], "guessedname": "add", "guessedtype": "function"}, "between": {"return": {"type": "Boolean", "description": "true if the date occurs between the compared dates; false if not."}, "description": "Determines whether a given date is between two other dates on the calendar.", "param": "{Date} date\t\tThe date to check for", "params": [{"type": "Date", "name": "date", "description": "\t\tThe date to check for"}, {"type": "Date", "name": "dateBegin", "description": "\tThe start of the range"}, {"type": "Date", "name": "dateEnd", "description": "\t\tThe end of the range"}], "guessedname": "between", "guessedtype": "function"}, "getDate": {"return": {"type": "Date", "description": "The JavaScript date object with year, month, date set as provided."}, "description": "Returns a new JavaScript Date object, representing the given year, month and date. Time fields (hr, min, sec, ms) on the new Date object\nare set to 0. The method allows Date instances to be created with the a year less than 100. \"new Date(year, month, date)\" implementations\nset the year to 19xx if a year (xx) which is less than 100 is provided.\n<p>\n<em>NOTE:</em>Validation on argument values is not performed. It is the caller's responsibility to ensure\narguments are valid as per the ECMAScript-262 Date object specification for the new Date(year, month[, date]) constructor.\n</p>", "param": "{Number} y Year.", "params": [{"type": "Number", "name": "y", "description": " Year."}, {"type": "Number", "name": "m", "description": " Month index from 0 (Jan) to 11 (Dec)."}, {"type": "Number", "name": "d", "description": " (optional) Date from 1 to 31. If not provided, defaults to 1."}], "guessedname": "getDate", "guessedtype": "function"}, "isYearOverlapWeek": {"return": {"type": "Boolean", "description": "true if the date overlaps two different years."}, "description": "Determines if a given week overlaps two different years.", "param": "{Date}\tweekBeginDate\tThe JavaScript Date representing the first day of the week.", "params": [{"type": "Date", "name": "weekBeginDate", "description": "\tThe JavaScript Date representing the first day of the week."}], "guessedname": "isYearOverlapWeek", "guessedtype": "function"}, "isWeekDay": {"return": {"type": "", "description": "boolean"}, "description": "Chechs if the passed date is a week day.", "param": "{Date} date Date", "params": [{"type": "Date", "name": "date", "description": " Date"}], "guessedname": "isWeekDay", "guessedtype": "function"}, "isTueOrThu": {"return": {"type": "", "description": "boolean"}, "description": "Chechs if the passed date is a Tuesday or Thursday.", "param": "{Date} date Date", "params": [{"type": "Date", "name": "date", "description": " Date"}], "guessedname": "isTueOrThu", "guessedtype": "function"}, "clone": {"return": {"type": "Date", "description": "The JavaScript Date cloned"}, "description": "Clone the passed date object.", "param": "{Date}\tdate\tThe JavaScript Date to clone", "params": [{"type": "Date", "name": "date", "description": "\tThe JavaScript Date to clone"}], "guessedname": "clone", "guessedtype": "function"}, "after": {"return": {"type": "Boolean", "description": "true if the date occurs after the compared date; false if not."}, "description": "Determines whether a given date is after another date on the calendar.", "param": "{Date} date\t\tThe Date object to compare with the compare argument", "params": [{"type": "Date", "name": "date", "description": "\t\tThe Date object to compare with the compare argument"}, {"type": "Date", "name": "compareTo", "description": "\tThe Date object to use for the comparison"}], "guessedname": "after", "guessedtype": "function"}, "isMonthOverlapWeek": {"return": {"type": "Boolean", "description": "true if the date overlaps two different months."}, "description": "Determines if a given week overlaps two different months.", "param": "{Date}\tweekBeginDate\tThe JavaScript Date representing the first day of the week.", "params": [{"type": "Date", "name": "weekBeginDate", "description": "\tThe JavaScript Date representing the first day of the week."}], "guessedname": "isMonthOverlapWeek", "guessedtype": "function"}, "getMinutesOffset": {"return": {"type": "Number", "description": "The number of minutes"}, "description": "Calculates the number of minutes between the specified dates.", "param": "{Date}\td1 Date 1", "params": [{"type": "Date", "name": "d1", "description": " Date 1"}, {"type": "Date", "name": "d2", "description": " Date 2"}], "guessedname": "getMinutesOffset", "guessedtype": "function"}, "subtract": {"return": {"type": "Date", "description": "The resulting Date object"}, "description": "Subtracts the specified amount of time from the this instance.", "param": "{Date} date\tThe JavaScript Date object to perform subtraction on", "params": [{"type": "Date", "name": "date", "description": "\tThe JavaScript Date object to perform subtraction on"}, {"type": "Number", "name": "field", "description": "\tThe this field constant to be used for performing subtraction."}, {"type": "Number", "name": "amount", "description": "\tThe number of units (measured in the field constant) to subtract from the date."}], "guessedname": "subtract", "guessedtype": "function"}, "getWeekNumber": {"return": {"type": "Number", "description": "The number of the week containing the given date."}, "description": "Calculates the week number for the given date. Can currently support standard\nU.S. week numbers, based on Jan 1st defining the 1st week of the year, and\nISO8601 week numbers, based on Jan 4th defining the 1st week of the year.", "param": "{Date}\tdate The JavaScript date for which to find the week number", "params": [{"type": "Date", "name": "date", "description": " The JavaScript date for which to find the week number"}, {"type": "Number", "name": "firstDayOfWeek", "description": " The index of the first day of the week (0 = Sun, 1 = Mon ... 6 = Sat).\nDefaults to 0"}, {"type": "Number", "name": "janDate", "description": " The date in the first week of January which defines week one for the year\nDefaults to the value of YAHOO.widget.DateMath.WEEK_ONE_JAN_DATE, which is 1 (Jan 1st).\nFor the U.S, this is normally Jan 1st. ISO8601 uses Jan 4th to define the first week of the year."}], "guessedname": "getWeekNumber", "guessedtype": "function"}, "getDayOffset": {"return": {"type": "Number", "description": "The number of days since January 1 of the given year"}, "description": "Calculates the number of days the specified date is from January 1 of the specified calendar year.\nPassing January 1 to this function would return an offset value of zero.", "param": "{Date}\td1 Date 1", "params": [{"type": "Date", "name": "date", "description": "\tThe JavaScript date for which to find the offset"}, {"type": "Number", "name": "calendarYear", "description": "\tThe calendar year to use for determining the offset"}], "guessedname": "getDayOffsetYear", "guessedtype": "function"}, "findMonthEnd": {"return": {"type": "Date", "description": "The JavaScript Date representing the last day of the month"}, "description": "Gets the last day of a month containing a given date.", "param": "{Date}\tdate\tThe JavaScript Date used to calculate the month end", "params": [{"type": "Date", "name": "date", "description": "\tThe JavaScript Date used to calculate the month end"}], "guessedname": "findMonthEnd", "guessedtype": "function"}, "isSameMonth": {"return": {"type": "", "description": "boolean"}, "description": "Chechs if the passed dates are in the same month.", "param": "{Date} d1 Date", "params": [{"type": "Date", "name": "d1", "description": " Date"}, {"type": "Date", "name": "d2", "description": " Date"}], "guessedname": "isSameMonth", "guessedtype": "function"}, "isDayOverlap": {"return": {"type": "", "description": "boolean"}, "description": "Chechs if the passed date is between two days.", "param": "{Date} date1 Date", "params": [{"type": "Date", "name": "date1", "description": " Date"}, {"type": "Date", "name": "date2", "description": " Date"}], "guessedname": "isDayOverlap", "guessedtype": "function"}, "isToday": {"return": {"type": "", "description": "boolean"}, "description": "Chechs if the passed date is today.", "param": "{Date} date Date", "params": [{"type": "Date", "name": "date", "description": " Date"}], "guessedname": "isToday", "guessedtype": "function"}}, "file": "aui-datatype.js", "guessedtype": "property", "shortname": "A.DataType.DateMath", "properties": {"WEEK": {"description": "Constant field representing Week", "static": "", "guessedname": "WEEK", "guessedtype": "property", "type": "String", "final": ""}, "WEEK_LENGTH": {"description": "Constant field representing the number of maximum days in a week", "static": "", "guessedname": "WEEK_LENGTH", "guessedtype": "property", "type": "Number", "final": ""}, "WEEK_ONE_JAN_DATE": {"type": "Number", "static": "", "description": "Constant field representing the date in first week of January\nwhich identifies the first week of the year.\n<p>\nIn the U.S, Jan 1st is normally used based on a Sunday start of week.\nISO 8601, used widely throughout Europe, uses Jan 4th, based on a Monday start of week.\n</p>", "guessedname": "WEEK_ONE_JAN_DATE", "guessedtype": "property"}, "ONE_SECOND_MS": {"description": "Constant field representing one second, in milliseconds", "static": "", "guessedname": "ONE_SECOND_MS", "guessedtype": "property", "type": "Number", "final": ""}, "HOUR": {"description": "Constant field representing Hour", "static": "", "guessedname": "HOUR", "guessedtype": "property", "type": "String", "final": ""}, "SECONDS": {"description": "Constant field representing Seconds", "static": "", "guessedname": "SECONDS", "guessedtype": "property", "type": "String", "final": ""}, "ONE_HOUR_MS": {"description": "Constant field representing one hour, in milliseconds", "static": "", "guessedname": "ONE_HOUR_MS", "guessedtype": "property", "type": "Number", "final": ""}, "MAX_MONTH_LENGTH": {"description": "Constant field representing the number of maximum days in a month", "static": "", "guessedname": "MAX_MONTH_LENGTH", "guessedtype": "property", "type": "Number", "final": ""}, "MONTH": {"description": "Constant field representing Month", "static": "", "guessedname": "MONTH", "guessedtype": "property", "type": "String", "final": ""}, "ONE_DAY_MS": {"description": "Constant field representing one day, in milliseconds", "static": "", "guessedname": "ONE_DAY_MS", "guessedtype": "property", "type": "Number", "final": ""}, "YEAR": {"description": "Constant field representing Year", "static": "", "guessedname": "YEAR", "guessedtype": "property", "type": "String", "final": ""}, "ONE_MINUTE_MS": {"description": "Constant field representing one minute, in milliseconds", "static": "", "guessedname": "ONE_MINUTE_MS", "guessedtype": "property", "type": "Number", "final": ""}, "MINUTES": {"description": "Constant field representing Minutes", "static": "", "guessedname": "MINUTES", "guessedtype": "property", "type": "String", "final": ""}, "DAY": {"description": "Constant field representing Day", "static": "", "guessedname": "DAY", "guessedtype": "property", "type": "String", "final": ""}}, "description": "A.DataType.DateMath is used for simple date manipulation. The class is a static utility\nused for adding, subtracting, and comparing dates. Based on YAHOO.widget.DateMath."}, "OverlayContextManager": {"name": "OverlayContextManager", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "A base class for OverlayContextManager:"}], "namespace": "", "module": "aui-overlay", "guessedname": "OverlayContextManager", "static": "", "superclass": "OverlayManager", "file": "aui-overlay.js", "guessedtype": "property", "extends": "OverlayManager", "shortname": "OverlayContextManager", "description": "A base class for OverlayContextManager:"}, "ChartBase": {"properties": {"_seriesCollection": {"guessedname": "_seriesCollection", "type": "Array", "description": "Storage for `seriesCollection` attribute.", "private": "", "guessedtype": "property"}, "_dataProvider": {"guessedname": "_dataProvider", "type": "Array", "description": "Storage for the `dataProvider` attribute.", "private": "", "guessedtype": "property"}, "_setSeriesCollection": {"guessedname": "_setSeriesCollection", "param": "{Array} val Array of either `CartesianSeries` instances or objects containing series attribute key value pairs.", "description": "Setter method for `seriesCollection` attribute.", "private": "", "guessedtype": "function"}, "_axes": {"guessedname": "_axes", "type": "Array", "description": "Collection of axes.", "private": "", "guessedtype": "property"}, "_axisClass": {"guessedname": "_axisClass", "type": "Object", "description": "Key value pairs of axis types.", "private": "", "guessedtype": "property"}, "bindUI": {"private": "", "guessedname": "bindUI", "guessedtype": "function"}, "_direction": {"description": "Default direction of the chart.", "default": "horizontal", "private": "", "guessedname": "_direction", "guessedtype": "property", "type": "String"}}, "name": "ChartBase", "constructors": [{"description": "The ChartBase class is an abstract class used to create charts."}], "namespace": "", "module": "charts", "events": {"categoryKeyChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "categoryKeyChange", "description": "Fires when the value for the configuration attribute 'categoryKey' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "markerEvent:mousedown": {"preventable": "false", "params": [{"type": "EventFacade", "name": "e", "description": " Event facade with the following additional\nproperties:\n<dl>\n<dt>categoryItem</dt><dd>Hash containing information about the category `Axis`.</dd>\n<dt>valueItem</dt><dd>Hash containing information about the value `Axis`.</dd>\n<dt>node</dt><dd>The dom node of the marker.</dd>\n<dt>x</dt><dd>The x-coordinate of the mouse in relation to the Chart.</dd>\n<dt>y</dt><dd>The y-coordinate of the mouse in relation to the Chart.</dd>\n<dt>series</dt><dd>Reference to the series of the marker.</dd>\n<dt>index</dt><dd>Index of the marker in the series.</dd>\n<dt>seriesIndex</dt><dd>The `order` of the marker's series.</dd>\n</dl>"}], "description": "Broadcasts when `interactionType` is set to `marker` and a series marker has received a mousedown event.", "param": "{EventFacade} e Event facade with the following additional\nproperties:\n<dl>\n<dt>categoryItem</dt><dd>Hash containing information about the category `Axis`.</dd>\n<dt>valueItem</dt><dd>Hash containing information about the value `Axis`.</dd>\n<dt>node</dt><dd>The dom node of the marker.</dd>\n<dt>x</dt><dd>The x-coordinate of the mouse in relation to the Chart.</dd>\n<dt>y</dt><dd>The y-coordinate of the mouse in relation to the Chart.</dd>\n<dt>series</dt><dd>Reference to the series of the marker.</dd>\n<dt>index</dt><dd>Index of the marker in the series.</dd>\n<dt>seriesIndex</dt><dd>The `order` of the marker's series.</dd>\n</dl>"}, "markerEvent:mouseup": {"preventable": "false", "params": [{"type": "EventFacade", "name": "e", "description": " Event facade with the following additional\nproperties:\n<dl>\n<dt>categoryItem</dt><dd>Hash containing information about the category `Axis`.</dd>\n<dt>valueItem</dt><dd>Hash containing information about the value `Axis`.</dd>\n<dt>node</dt><dd>The dom node of the marker.</dd>\n<dt>x</dt><dd>The x-coordinate of the mouse in relation to the Chart.</dd>\n<dt>y</dt><dd>The y-coordinate of the mouse in relation to the Chart.</dd>\n<dt>series</dt><dd>Reference to the series of the marker.</dd>\n<dt>index</dt><dd>Index of the marker in the series.</dd>\n<dt>seriesIndex</dt><dd>The `order` of the marker's series.</dd>\n</dl>"}], "description": "Broadcasts when `interactionType` is set to `marker` and a series marker has received a mouseup event.", "param": "{EventFacade} e Event facade with the following additional\nproperties:\n<dl>\n<dt>categoryItem</dt><dd>Hash containing information about the category `Axis`.</dd>\n<dt>valueItem</dt><dd>Hash containing information about the value `Axis`.</dd>\n<dt>node</dt><dd>The dom node of the marker.</dd>\n<dt>x</dt><dd>The x-coordinate of the mouse in relation to the Chart.</dd>\n<dt>y</dt><dd>The y-coordinate of the mouse in relation to the Chart.</dd>\n<dt>series</dt><dd>Reference to the series of the marker.</dd>\n<dt>index</dt><dd>Index of the marker in the series.</dd>\n<dt>seriesIndex</dt><dd>The `order` of the marker's series.</dd>\n</dl>"}, "axesCollectionChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "axesCollectionChange", "description": "Fires when the value for the configuration attribute 'axesCollection' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "tooltipChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "tooltipChange", "description": "Fires when the value for the configuration attribute 'tooltip' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "graphChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "graphChange", "description": "Fires when the value for the configuration attribute 'graph' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "markerEvent:mouseover": {"preventable": "false", "params": [{"type": "EventFacade", "name": "e", "description": " Event facade with the following additional\nproperties:\n<dl>\n<dt>categoryItem</dt><dd>Hash containing information about the category `Axis`.</dd>\n<dt>valueItem</dt><dd>Hash containing information about the value `Axis`.</dd>\n<dt>node</dt><dd>The dom node of the marker.</dd>\n<dt>x</dt><dd>The x-coordinate of the mouse in relation to the Chart.</dd>\n<dt>y</dt><dd>The y-coordinate of the mouse in relation to the Chart.</dd>\n<dt>series</dt><dd>Reference to the series of the marker.</dd>\n<dt>index</dt><dd>Index of the marker in the series.</dd>\n<dt>seriesIndex</dt><dd>The `order` of the marker's series.</dd>\n</dl>"}], "description": "Broadcasts when `interactionType` is set to `marker` and a series marker has received a mouseover event.", "param": "{EventFacade} e Event facade with the following additional\nproperties:\n<dl>\n<dt>categoryItem</dt><dd>Hash containing information about the category `Axis`.</dd>\n<dt>valueItem</dt><dd>Hash containing information about the value `Axis`.</dd>\n<dt>node</dt><dd>The dom node of the marker.</dd>\n<dt>x</dt><dd>The x-coordinate of the mouse in relation to the Chart.</dd>\n<dt>y</dt><dd>The y-coordinate of the mouse in relation to the Chart.</dd>\n<dt>series</dt><dd>Reference to the series of the marker.</dd>\n<dt>index</dt><dd>Index of the marker in the series.</dd>\n<dt>seriesIndex</dt><dd>The `order` of the marker's series.</dd>\n</dl>"}, "seriesKeysChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "seriesKeysChange", "description": "Fires when the value for the configuration attribute 'seriesKeys' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "dataProviderChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "dataProviderChange", "description": "Fires when the value for the configuration attribute 'dataProvider' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "markerEvent:mouseout": {"preventable": "false", "params": [{"type": "EventFacade", "name": "e", "description": " Event facade with the following additional\nproperties:\n<dl>\n<dt>categoryItem</dt><dd>Hash containing information about the category `Axis`.</dd>\n<dt>valueItem</dt><dd>Hash containing information about the value `Axis`.</dd>\n<dt>node</dt><dd>The dom node of the marker.</dd>\n<dt>x</dt><dd>The x-coordinate of the mouse in relation to the Chart.</dd>\n<dt>y</dt><dd>The y-coordinate of the mouse in relation to the Chart.</dd>\n<dt>series</dt><dd>Reference to the series of the marker.</dd>\n<dt>index</dt><dd>Index of the marker in the series.</dd>\n<dt>seriesIndex</dt><dd>The `order` of the marker's series.</dd>\n</dl>"}], "description": "Broadcasts when `interactionType` is set to `marker` and a series marker has received a mouseout event.", "param": "{EventFacade} e Event facade with the following additional\nproperties:\n<dl>\n<dt>categoryItem</dt><dd>Hash containing information about the category `Axis`.</dd>\n<dt>valueItem</dt><dd>Hash containing information about the value `Axis`.</dd>\n<dt>node</dt><dd>The dom node of the marker.</dd>\n<dt>x</dt><dd>The x-coordinate of the mouse in relation to the Chart.</dd>\n<dt>y</dt><dd>The y-coordinate of the mouse in relation to the Chart.</dd>\n<dt>series</dt><dd>Reference to the series of the marker.</dd>\n<dt>index</dt><dd>Index of the marker in the series.</dd>\n<dt>seriesIndex</dt><dd>The `order` of the marker's series.</dd>\n</dl>"}, "categoryTypeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "categoryTypeChange", "description": "Fires when the value for the configuration attribute 'categoryType' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "interactionTypeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "interactionTypeChange", "description": "Fires when the value for the configuration attribute 'interactionType' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "markerEvent:click": {"description": "Broadcasts when `interactionType` is set to `marker` and a series marker has received a click event.", "param": "{EventFacade} e Event facade with the following additional\nproperties:\n<dl>\n<dt>categoryItem</dt><dd>Hash containing information about the category `Axis`.</dd>\n<dt>valueItem</dt><dd>Hash containing information about the value `Axis`.</dd>\n<dt>node</dt><dd>The dom node of the marker.</dd>\n<dt>x</dt><dd>The x-coordinate of the mouse in relation to the Chart.</dd>\n<dt>y</dt><dd>The y-coordinate of the mouse in relation to the Chart.</dd>\n<dt>series</dt><dd>Reference to the series of the marker.</dd>\n<dt>index</dt><dd>Index of the marker in the series.</dd>\n<dt>seriesIndex</dt><dd>The `order` of the marker's series.</dd>\n</dl>", "params": [{"type": "EventFacade", "name": "e", "description": " Event facade with the following additional\nproperties:\n<dl>\n<dt>categoryItem</dt><dd>Hash containing information about the category `Axis`.</dd>\n<dt>valueItem</dt><dd>Hash containing information about the value `Axis`.</dd>\n<dt>node</dt><dd>The dom node of the marker.</dd>\n<dt>x</dt><dd>The x-coordinate of the mouse in relation to the Chart.</dd>\n<dt>y</dt><dd>The y-coordinate of the mouse in relation to the Chart.</dd>\n<dt>series</dt><dd>Reference to the series of the marker.</dd>\n<dt>index</dt><dd>Index of the marker in the series.</dd>\n<dt>seriesIndex</dt><dd>The `order` of the marker's series.</dd>\n</dl>"}], "guessedname": "categoryItem", "guessedtype": "property", "preventable": "false"}}, "methods": {"_tooltipChangeHandler": {"description": "Event handler for the tooltipChange.", "param": "{Object} e Event object.", "params": [{"type": "Object", "name": "e", "description": " Event object."}], "private": "", "guessedname": "_tooltipChangeHandler", "guessedtype": "function"}, "_positionTooltip": {"description": "Positions the tooltip", "param": "{Object} e Event object.", "params": [{"type": "Object", "name": "e", "description": " Event object."}], "private": "", "guessedname": "_positionTooltip", "guessedtype": "function"}, "hideTooltip": {"description": "Hides the default tooltip", "guessedname": "hideTooltip", "guessedtype": "function"}, "_updateTooltip": {"return": {"type": "", "description": "Object"}, "description": "Updates the tooltip attribute.", "private": "", "params": [{"type": "Object", "name": "val", "description": " Object containing properties for the tooltip."}], "param": "{Object} val Object containing properties for the tooltip.", "guessedname": "_updateTooltip", "guessedtype": "function"}, "_addTooltip": {"private": "", "description": "Adds a tooltip to the dom.", "guessedname": "_addTooltip", "guessedtype": "function"}, "_markerEventDispatcher": {"description": "Event handler for marker events.", "param": "{Object} e Event object.", "params": [{"type": "Object", "name": "e", "description": " Event object."}], "private": "", "guessedname": "_markerEventDispatcher", "guessedtype": "function"}, "_getTooltip": {"guessedname": "_getTooltip", "return": {"type": "", "description": "Object"}, "description": "Default getter for `tooltip` attribute.", "private": "", "guessedtype": "function"}, "_showTooltip": {"description": "Shows a tooltip", "param": "{String} msg Message to dispaly in the tooltip.", "params": [{"type": "String", "name": "msg", "description": " Message to dispaly in the tooltip."}, {"type": "Number", "name": "x", "description": " x-coordinate"}, {"type": "Number", "name": "y", "description": " y-coordinate"}], "private": "", "guessedname": "_showTooltip", "guessedtype": "function"}, "getSeries": {"return": {"type": "", "description": "CartesianSeries"}, "description": "Returns a series instance by index or key value.", "param": "val", "params": [{"type": "", "name": "val", "description": ""}], "guessedname": "getSeries", "guessedtype": "function"}, "_setDataValues": {"return": {"type": "", "description": "Array"}, "description": "Setter method for `dataProvider` attribute.", "private": "", "params": [{"type": "Array", "name": "val", "description": " Array to be set as `dataProvider`."}], "param": "{Array} val Array to be set as `dataProvider`.", "guessedname": "_setDataValues", "guessedtype": "function"}, "toggleTooltip": {"param": "{Object} e Event object.", "params": [{"type": "Object", "name": "e", "description": " Event object."}], "description": "Event listener for toggling the tooltip. If a tooltip is visible, hide it. If not, it \nwill create and show a tooltip based on the event object.", "guessedname": "toggleTooltip", "guessedtype": "function"}, "_dataProviderChangeHandler": {"description": "Event handler for dataProviderChange.", "param": "{Object} e Event object.", "params": [{"type": "Object", "name": "e", "description": " Event object."}], "private": "", "guessedname": "_dataProviderChangeHandler", "guessedtype": "function"}, "_getAxisClass": {"return": {"type": "", "description": "Axis"}, "description": "Helper method that returns the axis class that a key references.", "private": "", "params": [{"type": "String", "name": "t", "description": " The type of axis."}], "param": "{String} t The type of axis.", "guessedname": "_getAxisClass", "guessedtype": "function"}, "getAxisByKey": {"return": {"type": "", "description": "Axis"}, "description": "Returns an `Axis` instance by key reference. If the axis was explicitly set through the `axes` attribute,\nthe key will be the same as the key used in the `axes` object. For default axes, the key for\nthe category axis is the value of the `categoryKey` (`category`). For the value axis, the default \nkey is `values`.", "param": "{String} val Key reference used to look up the axis.", "params": [{"type": "String", "name": "val", "description": " Key reference used to look up the axis."}], "guessedname": "getAxisByKey", "guessedtype": "function"}, "_getGraph": {"guessedname": "_getGraph", "return": {"type": "", "description": "Graph"}, "description": "Default value function for the `Graph` attribute.", "private": "", "guessedtype": "function"}, "getCategoryAxis": {"return": {"type": "", "description": "Axis"}, "description": "Returns the category axis for the chart.", "guessedname": "getCategoryAxis", "guessedtype": "function"}, "_tooltipLabelFunction": {"description": "Formats tooltip text when `interactionType` is `marker`.", "param": "{Object} categoryItem An object containing the following:\n<dl>\n<dt>axis</dt><dd>The axis to which the category is bound.</dd>\n<dt>displayName</dt><dd>The display name set to the category (defaults to key if not provided)</dd>\n<dt>key</dt><dd>The key of the category.</dd>\n<dt>value</dt><dd>The value of the category</dd>\n</dl>", "params": [{"type": "Object", "name": "categoryItem", "description": " An object containing the following:\n<dl>\n<dt>axis</dt><dd>The axis to which the category is bound.</dd>\n<dt>displayName</dt><dd>The display name set to the category (defaults to key if not provided)</dd>\n<dt>key</dt><dd>The key of the category.</dd>\n<dt>value</dt><dd>The value of the category</dd>\n</dl>"}, {"type": "Object", "name": "valueItem", "description": " An object containing the following:\n<dl>\n<dt>axis</dt><dd>The axis to which the item's series is bound.</dd>\n<dt>displayName</dt><dd>The display name of the series. (defaults to key if not provided)</dd>\n<dt>key</dt><dd>The key for the series.</dd>\n<dt>value</dt><dd>The value for the series item.</dd> \n</dl>"}, {"type": "Number", "name": "itemIndex", "description": " The index of the item within the series."}, {"type": "CartesianSeries", "name": "series", "description": " The `CartesianSeries` instance of the item."}, {"type": "Number", "name": "seriesIndex", "description": " The index of the series in the `seriesCollection`."}], "private": "", "guessedname": "_tooltipLabelFunction", "guessedtype": "function"}, "_planarLabelFunction": {"description": "Formats tooltip text when `interactionType` is `planar`.", "param": "{Axis} categoryAxis Reference to the categoryAxis of the chart.", "params": [{"type": "Axis", "name": "categoryAxis", "description": " Reference to the categoryAxis of the chart."}, {"type": "Array", "name": "valueItems", "description": " Array of objects for each series that has a data point in the coordinate plane of the event. Each object contains the following data:\n<dl>\n<dt>axis</dt><dd>The value axis of the series.</dd>\n<dt>key</dt><dd>The key for the series.</dd>\n<dt>value</dt><dd>The value for the series item.</dd>\n<dt>displayName</dt><dd>The display name of the series. (defaults to key if not provided)</dd>\n</dl>"}, {"type": "Number", "name": "index", "description": " The index of the item within its series."}, {"type": "Array", "name": "seriesArray", "description": " Array of series instances for each value item."}, {"type": "Number", "name": "seriesIndex", "description": " The index of the series in the `seriesCollection`."}], "private": "", "guessedname": "_planarLabelFunction", "guessedtype": "function"}, "renderUI": {"private": "", "guessedname": "renderUI", "guessedtype": "function"}}, "file": "charts.js", "shortname": "ChartBase", "configs": {"categoryKey": {"default": "category", "type": "String", "description": "The key value used for the chart's category axis.", "guessedname": "categoryKey", "guessedtype": "property"}, "graph": {"type": "Graph", "description": "Reference to graph instance.", "guessedname": "graph", "guessedtype": "property"}, "seriesKeys": {"type": "Array", "description": "A collection of keys that map to the series axes. If no keys are set,\nthey will be generated automatically depending on the data structure passed into \nthe chart.", "guessedname": "seriesKeys", "guessedtype": "property"}, "tooltip": {"type": "Object", "description": "Reference to the default tooltip available for the chart.\n<p>Contains the following properties:</p>\n<dl>\n<dt>node</dt><dd>Reference to the actual dom node</dd>\n<dt>showEvent</dt><dd>Event that should trigger the tooltip</dd>\n<dt>hideEvent</dt><dd>Event that should trigger the removal of a tooltip (can be an event or an array of events)</dd>\n<dt>styles</dt><dd>A hash of style properties that will be applied to the tooltip node</dd>\n<dt>show</dt><dd>Indicates whether or not to show the tooltip</dd>\n<dt>markerEventHandler</dt><dd>Displays and hides tooltip based on marker events</dd>\n<dt>planarEventHandler</dt><dd>Displays and hides tooltip based on planar events</dd>\n<dt>markerLabelFunction</dt><dd>Reference to the function used to format a marker event triggered tooltip's text</dd>\n<dt>planarLabelFunction</dt><dd>Reference to the function used to format a planar event triggered tooltip's text</dd>\n</dl>", "guessedname": "tooltip", "guessedtype": "property"}, "axesCollection": {"type": "Array", "description": "Reference to all the axes in the chart.", "guessedname": "axesCollection", "guessedtype": "property"}, "dataProvider": {"type": "Array", "description": "Data used to generate the chart.", "guessedname": "dataProvider", "guessedtype": "property"}, "categoryType": {"default": "category", "type": "String", "description": "Indicates the type of axis to use for the category axis.\n<dl>\n<dt>category</dt><dd>Specifies a `CategoryAxis`.</dd>\n<dt>time</dt><dd>Specifies a `TimeAxis</dd>\n</dl>", "guessedname": "categoryType", "guessedtype": "property"}, "interactionType": {"default": "marker", "type": "String", "description": "Indicates the the type of interactions that will fire events.\n<dl>\n<dt>marker</dt><dd>Events will be broadcasted when the mouse interacts with individual markers.</dd>\n<dt>planar</dt><dd>Events will be broadcasted when the mouse intersects the plane of any markers on the chart.</dd>\n<dt>none</dt><dd>No events will be broadcasted.</dd>\n</dl>", "guessedname": "interactionType", "guessedtype": "property"}}, "description": "The ChartBase class is an abstract class used to create charts."}, "RecordsetIndexer": {"name": "RecordsetIndexer", "namespace": "", "module": "recordset", "events": {"hashTablesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "hashTablesChange", "description": "Fires when the value for the configuration attribute 'hashTables' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "methods": {"_defUpdateHash": {"private": "", "description": "Updates all hash tables when the recordset is updated (a combination of add and remove)", "guessedname": "_defUpdateHash", "guessedtype": "function"}, "_defRemoveHash": {"private": "", "description": "Updates all hash tables when a record is removed from the recordset", "guessedname": "_defRemoveHash", "guessedtype": "function"}, "_defAddHash": {"private": "", "description": "Updates all hash tables when a record is added to the recordset", "guessedname": "_defAddHash", "guessedtype": "function"}, "_setHashTable": {"return": {"type": "object", "description": "obj  The created hash table"}, "description": "Setup the hash table for a given key with all existing records in the recordset", "private": "", "params": [{"type": "string", "name": "key", "description": "  A key to hash by."}], "param": "key {string} A key to hash by.", "guessedname": "_setHashTable", "guessedtype": "function"}, "createTable": {"return": {"type": "object", "description": "tbls[key]  The created hash table"}, "description": "Creates a new hash table.", "param": "key {string} A key to hash by.", "params": [{"type": "string", "name": "key", "description": "  A key to hash by."}], "guessedname": "createTable", "guessedtype": "function", "public": ""}, "getTable": {"return": {"type": "object", "description": "table  The created hash table"}, "description": "Get a hash table that hashes records by a given key.", "param": "key {string} A key to hash by.", "params": [{"type": "string", "name": "key", "description": "  A key to hash by."}], "guessedname": "getTable", "guessedtype": "function", "public": ""}}, "file": "recordset-indexer.js", "shortname": "RecordsetIndexer", "configs": {"hashTables": {"public": "", "type": "object", "description": "Collection of all the hashTables created by the plugin. \nThe individual tables can be accessed by the key they are hashing against.", "guessedname": "hashTables", "guessedtype": "property"}}, "description": "Plugin that provides the ability to store multiple custom hash tables referencing records in the recordset.\nThis utility does not support any collision handling. New hash table entries with a used key overwrite older ones."}, "Do.Method": {"name": "Do.Method", "constructors": [{"params": [{"type": "", "name": "obj", "description": " The object to operate on"}, {"type": "", "name": "sFn", "description": " The name of the method to displace"}], "description": "Wrapper for a displaced method with aop enabled"}], "namespace": "", "module": "event-custom", "guessedname": "Method", "methods": {"register": {"param": "sid {string} the subscriber id", "params": [{"type": "string", "name": "sid", "description": "  the subscriber id"}, {"type": "Function", "name": "fn", "description": "  the function to execute"}, {"type": "string", "name": "when", "description": "  when to execute the function"}], "description": "Register a aop subscriber", "guessedname": "register", "guessedtype": "function"}, "exec": {"return": {"type": "any", "description": "Return value of wrapped function unless overwritten (see above)"}, "description": "<p>Execute the wrapped method.  All arguments are passed into the wrapping\nfunctions.  If any of the before wrappers return an instance of\n<code>Y.Do.Halt</code> or <code>Y.Do.Prevent</code>, neither the wrapped\nfunction nor any after phase subscribers will be executed.</p>\n<p>The return value will be the return value of the wrapped function or one\nprovided by a wrapper function via an instance of <code>Y.Do.Halt</code> or\n<code>Y.Do.AlterReturn</code>.", "param": "arg* {any} Arguments are passed to the wrapping and wrapped functions", "params": [{"type": "any", "name": "arg*", "description": "  Arguments are passed to the wrapping and wrapped functions"}], "guessedname": "exec", "guessedtype": "function"}, "delete": {"param": "sid {string} the subscriber id", "params": [{"type": "string", "name": "sid", "description": "  the subscriber id"}, {"type": "Function", "name": "fn", "description": "  the function to execute"}, {"type": "string", "name": "when", "description": "  when to execute the function"}], "description": "Unregister a aop subscriber", "guessedname": "_delete", "guessedtype": "function"}}, "file": "event-custom-base.js", "guessedtype": "function", "shortname": "Do.Method", "description": "Wrapper for a displaced method with aop enabled"}, "ValueChange": {"name": "ValueChange", "namespace": "", "module": "event-valuechange", "guessedname": "YArray", "methods": {"_refreshTimeout": {"description": "Restarts the inactivity timeout for the specified node.", "param": "{Node} node", "protected": "", "static": "", "guessedname": "_refreshTimeout", "guessedtype": "function", "params": [{"type": "Node", "name": "node", "description": ""}, {"type": "String", "name": "stamp", "description": ""}]}, "_onFocus": {"description": "Resets a node's history and starts polling when a focus event occurs.", "param": "{EventFacade} e", "protected": "", "static": "", "guessedname": "_onFocus", "guessedtype": "function", "params": [{"type": "EventFacade", "name": "e", "description": ""}]}, "_onMouseDown": {"description": "Starts polling when a node receives a mouseDown event.", "param": "{EventFacade} e", "protected": "", "static": "", "guessedname": "_onMouseDown", "guessedtype": "function", "params": [{"type": "EventFacade", "name": "e", "description": ""}]}, "_startPolling": {"description": "Begins polling for changes to the <code>value</code> property of the\nspecified node. If polling is already underway for the specified node,\nit will not be restarted unless the <i>force</i> parameter is\n<code>true</code>", "param": "{Node} node Node to watch.", "protected": "", "static": "", "guessedname": "_startPolling", "guessedtype": "function", "params": [{"type": "Node", "name": "node", "description": " Node to watch."}, {"type": "String", "name": "stamp", "description": " (optional) Object stamp for the node. Will be\ngenerated if not provided (provide it to improve performance)."}, {"type": "EventFacade", "name": "e", "description": " (optional) Event facade of the event that\ninitiated the polling (if any)."}, {"type": "Boolean", "name": "force", "description": " (optional) If <code>true</code>, polling will be\nrestarted even if we're already polling this node."}]}, "_stopTimeout": {"description": "Clears the inactivity timeout for the specified node, if any.", "param": "{Node} node", "protected": "", "static": "", "guessedname": "_stopTimeout", "guessedtype": "function", "params": [{"type": "Node", "name": "node", "description": ""}, {"type": "String", "name": "stamp", "description": " (optional)"}]}, "_stopPolling": {"description": "Stops polling for changes to the specified node's <code>value</code>\nattribute.", "param": "{Node} node", "protected": "", "static": "", "guessedname": "_stopPolling", "guessedtype": "function", "params": [{"type": "Node", "name": "node", "description": ""}, {"type": "String", "name": "stamp", "description": " (optional)"}]}, "_poll": {"description": "Called at an interval to poll for changes to the value of the specified\nnode.", "param": "{Node} node", "protected": "", "static": "", "guessedname": "_poll", "guessedtype": "function", "params": [{"type": "Node", "name": "node", "description": ""}, {"type": "String", "name": "stamp", "description": ""}, {"type": "EventFacade", "name": "e", "description": ""}]}, "_onUnsubscribe": {"description": "Called when event-valuechange loses a subscriber.", "param": "{Node} node", "protected": "", "static": "", "guessedname": "_onUnsubscribe", "guessedtype": "function", "params": [{"type": "Node", "name": "node", "description": ""}, {"type": "Subscription", "name": "subscription", "description": ""}, {"type": "SyntheticEvent.Notifier", "name": "notifier", "description": ""}]}, "_onSubscribe": {"description": "Called when event-valuechange receives a new subscriber.", "param": "{Node} node", "protected": "", "static": "", "guessedname": "_onSubscribe", "guessedtype": "function", "params": [{"type": "Node", "name": "node", "description": ""}, {"type": "Subscription", "name": "subscription", "description": ""}, {"type": "SyntheticEvent.Notifier", "name": "notifier", "description": ""}]}, "_onKeyDown": {"description": "Starts polling when a node receives a keyDown event.", "param": "{EventFacade} e", "protected": "", "static": "", "guessedname": "_onKeyDown", "guessedtype": "function", "params": [{"type": "EventFacade", "name": "e", "description": ""}]}, "_onBlur": {"description": "Stops polling when a node's blur event fires.", "param": "{EventFacade} e", "protected": "", "static": "", "guessedname": "_onBlur", "guessedtype": "function", "params": [{"type": "EventFacade", "name": "e", "description": ""}]}, "_onKeyUp": {"description": "Starts polling when an IME-related keyUp event occurs on a node.", "param": "{EventFacade} e", "protected": "", "static": "", "guessedname": "_onKeyUp", "guessedtype": "function", "params": [{"type": "EventFacade", "name": "e", "description": ""}]}}, "static": "", "file": "event-valuechange.js", "guessedtype": "property", "shortname": "ValueChange", "properties": {"POLL_INTERVAL": {"description": "Interval (in milliseconds) at which to poll for changes to the value of\nan element with one or more <code>valueChange</code> subscribers when the\nuser is likely to be interacting with it.", "default": "50", "static": "", "guessedname": "POLL_INTERVAL", "guessedtype": "property", "type": "Number"}, "TIMEOUT": {"description": "Timeout (in milliseconds) after which to stop polling when there hasn't\nbeen any new activity (keypresses, mouse clicks, etc.) on an element.", "default": "10000", "static": "", "guessedname": "TIMEOUT", "guessedtype": "property", "type": "Number"}}, "description": "Provides the implementation for the synthetic <code>valueChange</code> event."}, "VMLEllipse": {"name": "VMLEllipse", "constructors": [{"description": "<a href=\"http://www.w3.org/TR/NOTE-VML\">VML</a> implementation of the <a href=\"Ellipse.html\">`Ellipse`</a> class. \n`VMLEllipse` is not intended to be used directly. Instead, use the <a href=\"Ellipse.html\">`Ellipse`</a> class. \nIf the browser lacks <a href=\"http://www.w3.org/TR/SVG/\">SVG</a> and <a href=\"http://www.w3.org/TR/html5/the-canvas-element.html\">Canvas</a> \ncapabilities, the <a href=\"Ellipse.html\">`Ellipse`</a> class will point to the `VMLEllipse` class."}], "namespace": "", "module": "graphics", "guessedname": "VMLEllipse", "file": "graphics-vml-debug.js", "guessedtype": "function", "shortname": "VMLEllipse", "properties": {"_type": {"guessedname": "_type", "type": "String", "description": "Indicates the type of shape", "private": "", "guessedtype": "property"}}, "description": "<a href=\"http://www.w3.org/TR/NOTE-VML\">VML</a> implementation of the <a href=\"Ellipse.html\">`Ellipse`</a> class. \n`VMLEllipse` is not intended to be used directly. Instead, use the <a href=\"Ellipse.html\">`Ellipse`</a> class. \nIf the browser lacks <a href=\"http://www.w3.org/TR/SVG/\">SVG</a> and <a href=\"http://www.w3.org/TR/html5/the-canvas-element.html\">Canvas</a> \ncapabilities, the <a href=\"Ellipse.html\">`Ellipse`</a> class will point to the `VMLEllipse` class."}, "SyntheticEvent": {"since": "3.1.0", "name": "SyntheticEvent", "constructors": [{"params": [{"type": "Object", "name": "cfg", "description": "  Implementation pieces and configuration"}], "description": "<p>Wrapper class for the integration of new events into the YUI event\ninfrastructure.  Don't instantiate this object directly, use\n<code>Y.Event.define(type, config)</code>.  See that method for details.</p>\n<p>Properties that MAY or SHOULD be specified in the configuration are noted\nbelow and in the description of <code>Y.Event.define</code>.</p>"}], "namespace": "", "module": "event-simulate", "methods": {"on": {"param": "node {Node} the node the subscription is being applied to", "params": [{"type": "Node", "name": "node", "description": "  the node the subscription is being applied to"}, {"type": "Subscription", "name": "sub", "description": "  the object to track this subscription"}, {"type": "SyntheticEvent.Notifier", "name": "notifier", "description": "  call notifier.fire(..) to\ntrigger the execution of the subscribers"}], "description": "<p>Implementers SHOULD provide this method definition.</p>\nImplementation logic for subscriptions done via <code>node.on(type,\nfn)</code> or <code>Y.on(type, fn, target)</code>.  This\nfunction should set up the monitor(s) that will eventually fire the\nevent.  Typically this involves subscribing to at least one DOM\nevent.  It is recommended to store detach handles from any DOM\nsubscriptions to make for easy cleanup in the <code>detach</code>\nmethod.  Typically these handles are added to the <code>sub</code>\nobject.  Also for SyntheticEvents that leverage a single DOM\nsubscription under the hood, it is recommended to pass the DOM event\nobject to <code>notifier.fire(e)</code>.  (The event name on the\nobject will be updated).", "guessedname": "on", "guessedtype": "property"}, "_on": {"return": {"type": "EventHandle", "description": "the detach handle for this subscription"}, "description": "Sets up the boilerplate for detaching the event and facilitating the\nexecution of subscriber callbacks.", "private": "", "params": [{"type": "Array", "name": "args", "description": "  array of arguments passed to\n<code>Y.on(...)</code> or <code>Y.delegate(...)</code>"}, {"type": "Boolean", "name": "delegate", "description": "  true if called from\n<code>Y.delegate(...)</code>"}], "param": "args {Array} array of arguments passed to\n<code>Y.on(...)</code> or <code>Y.delegate(...)</code>", "guessedname": "_on", "guessedtype": "function"}, "subMatch": {"return": {"type": "Boolean", "description": "true if the sub can be described by the args\npresent"}, "description": "<p>Implementers MAY override this to define what constitutes a\n&quot;same&quot; subscription.  Override implementations should\nconsider the lack of a comparator as a match, so calling\n<code>getSubs()</code> with no arguments will return all subs.</p>\n<p>Compares a set of subscription arguments against a Subscription\nobject to determine if they match.  The default implementation\ncompares the callback function against the second argument passed to\n<code>Y.on(...)</code> or <code>node.detach(...)</code> etc.</p>", "since": "3.2.0", "param": "sub {Subscription} the existing subscription", "params": [{"type": "Subscription", "name": "sub", "description": "  the existing subscription"}, {"type": "Array", "name": "args", "description": "  the calling arguments passed to\n<code>Y.on(...)</code> etc."}], "guessedname": "subMatch", "guessedtype": "function"}, "_init": {"protected": "", "description": "Construction logic for the event.", "guessedname": "_init", "guessedtype": "function"}, "detachDelegate": {"description": "<p>Implementers SHOULD provide this method definition.</p>\n<p>Implementation logic for detaching subscriptions done via\n<code>node.delegate(type, fn, filter)</code> or\n<code>Y.delegate(type, fn, container, filter)</code>.  This function\nshould clean up any subscriptions made in the\n<code>delegate()</code> phase.</p>", "since": "3.2.0", "param": "node {Node} the node the subscription was applied to", "params": [{"type": "Node", "name": "node", "description": "  the node the subscription was applied to"}, {"type": "Subscription", "name": "sub", "description": "  the object tracking this subscription"}, {"type": "SyntheticEvent.Notifier", "name": "notifier", "description": "  the Notifier used to\ntrigger the execution of the subscribers"}, {"type": "String|Function", "name": "filter", "description": "  Selector string or function that\naccepts an event object and returns null, a Node, or an\narray of Nodes matching the criteria for processing."}], "guessedname": "detachDelegate", "guessedtype": "property"}, "getRegistry": {"return": {"type": "Array", "description": ""}, "description": "Returns the array of subscription handles for a node for the given event\ntype.  Passing true as the third argument will create a registry entry\nin the event system's DOM map to host the array if one doesn't yet exist.", "since": "3.2.0", "param": "node {Node} the node", "protected": "", "params": [{"type": "Node", "name": "node", "description": "  the node"}, {"type": "String", "name": "type", "description": "  the event"}, {"type": "Boolean", "name": "create", "description": "  create a registration entry to host a new array\nif one doesn't exist."}], "guessedname": "getRegistry", "guessedtype": "function", "static": ""}, "_subscribe": {"return": {"type": "EventHandle", "description": ""}, "description": "Creates a new Notifier object for use by this event's\n<code>on(...)</code> or <code>delegate(...)</code> implementation\nand register the custom event proxy in the DOM system for cleanup.", "since": "3.2.0", "private": "", "params": [{"type": "Node", "name": "node", "description": "  the Node hosting the event"}, {"type": "String", "name": "method", "description": "  \"on\" or \"delegate\""}, {"type": "Array", "name": "args", "description": "  the subscription arguments passed to either\n<code>Y.on(...)</code> or <code>Y.delegate(...)</code>\nafter running through <code>processArgs(args)</code> to\nnormalize the argument signature"}, {"type": "any", "name": "extra", "description": "  Extra data parsed from\n<code>processArgs(args)</code>"}, {"type": "String|Function", "name": "filter", "description": "  the selector string or function\nfilter passed to <code>Y.delegate(...)</code> (not\npresent when called from <code>Y.on(...)</code>)"}], "param": "node {Node} the Node hosting the event", "guessedname": "_subscribe", "guessedtype": "function"}, "delegate": {"description": "<p>Implementers SHOULD provide this method definition.</p>\n<p>Implementation logic for subscriptions done via\n<code>node.delegate(type, fn, filter)</code> or\n<code>Y.delegate(type, fn, container, filter)</code>.  Like with\n<code>on()</code> above, this function should monitor the environment\nfor the event being fired, and trigger subscription execution by\ncalling <code>notifier.fire(e)</code>.</p>\n<p>This function receives a fourth argument, which is the filter\nused to identify which Node's are of interest to the subscription.\nThe filter will be either a boolean function that accepts a target\nNode for each hierarchy level as the event bubbles, or a selector\nstring.  To translate selector strings into filter functions, use\n<code>Y.delegate.compileFilter(filter)</code>.</p>", "since": "3.2.0", "param": "node {Node} the node the subscription is being applied to", "params": [{"type": "Node", "name": "node", "description": "  the node the subscription is being applied to"}, {"type": "Subscription", "name": "sub", "description": "  the object to track this subscription"}, {"type": "SyntheticEvent.Notifier", "name": "notifier", "description": "  call notifier.fire(..) to\ntrigger the execution of the subscribers"}, {"type": "String|Function", "name": "filter", "description": "  Selector string or function that\naccepts an event object and returns null, a Node, or an\narray of Nodes matching the criteria for processing."}], "guessedname": "delegate", "guessedtype": "property"}, "applyArgExtras": {"param": "extra {any} Any extra data extracted from processArgs", "params": [{"type": "any", "name": "extra", "description": "  Any extra data extracted from processArgs"}, {"type": "Subscription", "name": "sub", "description": "  the individual subscription"}], "description": "<p>Implementers MAY provide this method definition.</p>\n<p>Implement this function if you want extra data extracted during\nprocessArgs to be propagated to subscriptions on a per-node basis.\nThat is to say, if you call <code>Y.on('xyz', fn, xtra, 'div')</code>\nthe data returned from processArgs will be shared\nacross the subscription objects for all the divs.  If you want each\nsubscription to receive unique information, do that processing\nhere.</p>\n<p>The default implementation adds the data extracted by processArgs\nto the subscription object as <code>sub._extra</code>.</p>", "guessedname": "applyArgExtras", "guessedtype": "function"}, "processArgs": {"return": {"type": "any", "description": ""}, "description": "<p>Implementers MAY provide this method definition.</p>\n<p>Implement this function if the event supports a different\nsubscription signature.  This function is used by both\n<code>on()</code> and <code>delegate()</code>.  The second parameter\nindicates that the event is being subscribed via\n<code>delegate()</code>.</p>\n<p>Implementations must remove extra arguments from the args list\nbefore returning.  The required args for <code>on()</code>\nsubscriptions are</p>\n<pre><code>[type, callback, target, context, argN...]</code></pre>\n<p>The required args for <code>delegate()</code>\nsubscriptions are</p>\n<pre><code>[type, callback, target, filter, context, argN...]</code></pre>\n<p>The return value from this function will be stored on the\nsubscription in the '_extra' property for reference elsewhere.</p>", "param": "args {Array} parmeters passed to Y.on(..) or Y.delegate(..)", "params": [{"type": "Array", "name": "args", "description": "  parmeters passed to Y.on(..) or Y.delegate(..)"}, {"type": "Boolean", "name": "delegate", "description": "  true if the subscription is from Y.delegate"}], "guessedname": "processArgs", "guessedtype": "property"}, "_detach": {"description": "Removes the subscription(s) from the internal subscription dispatch\nmechanism.  See <code>SyntheticEvent._deleteSub</code>.", "since": "3.2.0", "private": "", "params": [{"type": "Array", "name": "args", "description": "  The arguments passed to\n<code>node.detach(...)</code>"}], "param": "args {Array} The arguments passed to\n<code>node.detach(...)</code>", "guessedname": "_detach", "guessedtype": "function"}, "_deleteSub": {"description": "Alternate <code>_delete()</code> method for the CustomEvent object\ncreated to manage SyntheticEvent subscriptions.", "since": "3.2.0", "private": "", "params": [{"type": "Subscription", "name": "sub", "description": "  the subscription to clean up"}], "param": "sub {Subscription} the subscription to clean up", "guessedname": "_deleteSub", "guessedtype": "function"}, "detach": {"param": "node {Node} the node the subscription was applied to", "params": [{"type": "Node", "name": "node", "description": "  the node the subscription was applied to"}, {"type": "Subscription", "name": "sub", "description": "  the object tracking this subscription"}, {"type": "SyntheticEvent.Notifier", "name": "notifier", "description": "  the Notifier used to\ntrigger the execution of the subscribers"}], "description": "<p>Implementers SHOULD provide this method definition.</p>\n<p>Implementation logic for detaching subscriptions done via\n<code>node.on(type, fn)</code>.  This function should clean up any\nsubscriptions made in the <code>on()</code> phase.</p>", "guessedname": "detach", "guessedtype": "property"}, "getSubs": {"return": {"type": "EventHandle[]", "description": "detach handles for the matching subscriptions"}, "description": "Returns the detach handles of subscriptions on a node that satisfy a\nsearch/filter function.  By default, the filter used is the\n<code>subMatch</code> method.", "param": "node {Node} the node hosting the event", "params": [{"type": "Node", "name": "node", "description": "  the node hosting the event"}, {"type": "Array", "name": "args", "description": "  the array of original subscription args passed\nto <code>Y.on(...)</code> (before\n<code>processArgs</code>"}, {"type": "Function", "name": "filter", "description": "  function used to identify a subscription\nfor inclusion in the returned array"}, {"type": "Boolean", "name": "first", "description": "  stop after the first match (used to check for\nduplicate subscriptions)"}], "guessedname": "getSubs", "guessedtype": "function"}}, "file": "event-synthetic.js", "in": "", "shortname": "SyntheticEvent", "properties": {"preventDups": {"default": "false", "type": "{Boolean}", "description": "<p>Implementers MAY override this property.</p>\n<p>Whether to prevent multiple subscriptions to this event that are\nclassified as being the same.  By default, this means the subscribed\ncallback is the same function.  See the <code>subMatch</code>\nmethod.  Setting this to true will impact performance for high volume\nevents.</p>"}}, "description": "<p>Wrapper class for the integration of new events into the YUI event\ninfrastructure.  Don't instantiate this object directly, use\n<code>Y.Event.define(type, config)</code>.  See that method for details.</p>\n<p>Properties that MAY or SHOULD be specified in the configuration are noted\nbelow and in the description of <code>Y.Event.define</code>.</p>"}, "ComboSeries": {"name": "ComboSeries", "constructors": [{"description": "The ComboSeries class renders a combination of lines, plots and area fills in a single series. Each\nseries type has a corresponding boolean attribute indicating if it is rendered. By default, lines and plots \nare rendered and area is not."}], "namespace": "", "module": "charts", "events": {"lineChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "lineChange", "description": "Fires when the value for the configuration attribute 'line' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "showMarkersChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "showMarkersChange", "description": "Fires when the value for the configuration attribute 'showMarkers' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "markerChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "markerChange", "description": "Fires when the value for the configuration attribute 'marker' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "showAreaFillChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "showAreaFillChange", "description": "Fires when the value for the configuration attribute 'showAreaFill' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "showLinesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "showLinesChange", "description": "Fires when the value for the configuration attribute 'showLines' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "areaChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "areaChange", "description": "Fires when the value for the configuration attribute 'area' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "typeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "typeChange", "description": "Fires when the value for the configuration attribute 'type' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "stylesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "stylesChange", "description": "Fires when the value for the configuration attribute 'styles' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "ComboSeries", "methods": {"drawSeries": {"protected": "", "description": "Draws the series.", "guessedname": "drawSeries", "guessedtype": "function"}, "_toggleVisible": {"description": "Toggles visibility", "param": "{Boolean} visible indicates visibilitye", "params": [{"type": "Boolean", "name": "visible", "description": " indicates visibilitye"}], "private": "", "guessedname": "_toggleVisible", "guessedtype": "function"}, "_getDefaultStyles": {"protected": "", "return": {"type": "", "description": "Object"}, "description": "Returns the default hash for the `styles` attribute.", "guessedname": "_getDefaultStyles", "guessedtype": "function"}}, "uses": ["Fills", "Lines", "Plots"], "superclass": "CartesianSeries", "file": "charts.js", "guessedtype": "property", "extends": "CartesianSeries", "shortname": "ComboSeries", "configs": {"styles": {"type": "Object", "description": "Style properties for the series. Contains a key indexed hash of the following:\n<dl>\n<dt>marker</dt><dd>Style properties for the markers in the series. Specific style attributes are listed\n<a href=\"#attr_marker\">here</a>.</dd>\n<dt>line</dt><dd>Style properties for the lines in the series. Specific\nstyle attributes are listed <a href=\"#attr_line\">here</a>.</dd>\n<dt>area</dt><dd>Style properties for the area fills in the series. Specific style attributes are listed\n<a href=\"#attr_area\">here</a>.</dd>\n</dl>"}, "showAreaFill": {"default": "false", "type": "Boolean", "description": "Indicates whether a fill is displayed.", "guessedname": "showAreaFill", "guessedtype": "property"}, "showLines": {"default": "true", "type": "Boolean", "description": "Indicates whether lines are displayed.", "guessedname": "showLines", "guessedtype": "property"}, "area": {"type": "Object", "description": "Reference to the styles of the area fills. These styles can also be accessed through the `styles` attribute.\nBelow are the default values:\n<dl>\n<dt>color</dt><dd>The color of the fill. The default value is determined by the order of the series on the graph. The color will be \nretrieved from the following array:\n`[\"#66007f\", \"#a86f41\", \"#295454\", \"#996ab2\", \"#e8cdb7\", \"#90bdbd\",\"#000000\",\"#c3b8ca\", \"#968373\", \"#678585\"]`\n</dd>\n<dt>alpha</dt><dd>Number between 0 and 1 that indicates the opacity of the fill. The default value is 1</dd>\n</dl>", "guessedname": "area", "guessedtype": "property"}, "showMarkers": {"default": "true", "type": "Boolean", "description": "Indicates whether markers are displayed.", "guessedname": "showMarkers", "guessedtype": "property"}, "marker": {"type": "Object", "description": "Reference to the styles of the markers. These styles can also\nbe accessed through the `styles` attribute. Below are default\nvalues:\n<dl>\n<dt>fill</dt><dd>A hash containing the following values:\n<dl>\n<dt>color</dt><dd>Color of the fill. The default value is determined by the order of the series on the graph. The color\nwill be retrieved from the below array:<br/>\n`[\"#6084d0\", \"#eeb647\", \"#6c6b5f\", \"#d6484f\", \"#ce9ed1\", \"#ff9f3b\", \"#93b7ff\", \"#e0ddd0\", \"#94ecba\", \"#309687\"]`\n</dd>\n<dt>alpha</dt><dd>Number from 0 to 1 indicating the opacity of the marker fill. The default value is 1.</dd>\n</dl>\n</dd>\n<dt>border</dt><dd>A hash containing the following values:\n<dl>\n<dt>color</dt><dd>Color of the border. The default value is determined by the order of the series on the graph. The color\nwill be retrieved from the below array:<br/>\n`[\"#205096\", \"#b38206\", \"#000000\", \"#94001e\", \"#9d6fa0\", \"#e55b00\", \"#5e85c9\", \"#adab9e\", \"#6ac291\", \"#006457\"]`\n<dt>alpha</dt><dd>Number from 0 to 1 indicating the opacity of the marker border. The default value is 1.</dd>\n<dt>weight</dt><dd>Number indicating the width of the border. The default value is 1.</dd>\n</dl>\n</dd>\n<dt>width</dt><dd>indicates the width of the marker. The default value is 10.</dd>\n<dt>height</dt><dd>indicates the height of the marker The default value is 10.</dd>\n<dt>over</dt><dd>hash containing styles for markers when highlighted by a `mouseover` event. The default \nvalues for each style is null. When an over style is not set, the non-over value will be used. For example,\nthe default value for `marker.over.fill.color` is equivalent to `marker.fill.color`.</dd>\n</dl>", "guessedname": "marker", "guessedtype": "property"}, "line": {"type": "Object", "description": "Reference to the styles of the lines. These styles can also be accessed through the `styles` attribute.\nBelow are the default values:\n<dl>\n<dt>color</dt><dd>The color of the line. The default value is determined by the order of the series on the graph. The color will be\nretrieved from the following array: \n`[\"#426ab3\", \"#d09b2c\", \"#000000\", \"#b82837\", \"#b384b5\", \"#ff7200\", \"#779de3\", \"#cbc8ba\", \"#7ed7a6\", \"#007a6c\"]`\n<dt>weight</dt><dd>Number that indicates the width of the line. The default value is 6.</dd>\n<dt>alpha</dt><dd>Number between 0 and 1 that indicates the opacity of the line. The default value is 1.</dd>\n<dt>lineType</dt><dd>Indicates whether the line is solid or dashed. The default value is solid.</dd> \n<dt>dashLength</dt><dd>When the `lineType` is dashed, indicates the length of the dash. The default value is 10.</dd>\n<dt>gapSpace</dt><dd>When the `lineType` is dashed, indicates the distance between dashes. The default value is 10.</dd>\n<dt>connectDiscontinuousPoints</dt><dd>Indicates whether or not to connect lines when there is a missing or null value between points. The default value is true.</dd> \n<dt>discontinuousType</dt><dd>Indicates whether the line between discontinuous points is solid or dashed. The default value is solid.</dd>\n<dt>discontinuousDashLength</dt><dd>When the `discontinuousType` is dashed, indicates the length of the dash. The default value is 10.</dd>\n<dt>discontinuousGapSpace</dt><dd>When the `discontinuousType` is dashed, indicates the distance between dashes. The default value is 10.</dd>\n</dl>", "guessedname": "line", "guessedtype": "property"}, "type": {"default": "combo", "type": "String", "description": "Read-only attribute indicating the type of series.", "guessedname": "type", "guessedtype": "property"}}, "description": "The ComboSeries class renders a combination of lines, plots and area fills in a single series. Each\nseries type has a corresponding boolean attribute indicating if it is rendered. By default, lines and plots \nare rendered and area is not."}, "Node": {"name": "Node", "description": "The Node class provides a wrapper for manipulating DOM Nodes.\nNode properties can be accessed via the set/get methods.\nUse `Y.one()` to retrieve Node instances.\n<strong>NOTE:</strong> Node properties are accessed using\nthe <code>set</code> and <code>get</code> methods.", "constructors": [{"params": [{"type": "DOMNode", "name": "node", "description": " the DOM node to be mapped to the Node instance."}], "description": "The Node class provides a wrapper for manipulating DOM Nodes.\nNode properties can be accessed via the set/get methods.\nUse `Y.one()` to retrieve Node instances.\n<strong>NOTE:</strong> Node properties are accessed using\nthe <code>set</code> and <code>get</code> methods."}], "namespace": "", "module": "node", "configs": {"viewportRegion": {"type": "Node", "description": "Returns a region object for the node's viewport", "guessedname": "viewportRegion", "guessedtype": "property"}, "winWidth": {"type": "{Int}", "description": "Returns the inner width of the viewport (exludes scrollbar)."}, "region": {"type": "Node", "description": "Returns a region object for the node", "guessedname": "region", "guessedtype": "property"}, "docScrollY": {"type": "{Int}", "description": "Pixel distance the page has been scrolled vertically"}, "docScrollX": {"type": "{Int}", "description": "Pixel distance the page has been scrolled horizontally"}, "docHeight": {"type": "{Int}", "description": "Document height"}, "winHeight": {"type": "{Int}", "description": "Returns the inner height of the viewport (exludes scrollbar)."}}, "uses": ["EventTarget"], "file": "node-core.js", "shortname": "Node", "properties": {"_node": {"private": "", "description": "The underlying DOM node bound to the Y.Node instance", "guessedname": "_node", "guessedtype": "property"}, "_instances": {"guessedname": "_instances", "static": "", "description": "A list of Node instances that have been created", "private": "", "guessedtype": "property"}, "NAME": {"static": "", "description": "The name of the component", "guessedname": "NAME", "guessedtype": "property"}, "DOM_EVENTS": {"static": "", "description": "List of events that route to DOM events", "guessedname": "DOM_EVENTS", "guessedtype": "property"}}, "methods": {"_getText": {"description": "Extract text content from the passed nodes.", "param": "{Native NodeList} childNodes", "params": [{"type": "Native NodeList", "name": "childNodes", "description": ""}], "private": "", "guessedname": "_getText", "guessedtype": "function"}, "all": {"return": {"type": "NodeList", "description": "A NodeList instance for the matching HTMLCollection/Array."}, "description": "Retrieves a NodeList based on the given CSS selector.", "param": "{string} selector The CSS selector to test against.", "params": [{"type": "string", "name": "selector", "description": " The CSS selector to test against."}], "guessedname": "all", "guessedtype": "function"}, "simulate": {"return": {"type": "void", "description": ""}, "description": "Simulates an event on the node.", "param": "{String} type The type of event to simulate (i.e., \"click\").", "params": [{"type": "String", "name": "type", "description": " The type of event to simulate (i.e., \"click\")."}, {"type": "Object", "name": "options", "description": " (Optional) Extra options to copy onto the event object."}], "guessedname": "simulate", "guessedtype": "function"}, "show": {"description": "Makes the node visible.\nIf the \"transition\" module is loaded, show optionally\nanimates the showing of the node using either the default\ntransition effect ('fadeIn'), or the given named effect.", "chainable": "", "param": "{String} name A named Transition effect to use as the show effect.", "params": [{"type": "String", "name": "name", "description": " A named Transition effect to use as the show effect."}, {"type": "Object", "name": "config", "description": " Options to use with the transition."}, {"type": "Function", "name": "callback", "description": " An optional function to run after the transition completes."}], "guessedname": "show", "guessedtype": "function"}, "text": {"param": "{String} text A string of text to set as the content of the node instance.", "params": [{"type": "String", "name": "text", "description": " A string of text to set as the content of the node instance."}], "description": "<p>Get or Set the combined text contents of the node instance,\nincluding it's descendants. If the <code>text</code>\nis passed it's set the content of the element, otherwise it works as a\ngetter for the current content.</p>\nExample:\n<pre><code>var node = A.one('#nodeId');\nnode.text('Setting new text content');\n// Alert the value of the current content\nalert( node.text() );\n</code></pre>", "guessedname": "text", "guessedtype": "function"}, "radioClass": {"description": "Add one or more CSS classes to an element and remove the class(es)\nfrom the siblings of the element.", "chainable": "", "param": "{String} cssClass", "params": [{"type": "String", "name": "cssClass", "description": ""}], "guessedname": "radioClass", "guessedtype": "function"}, "focus": {"chainable": "", "description": "Passes through to DOM method."}, "setStyle": {"chainable": "", "params": [{"type": "String", "name": "attr", "description": " The style attribute to set."}, {"type": "String|Number", "name": "val", "description": " The value."}], "description": "Sets a style property of the node. Use CSS case (e.g. 'background-color')\nfor multi-word properties.", "param": "{String} attr The style attribute to set."}, "toggle": {"description": "<p>Displays or hide the node instance.</p>\n<p><string>NOTE:</string> This method assume that your node were hidden\nbecause of the 'aui-helper-hidden' css class were being used. This won't\nmanipulate the inline <code>style.display</code> property.</p>", "chainable": "", "param": "{Boolean} on Whether to force the toggle. Optional.", "params": [{"type": "Boolean", "name": "on", "description": " Whether to force the toggle. Optional."}, {"type": "Function", "name": "callback", "description": " A function to run after the visibility change. Optional."}], "guessedname": "toggle", "guessedtype": "function"}, "query": {"return": {"type": "Node", "description": "A Node instance for the matching HTMLElement."}, "description": "Retrieves a Node instance of nodes based on the given CSS selector.", "deprecated": "Use one()", "param": "{string} selector The CSS selector to test against.", "params": [{"type": "string", "name": "selector", "description": " The CSS selector to test against."}], "guessedname": "query", "guessedtype": "function"}, "prepend": {"description": "Inserts the content as the firstChild of the node.", "chainable": "", "param": "{String | Y.Node | HTMLElement} content The content to insert", "params": [{"type": "String | Y.Node | HTMLElement", "name": "content", "description": " The content to insert"}], "guessedname": "prepend", "guessedtype": "function"}, "previous": {"return": {"type": "Node", "description": "Node instance or null if not found"}, "description": "Returns the previous matching sibling.\nReturns the nearest element node sibling if no method provided.", "param": "{String | Function} fn A selector or boolean method for testing elements.\nIf a function is used, it receives the current node being tested as the only argument.", "params": [{"type": "String | Function", "name": "fn", "description": " A selector or boolean method for testing elements.\nIf a function is used, it receives the current node being tested as the only argument."}], "guessedname": "previous", "guessedtype": "function"}, "queryAll": {"return": {"type": "NodeList", "description": "A NodeList instance for the matching HTMLCollection/Array."}, "description": "Retrieves a nodeList based on the given CSS selector.", "deprecated": "Use all()", "param": "{string} selector The CSS selector to test against.", "params": [{"type": "string", "name": "selector", "description": " The CSS selector to test against."}], "guessedname": "queryAll", "guessedtype": "function"}, "swallowEvent": {"description": "<p>Stops the specified event(s) from bubbling and optionally prevents the\ndefault action.</p>\nExample:\n<pre><code>var anchor = A.one('a#anchorId');\nanchor.swallowEvent('click');\n</code></pre>", "chainable": "", "param": "{String/Array} eventName an event or array of events to stop from bubbling", "params": [{"type": "String/Array", "name": "eventName", "description": " an event or array of events to stop from bubbling"}, {"type": "Boolean", "name": "preventDefault", "description": " (optional) true to prevent the default action too"}], "guessedname": "swallowEvent", "guessedtype": "function"}, "_place": {"description": "Place a node or html string at a specific location", "param": "{Node|String} newNode", "params": [{"type": "Node|String", "name": "newNode", "description": ""}, {"type": "Node", "name": "refNode", "description": ""}], "private": "", "guessedname": "_place", "guessedtype": "function"}, "replaceClass": {"chainable": "", "params": [{"type": "String", "name": "oldClassName", "description": " the class name to be replaced"}, {"type": "String", "name": "newClassName", "description": " the class name that will be replacing the old class name"}], "description": "Replace a class with another class for each node.\nIf no oldClassName is present, the newClassName is simply added.", "param": "{String} oldClassName the class name to be replaced"}, "outerWidth": {"return": {"type": "number", "description": ""}, "description": "Returns the outer width of the box including the border,\nif true is passed as the first argument, the margin is included.\nExample:\n<pre><code>var node = A.one('#nodeId');\nnode.outerWidth();\nnode.outerWidth(true); // includes margin\n</code></pre>"}, "innerHeight": {"return": {"type": "number", "description": ""}, "description": "Returns the size of the box from inside of the border,\nwhich is offsetHeight plus the padding on the top and bottom.\nExample:\n<pre><code>var node = A.one('#nodeId');\nnode.innerHeight();\n</code></pre>"}, "html": {"param": "{string} value A string of html to set as the content of the node instance.", "params": [{"type": "string", "name": "value", "description": " A string of html to set as the content of the node instance."}], "description": "<p>Get or Set the HTML contents of the node. If the <code>value</code>\nis passed it's set the content of the element, otherwise it works as a\ngetter for the current content.</p>\nExample:\n<pre><code>var node = A.one('#nodeId');\nnode.html('Setting new HTML');\n// Alert the value of the current content\nalert( node.html() );\n</code></pre>", "guessedname": "html", "guessedtype": "function"}, "hasChildNodes": {"return": {"type": "Boolean", "description": "Whether or not the node has any childNodes"}, "description": "Passes through to DOM method."}, "swap": {"description": "Swap DOM locations with the given node.\nThis does not change which DOM node each Node instance refers to.", "chainable": "", "param": "{Node} otherNode The node to swap with", "params": [{"type": "Node", "name": "otherNode", "description": " The node to swap with"}], "guessedname": "swap", "guessedtype": "property"}, "siblings": {"return": {"type": "NodeList", "description": "NodeList instance bound to found siblings"}, "description": "Returns all matching siblings.\nReturns all siblings if no method provided.", "param": "{String | Function} fn A selector or boolean method for testing elements.\nIf a function is used, it receives the current node being tested as the only argument.", "params": [{"type": "String | Function", "name": "fn", "description": " A selector or boolean method for testing elements.\nIf a function is used, it receives the current node being tested as the only argument."}], "guessedname": "siblings", "guessedtype": "function"}, "inDoc": {"return": {"type": "Boolean", "description": "Whether or not this node is appended to the document."}, "description": "Determines whether the node is appended to the document.", "param": "{Node|HTMLElement} doc optional An optional document to check against.\nDefaults to current document.", "params": [{"type": "Node|HTMLElement", "name": "doc", "description": " optional An optional document to check against.\nDefaults to current document."}], "guessedname": "inDoc", "guessedtype": "function"}, "swapXY": {"chainable": "", "params": [{"type": "Node | HTMLElement", "name": "otherNode", "description": " The node to swap with."}], "description": "Swaps the XY position of this node with another node.", "param": "{Node | HTMLElement} otherNode The node to swap with."}, "addClass": {"chainable": "", "params": [{"type": "String", "name": "className", "description": " the class name to add to the node's class attribute"}], "description": "Adds a class name to each node.", "param": "{String} className the class name to add to the node's class attribute"}, "hover": {"return": {"type": "Node", "description": "The current Node instance"}, "description": "Create a hover interaction.", "param": "{string} overFn", "params": [{"type": "string", "name": "overFn", "description": ""}, {"type": "string", "name": "outFn", "description": ""}], "guessedname": "hover", "guessedtype": "function"}, "invoke": {"return": {"type": "", "description": "Whatever the underly method returns.\nDOM Nodes and Collections return values\nare converted to Node/NodeList instances."}, "description": "Invokes a method on the Node instance", "param": "{String} method The name of the method to invoke", "params": [{"type": "String", "name": "method", "description": " The name of the method to invoke"}, {"type": "Any", "name": "a,", "description": " b, c, etc. Arguments to invoke the method with."}], "guessedname": "invoke", "guessedtype": "function"}, "get": {"return": {"type": "any", "description": "The current value of the attribute"}, "description": "Returns an attribute value on the Node instance.\nUnless pre-configured (via `Node.ATTRS`), get hands\noff to the underlying DOM node.  Only valid\nattributes/properties for the node will be queried.", "deprecated": "Use Y.one", "param": "{String} attr The attribute", "params": [{"type": "String", "name": "attr", "description": " The attribute"}], "guessedname": "get", "guessedtype": "function", "static": ""}, "removeClass": {"chainable": "", "params": [{"type": "String", "name": "className", "description": " the class name to remove from the node's class attribute"}], "description": "Removes a class name from each node.", "param": "{String} className the class name to remove from the node's class attribute"}, "addMethod": {"return": {"type": "any", "description": "Depends on what is returned from the DOM node."}, "description": "Adds methods to the Y.Node prototype, routing through scrubVal.", "param": "{String} name The name of the method to add", "static": "", "guessedname": "addMethod", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the method to add"}, {"type": "Function", "name": "fn", "description": " The function that becomes the method"}, {"type": "Object", "name": "context", "description": " An optional context to call the method with\n(defaults to the Node instance)"}]}, "replace": {"description": "Replace the node with the other node. This is a DOM update only\nand does not change the node bound to the Node instance.\nShortcut for myNode.get('parentNode').replaceChild(newNode, myNode);", "chainable": "", "param": "{Y.Node || HTMLNode} newNode Node to be inserted", "params": [{"type": "Y.Node || HTMLNode", "name": "newNode", "description": " Node to be inserted"}], "guessedname": "replace", "guessedtype": "function"}, "placeBefore": {"description": "<p>Inserts a <code>newNode</code> before the node instance (i.e., as the previous\nsibling). If the reference node has no parent, then does nothing.</p>\nExample:\n<pre><code>var descriptionNode = A.one('#descriptionNode');\nvar titleNode = A.one('#titleNode');\n// the title is usually shown before the description\ndescriptionNode.placeBefore(titleNode);\n</code></pre>", "chainable": "", "param": "{Node} newNode Node to insert.", "params": [{"type": "Node", "name": "newNode", "description": " Node to insert."}], "guessedname": "placeBefore", "guessedtype": "function"}, "insert": {"description": "Inserts the content before the reference node.", "chainable": "", "param": "{String | Y.Node | HTMLElement | Y.NodeList | HTMLCollection} content The content to insert", "params": [{"type": "String | Y.Node | HTMLElement | Y.NodeList | HTMLCollection", "name": "content", "description": " The content to insert"}, {"type": "Int | Y.Node | HTMLElement | String", "name": "where", "description": " The position to insert at.\nPossible \"where\" arguments\n<dl>\n<dt>Y.Node</dt>\n<dd>The Node to insert before</dd>\n<dt>HTMLElement</dt>\n<dd>The element to insert before</dd>\n<dt>Int</dt>\n<dd>The index of the child element to insert before</dd>\n<dt>\"replace\"</dt>\n<dd>Replaces the existing HTML</dd>\n<dt>\"before\"</dt>\n<dd>Inserts before the existing HTML</dd>\n<dt>\"before\"</dt>\n<dd>Inserts content before the node</dd>\n<dt>\"after\"</dt>\n<dd>Inserts content after the node</dd>\n</dl>"}], "guessedname": "insert", "guessedtype": "function"}, "getData": {"return": {"type": "any | Object", "description": "Whatever is stored at the given field,\nor an object hash of all fields."}, "description": "Retrieves arbitrary data stored on a Node instance.\nThis is not stored with the DOM node.", "param": "{string} name Optional name of the data field to retrieve.\nIf no name is given, all data is returned.", "params": [{"type": "string", "name": "name", "description": " Optional name of the data field to retrieve.\nIf no name is given, all data is returned."}], "guessedname": "getData", "guessedtype": "function"}, "scrollIntoView": {"chainable": "", "description": "Passes through to DOM method."}, "getPadding": {"return": {"type": "number", "description": ""}, "description": "Return the combined width of the border for the specified sides.", "param": "{string} sides Can be t, r, b, l or any combination of\nthose to represent the top, right, bottom, or left sides.", "params": [{"type": "string", "name": "sides", "description": " Can be t, r, b, l or any combination of\nthose to represent the top, right, bottom, or left sides."}], "guessedname": "getPadding", "guessedtype": "function"}, "remove": {"description": "Removes the node from its parent.\nShortcut for myNode.get('parentNode').removeChild(myNode);", "chainable": "", "param": "{Boolean} destroy whether or not to call destroy() on the node\nafter removal.", "params": [{"type": "Boolean", "name": "destroy", "description": " whether or not to call destroy() on the node\nafter removal."}], "guessedname": "remove", "guessedtype": "function"}, "createCaption": {"chainable": "", "description": "Passes through to DOM method.\nOnly valid on TABLE elements"}, "removeChild": {"return": {"type": "Node", "description": "The removed node"}, "params": [{"type": "HTMLElement | Node", "name": "node", "description": " Node to be removed"}], "description": "Passes through to DOM method.", "param": "{HTMLElement | Node} node Node to be removed"}, "delegate": {"return": {"type": "EventHandle", "description": "the detach handle"}, "description": "<p>Sets up a delegation listener for an event occurring inside the Node.\nThe delegated event will be verified against a supplied selector or\nfiltering function to test if the event references at least one node that\nshould trigger the subscription callback.</p>\n<p>Selector string filters will trigger the callback if the event originated\nfrom a node that matches it or is contained in a node that matches it.\nFunction filters are called for each Node up the parent axis to the\nsubscribing container node, and receive at each level the Node and the event\nobject.  The function should return true (or a truthy value) if that Node\nshould trigger the subscription callback.  Note, it is possible for filters\nto match multiple Nodes for a single event.  In this case, the delegate\ncallback will be executed for each matching Node.</p>\n<p>For each matching Node, the callback will be executed with its 'this'\nobject set to the Node matched by the filter (unless a specific context was\nprovided during subscription), and the provided event's\n<code>currentTarget</code> will also be set to the matching Node.  The\ncontaining Node from which the subscription was originally made can be\nreferenced as <code>e.container</code>.", "param": "type {String} the event type to delegate", "params": [{"type": "String", "name": "type", "description": "  the event type to delegate"}, {"type": "Function", "name": "fn", "description": "  the callback function to execute.  This function\nwill be provided the event object for the delegated event."}, {"type": "String|Function", "name": "spec", "description": "  a selector that must match the target of the\nevent or a function to test target and its parents for a match"}, {"type": "Object", "name": "context", "description": "  optional argument that specifies what 'this' refers to."}, {"type": "any", "name": "args*", "description": "  0..n additional arguments to pass on to the callback function.\nThese arguments will be added after the event object."}], "guessedname": "delegate", "guessedtype": "function"}, "each": {"description": "Applies the given function to each Node in the NodeList.", "deprecated": "Use NodeList", "chainable": "", "param": "{Function} fn The function to apply", "params": [{"type": "Function", "name": "fn", "description": " The function to apply"}, {"type": "Object", "name": "context", "description": " optional An optional context to apply the function with\nDefault context is the NodeList instance"}], "guessedname": "each", "guessedtype": "function"}, "scrubVal": {"return": {"type": "Y.Node | Y.NodeList | any", "description": "Depends on what is returned from the DOM node."}, "description": "Checks Node return values and wraps DOM Nodes as Y.Node instances\nand DOM Collections / Arrays as Y.NodeList instances.\nOther return values just pass thru.  If undefined is returned (e.g. no return)\nthen the Node instance is returned for chainability.", "param": "{any} node The Node instance or an HTMLNode", "static": "", "guessedname": "scrubVal", "guessedtype": "function", "params": [{"type": "any", "name": "node", "description": " The Node instance or an HTMLNode"}]}, "set": {"description": "Sets an attribute on the Node instance.\nUnless pre-configured (via Node.ATTRS), set hands\noff to the underlying DOM node.  Only valid\nattributes/properties for the node will be set.\nTo set custom attributes use setAttribute.", "chainable": "", "param": "{String} attr The attribute to be set.", "params": [{"type": "String", "name": "attr", "description": " The attribute to be set."}, {"type": "any", "name": "val", "description": " The value to set the attribute to."}], "guessedname": "set", "guessedtype": "function"}, "resetId": {"description": "Generate an unique identifier and reset the id attribute of the node\ninstance using the new value. Invokes the\n<a href=\"Node.html#method_guid\">guid</a>.", "chainable": "", "param": "{String} prefix Optional prefix for the guid.", "params": [{"type": "String", "name": "prefix", "description": " Optional prefix for the guid."}], "guessedname": "resetId", "guessedtype": "function"}, "setContent": {"description": "Replaces the node's current content with the content.", "chainable": "", "param": "{String | Y.Node | HTMLElement | Y.NodeList | HTMLCollection} content The content to insert", "params": [{"type": "String | Y.Node | HTMLElement | Y.NodeList | HTMLCollection", "name": "content", "description": " The content to insert"}], "guessedname": "setContent", "guessedtype": "function"}, "append": {"description": "Inserts the content as the lastChild of the node.", "chainable": "", "param": "{String | Y.Node | HTMLElement} content The content to insert", "params": [{"type": "String | Y.Node | HTMLElement", "name": "content", "description": " The content to insert"}], "guessedname": "append", "guessedtype": "function"}, "outerHeight": {"return": {"type": "number", "description": ""}, "description": "Returns the outer height of the box including the border,\nif true is passed as the first argument, the margin is included.\nExample:\n<pre><code>var node = A.one('#nodeId');\nnode.outerHeight();\nnode.outerHeight(true); // includes margin\n</code></pre>"}, "hide": {"description": "Hides the node.\nIf the \"transition\" module is loaded, hide optionally\nanimates the hiding of the node using either the default\ntransition effect ('fadeOut'), or the given named effect.", "chainable": "", "param": "{String} name A named Transition effect to use as the show effect.", "params": [{"type": "String", "name": "name", "description": " A named Transition effect to use as the show effect."}, {"type": "Object", "name": "config", "description": " Options to use with the transition."}, {"type": "Function", "name": "callback", "description": " An optional function to run after the transition completes."}], "guessedname": "hide", "guessedtype": "function"}, "clearData": {"description": "Clears stored data.", "chainable": "", "param": "{string} name The name of the field to clear. If no name\nis given, all data is cleared.", "params": [{"type": "string", "name": "name", "description": " The name of the field to clear. If no name\nis given, all data is cleared."}], "guessedname": "clearData", "guessedtype": "function"}, "item": {"return": {"type": "Node", "description": "The Node instance at the given index."}, "description": "Retrieves the Node instance at the given index.", "deprecated": "Use NodeList", "param": "{Number} index The index of the target Node.", "params": [{"type": "Number", "name": "index", "description": " The index of the target Node."}], "guessedname": "item", "guessedtype": "function"}, "getComputedStyle": {"return": {"type": "String", "description": "The computed value of the style property for the element."}, "params": [{"type": "String", "name": "attr", "description": " The style attribute to retrieve."}], "description": "Returns the computed value for the given style property.\nUse CSS case (e.g. 'background-color') for multi-word properties.", "param": "{String} attr The style attribute to retrieve."}, "innerWidth": {"return": {"type": "number", "description": ""}, "description": "Returns the size of the box from inside of the border,\nwhich is the offsetWidth plus the padding on the left and right.\nExample:\n<pre><code>var node = A.one('#nodeId');\nnode.innerWidth();\n</code></pre>"}, "toString": {"return": {"type": "String", "description": "A string representation of the Node instance"}, "description": "The method called when outputting Node instances as strings", "guessedname": "toString", "guessedtype": "function"}, "intersect": {"return": {"type": "Object", "description": "An object representing the intersection of the regions."}, "description": "Compares the intersection of the node with another node or region", "param": "{Node|Object} node2 The node or region to compare with.", "params": [{"type": "Node|Object", "name": "node2", "description": " The node or region to compare with."}, {"type": "Object", "name": "altRegion", "description": " An alternate region to use (rather than this node's)."}], "guessedname": "intersect", "guessedtype": "function"}, "blur": {"chainable": "", "description": "Passes through to DOM method."}, "getContent": {"return": {"type": "String", "description": "The current content"}, "description": "Returns the node's current content (e.g. innerHTML)", "guessedname": "getContent", "guessedtype": "function"}, "selectText": {"param": "{Number} start The index to start the selection range from", "params": [{"type": "Number", "name": "start", "description": " The index to start the selection range from"}, {"type": "Number", "name": "end", "description": " The index to end the selection range at"}], "description": "Selects a substring of text inside of the input element.", "guessedname": "selectText", "guessedtype": "function"}, "_hoverOverHandler": {"description": "The event handler for the \"over\" function that is fired for events attached via the hover method.", "param": "{EventFacade} event", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "private": "", "guessedname": "_hoverOverHandler", "guessedtype": "function"}, "_getBoxStyleAsNumber": {"return": {"type": "number", "description": ""}, "description": "Return the combined size of the box style for the specified sides.", "param": "{string} sides Can be t, r, b, l or any combination of\nthose to represent the top, right, bottom, or left sides.", "params": [{"type": "string", "name": "sides", "description": " Can be t, r, b, l or any combination of\nthose to represent the top, right, bottom, or left sides."}, {"type": "string", "name": "map", "description": " An object mapping mapping the \"sides\" param to the a CSS value to retrieve"}], "guessedname": "_getBoxStyleAsNumber", "guessedtype": "function"}, "_get": {"return": {"type": "any", "description": "The current value of the attribute"}, "description": "Helper method for get.", "private": "", "params": [{"type": "String", "name": "attr", "description": " The attribute"}], "param": "{String} attr The attribute", "guessedname": "_get", "guessedtype": "function"}, "importMethod": {"description": "Imports utility methods to be added as Y.Node methods.", "param": "{Object} host The object that contains the method to import.", "static": "", "guessedname": "importMethod", "guessedtype": "function", "params": [{"type": "Object", "name": "host", "description": " The object that contains the method to import."}, {"type": "String", "name": "name", "description": " The name of the method to import"}, {"type": "String", "name": "altName", "description": " An optional name to use in place of the host name"}, {"type": "Object", "name": "context", "description": " An optional context to call the method with"}]}, "_ioComplete": {"description": "The default IO complete handler.", "param": "{String} code The response code.", "protected": "", "params": [{"type": "String", "name": "code", "description": " The response code."}, {"type": "Object", "name": "response", "description": " The response object."}, {"type": "Array", "name": "args", "description": " An array containing the callback and selector"}], "guessedname": "_ioComplete", "guessedtype": "function"}, "selectable": {"chainable": "", "description": "Enables text selection for this element (normalized across browsers).", "guessedname": "selectable", "guessedtype": "function"}, "plug": {"description": "Registers plugins to be instantiated at the class level (plugins\nwhich should be plugged into every instance of Node by default).", "param": "{Function | Array} plugin Either the plugin class, an array of plugin classes or an array of objects (with fn and cfg properties defined)", "static": "", "guessedname": "plug", "guessedtype": "function", "params": [{"type": "Function | Array", "name": "plugin", "description": " Either the plugin class, an array of plugin classes or an array of objects (with fn and cfg properties defined)"}, {"type": "Object", "name": "config", "description": " (Optional) If plugin is the plugin class, the configuration for the plugin"}]}, "transition": {"description": "Animate one or more css properties to a given value. Requires the \"transition\" module.\n<pre>example usage:\nY.one('#demo').transition({\nduration: 1, // in seconds, default is 0.5\neasing: 'ease-out', // default is 'ease'\ndelay: '1', // delay start for 1 second, default is 0\nheight: '10px',\nwidth: '10px',\nopacity: { // per property\nvalue: 0,\nduration: 2,\ndelay: 2,\neasing: 'ease-in'\n}\n});\n</pre>", "chainable": "", "param": "{Object} config An object containing one or more style properties, a duration and an easing.", "params": [{"type": "Object", "name": "config", "description": " An object containing one or more style properties, a duration and an easing."}, {"type": "Function", "name": "callback", "description": " A function to run after the transition has completed."}], "guessedname": "transition", "guessedtype": "function"}, "getCenterXY": {"return": {"type": "Array", "description": "The XY position of the node"}, "description": "Gets the current center position of the node in page coordinates.", "guessedname": "getCenterXY", "guessedtype": "function"}, "hasAttribute": {"return": {"type": "Boolean", "description": "Whether or not the attribute is present"}, "params": [{"type": "String", "name": "attribute", "description": " The attribute to test for"}], "description": "Passes through to DOM method.", "param": "{String} attribute The attribute to test for"}, "load": {"description": "Loads content from the given url and replaces the Node's\nexisting content with it.", "chainable": "", "param": "{String} url The URL to load via XMLHttpRequest.", "params": [{"type": "String", "name": "url", "description": " The URL to load via XMLHttpRequest."}, {"type": "String", "name": "selector", "description": " An optional selector representing a subset of an HTML document to load."}, {"type": "Function", "name": "callback", "description": " An optional function to run after the content has been loaded.\nof the content."}], "guessedname": "load", "guessedtype": "function"}, "getAttrs": {"return": {"type": "Object", "description": "An object with attribute name/value pairs."}, "description": "Returns an object containing the values for the requested attributes.", "param": "{Array} attrs an array of attributes to get values", "params": [{"type": "Array", "name": "attrs", "description": " an array of attributes to get values"}], "guessedname": "getAttrs", "guessedtype": "function"}, "removeAttribute": {"chainable": "", "params": [{"type": "String", "name": "attribute", "description": " The attribute to be removed"}], "description": "Passes through to DOM method.", "param": "{String} attribute The attribute to be removed"}, "getAttribute": {"return": {"type": "string", "description": "The attribute value"}, "params": [{"type": "string", "name": "name", "description": " The attribute name"}], "description": "Allows getting attributes on DOM nodes, normalizing in some cases.\nThis passes through to the DOM node, allowing for custom attributes.", "param": "{string} name The attribute name"}, "one": {"return": {"type": "Y.Node | null", "description": "a Node instance or null if no match found."}, "description": "Returns a single Node instance bound to the node or the\nfirst element matching the given selector. Returns null if no match found.\n<strong>Note:</strong> For chaining purposes you may want to\nuse <code>Y.all</code>, which returns a NodeList when no match is found.", "param": "{string} selector The CSS selector to test against.", "static": "", "guessedname": "one", "guessedtype": "function", "params": [{"type": "String | HTMLElement", "name": "node", "description": " a node or Selector"}]}, "outerHTML": {"return": {"type": "string", "description": "The outerHTML of the given element."}, "description": "Gets the outerHTML of a node, which islike innerHTML, except that it\nactually contains the HTML of the node itself.", "guessedname": "outerHTML", "guessedtype": "function"}, "inRegion": {"return": {"type": "Object", "description": "An object representing the intersection of the regions."}, "description": "Determines whether or not the node is within the giving region.", "param": "{Node|Object} node2 The node or region to compare with.", "params": [{"type": "Node|Object", "name": "node2", "description": " The node or region to compare with."}, {"type": "Boolean", "name": "all", "description": " Whether or not all of the node must be in the region."}, {"type": "Object", "name": "altRegion", "description": " An alternate region to use (rather than this node's)."}], "guessedname": "inRegion", "guessedtype": "function"}, "wrap": {"chainable": "", "params": [{"type": "String", "name": "html", "description": " The markup to wrap around the node."}], "description": "Wraps the given HTML around the node.", "param": "{String} html The markup to wrap around the node."}, "guid": {"return": {"type": "String", "description": "The current id of the node"}, "description": "Set the id of the Node instance if the object does not have one. The\ngenerated id is based on a guid created by the\n<a href=\"YUI.html#method_stamp\">stamp</a> method.", "param": "{string} prefix optional guid prefix", "params": [{"type": "string", "name": "prefix", "description": " optional guid prefix"}], "guessedname": "guid", "guessedtype": "function"}, "select": {"chainable": "", "description": "Passes through to DOM method."}, "size": {"deprecated": "Use NodeList", "return": {"type": "Int", "description": "The number of items in the Node."}, "description": "Returns the current number of items in the Node.", "guessedname": "size", "guessedtype": "function"}, "val": {"param": "{string} value Value to be set. Optional.", "params": [{"type": "string", "name": "value", "description": " Value to be set. Optional."}], "description": "<p>Get or Set the value attribute of the node instance. If the\n<code>value</code> is passed it's set the value of the element,\notherwise it works as a getter for the current value.</p>\nExample:\n<pre><code>var input = A.one('#inputId');\ninput.val('Setting new input value');\n// Alert the value of the input\nalert( input.val() );\n</code></pre>", "guessedname": "val", "guessedtype": "function"}, "create": {"return": {"type": "Node", "description": "A Node instance bound to a DOM node or fragment"}, "description": "Returns a new dom node using the provided markup string.", "param": "{String} html The markup used to create the element", "static": "", "guessedname": "create", "guessedtype": "function", "params": [{"type": "String", "name": "html", "description": " The markup used to create the element"}, {"type": "HTMLDocument", "name": "doc", "description": " An optional document context"}]}, "contains": {"return": {"type": "Boolean", "description": "Whether or not this node is the needle its ancestor"}, "params": [{"type": "Node | HTMLElement", "name": "needle", "description": " The possible node or descendent"}], "description": "Determines whether the node is an ancestor of another HTML element in the DOM hierarchy.", "param": "{Node | HTMLElement} needle The possible node or descendent"}, "generateID": {"return": {"type": "String", "description": "The existing or generated ID"}, "description": "Applies a unique ID to the node if none exists"}, "submit": {"chainable": "", "description": "Passes through to DOM method.\nOnly valid on FORM elements"}, "next": {"return": {"type": "Node", "description": "Node instance or null if not found"}, "description": "Returns the next matching sibling.\nReturns the nearest element node sibling if no method provided.", "param": "{String | Function} fn A selector or boolean method for testing elements.\nIf a function is used, it receives the current node being tested as the only argument.", "params": [{"type": "String | Function", "name": "fn", "description": " A selector or boolean method for testing elements.\nIf a function is used, it receives the current node being tested as the only argument."}], "guessedname": "next", "guessedtype": "function"}, "width": {"return": {"type": "number", "description": ""}, "description": "Returns the width of the content, not including\nthe padding, border or margin. If a width is passed,\nthe node's overall width is set to that size.\nExample:\n<pre><code>var node = A.one('#nodeId');\nnode.width(); //returns content width\nnode.width(100); // sets box width\n</code></pre>"}, "toggleClass": {"chainable": "", "params": [{"type": "String", "name": "className", "description": " the class name to be toggled"}, {"type": "Boolean", "name": "force", "description": " Option to force adding or removing the class."}], "description": "If the className exists on the node it is removed, if it doesn't exist it is added.", "param": "{String} className the class name to be toggled"}, "empty": {"chainable": "", "description": "Removes and destroys all of the nodes within the node.", "guessedname": "empty", "guessedtype": "function"}, "placeAfter": {"description": "<p>Inserts a <code>newNode</code> after the node instance (i.e., as the next\nsibling). If the reference node has no parent, then does nothing.</p>\nExample:\n<pre><code>var titleNode = A.one('#titleNode');\nvar descriptionNode = A.one('#descriptionNode');\n// the description is usually shown after the title\ntitleNode.placeAfter(descriptionNode);\n</code></pre>", "chainable": "", "param": "{Node} newNode Node to insert.", "params": [{"type": "Node", "name": "newNode", "description": " Node to insert."}], "guessedname": "placeAfter", "guessedtype": "function"}, "unwrap": {"chainable": "", "description": "Removes the node's parent node."}, "getElementsByTagName": {"return": {"type": "NodeList", "description": "A NodeList representing the HTMLCollection"}, "params": [{"type": "String", "name": "tagName", "description": " The tagName to collect"}], "description": "Passes through to DOM method.", "param": "{String} tagName The tagName to collect"}, "DEFAULT_SETTER": {"return": {"type": "any", "description": "The value"}, "description": "The default setter for DOM properties\nCalled with instance context (this === the Node instance)", "param": "{String} name The attribute/property being set", "static": "", "guessedname": "DEFAULT_SETTER", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The attribute/property being set"}, {"type": "any", "name": "val", "description": " The value to be set"}]}, "unplug": {"description": "Unregisters any class level plugins which have been registered by the Node", "param": "{Function | Array} plugin The plugin class, or an array of plugin classes", "static": "", "guessedname": "unplug", "guessedtype": "function", "params": [{"type": "Function | Array", "name": "plugin", "description": " The plugin class, or an array of plugin classes"}]}, "replaceChild": {"return": {"type": "Node", "description": "The replaced node"}, "params": [{"type": "String | HTMLElement | Node", "name": "node", "description": " Node to be inserted"}, {"type": "HTMLElement | Node", "name": "refNode", "description": " Node to be replaced"}], "param": "{String | HTMLElement | Node} node Node to be inserted", "guessedname": "replaceChild", "guessedtype": "function"}, "reset": {"chainable": "", "description": "Passes through to DOM method.\nOnly valid on FORM elements"}, "prependTo": {"description": "<p>Inserts the node instance to the begining of the <code>selector</code>\nnode (i.e., insert before the <code>firstChild</code> of the\n<code>selector</code>).</p>\nExample:\n<pre><code>var node = A.one('#nodeId');\nnode.prependTo('body');\n</code></pre>", "chainable": "", "param": "{Node | String} selector A selector, element, HTML string, Node", "params": [{"type": "Node | String", "name": "selector", "description": " A selector, element, HTML string, Node"}], "guessedname": "prependTo", "guessedtype": "function"}, "setAttribute": {"chainable": "", "params": [{"type": "string", "name": "name", "description": " The attribute name"}, {"type": "string", "name": "value", "description": " The value to set"}], "description": "Allows setting attributes on DOM nodes, normalizing in some cases.\nThis passes through to the DOM node, allowing for custom attributes.", "param": "{string} name The attribute name"}, "purge": {"description": "Removes event listeners from the node and (optionally) its subtree", "chainable": "", "param": "{Boolean} recurse (optional) Whether or not to remove listeners from the\nnode's subtree", "params": [{"type": "Boolean", "name": "recurse", "description": " (optional) Whether or not to remove listeners from the\nnode's subtree"}, {"type": "String", "name": "type", "description": " (optional) Only remove listeners of the specified type"}], "guessedname": "purge", "guessedtype": "function"}, "_hoverOutHandler": {"description": "The event handler for the \"out\" function that is fired for events attached via the hover method.", "param": "{EventFacade} event", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "private": "", "guessedname": "_hoverOutHandler", "guessedtype": "function"}, "DEFAULT_GETTER": {"return": {"type": "any", "description": "The current value"}, "description": "The default getter for DOM properties\nCalled with instance context (this === the Node instance)", "param": "{String} name The attribute/property to look up", "static": "", "guessedname": "DEFAULT_GETTER", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The attribute/property to look up"}]}, "appendChild": {"return": {"type": "Node", "description": "The appended node"}, "params": [{"type": "String | HTMLElement | Node", "name": "node", "description": " Node to be appended"}], "param": "{String | HTMLElement | Node} node Node to be appended", "guessedname": "appendChild", "guessedtype": "function"}, "getDOMNode": {"return": {"type": "HTMLNode", "description": "The DOM node bound to the Node instance.  If a DOM node is passed\nas the node argument, it is simply returned."}, "description": "Retrieves the DOM node bound to a Node instance", "param": "{Y.Node || HTMLNode} node The Node instance or an HTMLNode", "static": "", "guessedname": "getDOMNode", "guessedtype": "function", "params": [{"type": "Y.Node || HTMLNode", "name": "node", "description": " The Node instance or an HTMLNode"}]}, "cloneNode": {"return": {"type": "Node", "description": "The clone"}, "params": [{"type": "Boolean", "name": "deep", "description": " Whether or not to perform a deep clone, which includes\nsubtree and attributes"}], "description": "Passes through to DOM method.", "param": "{Boolean} deep Whether or not to perform a deep clone, which includes\nsubtree and attributes"}, "getX": {"return": {"type": "Int", "description": "The X position of the node"}, "description": "Gets the current position of the node in page coordinates."}, "getY": {"return": {"type": "Int", "description": "The Y position of the node"}, "description": "Gets the current position of the node in page coordinates."}, "ancestors": {"return": {"type": "NodeList", "description": "A NodeList instance containing the matching elements"}, "description": "Returns the ancestors that pass the test applied by supplied boolean method.", "param": "{String | Function} fn A selector string or boolean method for testing elements.", "params": [{"type": "String | Function", "name": "fn", "description": " A selector string or boolean method for testing elements."}, {"type": "Boolean", "name": "testSelf", "description": " optional Whether or not to include the element in the scan\nIf a function is used, it receives the current node being tested as the only argument."}], "guessedname": "ancestors", "guessedtype": "function"}, "unselectable": {"chainable": "", "description": "Disables text selection for this element (normalized across browsers).", "guessedname": "unselectable", "guessedtype": "function"}, "setStyles": {"chainable": "", "params": [{"type": "Object", "name": "hash", "description": " An object literal of property:value pairs."}], "description": "Sets multiple style properties on the node.", "param": "{Object} hash An object literal of property:value pairs."}, "_hide": {"chainable": "", "protected": "", "description": "The implementation for hiding nodes.\nDefault is to toggle the style.display property.", "guessedname": "_hide", "guessedtype": "function"}, "appendTo": {"description": "Appends the node to the given node.", "chainable": "", "param": "{Y.Node | HTMLElement} node The node to append to", "params": [{"type": "Y.Node | HTMLElement", "name": "node", "description": " The node to append to"}], "guessedname": "appendTo", "guessedtype": "function"}, "test": {"return": {"type": "boolean", "description": "Whether or not the node matches the selector."}, "description": "Test if the supplied node matches the supplied selector.", "param": "{string} selector The CSS selector to test against.", "params": [{"type": "string", "name": "selector", "description": " The CSS selector to test against."}], "guessedname": "test", "guessedtype": "function"}, "destroy": {"param": "{Boolean} recursivePurge (optional) Whether or not to remove listeners from the\nnode's subtree (default is false)", "params": [{"type": "Boolean", "name": "recursivePurge", "description": " (optional) Whether or not to remove listeners from the\nnode's subtree (default is false)"}], "description": "Nulls internal node references, removes any plugins and event listeners", "guessedname": "destroy", "guessedtype": "function"}, "ancestor": {"return": {"type": "Node", "description": "The matching Node instance or null if not found"}, "description": "Returns the nearest ancestor that passes the test applied by supplied boolean method.", "param": "{String | Function} fn A selector string or boolean method for testing elements.", "params": [{"type": "String | Function", "name": "fn", "description": " A selector string or boolean method for testing elements."}, {"type": "Boolean", "name": "testSelf", "description": " optional Whether or not to include the element in the scan\nIf a function is used, it receives the current node being tested as the only argument."}], "guessedname": "ancestor", "guessedtype": "function"}, "setData": {"description": "Stores arbitrary data on a Node instance.\nThis is not stored with the DOM node.", "chainable": "", "param": "{string} name The name of the field to set. If no name\nis given, name is treated as the data and overrides any existing data.", "params": [{"type": "string", "name": "name", "description": " The name of the field to set. If no name\nis given, name is treated as the data and overrides any existing data."}, {"type": "any", "name": "val", "description": " The value to be assigned to the field."}], "guessedname": "setData", "guessedtype": "function"}, "insertBefore": {"return": {"type": "Node", "description": "The inserted node"}, "params": [{"type": "String | HTMLElement | Node", "name": "newNode", "description": " Node to be appended"}, {"type": "HTMLElement | Node", "name": "refNode", "description": " Node to be inserted before"}], "param": "{String | HTMLElement | Node} newNode Node to be appended", "guessedname": "insertBefore", "guessedtype": "function"}, "setAttrs": {"description": "Sets multiple attributes.", "chainable": "", "param": "{Object} attrMap an object of name/value pairs to set", "params": [{"type": "Object", "name": "attrMap", "description": " an object of name/value pairs to set"}], "guessedname": "setAttrs", "guessedtype": "function"}, "getStyle": {"return": {"type": "String", "description": "The current value of the style property for the element."}, "params": [{"type": "String", "name": "attr", "description": " The style attribute to retrieve."}], "description": "Returns the style's current value.", "param": "{String} attr The style attribute to retrieve."}, "setXY": {"chainable": "", "params": [{"type": "Array", "name": "xy", "description": " Contains X & Y values for new position (coordinates are page-based)"}], "description": "Set the position of the node in page coordinates, regardless of how the node is positioned.", "param": "{Array} xy Contains X & Y values for new position (coordinates are page-based)"}, "getMargin": {"return": {"type": "number", "description": ""}, "description": "Return the combined size of the margin for the specified sides.", "param": "{string} sides Can be t, r, b, l or any combination of\nthose to represent the top, right, bottom, or left sides.", "params": [{"type": "string", "name": "sides", "description": " Can be t, r, b, l or any combination of\nthose to represent the top, right, bottom, or left sides."}], "guessedname": "getMargin", "guessedtype": "function"}, "setX": {"chainable": "", "params": [{"type": "Int", "name": "x", "description": " X value for new position (coordinates are page-based)"}], "description": "Set the position of the node in page coordinates, regardless of how the node is positioned.", "param": "{Int} x X value for new position (coordinates are page-based)"}, "setY": {"chainable": "", "params": [{"type": "Int", "name": "y", "description": " Y value for new position (coordinates are page-based)"}], "description": "Set the position of the node in page coordinates, regardless of how the node is positioned.", "param": "{Int} y Y value for new position (coordinates are page-based)"}, "getXY": {"return": {"type": "Array", "description": "The XY position of the node"}, "description": "Gets the current position of the node in page coordinates."}, "_show": {"chainable": "", "protected": "", "description": "The implementation for showing nodes.\nDefault is to toggle the style.display property.", "guessedname": "_show", "guessedtype": "function"}, "height": {"return": {"type": "number", "description": ""}, "description": "Returns the height of the content, not including\nthe padding, border or margin. If a height is passed,\nthe node's overall height is set to that size.\nExample:\n<pre><code>var node = A.one('#nodeId');\nnode.height(); //returns content height\nnode.height(100); // sets box height\n</code></pre>"}, "compareTo": {"return": {"type": "Boolean", "description": "True if the nodes match, false if they do not."}, "description": "Compares nodes to determine if they match.\nNode instances can be compared to each other and/or HTMLElements.", "param": "{HTMLElement | Node} refNode The reference node to compare to the node.", "params": [{"type": "HTMLElement | Node", "name": "refNode", "description": " The reference node to compare to the node."}], "guessedname": "compareTo", "guessedtype": "function"}, "hasClass": {"return": {"type": "Boolean", "description": "Whether or not the element has the specified class"}, "params": [{"type": "String", "name": "className", "description": " the class name to search for"}], "description": "Determines whether each node has the given className.", "param": "{String} className the class name to search for"}}}, "AutoComplete": {"description": "Alias for <a href=\"AutoCompleteList.html\"><code>AutoCompleteList</code></a>.\nSee that class for API docs.", "configs": {"queryQuestionMark": {"default": "true", "type": "Boolean", "description": "For IO DataSources, AutoComplete will automatically insert a \"?\" between the server URI and \nthe encoded query string. To prevent this behavior, you can\nset this value to false. If you need to customize this even further, you\ncan override the <a href=\"AutoComplete.html#method_generateRequest\">generateRequest</a> method.", "guessedname": "queryQuestionMark", "guessedtype": "property"}, "forceSelection": {"default": "false", "type": "Boolean", "description": "If <a href=\"AutoComplete.html#config_typeAhead\">typeAhead</a> is true, this\nwill clear a selection when the overlay closes unless a user explicitly selects an item.", "guessedname": "forceSelection", "guessedtype": "property"}, "typeAheadDelay": {"default": "0.2", "type": "Number", "description": "If <a href=\"AutoComplete.html#config_typeAhead\">typeAhead</a> is true, number of seconds \nto delay before updating the input. In order to prevent certain race conditions, this value must\nalways be greater than the <a href=\"AutoComplete.html#config_queryDelay\">queryDelay</a>.", "guessedname": "typeAheadDelay", "guessedtype": "property"}, "schemaType": {"default": "array", "type": "String", "description": "A valid type of <a href=\"module_datasource.html\">DataSource</a> schema plugin, such as array, json, xml, etc.", "guessedname": "schemaType", "guessedtype": "property"}, "applyLocalFilter": {"default": "true", "type": "Boolean", "description": "If set to true, the <a href=\"AutoComplete.html#method_filterResults\">filterResults</a> \nmethod will be run on the response from the data source.", "guessedname": "applyLocalFilter", "guessedtype": "property"}, "dataSourceType": {"default": "null", "type": "String", "description": "The type of the data source passed into <a href=\"AutoComplete.html#config_dataSource\">dataSource</a>.\nThis can be used to explicitly declare what kind of <a href=\"DataSource.html\">DataSource</a> object will\nbe created.", "guessedname": "dataSourceType", "guessedtype": "property"}, "queryMatchCase": {"default": "false", "type": "Boolean", "description": "When <a href=\"AutoComplete.html#config_applyLocalFilter\">applyLocalFilter</a> is true,\nsetting this to true will match only results with the same case.", "guessedname": "queryMatchCase", "guessedtype": "property"}, "typeAhead": {"default": "false", "type": "Boolean", "description": "If <a href=\"AutoComplete.html#config_autoHighlight\">autoHighlight</a> is enabled, whether or not the \ninput field should be automatically updated with the first result as the user types, \nautomatically selecting the portion of the text the user has not typed yet.", "guessedname": "typeAhead", "guessedtype": "property"}, "delimChar": {"default": "null", "type": "String", "description": "The character used to indicate the beginning or ending of a new value. Most commonly used\nis a \",\".", "guessedname": "delimChar", "guessedtype": "property"}, "input": {"default": "null", "type": "String | Node", "description": "The input field which will recieve the users input.", "guessedname": "input", "guessedtype": "property"}, "alwaysShowContainer": {"default": "false", "type": "Boolean", "description": "Always show the results container, instead of only showing when the \nuser is requesting them.", "guessedname": "alwaysShowContainer", "guessedtype": "property"}, "schema": {"default": "null", "type": "Object", "description": "A valid configuration object for any of <a href=\"module_datasource.html\">DataSource</a> schema plugins.", "guessedname": "schema", "guessedtype": "property"}, "minQueryLength": {"default": "1", "type": "Number", "description": "The minimum number of characters required to query the data source.", "guessedname": "minQueryLength", "guessedtype": "property"}, "matchKey": {"default": "0", "type": "String | Number", "description": "The key or numeric index in the schema to match the result against.", "guessedname": "matchKey", "guessedtype": "property"}, "queryMatchContains": {"default": "false", "type": "Boolean", "description": "When <a href=\"AutoComplete.html#config_applyLocalFilter\">applyLocalFilter</a> is true,\nsetting this to true will match results which contain the query anywhere in the text,\ninstead of just matching just items that start with the query.", "guessedname": "queryMatchContains", "guessedtype": "property"}, "suppressInputUpdate": {"default": "false", "type": "Boolean", "description": "Whether or not the input field should be updated with selections.", "guessedname": "suppressInputUpdate", "guessedtype": "property"}, "dataSource": {"default": "null", "type": "Object | String | Function | Array", "description": "The data source that results will be read from. This can either be\nan existing <a href=\"DataSource.html\">DataSource</a> object, or it can be a\nvalue that would be passed to <a href=\"DataSource.html\">DataSource</a>.", "guessedname": "dataSource", "guessedtype": "property"}, "uniqueName": {"default": "null", "type": "String", "description": "The unique ID of the input element.", "guessedname": "uniqueName", "guessedtype": "property"}, "autoHighlight": {"default": "true", "type": "Boolean", "description": "Automatically highlight the first item in the list when the results are\nmade visible.", "guessedname": "autoHighlight", "guessedtype": "property"}, "queryInterval": {"default": "0.5", "type": "Number", "description": "When IME usage is detected or interval detection is explicitly enabled,\nAutoComplete will detect the input value at the given interval and send a\nquery if the value has changed.", "guessedname": "queryInterval", "guessedtype": "property"}, "button": {"description": "To use a button", "default": "true", "deprecated": "", "guessedname": "button", "guessedtype": "property", "type": "Boolean"}, "maxResultsDisplayed": {"default": "10", "type": "Number", "description": "The maximum number of results to display.", "guessedname": "maxResultsDisplayed", "guessedtype": "property"}, "queryDelay": {"default": "0.2", "type": "Number", "description": "The amount of time in seconds to delay before submitting the query.", "guessedname": "queryDelay", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "<p><img src=\"assets/images/aui-autocomplete/main.png\"/></p>\nA base class for AutoComplete, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Presenting users choices based on their input</li>\n<li>Separating selected items</li>\n<li>Keyboard interaction for selecting items</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.AutoComplete({\ndataSource: [['AL', 'Alabama', 'The Heart of Dixie'],\n['AK', 'Alaska', 'The Land of the Midnight Sun'],\n['AZ', 'Arizona', 'The Grand Canyon State']],\nschema: {\nresultFields: ['key', 'name', 'description']\n},\nmatchKey: 'name',\ndelimChar: ',',\ntypeAhead: true,\ncontentBox: '#myAutoComplete'\n}).render();\n</code></pre>\nCheck the list of <a href=\"AutoComplete.html#configattributes\">Configuration Attributes</a> available for\nAutoComplete."}], "namespace": "", "module": "aui-autocomplete", "events": {"buttonChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "buttonChange", "description": "Fires when the value for the configuration attribute 'button' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "dataReturn": {"params": [{"type": "Event.Facade", "name": "event", "description": " The dataReturn event."}], "description": "Handles the dataReturn event. Fired when data successfully comes back from the data request.", "param": "{Event.Facade} event The dataReturn event."}, "textboxFocus": {"params": [{"type": "Event.Facade", "name": "event", "description": " The textboxFocus event."}], "description": "Handles the textboxFocus event. Fired when user moves focus to the input element.", "param": "{Event.Facade} event The textboxFocus event."}, "containerPopulate": {"params": [{"type": "Event.Facade", "name": "event", "description": " The containerPopulate event."}], "description": "Handles the containerPopulate event. Fired when the container is populated.", "param": "{Event.Facade} event The containerPopulate event."}, "containerCollapse": {"params": [{"type": "Event.Facade", "name": "event", "description": " The containerCollapse event."}], "description": "Handles the containerCollapse event. Fired when the container is hidden.", "param": "{Event.Facade} event The containerCollapse event."}, "selectionEnforce": {"params": [{"type": "Event.Facade", "name": "event", "description": " The selectionEnforce event."}], "description": "Handles the selectionEnforce event. Fired if <a href=\"Autocomplete.html#config_forceSelection\">forceSelection</a>\nis enabled and the users input element has been cleared because it did not match one of the results.", "param": "{Event.Facade} event The selectionEnforce event."}, "queryIntervalChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "queryIntervalChange", "description": "Fires when the value for the configuration attribute 'queryInterval' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "matchKeyChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "matchKeyChange", "description": "Fires when the value for the configuration attribute 'matchKey' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "delimCharChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "delimCharChange", "description": "Fires when the value for the configuration attribute 'delimChar' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "dataError": {"params": [{"type": "Event.Facade", "name": "event", "description": " The dataError event."}], "description": "Handles the dataError event. Fired when there is an error accessing the data.", "param": "{Event.Facade} event The dataError event."}, "forceSelectionChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "forceSelectionChange", "description": "Fires when the value for the configuration attribute 'forceSelection' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "dataSourceChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "dataSourceChange", "description": "Fires when the value for the configuration attribute 'dataSource' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "uniqueNameChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "uniqueNameChange", "description": "Fires when the value for the configuration attribute 'uniqueName' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "textboxChange": {"params": [{"type": "Event.Facade", "name": "event", "description": " The textboxChange event."}], "description": "Handles the textboxChange event. Fired when the value in the input element is changed.", "param": "{Event.Facade} event The textboxChange event."}, "typeAhead": {"params": [{"type": "Event.Facade", "name": "event", "description": " The typeAhead event."}], "description": "Handles the typeAhead event. Fired when the input element has been pre-filled by the type-ahead feature.", "param": "{Event.Facade} event The typeAhead event."}, "typeAheadDelayChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "typeAheadDelayChange", "description": "Fires when the value for the configuration attribute 'typeAheadDelay' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "itemArrowFrom": {"params": [{"type": "Event.Facade", "name": "event", "description": " The itemArrowFrom event."}], "description": "Handles the itemArrowFrom event. Fired when the user navigates via the keyboard away from\na selected item.", "param": "{Event.Facade} event The itemArrowFrom event."}, "maxResultsDisplayedChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "maxResultsDisplayedChange", "description": "Fires when the value for the configuration attribute 'maxResultsDisplayed' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "itemMouseOut": {"params": [{"type": "Event.Facade", "name": "event", "description": " The itemMouseOut event."}], "description": "Handles the itemMouseOut event. Fired when the user mouses away from an item.", "param": "{Event.Facade} event The itemMouseOut event."}, "itemArrowTo": {"params": [{"type": "Event.Facade", "name": "event", "description": " The itemArrowTo event."}], "description": "Handles the itemArrowTo event. Fired when the user navigates via the keyboard to a selected item.", "param": "{Event.Facade} event The itemArrowTo event."}, "textboxBlur": {"params": [{"type": "Event.Facade", "name": "event", "description": " The textboxBlur event."}], "description": "Handles the textboxBlur event. Fired when the user leaves the input element.", "param": "{Event.Facade} event The textboxBlur event."}, "minQueryLengthChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "minQueryLengthChange", "description": "Fires when the value for the configuration attribute 'minQueryLength' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "containerExpand": {"params": [{"type": "Event.Facade", "name": "event", "description": " The containerExpand event."}], "description": "Handles the containerExpand event. Fired when the container is shown.", "param": "{Event.Facade} event The containerExpand event."}, "applyLocalFilterChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "applyLocalFilterChange", "description": "Fires when the value for the configuration attribute 'applyLocalFilter' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "inputChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "inputChange", "description": "Fires when the value for the configuration attribute 'input' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "unmatchedItemSelect": {"params": [{"type": "Event.Facade", "name": "event", "description": " The unmatchedItemSelect event."}], "description": "Handles the unmatchedItemSelect event. Fired when a user selects something that does\nnot match any of the displayed results.", "param": "{Event.Facade} event The unmatchedItemSelect event."}, "schemaTypeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "schemaTypeChange", "description": "Fires when the value for the configuration attribute 'schemaType' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "itemMouseOver": {"params": [{"type": "Event.Facade", "name": "event", "description": " The itemMouseOver event."}], "description": "Handles the itemMouseOver event. Fired when the user mouses over an item.", "param": "{Event.Facade} event The itemMouseOver event."}, "queryMatchContainsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "queryMatchContainsChange", "description": "Fires when the value for the configuration attribute 'queryMatchContains' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "suppressInputUpdateChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "suppressInputUpdateChange", "description": "Fires when the value for the configuration attribute 'suppressInputUpdate' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "typeAheadChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "typeAheadChange", "description": "Fires when the value for the configuration attribute 'typeAhead' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "queryMatchCaseChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "queryMatchCaseChange", "description": "Fires when the value for the configuration attribute 'queryMatchCase' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "autoHighlightChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "autoHighlightChange", "description": "Fires when the value for the configuration attribute 'autoHighlight' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "dataSourceTypeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "dataSourceTypeChange", "description": "Fires when the value for the configuration attribute 'dataSourceType' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "itemSelect": {"params": [{"type": "Event.Facade", "name": "event", "description": " The itemSelect event."}], "description": "Handles the itemSelect event. Fired when an item in the list is selected.", "param": "{Event.Facade} event The itemSelect event."}, "queryQuestionMarkChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "queryQuestionMarkChange", "description": "Fires when the value for the configuration attribute 'queryQuestionMark' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "textboxKey": {"params": [{"type": "Event.Facade", "name": "event", "description": " The textboxKey event."}], "description": "Handles the textboxKey event. Fired when the input element receives key input.", "param": "{Event.Facade} event The textboxKey event."}, "schemaChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "schemaChange", "description": "Fires when the value for the configuration attribute 'schema' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "alwaysShowContainerChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "alwaysShowContainerChange", "description": "Fires when the value for the configuration attribute 'alwaysShowContainer' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "queryDelayChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "queryDelayChange", "description": "Fires when the value for the configuration attribute 'queryDelay' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "dataRequest": {"params": [{"type": "Event.Facade", "name": "event", "description": " The dataRequest event."}], "description": "Handles the dataRequest event. Fired when ever a query is sent to the data source.", "param": "{Event.Facade} event The dataRequest event."}}, "guessedname": "AutoComplete", "methods": {"_onTextboxKeyPress": {"description": "Handles the key press events of the input element.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onTextboxKeyPress", "guessedtype": "function"}, "_clearInterval": {"private": "", "description": "Clears the query interval", "guessedname": "_clearInterval", "guessedtype": "function"}, "initializer": {"protected": "", "description": "Construction logic executed during AutoComplete instantiation. Lifecycle.", "guessedname": "initializer", "guessedtype": "function"}, "_typeAhead": {"description": "Updates in the input element with the first result as the user types,\nselecting the text the user has not typed yet.", "param": "{Node} elListItem The selected list item", "protected": "", "params": [{"type": "Node", "name": "elListItem", "description": " The selected list item"}, {"type": "String", "name": "query", "description": " The query string"}], "guessedname": "_typeAhead", "guessedtype": "function"}, "_renderListElements": {"protected": "", "description": "Pre-populates the container with the \n<a href=\"Autocomplete.html#config_maxResultsDisplayed\">maxResultsDisplayed</a>\nnumber of list items.", "guessedname": "_renderListElements", "guessedtype": "function"}, "_toggleHighlight": {"description": "Toggles the highlighting of a list item, and removes the highlighting from the previous item", "param": "{Node} elNewListItem The item to be highlighted", "protected": "", "params": [{"type": "Node", "name": "elNewListItem", "description": " The item to be highlighted"}, {"type": "String", "name": "action", "description": " Whether we are moving to or from an item. Valid values are \"to\" or \"from\"."}], "guessedname": "_toggleHighlight", "guessedtype": "function"}, "_onTextboxFocus": {"description": "Handles the input element gaining focus.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onTextboxFocus", "guessedtype": "function"}, "_onContainerClick": {"description": "Handles when a user clicks on the container.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onContainerClick", "guessedtype": "function"}, "_focus": {"protected": "", "description": "Focuses the input element.", "guessedname": "_focus", "guessedtype": "function"}, "_onContainerMouseover": {"description": "Handles when a user mouses over the container.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onContainerMouseover", "guessedtype": "function"}, "_onInterval": {"protected": "", "description": "Enables the query to be triggered based on detecting text input via intervals instead of via\nkey events.", "guessedname": "_onInterval", "guessedtype": "function"}, "filterResults": {"return": {"type": "Object", "description": "Filtered response object"}, "description": "Executed by the data source as a mechanism to do simple client-side\nfiltering of the results.", "param": "{EventFacade} event", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "filterResults", "guessedtype": "function"}, "_updateValue": {"description": "Updates the input element with the selected query result. If\n<a href=\"Autocomplete.html#config_delimChar\">delimChar</a> has been set,\nthen the value gets appended with the delimiter.", "param": "{Node} elListItem The selected list item", "protected": "", "params": [{"type": "Node", "name": "elListItem", "description": " The selected list item"}], "guessedname": "_updateValue", "guessedtype": "function"}, "_populateList": {"description": "Populates the container with list items of the query results.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_populateList", "guessedtype": "function"}, "destructor": {"protected": "", "description": "Descructor lifecycle implementation for the Autocomplete class.\nPurges events attached to the node (and all child nodes).", "guessedname": "destructor", "guessedtype": "function"}, "doBeforeExpandContainer": {"return": {"type": "Boolean", "description": ""}, "description": "An overridable method that is executed before the result container is shown.\nThe method can return false to prevent the container from being shown.", "param": "{String} query The query that was submitted to the data source", "params": [{"type": "String", "name": "query", "description": " The query that was submitted to the data source"}, {"type": "Object", "name": "allResults", "description": " The parsed results"}], "guessedname": "doBeforeExpandContainer", "guessedtype": "function"}, "_selectItem": {"description": "Selects a list item from the query results.", "param": "{Node} elListItem The list item to select", "protected": "", "params": [{"type": "Node", "name": "elListItem", "description": " The list item to select"}], "guessedname": "_selectItem", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Bind the events on the AutoComplete UI. Lifecycle.", "guessedname": "bindUI", "guessedtype": "function"}, "_onContainerMouseout": {"description": "Handles when a user mouses out of the container.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onContainerMouseout", "guessedtype": "function"}, "generateRequest": {"return": {"type": "Object", "description": ""}, "description": "An overridable method that creates an object to be passed to the sendRequest\nmethod of the data source object. Useful to overwrite if you wish to create\na custom request object before it's sent.", "param": "{String} query The string currently being entered", "params": [{"type": "String", "name": "query", "description": " The string currently being entered"}], "guessedname": "generateRequest", "guessedtype": "function"}, "_sendQuery": {"description": "Makes a query request to the data source.", "param": "{String} query The query string", "protected": "", "params": [{"type": "String", "name": "query", "description": " The query string"}], "guessedname": "_sendQuery", "guessedtype": "function"}, "_moveSelection": {"description": "Triggered by the up and down arrow keys, changes the currently selected list element item, and scrolls the\ncontainer if necessary.", "param": "{Number} keyCode The numeric code of the key pressed", "protected": "", "params": [{"type": "Number", "name": "keyCode", "description": " The numeric code of the key pressed"}], "guessedname": "_moveSelection", "guessedtype": "function"}, "_realignContainer": {"description": "Realigns the container to the input element.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_realignContainer", "guessedtype": "function"}, "handleResponse": {"param": "{EventFacade} event", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Handles the response for the display of the results. This is a callback method\nthat is fired by the sendRequest method so that results are ready to be accessed.", "guessedname": "handleResponse", "guessedtype": "function"}, "_enableIntervalDetection": {"protected": "", "description": "Enables query interval detection for IME support.", "guessedname": "_enableIntervalDetection", "guessedtype": "function"}, "sendQuery": {"param": "{String} query Query string", "params": [{"type": "String", "name": "query", "description": " Query string"}], "description": "Sends a query request to the data source object.", "guessedname": "sendQuery", "guessedtype": "function"}, "_toggleContainer": {"description": "Toggles the display of the results container.", "param": "{Boolean} show Flag to force the showing or hiding of the container", "protected": "", "params": [{"type": "Boolean", "name": "show", "description": " Flag to force the showing or hiding of the container"}], "guessedname": "_toggleContainer", "guessedtype": "function"}, "_renderOverlay": {"protected": "", "description": "Handles the creation of the overlay where the result list will be displayed.", "guessedname": "_renderOverlay", "guessedtype": "function"}, "_extractQuery": {"return": {"type": "String", "description": ""}, "description": "Extracts the right most query from the delimited string in the input.", "param": "{String} query String to parse", "protected": "", "params": [{"type": "String", "name": "query", "description": " String to parse"}], "guessedname": "_extractQuery", "guessedtype": "function"}, "_onContainerScroll": {"description": "Handles the container scroll events.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onContainerScroll", "guessedtype": "function"}, "_clearSelection": {"protected": "", "description": "When <a href=\"Autocomplete.html#config_forceSelection\">forceSelection</a> is true and\nthe user tries to leave the input element without selecting an item from the results,\nthe user selection is cleared.", "guessedname": "_clearSelection", "guessedtype": "function"}, "doBeforeLoadData": {"return": {"type": "Boolean", "description": ""}, "description": "An overridable method that is executed before the result overlay is loaded with results.", "param": "{EventFacade} event", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "doBeforeLoadData", "guessedtype": "function"}, "_renderInput": {"protected": "", "description": "Handles the rendering of the input element.", "guessedname": "_renderInput", "guessedtype": "function"}, "formatResult": {"return": {"type": "String", "description": ""}, "description": "An overridable method for formatting the result of the query before it's displayed in the overlay.", "param": "{Object} result The result data object", "params": [{"type": "Object", "name": "result", "description": " The result data object"}, {"type": "String", "name": "request", "description": " The current query string"}, {"type": "String", "name": "resultMatch", "description": " The string from the results that matches the query"}], "guessedname": "formatResult", "guessedtype": "function"}, "_textMatchesOption": {"protected": "", "description": "Checks to see if the value typed by the user matches any of the\nquery results.", "guessedname": "_textMatchesOption", "guessedtype": "function"}, "syncUI": {"protected": "", "description": "Sync the AutoComplete UI. Lifecycle.", "guessedname": "syncUI", "guessedtype": "function"}, "_onTextboxKeyDown": {"description": "Handles the keydown events on the input element for functional keys.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onTextboxKeyDown", "guessedtype": "function"}, "_createDataSource": {"protected": "", "return": {"type": "String", "description": ""}, "description": "Creates the data source object using the passed in <a href=\"Autocomplete.html#config_dataSource\">dataSource</a>,\nand if it is a string, will use the <a href=\"Autocomplete.html#config_dataSourceType\">dataSourceType</a> to\ncreate a new <a href=\"module_datasource.html\">DataSource</a> object.", "guessedname": "_createDataSource", "guessedtype": "function"}, "_onButtonMouseDown": {"description": "Called when the user mouses down on the button element in the combobox.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onButtonMouseDown", "guessedtype": "function"}, "_onTextboxBlur": {"description": "Handles the input element losing focus.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onTextboxBlur", "guessedtype": "function"}, "_onTextboxKeyUp": {"description": "Handles the keyup events of the input element.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onTextboxKeyUp", "guessedtype": "function"}, "_jumpSelection": {"protected": "", "description": "If there is a currently selected item, the right arrow key will select\nthat item and jump to the end of the input element, otherwise the container is closed.", "guessedname": "_jumpSelection", "guessedtype": "function"}, "renderUI": {"protected": "", "description": "Create the DOM structure for the AutoComplete. Lifecycle.", "guessedname": "renderUI", "guessedtype": "function"}}, "extends": "Component", "superclass": "Component", "file": "aui-autocomplete.js", "guessedtype": "property", "shortname": "AutoComplete", "properties": {"AutoComplete.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the AutoComplete.", "guessedname": "ATTRS", "guessedtype": "property"}, "AutoComplete.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}}, "name": "AutoComplete"}, "Test.Runner": {"name": "Test.Runner", "namespace": "Test", "module": "test", "events": {"testcasebegin": {"static": "", "description": "Fires when a test case is opened but before the first \ntest is executed.", "guessedname": "TEST_CASE_BEGIN_EVENT", "guessedtype": "property"}, "testcasecomplete": {"static": "", "description": "Fires when all tests in a test case have been executed.", "guessedname": "TEST_CASE_COMPLETE_EVENT", "guessedtype": "property"}, "begin": {"static": "", "description": "Fires when the run() method is called.", "guessedname": "BEGIN_EVENT", "guessedtype": "property"}, "ignore": {"static": "", "description": "Fires when a test has been ignored.", "guessedname": "TEST_IGNORE_EVENT", "guessedtype": "property"}, "testsuitebegin": {"static": "", "description": "Fires when a test suite is opened but before the first \ntest is executed.", "guessedname": "TEST_SUITE_BEGIN_EVENT", "guessedtype": "property"}, "testsuitecomplete": {"static": "", "description": "Fires when all test cases in a test suite have been\ncompleted.", "guessedname": "TEST_SUITE_COMPLETE_EVENT", "guessedtype": "property"}, "pass": {"static": "", "description": "Fires when a test has passed.", "guessedname": "TEST_PASS_EVENT", "guessedtype": "property"}, "fail": {"static": "", "description": "Fires when a test has failed.", "guessedname": "TEST_FAIL_EVENT", "guessedtype": "property"}, "complete": {"static": "", "description": "Fires when all test suites and test cases have been completed.", "guessedname": "COMPLETE_EVENT", "guessedtype": "property"}}, "methods": {"disableLogging": {"static": "", "return": {"type": "Void", "description": ""}, "description": "Disable logging via Y.log(). Test output will not be visible unless\nTestRunner events are subscribed to.", "guessedname": "disableLogging", "guessedtype": "function"}, "_run": {"return": {"type": "Object", "description": "Results of the execution with properties passed, failed, and total."}, "description": "Runs a test case or test suite, returning the results.", "private": "", "static": "", "param": "{Test.Case|Test.Suite} testObject The test case or test suite to run.", "guessedname": "_run", "guessedtype": "function", "params": [{"type": "Test.Case|Test.Suite", "name": "testObject", "description": " The test case or test suite to run."}]}, "isRunning": {"return": {"type": "Boolean", "description": "True if the TestRunner is running, false if not."}, "description": "Indicates that the TestRunner is busy running tests and therefore can't\nbe stopped and results cannot be gathered.", "guessedname": "isRunning", "guessedtype": "function"}, "setName": {"return": {"type": "Void", "description": ""}, "description": "The name assigned to the master suite of the TestRunner. This is the name\nthat is output as the root's name when results are retrieved.", "param": "{String} name The name of the result set.", "params": [{"type": "String", "name": "name", "description": " The name of the result set."}], "guessedname": "setName", "guessedtype": "function"}, "getCoverage": {"return": {"type": "Object|String", "description": "Either the coverage object or, if a coverage\nformat is specified, a string representing the results in that format."}, "description": "Returns the coverage report for the files that have been executed.\nThis returns only coverage information for files that have been\ninstrumented using YUI Test Coverage and only those that were run\nin the same pass.", "param": "{Function} format (Optional) A coverage format to return results in.", "params": [{"type": "Function", "name": "format", "description": " (Optional) A coverage format to return results in."}], "guessedname": "getCoverage", "guessedtype": "function"}, "_logEvent": {"return": {"type": "Void", "description": ""}, "description": "Logs TestRunner events using Y.log().", "private": "", "static": "", "param": "{Object} event The event object for the event.", "guessedname": "_logEvent", "guessedtype": "function", "params": [{"type": "Object", "name": "event", "description": " The event object for the event."}]}, "_addTestCaseToTestTree": {"return": {"type": "Void", "description": ""}, "description": "Adds a test case to the test tree as a child of the specified node.", "private": "", "static": "", "param": "{TestNode} parentNode The node to add the test case to as a child.", "guessedname": "_addTestCaseToTestTree", "guessedtype": "function", "params": [{"type": "TestNode", "name": "parentNode", "description": " The node to add the test case to as a child."}, {"type": "Test.Case", "name": "testCase", "description": " The test case to add."}]}, "getName": {"return": {"type": "String", "description": "The name of the result set."}, "description": "Retrieves the name of the current result set.", "guessedname": "getName", "guessedtype": "function"}, "resume": {"return": {"type": "Void", "description": ""}, "description": "Resumes the TestRunner after wait() was called.", "param": "{Function} segment The function to run as the rest\nof the haulted test.", "static": "", "guessedname": "resume", "guessedtype": "function", "params": [{"type": "Function", "name": "segment", "description": " The function to run as the rest\nof the haulted test."}]}, "getResults": {"return": {"type": "Object|String", "description": "Either the results object or, if a test format is \npassed as the argument, a string representing the results in a specific\nformat."}, "description": "Returns the last complete results set from the TestRunner. Null is returned\nif the TestRunner is running or no tests have been run.", "param": "{Function} format (Optional) A test format to return the results in.", "params": [{"type": "Function", "name": "format", "description": " (Optional) A test format to return the results in."}], "guessedname": "getResults", "guessedtype": "function"}, "enableLogging": {"static": "", "return": {"type": "Void", "description": ""}, "description": "Enable logging via Y.log(). Test output is published and can be read via\nlogreader.", "guessedname": "enableLogging", "guessedtype": "function"}, "_buildTestTree": {"return": {"type": "Void", "description": ""}, "description": "Builds the test tree based on items in the master suite. The tree is a hierarchical\nrepresentation of the test suites, test cases, and test functions. The resulting tree\nis stored in _root and the pointer _cur is set to the root initially.", "private": "", "static": "", "guessedname": "_buildTestTree", "guessedtype": "function"}, "_addTestSuiteToTestTree": {"return": {"type": "Void", "description": ""}, "description": "Adds a test suite to the test tree as a child of the specified node.", "private": "", "static": "", "param": "{TestNode} parentNode The node to add the test suite to as a child.", "guessedname": "_addTestSuiteToTestTree", "guessedtype": "function", "params": [{"type": "TestNode", "name": "parentNode", "description": " The node to add the test suite to as a child."}, {"type": "Test.Suite", "name": "testSuite", "description": " The test suite to add."}]}, "_handleTestObjectComplete": {"return": {"type": "Void", "description": ""}, "description": "Handles the completion of a test object's tests. Tallies test results \nfrom one level up to the next.", "private": "", "params": [{"type": "TestNode", "name": "node", "description": " The TestNode representing the test object."}], "param": "{TestNode} node The TestNode representing the test object.", "guessedname": "_handleTestObjectComplete", "guessedtype": "function"}, "add": {"return": {"type": "Void", "description": ""}, "description": "Adds a test suite or test case to the list of test objects to run.", "param": "testObject Either a TestCase or a TestSuite that should be run.", "static": "", "guessedname": "add", "guessedtype": "function", "params": [{"type": "", "name": "testObject", "description": " Either a TestCase or a TestSuite that should be run."}]}, "isWaiting": {"static": "", "return": {"type": "Boolean", "description": "True if the TestRunner is waiting, false if not."}, "description": "Indicates if the TestRunner is waiting for a test to resume", "guessedname": "isWaiting", "guessedtype": "function"}, "_next": {"return": {"type": "TestNode", "description": "The next node in the test tree or null if the end is reached."}, "description": "Retrieves the next node in the test tree.", "private": "", "static": "", "guessedname": "_next", "guessedtype": "function"}, "run": {"return": {"type": "Void", "description": ""}, "description": "Runs the test suite.", "param": "{Boolean} oldMode (Optional) Specifies that the <= 2.8 way of\ninternally managing test suites should be used.", "static": "", "guessedname": "run", "guessedtype": "function", "params": [{"type": "Boolean", "name": "oldMode", "description": " (Optional) Specifies that the <= 2.8 way of\ninternally managing test suites should be used."}]}, "_handleError": {"return": {"type": "Void", "description": ""}, "description": "Handles an error as if it occurred within the currently executing\ntest. This is for mock methods that may be called asynchronously\nand therefore out of the scope of the TestRunner. Previously, this\nerror would bubble up to the browser. Now, this method is used\nto tell TestRunner about the error. This should never be called\nby anyplace other than the Mock object.", "private": "", "static": "", "param": "{Error} error The error object.", "guessedname": "_handleError", "guessedtype": "function", "params": [{"type": "Error", "name": "error", "description": " The error object."}]}, "clear": {"static": "", "return": {"type": "Void", "description": ""}, "description": "Removes all test objects from the runner.", "guessedname": "clear", "guessedtype": "function"}, "_runTest": {"return": {"type": "Void", "description": ""}, "description": "Runs a single test based on the data provided in the node.", "private": "", "static": "", "param": "{TestNode} node The TestNode representing the test to run.", "guessedname": "_runTest", "guessedtype": "function", "params": [{"type": "TestNode", "name": "node", "description": " The TestNode representing the test to run."}]}}, "static": "", "file": "test.js", "shortname": "Runner", "properties": {"_running": {"description": "Indicates if the TestRunner is currently running tests.", "private": "", "static": "", "guessedname": "_running", "guessedtype": "property", "type": "Boolean"}, "_root": {"description": "Pointer to the root node in the test tree.", "private": "", "static": "", "guessedname": "_root", "guessedtype": "property", "type": "TestNode"}, "masterSuite": {"type": "Y.Test.Suite", "static": "", "description": "Suite on which to attach all TestSuites and TestCases to be run.", "private": ""}, "_log": {"description": "Indicates if the TestRunner will log events or not.", "private": "", "static": "", "guessedname": "_log", "guessedtype": "property", "type": "Boolean"}, "_waiting": {"description": "Indicates if the TestRunner is waiting as a result of\nwait() being called.", "private": "", "static": "", "guessedname": "_waiting", "guessedtype": "property", "type": "Boolean"}, "_cur": {"description": "Pointer to the current node in the test tree.", "private": "", "static": "", "guessedname": "_cur", "guessedtype": "property", "type": "TestNode"}, "_lastResults": {"description": "Holds copy of the results object generated when all tests are\ncomplete.", "private": "", "static": "", "guessedname": "_lastResults", "guessedtype": "property", "type": "Object"}}, "description": "Runs test suites and test cases, providing events to allowing for the\ninterpretation of test results."}, "WidgetButtons": {"name": "WidgetButtons", "namespace": "", "module": "widget-buttons", "events": {"buttonsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "buttonsChange", "description": "Fires when the value for the configuration attribute 'buttons' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "configs": {"buttons": {"default": "[\n{\ntype: \"close\"\n}\n],", "type": "{Array}", "description": "<p>An array of objects, with each object corresponding to a button that you want to be added to the widget. Each button can have upto 4 properties:</p>\n<p>type: {string} Use one of the default buttons provided by the WidgetButtons class. Set this to \"close\" if you want the \n[x] at the top-right corner of the window. If this key has a value, then values for the remaining properties below don't need to be provided.</p>\n<p>value: {string} HTML string or text that should be shown on the button</p>\n<p>action: {function} The callback function that should be executed when the button is clicked.</p>\n<p>href: {string} (optional) The link to redirect to if the button is clicked> If not supplied, defaults to \"#\"</p>\n<p>section: {string || object} Whether the button should be placed in the header or footer. Represented as \"header\" or \"footer\"</p>", "guessedname": "buttons", "guessedtype": "property"}}, "methods": {"_renderUIButtons": {"protected": "", "description": "Creates the button nodes based on whether they are defined as being in the header or footer\n<p>\nThis method is invoked after renderUI is invoked for the Widget class\nusing YUI's aop infrastructure.\n</p>", "guessedname": "_renderUIButtons", "guessedtype": "function"}, "_detachEventsFromButtons": {"protected": "", "description": "Detaches all event listeners from the buttons", "guessedname": "_detachEventsFromButtons", "guessedtype": "function"}, "_attachEventsToButton": {"protected": "", "description": "Attaches the event listeners to execute the callback function after button click.", "guessedname": "_attachEventsToButton", "guessedtype": "function"}, "_createButtons": {"protected": "", "description": "Iterate through the buttons attribute, create Y.Node instances of each button and append them to either the _hdBtnNode or _ftBtnNode nodes.", "guessedname": "_createButtons", "guessedtype": "function"}, "_removeButtonNode": {"description": "Removes the header and footer button wrappers from the DOM if they exist", "param": "fromHd {bool} Whether to remove the header button wrapper", "protected": "", "params": [{"type": "bool", "name": "fromHd", "description": "  Whether to remove the header button wrapper"}, {"type": "bool", "name": "fromFt", "description": "  Whether to remove the footer button wrapper"}], "guessedname": "_removeButtonNode", "guessedtype": "function"}, "_bindUIButtons": {"description": "Binds event listeners to listen for events on the buttons. \n<p>\nThis method is invoked after bindUI is invoked for the Widget class\nusing YUI's aop infrastructure.\n</p>", "param": "button {object} The object literal consisting of the button's properties and callback function", "protected": "", "guessedname": "_bindUIButtons", "guessedtype": "function", "public": ""}}, "param": "{Object} config User configuration object", "file": "widget-buttons.js", "shortname": "WidgetButtons", "properties": {"TEMPLATES": {"type": "object", "static": "", "description": "<p>Object used to specify the HTML template for the buttons. Consists of the following properties</p>\n<p>defaultTemplate: Specifies the HTML markup for each button</p>\n<p>wrapper: Specifies the HTML markup for the wrapper, which is a DOM Element that wraps around all the buttons</p>", "guessedname": "TEMPLATES", "guessedtype": "property"}, "DEFAULT_BUTTONS": {"type": "object", "static": "", "description": "Static hash of buttons that have all their properties defined, so that they can be used by supplying a value to the \"type\" property in the button attribute.\nThe \"close\" button is currently defined in this object (sets the [x] in the top-right of the header).", "guessedname": "DEFAULT_BUTTONS", "guessedtype": "property"}, "ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute \nconfiguration introduced by WidgetButtons.", "guessedname": "ATTRS", "guessedtype": "property"}, "BUTTON_CLASS_NAMES": {"type": "object", "static": "", "description": "Static hash of default class names used for the inner <span> (\"content\"), the <a> (\"button\"), and the outer span (\"wrapper\")", "guessedname": "BUTTON_CLASS_NAMES", "guessedtype": "property"}}, "description": "Widget extension, which can be used to add header/footer buttons support to a widget that implements the WidgetStdMod extension,"}, "Get": {"name": "Get", "namespace": "", "module": "yui", "guessedname": "ua", "methods": {"script": {"return": {"type": "tId: string", "description": "an object containing info about the\ntransaction."}, "description": "Fetches and inserts one or more script nodes into the head\nof the current document or the document in a specified window.", "param": "{string|string[]} url the url or urls to the script(s).", "static": "", "guessedname": "script", "guessedtype": "function", "params": [{"type": "string|string[]", "name": "url", "description": " the url or urls to the script(s)."}, {"type": "object", "name": "opts", "description": " Options:\n<dl>\n<dt>onSuccess</dt>\n<dd>\ncallback to execute when the script(s) are finished loading\nThe callback receives an object back with the following\ndata:\n<dl>\n<dt>win</dt>\n<dd>the window the script(s) were inserted into</dd>\n<dt>data</dt>\n<dd>the data object passed in when the request was made</dd>\n<dt>nodes</dt>\n<dd>An array containing references to the nodes that were\ninserted</dd>\n<dt>purge</dt>\n<dd>A function that, when executed, will remove the nodes\nthat were inserted</dd>\n<dt>\n</dl>\n</dd>\n<dt>onTimeout</dt>\n<dd>\ncallback to execute when a timeout occurs.\nThe callback receives an object back with the following\ndata:\n<dl>\n<dt>win</dt>\n<dd>the window the script(s) were inserted into</dd>\n<dt>data</dt>\n<dd>the data object passed in when the request was made</dd>\n<dt>nodes</dt>\n<dd>An array containing references to the nodes that were\ninserted</dd>\n<dt>purge</dt>\n<dd>A function that, when executed, will remove the nodes\nthat were inserted</dd>\n<dt>\n</dl>\n</dd>\n<dt>onEnd</dt>\n<dd>a function that executes when the transaction finishes,\nregardless of the exit path</dd>\n<dt>onFailure</dt>\n<dd>\ncallback to execute when the script load operation fails\nThe callback receives an object back with the following\ndata:\n<dl>\n<dt>win</dt>\n<dd>the window the script(s) were inserted into</dd>\n<dt>data</dt>\n<dd>the data object passed in when the request was made</dd>\n<dt>nodes</dt>\n<dd>An array containing references to the nodes that were\ninserted successfully</dd>\n<dt>purge</dt>\n<dd>A function that, when executed, will remove any nodes\nthat were inserted</dd>\n<dt>\n</dl>\n</dd>\n<dt>onProgress</dt>\n<dd>callback to execute when each individual file is done loading \n(useful when passing in an array of js files). Receives the same\npayload as onSuccess, with the addition of a <code>url</code> \nproperty, which identifies the file which was loaded.</dd>\n<dt>async</dt>\n<dd>\n<p>When passing in an array of JS files, setting this flag to true \nwill insert them into the document in parallel, as opposed to the \ndefault behavior, which is to chain load them serially. It will also\nset the async attribute on the script node to true.</p> \n<p>Setting async:true\nwill lead to optimal file download performance allowing the browser to\ndownload multiple scripts in parallel, and execute them as soon as they\nare available.</p>  \n<p>Note that async:true does not guarantee execution order of the \nscripts being downloaded. They are executed in whichever order they \nare received.</p>\n</dd>\n<dt>context</dt>\n<dd>the execution context for the callbacks</dd>\n<dt>win</dt>\n<dd>a window other than the one the utility occupies</dd>\n<dt>autopurge</dt>\n<dd>\nsetting to true will let the utilities cleanup routine purge\nthe script once loaded\n</dd>\n<dt>purgethreshold</dt>\n<dd>\nThe number of transaction before autopurge should be initiated\n</dd>\n<dt>data</dt>\n<dd>\ndata that is supplied to the callback when the script(s) are\nloaded.\n</dd>\n<dt>insertBefore</dt>\n<dd>node or node id that will become the new node's nextSibling.\nIf this is not specified, nodes will be inserted before a base\ntag should it exist.  Otherwise, the nodes will be appended to the\nend of the document head.</dd>\n</dl>\n<dt>charset</dt>\n<dd>Node charset, default utf-8 (deprecated, use the attributes\nconfig)</dd>\n<dt>attributes</dt>\n<dd>An object literal containing additional attributes to add to\nthe link tags</dd>\n<dt>timeout</dt>\n<dd>Number of milliseconds to wait before aborting and firing\nthe timeout event</dd>\n<pre>\n&nbsp; Y.Get.script(\n&nbsp; [\"http://yui.yahooapis.com/2.5.2/build/yahoo/yahoo-min.js\",\n&nbsp;  \"http://yui.yahooapis.com/2.5.2/build/event/event-min.js\"],\n&nbsp; &#123;\n&nbsp;   onSuccess: function(o) &#123;\n&nbsp;     this.log(\"won't cause error because Y is the context\");\n&nbsp;     Y.log(o.data); // foo\n&nbsp;     Y.log(o.nodes.length === 2) // true\n&nbsp;     // o.purge(); // optionally remove the script nodes\n&nbsp;                   // immediately\n&nbsp;   &#125;,\n&nbsp;   onFailure: function(o) &#123;\n&nbsp;     Y.log(\"transaction failed\");\n&nbsp;   &#125;,\n&nbsp;   onTimeout: function(o) &#123;\n&nbsp;     Y.log(\"transaction timed out\");\n&nbsp;   &#125;,\n&nbsp;   data: \"foo\",\n&nbsp;   timeout: 10000, // 10 second timeout\n&nbsp;   context: Y, // make the YUI instance\n&nbsp;   // win: otherframe // target another window/frame\n&nbsp;   autopurge: true // allow the utility to choose when to\n&nbsp;                   // remove the nodes\n&nbsp;   purgetheshold: 1 // purge previous transaction before\n&nbsp;                    // next transaction\n&nbsp; &#125;);.\n</pre>"}]}, "_fail": {"description": "The request failed, execute fail handler with whatever\nwas accomplished.  There isn't a failure case at the\nmoment unless you count aborted transactions", "param": "{string} id the id of the request", "params": [{"type": "string", "name": "id", "description": " the id of the request"}], "private": "", "guessedname": "_fail", "guessedtype": "function"}, "_progress": {"description": "Progress callback", "param": "{string} id The id of the request.", "params": [{"type": "string", "name": "id", "description": " The id of the request."}, {"type": "string", "name": "The", "description": " url which just completed."}], "private": "", "guessedname": "_progress", "guessedtype": "function"}, "_autoPurge": {"private": "", "description": "Removes processed queues and corresponding nodes", "guessedname": "_autoPurge", "guessedtype": "function"}, "_linkNode": {"return": {"type": "HTMLElement", "description": "the generated node."}, "description": "Generates a link node", "private": "", "params": [{"type": "string", "name": "url", "description": " the url for the css file."}, {"type": "Window", "name": "win", "description": " optional window to create the node in."}, {"type": "object", "name": "attributes", "description": " optional attributes collection to apply to the\nnew node."}], "param": "{string} url the url for the css file.", "guessedname": "_linkNode", "guessedtype": "function"}, "_getNodeRef": {"description": "Get node reference, from string", "param": "{String|HTMLElement} nId The node id to find. If an HTMLElement is passed in, it will be returned.", "params": [{"type": "String|HTMLElement", "name": "nId", "description": " The node id to find. If an HTMLElement is passed in, it will be returned."}, {"type": "String", "name": "tId", "description": " Queue id, used to determine document for queue"}], "private": "", "guessedname": "_getNodeRef", "guessedtype": "function"}, "_node": {"return": {"type": "HTMLElement", "description": "the generated node."}, "description": "Generates an HTML element, this is not appended to a document", "private": "", "params": [{"type": "string", "name": "type", "description": " the type of element."}, {"type": "Object", "name": "attr", "description": " the fixed set of attribute for the type."}, {"type": "Object", "name": "custAttrs", "description": " optional Any custom attributes provided by the user."}, {"type": "Window", "name": "win", "description": " optional window to create the element in."}], "param": "{string} type the type of element.", "guessedname": "_node", "guessedtype": "function"}, "_returnData": {"return": {"type": "object", "description": "the state data from the request."}, "description": "Returns the data payload for callback functions.", "private": "", "params": [{"type": "object", "name": "q", "description": " the queue."}, {"type": "string", "name": "msg", "description": " the result message."}, {"type": "string", "name": "result", "description": " the status message from the request."}], "param": "{object} q the queue.", "guessedname": "_returnData", "guessedtype": "function"}, "_abort": {"description": "Abort the transaction", "param": "{Object} id", "params": [{"type": "Object", "name": "id", "description": ""}], "private": "", "guessedname": "_abort", "guessedtype": "function"}, "queue": {"return": {"type": "object", "description": "transaction object."}, "description": "Saves the state for the request and begins loading\nthe requested urls", "private": "", "params": [{"type": "string", "name": "type", "description": " the type of node to insert."}, {"type": "string", "name": "url", "description": " the url to load."}, {"type": "object", "name": "opts", "description": " the hash of options for this request."}], "param": "{string} type the type of node to insert.", "guessedname": "_queue", "guessedtype": "function"}, "_scriptNode": {"return": {"type": "HTMLElement", "description": "the generated node."}, "description": "Generates a script node", "private": "", "params": [{"type": "string", "name": "url", "description": " the url for the script file."}, {"type": "Window", "name": "win", "description": " optional window to create the node in."}, {"type": "object", "name": "attributes", "description": " optional attributes collection to apply to the\nnew node."}], "param": "{string} url the url for the script file.", "guessedname": "_scriptNode", "guessedtype": "function"}, "_clearTimeout": {"description": "Clear timeout state", "param": "{Object} q Queue data", "params": [{"type": "Object", "name": "q", "description": " Queue data"}], "private": "", "guessedname": "_clearTimeout", "guessedtype": "function"}, "abort": {"description": "Abort a transaction", "param": "{string|object} o Either the tId or the object returned from\nscript() or css().", "static": "", "guessedname": "abort", "guessedtype": "function", "params": [{"type": "string|object", "name": "o", "description": " Either the tId or the object returned from\nscript() or css()."}]}, "_next": {"return": {"type": "string", "description": "the result."}, "description": "Loads the next item for a given request", "private": "", "params": [{"type": "string", "name": "id", "description": " the id of the request."}], "param": "{string} id the id of the request.", "guessedname": "_next", "guessedtype": "function"}, "_trackLoad": {"description": "Detects when a node has been loaded.  In the case of\nscript nodes, this does not guarantee that contained\nscript is ready to use.", "param": "{string} type the type of node to track.", "params": [{"type": "string", "name": "type", "description": " the type of node to track."}, {"type": "HTMLElement", "name": "n", "description": " the node to track."}, {"type": "string", "name": "id", "description": " the id of the request."}, {"type": "string", "name": "url", "description": " the url that is being loaded."}], "private": "", "guessedname": "_trackLoad", "guessedtype": "function"}, "_complete": {"description": "The request is complete, so executing the requester's callback", "param": "{string} id the id of the request.", "params": [{"type": "string", "name": "id", "description": " the id of the request."}], "private": "", "guessedname": "_complete", "guessedtype": "function"}, "_timeout": {"description": "Timeout detected", "param": "{string} id the id of the request.", "params": [{"type": "string", "name": "id", "description": " the id of the request."}], "private": "", "guessedname": "_timeout", "guessedtype": "function"}, "_loaded": {"return": {"type": "string", "description": "the result."}, "description": "onload callback", "private": "", "params": [{"type": "string", "name": "id", "description": " the id of the request."}], "param": "{string} id the id of the request.", "guessedname": "_loaded", "guessedtype": "function"}, "_purge": {"description": "Removes the nodes for the specified queue", "param": "{string} tId the transaction id.", "params": [{"type": "string", "name": "tId", "description": " the transaction id."}], "private": "", "guessedname": "_purge", "guessedtype": "function"}, "css": {"return": {"type": "tId: string", "description": "an object containing info about the\ntransaction."}, "description": "Fetches and inserts one or more css link nodes into the\nhead of the current document or the document in a specified\nwindow.", "param": "{string} url the url or urls to the css file(s).", "static": "", "guessedname": "css", "guessedtype": "function", "params": [{"type": "string", "name": "url", "description": " the url or urls to the css file(s)."}, {"type": "object", "name": "opts", "description": " Options:\n<dl>\n<dt>onSuccess</dt>\n<dd>\ncallback to execute when the css file(s) are finished loading\nThe callback receives an object back with the following\ndata:\n<dl>win</dl>\n<dd>the window the link nodes(s) were inserted into</dd>\n<dt>data</dt>\n<dd>the data object passed in when the request was made</dd>\n<dt>nodes</dt>\n<dd>An array containing references to the nodes that were\ninserted</dd>\n<dt>purge</dt>\n<dd>A function that, when executed, will remove the nodes\nthat were inserted</dd>\n<dt>\n</dl>\n</dd>\n<dt>onProgress</dt>\n<dd>callback to execute when each individual file is done loading (useful when passing in an array of css files). Receives the same\npayload as onSuccess, with the addition of a <code>url</code> property, which identifies the file which was loaded. Currently only useful for non Webkit/Gecko browsers,\nwhere onload for css is detected accurately.</dd>\n<dt>async</dt>\n<dd>When passing in an array of css files, setting this flag to true will insert them\ninto the document in parallel, as oppposed to the default behavior, which is to chain load them (where possible). \nThis flag is more useful for scripts currently, since for css Get only chains if not Webkit/Gecko.</dd>\n<dt>context</dt>\n<dd>the execution context for the callbacks</dd>\n<dt>win</dt>\n<dd>a window other than the one the utility occupies</dd>\n<dt>data</dt>\n<dd>\ndata that is supplied to the callbacks when the nodes(s) are\nloaded.\n</dd>\n<dt>insertBefore</dt>\n<dd>node or node id that will become the new node's nextSibling</dd>\n<dt>charset</dt>\n<dd>Node charset, default utf-8 (deprecated, use the attributes\nconfig)</dd>\n<dt>attributes</dt>\n<dd>An object literal containing additional attributes to add to\nthe link tags</dd>\n</dl>\n<pre>\nY.Get.css(\"http://localhost/css/menu.css\");\n</pre>\n<pre>\n&nbsp; Y.Get.css(\n&nbsp; [\"http://localhost/css/menu.css\",\n&nbsp;  \"http://localhost/css/logger.css\"], &#123;\n&nbsp;   insertBefore: 'custom-styles' // nodes will be inserted\n&nbsp;                                 // before the specified node\n&nbsp; &#125;);.\n</pre>"}]}, "_end": {"description": "The transaction is finished", "param": "{string} id the id of the request.", "params": [{"type": "string", "name": "id", "description": " the id of the request."}, {"type": "string", "name": "msg", "description": " the result message."}, {"type": "string", "name": "result", "description": " the status message from the request."}], "private": "", "guessedname": "_end", "guessedtype": "function"}}, "static": "", "file": "aui.js", "guessedtype": "property", "shortname": "Get", "properties": {"queues": {"private": "", "description": "hash of queues to manage multiple requests", "guessedname": "queues", "guessedtype": "property"}, "qidx": {"guessedname": "qidx", "type": "int", "description": "queue index used to generate transaction ids", "private": "", "guessedtype": "property"}, "PURGE_THRESH": {"description": "The number of request required before an automatic purge.\nCan be configured via the 'purgethreshold' config", "default": "20", "private": "", "static": "", "guessedname": "PURGE_THRESH", "guessedtype": "property", "type": "int"}, "purging": {"type": "boolean", "description": "interal property used to prevent multiple simultaneous purge\nprocesses", "private": ""}}, "description": "Fetches and inserts one or more script or link nodes into the document"}, "OverlayContextPanel": {"name": "OverlayContextPanel", "configs": {"anim": {"default": "{ show: false }", "type": "Object", "description": "Enable or disable the animation for hide and show. Used as the\n<a href=\"Anim.html\">Anim</a> configuration attributes.\n<pre><code>anim: {\nshow: {\nduration: .9\n},\nhide: {\nduration: .2\n}\n}\n</code></pre>", "guessedname": "anim", "guessedtype": "property"}, "hideOn": {"default": "click", "type": "String", "description": "See <a href=\"OverlayContext.html#config_hideOn\">hideOn</a>.", "guessedname": "hideOn", "guessedtype": "property"}, "arrow": {"default": "null", "type": "String", "description": "Position where the arrow will be placed. See\n<a href=\"OverlayContextPanel.html#config_showArrow\">showArrow</a>. If it's\nnot set, it will get the value set on the\n<a href=\"OverlayContext.html#config_align\">align</a> point. Here is a\nlist of valid arrows 'bc', 'bl', 'br', 'cc', 'lb', 'lc', 'lt', 'rb',\n'rc', 'rl'.", "guessedname": "arrow", "guessedtype": "property"}, "showOn": {"default": "click", "type": "String", "description": "See <a href=\"OverlayContext.html#config_showOn\">showOn</a>.", "guessedname": "showOn", "guessedtype": "property"}, "stack": {"default": "true", "type": "boolean", "description": "Gives stacking habilities to the OverlayContextPanel.", "guessedname": "stack", "guessedtype": "property"}, "showArrow": {"default": "true", "type": "boolean", "description": "If true the OverlayContextPanel will show an arrow positioned on the\n<a href=\"OverlayContextPanel.html#config_arrow\">arrow</a> point.", "guessedname": "showArrow", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "<p><img src=\"assets/images/aui-overlay-context-panel/main.png\"/></p>\nA base class for OverlayContextPanel, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Customizable arrow</li>\n<li>Optional animation when show or hide</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.OverlayContextPanel({\nbodyContent: 'Here s a sample OverlayContextPanel.',\nboundingBox: '#overlay-context-panel',\ntrigger: '#triggerButton',\ncancellableHide: true,\nhideDelay: 200,\nhideOnDocumentClick: false,\nanim: true\n}).render();\n</code></pre>\nCheck the list of <a href=\"OverlayContextPanel.html#configattributes\">Configuration Attributes</a> available for\nOverlayContextPanel."}], "namespace": "", "module": "aui-overlay", "events": {"arrowChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "arrowChange", "description": "Fires when the value for the configuration attribute 'arrow' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "showArrowChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "showArrowChange", "description": "Fires when the value for the configuration attribute 'showArrow' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "showOnChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "showOnChange", "description": "Fires when the value for the configuration attribute 'showOn' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "animChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "animChange", "description": "Fires when the value for the configuration attribute 'anim' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "stackChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "stackChange", "description": "Fires when the value for the configuration attribute 'stack' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "hideOnChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "hideOnChange", "description": "Fires when the value for the configuration attribute 'hideOn' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "OverlayContextPanel", "methods": {"fixPointerColor": {"description": "OverlayContextPanel uses a imageless arrow, which involves some CSS technics.\nThis method is meant to fix the color of the borders of the arrow.", "guessedname": "fixPointerColor", "guessedtype": "function"}, "hide": {"param": "{EventFacade} event", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Hides the OverlayContextPanel.", "guessedname": "hide", "guessedtype": "function"}, "syncUI": {"protected": "", "description": "Sync the OverlayContextPanel UI. Lifecycle.", "guessedname": "syncUI", "guessedtype": "function"}, "_syncElements": {"protected": "", "description": "Sync the UI of the OverlayContextPanel elements.", "guessedname": "_syncElements", "guessedtype": "function"}, "getAlignPoint": {"return": {"type": "String", "description": ""}, "description": "Normalize the align point value. The align point 'cc' is not a valid\nposition for the arrow and then it's normalized to the 'bc' point.", "guessedname": "getAlignPoint", "guessedtype": "function"}, "_renderElements": {"protected": "", "description": "Render DOM elements for the OverlayContextPanel.", "guessedname": "_renderElements", "guessedtype": "function"}, "_setAnim": {"return": {"type": "Object", "description": ""}, "description": "Setter for the\n<a href=\"OverlayContextPanel.html#config_anim\">anim</a> attribute.", "param": "{Object} value", "protected": "", "params": [{"type": "Object", "name": "value", "description": ""}], "guessedname": "_setAnim", "guessedtype": "function"}, "_beforeShow": {"description": "Fires before show the OverlayContextPanel.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_beforeShow", "guessedtype": "function"}, "_afterShowArrowChange": {"description": "Fires after showArrow attribute changes.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_afterShowArrowChange", "guessedtype": "function"}, "_setStack": {"return": {"type": "boolean", "description": ""}, "description": "Setter for the\n<a href=\"OverlayContextPanel.html#config_stack\">stack</a> attribute.", "param": "{boolean} value", "protected": "", "params": [{"type": "boolean", "name": "value", "description": ""}], "guessedname": "_setStack", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Bind the events on the OverlayContextPanel UI. Lifecycle.", "guessedname": "bindUI", "guessedtype": "function"}, "align": {"param": "{Node | String | null} node A reference (or selector string) for\nthe Node which with the OverlayContextPanel is to be aligned.", "params": [{"type": "Node | String | null", "name": "node", "description": " A reference (or selector string) for\nthe Node which with the OverlayContextPanel is to be aligned."}, {"type": "Array[2]", "name": "points", "description": " A two element array, specifying the points on\nthe OverlayContextPanel and node/viewport which need to be aligned."}], "description": "Aligns the OverlayContextPanel to the provided node (or viewport) using the\nprovided points. Inherited from\n<a href=\"Overlay.html#method_align\">Overlay</a>.", "guessedname": "align", "guessedtype": "function"}, "renderUI": {"protected": "", "description": "Create the DOM structure for the OverlayContextPanel. Lifecycle.", "guessedname": "renderUI", "guessedtype": "function"}}, "extends": "OverlayContext", "superclass": "OverlayContext", "file": "aui-overlay.js", "guessedtype": "property", "shortname": "OverlayContextPanel", "properties": {"OverlayContextPanel.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the OverlayContextPanel.", "guessedname": "ATTRS", "guessedtype": "property"}, "OverlayContextPanel.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}}, "description": "<p><img src=\"assets/images/aui-overlay-context-panel/main.png\"/></p>\nA base class for OverlayContextPanel, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Customizable arrow</li>\n<li>Optional animation when show or hide</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.OverlayContextPanel({\nbodyContent: 'Here s a sample OverlayContextPanel.',\nboundingBox: '#overlay-context-panel',\ntrigger: '#triggerButton',\ncancellableHide: true,\nhideDelay: 200,\nhideOnDocumentClick: false,\nanim: true\n}).render();\n</code></pre>\nCheck the list of <a href=\"OverlayContextPanel.html#configattributes\">Configuration Attributes</a> available for\nOverlayContextPanel."}, "CanvasDrawing": {"name": "CanvasDrawing", "constructors": [{"description": "<a href=\"http://www.w3.org/TR/html5/the-canvas-element.html\">Canvas</a> implementation of the <a href=\"Drawing.html\">`Drawing`</a> class. \n`CanvasDrawing` is not intended to be used directly. Instead, use the <a href=\"Drawing.html\">`Drawing`</a> class. \nIf the browser lacks <a href=\"http://www.w3.org/TR/SVG/\">SVG</a> capabilities but has \n<a href=\"http://www.w3.org/TR/html5/the-canvas-element.html\">Canvas</a> capabilities, the <a href=\"Drawing.html\">`Drawing`</a> \nclass will point to the `CanvasDrawing` class."}], "namespace": "", "module": "graphics", "methods": {"quadraticCurveTo": {"param": "{Number} cpx x-coordinate for the control point.", "params": [{"type": "Number", "name": "cpx", "description": " x-coordinate for the control point."}, {"type": "Number", "name": "cpy", "description": " y-coordinate for the control point."}, {"type": "Number", "name": "x", "description": " x-coordinate for the end point."}, {"type": "Number", "name": "y", "description": " y-coordinate for the end point."}], "description": "Draws a quadratic bezier curve.", "guessedname": "quadraticCurveTo", "guessedtype": "function"}, "moveTo": {"param": "{Number} x x-coordinate for the end point.", "params": [{"type": "Number", "name": "x", "description": " x-coordinate for the end point."}, {"type": "Number", "name": "y", "description": " y-coordinate for the end point."}], "description": "Moves the current drawing position to specified x and y coordinates.", "guessedname": "moveTo", "guessedtype": "function"}, "lineTo": {"param": "{Number} point1 x-coordinate for the end point.", "params": [{"type": "Number", "name": "point1", "description": " x-coordinate for the end point."}, {"type": "Number", "name": "point2", "description": " y-coordinate for the end point."}], "description": "Draws a line segment using the current line style from the current drawing position to the specified x and y coordinates.", "guessedname": "lineTo", "guessedtype": "function"}, "_createGraphic": {"guessedname": "_createGraphic", "return": {"type": "", "description": "HTMLCanvasElement"}, "description": "Creates canvas element", "private": "", "guessedtype": "function"}, "end": {"description": "Completes a drawing operation.", "guessedname": "end", "guessedtype": "function"}, "curveTo": {"param": "{Number} cp1x x-coordinate for the first control point.", "params": [{"type": "Number", "name": "cp1x", "description": " x-coordinate for the first control point."}, {"type": "Number", "name": "cp1y", "description": " y-coordinate for the first control point."}, {"type": "Number", "name": "cp2x", "description": " x-coordinate for the second control point."}, {"type": "Number", "name": "cp2y", "description": " y-coordinate for the second control point."}, {"type": "Number", "name": "x", "description": " x-coordinate for the end point."}, {"type": "Number", "name": "y", "description": " y-coordinate for the end point."}], "description": "Draws a bezier curve.", "guessedname": "curveTo", "guessedtype": "function"}, "_getRadialGradient": {"guessedname": "_getRadialGradient", "return": {"type": "", "description": "CanvasGradient"}, "description": "Returns a radial gradient fill", "private": "", "guessedtype": "function"}, "_toRGBA": {"description": "Parses hex color string and alpha value to rgba", "param": "{Object} val Color value to parse. Can be hex string, rgb or name.", "params": [{"type": "Object", "name": "val", "description": " Color value to parse. Can be hex string, rgb or name."}, {"type": "Number", "name": "alpha", "description": " Numeric value between 0 and 1 representing the alpha level."}], "private": "", "guessedname": "_toRGBA", "guessedtype": "function"}, "_trackSize": {"description": "Updates the size of the graphics object", "param": "{Number} w width", "params": [{"type": "Number", "name": "w", "description": " width"}, {"type": "Number", "name": "h", "description": " height"}], "private": "", "guessedname": "_trackSize", "guessedtype": "function"}, "_clearAndUpdateCoords": {"private": "", "description": "Clears the coordinate arrays. Called at the end of a drawing operation.", "guessedname": "_clearAndUpdateCoords", "guessedtype": "function"}, "_getLinearGradient": {"guessedname": "_getLinearGradient", "return": {"type": "", "description": "CanvasGradient"}, "description": "Returns a linear gradient fill", "private": "", "guessedtype": "function"}, "_updateCoords": {"description": "Tracks coordinates. Used to calculate the start point of dashed lines.", "param": "{Number} x x-coordinate", "params": [{"type": "Number", "name": "x", "description": " x-coordinate"}, {"type": "Number", "name": "y", "description": " y-coordinate"}], "private": "", "guessedname": "_updateCoords", "guessedtype": "function"}, "_updateDrawingQueue": {"description": "Queues up a method to be executed when a shape redraws.", "param": "{Array} val An array containing data that can be parsed into a method and arguments. The value at zero-index of the array is a string reference of\nthe drawing method that will be called. All subsequent indices are argument for that method. For example, `lineTo(10, 100)` would be structured as:\n`[\"lineTo\", 10, 100]`.", "params": [{"type": "Array", "name": "val", "description": " An array containing data that can be parsed into a method and arguments. The value at zero-index of the array is a string reference of\nthe drawing method that will be called. All subsequent indices are argument for that method. For example, `lineTo(10, 100)` would be structured as:\n`[\"lineTo\", 10, 100]`."}], "private": "", "guessedname": "_updateDrawingQueue", "guessedtype": "function"}, "_updateNodePosition": {"private": "", "description": "Moves the shape's dom node.", "guessedname": "_updateNodePosition", "guessedtype": "function"}, "drawEllipse": {"description": "Draws an ellipse. Used internally by `CanvasEllipse` class.", "param": "{Number} x x-coordinate", "protected": "", "params": [{"type": "Number", "name": "x", "description": " x-coordinate"}, {"type": "Number", "name": "y", "description": " y-coordinate"}, {"type": "Number", "name": "w", "description": " width"}, {"type": "Number", "name": "h", "description": " height"}], "guessedname": "drawEllipse", "guessedtype": "function"}, "drawCircle": {"description": "Draws a circle. Used internally by `CanvasCircle` class.", "param": "{Number} x y-coordinate", "protected": "", "params": [{"type": "Number", "name": "x", "description": " y-coordinate"}, {"type": "Number", "name": "y", "description": " x-coordinate"}, {"type": "Number", "name": "r", "description": " radius"}], "guessedname": "drawCircle", "guessedtype": "function"}, "drawWedge": {"description": "Draws a wedge.", "param": "{Number} x x-coordinate of the wedge's center point", "params": [{"type": "Number", "name": "x", "description": " x-coordinate of the wedge's center point"}, {"type": "Number", "name": "y", "description": " y-coordinate of the wedge's center point"}, {"type": "Number", "name": "startAngle", "description": " starting angle in degrees"}, {"type": "Number", "name": "arc", "description": " sweep of the wedge. Negative values draw clockwise."}, {"type": "Number", "name": "radius", "description": " radius of wedge. If [optional] yRadius is defined, then radius is the x radius."}, {"type": "Number", "name": "yRadius", "description": " [optional] y radius for wedge."}], "private": "", "guessedname": "drawWedge", "guessedtype": "function"}, "drawRect": {"param": "{Number} x x-coordinate", "params": [{"type": "Number", "name": "x", "description": " x-coordinate"}, {"type": "Number", "name": "y", "description": " y-coordinate"}, {"type": "Number", "name": "w", "description": " width"}, {"type": "Number", "name": "h", "description": " height"}], "description": "Draws a rectangle.", "guessedname": "drawRect", "guessedtype": "function"}, "_toRGB": {"description": "Converts color to rgb format", "param": "val Color value to convert.", "params": [{"type": "", "name": "val", "description": " Color value to convert."}], "private": "", "guessedname": "_toRGB", "guessedtype": "function"}, "clear": {"description": "Clears the graphics object."}, "_initProps": {"private": "", "description": "Clears all values", "guessedname": "_initProps", "guessedtype": "function"}, "setSize": {"description": "Sets the size of the graphics object.", "param": "w {Number} width to set for the instance.", "params": [{"type": "Number", "name": "w", "description": "  width to set for the instance."}, {"type": "Number", "name": "h", "description": "  height to set for the instance."}], "private": "", "guessedname": "setSize", "guessedtype": "function"}}, "file": "graphics-canvas.js", "shortname": "CanvasDrawing", "properties": {"_drawingComplete": {"guessedname": "_drawingComplete", "type": "Boolean", "description": "Indicates a drawing has completed.", "private": "", "guessedtype": "property"}}, "description": "<a href=\"http://www.w3.org/TR/html5/the-canvas-element.html\">Canvas</a> implementation of the <a href=\"Drawing.html\">`Drawing`</a> class. \n`CanvasDrawing` is not intended to be used directly. Instead, use the <a href=\"Drawing.html\">`Drawing`</a> class. \nIf the browser lacks <a href=\"http://www.w3.org/TR/SVG/\">SVG</a> capabilities but has \n<a href=\"http://www.w3.org/TR/html5/the-canvas-element.html\">Canvas</a> capabilities, the <a href=\"Drawing.html\">`Drawing`</a> \nclass will point to the `CanvasDrawing` class."}, "DialogMask": {"name": "DialogMask", "constructors": [{"description": "A base class for DialogMask - Controls the <a\nhref=\"Dialog.html#config_modal\">modal</a> attribute."}], "namespace": "", "module": "aui-dialog", "guessedname": "requires", "static": "", "superclass": "OverlayMask", "file": "aui-dialog.js", "guessedtype": "property", "extends": "OverlayMask", "shortname": "DialogMask", "description": "A base class for DialogMask - Controls the <a\nhref=\"Dialog.html#config_modal\">modal</a> attribute."}, "ImageViewerMask": {"name": "ImageViewerMask", "constructors": [{"description": "A base class for ImageViewerMask - Controls the <a\nhref=\"ImageViewer.html#config_modal\">modal</a> attribute."}], "namespace": "", "module": "aui-image-viewer", "guessedname": "ImageViewerMask", "static": "", "superclass": "OverlayMask", "file": "ak", "guessedtype": "property", "extends": "OverlayMask", "shortname": "ImageViewerMask", "description": "A base class for ImageViewerMask - Controls the <a\nhref=\"ImageViewer.html#config_modal\">modal</a> attribute."}, "VMLDrawing": {"name": "VMLDrawing", "constructors": [{"description": "<a href=\"http://www.w3.org/TR/NOTE-VML\">VML</a> implementation of the <a href=\"Drawing.html\">`Drawing`</a> class. \n`VMLDrawing` is not intended to be used directly. Instead, use the <a href=\"Drawing.html\">`Drawing`</a> class. \nIf the browser lacks <a href=\"http://www.w3.org/TR/SVG/\">SVG</a> and <a href=\"http://www.w3.org/TR/html5/the-canvas-element.html\">Canvas</a> \ncapabilities, the <a href=\"Drawing.html\">`Drawing`</a> class will point to the `VMLDrawing` class."}], "namespace": "", "module": "graphics", "guessedname": "prototype", "methods": {"quadraticCurveTo": {"params": [{"type": "Number", "name": "cpx", "description": " x-coordinate for the control point."}, {"type": "Number", "name": "cpy", "description": " y-coordinate for the control point."}, {"type": "Number", "name": "x", "description": " x-coordinate for the end point."}, {"type": "Number", "name": "y", "description": " y-coordinate for the end point."}], "description": "Draws a quadratic bezier curve.", "guessedname": "quadraticCurveTo", "guessedtype": "function"}, "moveTo": {"params": [{"type": "Number", "name": "x", "description": " x-coordinate for the end point."}, {"type": "Number", "name": "y", "description": " y-coordinate for the end point."}], "description": "Moves the current drawing position to specified x and y coordinates.", "guessedname": "moveTo", "guessedtype": "function"}, "lineTo": {"params": [{"type": "Number", "name": "point1", "description": " x-coordinate for the end point."}, {"type": "Number", "name": "point2", "description": " y-coordinate for the end point."}], "description": "Draws a line segment using the current line style from the current drawing position to the specified x and y coordinates.", "guessedname": "lineTo", "guessedtype": "function"}, "end": {"description": "Completes a drawing operation.", "guessedname": "end", "guessedtype": "function"}, "curveTo": {"params": [{"type": "Number", "name": "cp1x", "description": " x-coordinate for the first control point."}, {"type": "Number", "name": "cp1y", "description": " y-coordinate for the first control point."}, {"type": "Number", "name": "cp2x", "description": " x-coordinate for the second control point."}, {"type": "Number", "name": "cp2y", "description": " y-coordinate for the second control point."}, {"type": "Number", "name": "x", "description": " x-coordinate for the end point."}, {"type": "Number", "name": "y", "description": " y-coordinate for the end point."}], "description": "Draws a bezier curve.", "guessedname": "curveTo", "guessedtype": "function"}, "clear": {"description": "Clears the path.", "guessedname": "clear", "guessedtype": "function"}, "_draw": {"private": "", "description": "Draws the graphic.", "guessedname": "_closePath", "guessedtype": "function"}, "_trackSize": {"guessedname": "_trackSize", "params": [{"type": "Number", "name": "w", "description": " width"}, {"type": "Number", "name": "h", "description": " height"}], "description": "Updates the size of the graphics object", "private": "", "guessedtype": "function"}, "drawWedge": {"guessedname": "drawWedge", "params": [{"type": "Number", "name": "x", "description": " x-coordinate of the wedge's center point"}, {"type": "Number", "name": "y", "description": " y-coordinate of the wedge's center point"}, {"type": "Number", "name": "startAngle", "description": " starting angle in degrees"}, {"type": "Number", "name": "arc", "description": " sweep of the wedge. Negative values draw clockwise."}, {"type": "Number", "name": "radius", "description": " radius of wedge. If [optional] yRadius is defined, then radius is the x radius."}, {"type": "Number", "name": "yRadius", "description": " [optional] y radius for wedge."}], "description": "Draws a wedge.", "private": "", "guessedtype": "function"}, "drawRect": {"param": "{Number} x x-coordinate", "params": [{"type": "Number", "name": "x", "description": " x-coordinate"}, {"type": "Number", "name": "y", "description": " y-coordinate"}, {"type": "Number", "name": "w", "description": " width"}, {"type": "Number", "name": "h", "description": " height"}], "description": "Draws a rectangle.", "guessedname": "drawRect", "guessedtype": "function"}}, "file": "graphics-vml-debug.js", "guessedtype": "property", "shortname": "VMLDrawing", "properties": {"_currentY": {"guessedname": "_currentY", "type": "Number", "description": "Current y position of the drqwing.", "private": "", "guessedtype": "property"}, "_currentX": {"guessedname": "_currentX", "type": "Number", "description": "Current x position of the drqwing.", "private": "", "guessedtype": "property"}}, "description": "<a href=\"http://www.w3.org/TR/NOTE-VML\">VML</a> implementation of the <a href=\"Drawing.html\">`Drawing`</a> class. \n`VMLDrawing` is not intended to be used directly. Instead, use the <a href=\"Drawing.html\">`Drawing`</a> class. \nIf the browser lacks <a href=\"http://www.w3.org/TR/SVG/\">SVG</a> and <a href=\"http://www.w3.org/TR/html5/the-canvas-element.html\">Canvas</a> \ncapabilities, the <a href=\"Drawing.html\">`Drawing`</a> class will point to the `VMLDrawing` class."}, "CanvasShape": {"name": "CanvasShape", "configs": {"node": {"readonly": "", "type": "HTMLElement", "description": "Dom node for the shape", "guessedname": "node", "guessedtype": "property"}, "graphic": {"type": "Graphic", "description": "Reference to the container Graphic.", "guessedname": "graphic", "guessedtype": "property"}, "transform": {"type": "String", "description": "<p>A string containing, in order, transform operations applied to the shape instance. The `transform` string can contain the following values:\n<dl>\n<dt>rotate</dt><dd>Rotates the shape clockwise around it transformOrigin.</dd>\n<dt>translate</dt><dd>Specifies a 2d translation.</dd>\n<dt>skew</dt><dd>Skews the shape around the x-axis and y-axis.</dd>\n<dt>scale</dt><dd>Specifies a 2d scaling operation.</dd>\n<dt>translateX</dt><dd>Translates the shape along the x-axis.</dd>\n<dt>translateY</dt><dd>Translates the shape along the y-axis.</dd>\n<dt>skewX</dt><dd>Skews the shape around the x-axis.</dd>\n<dt>skewY</dt><dd>Skews the shape around the y-axis.</dd>\n</dl>\n</p>\n<p>Applying transforms through the transform attribute will reset the transform matrix and apply a new transform. The shape class also contains corresponding methods for each transform\nthat will apply the transform to the current matrix. The below code illustrates how you might use the `transform` attribute to instantiate a recangle with a rotation of 45 degrees.</p>\nvar myRect = new Y.Rect({\ntype:\"rect\",\nwidth: 50,\nheight: 40,\ntransform: \"rotate(45)\"\n};\n<p>The code below would apply `translate` and `rotate` to an existing shape.</p>\nmyRect.set(\"transform\", \"translate(40, 50) rotate(45)\");", "guessedname": "transform", "guessedtype": "property"}, "visible": {"type": "Boolean", "description": "Indicates whether the shape is visible.", "guessedname": "visible", "guessedtype": "property"}, "transformOrigin": {"type": "Array", "description": "An array of x, y values which indicates the transformOrigin in which to rotate the shape. Valid values range between 0 and 1 representing a \nfraction of the shape's corresponding bounding box dimension. The default value is [0.5, 0.5].", "guessedname": "transformOrigin", "guessedtype": "property"}, "height": {"type": "Number", "description": "Indicates the height of the shape", "guessedname": "height", "guessedtype": "property"}, "width": {"type": "Number", "description": "Indicates the width of the shape", "guessedname": "width", "guessedtype": "property"}, "stroke": {"type": "Object", "description": "Contains information about the stroke of the shape.\n<dl>\n<dt>color</dt><dd>The color of the stroke.</dd>\n<dt>weight</dt><dd>Number that indicates the width of the stroke.</dd>\n<dt>opacity</dt><dd>Number between 0 and 1 that indicates the opacity of the stroke. The default value is 1.</dd>\n<dt>dashstyle</dt>Indicates whether to draw a dashed stroke. When set to \"none\", a solid stroke is drawn. When set to an array, the first index indicates the\nlength of the dash. The second index indicates the length of gap.\n<dt>linecap</dt><dd>Specifies the linecap for the stroke. The following values can be specified:\n<dl>\n<dt>butt (default)</dt><dd>Specifies a butt linecap.</dd>\n<dt>square</dt><dd>Specifies a sqare linecap.</dd>\n<dt>round</dt><dd>Specifies a round linecap.</dd>\n</dl>\n</dd>\n<dt>linejoin</dt><dd>Specifies a linejoin for the stroke. The following values can be specified:\n<dl>\n<dt>round (default)</dt><dd>Specifies that the linejoin will be round.</dd>\n<dt>bevel</dt><dd>Specifies a bevel for the linejoin.</dd>\n<dt>miter limit</dt><dd>An integer specifying the miter limit of a miter linejoin. If you want to specify a linejoin of miter, you simply specify the limit as opposed to having\nseparate miter and miter limit values.</dd>\n</dl>\n</dd>\n</dl>", "guessedname": "stroke", "guessedtype": "property"}, "y": {"type": "Number", "description": "Indicates the y position of shape.", "guessedname": "y", "guessedtype": "property"}, "x": {"type": "Number", "description": "Indicates the x position of shape.", "guessedname": "x", "guessedtype": "property"}, "id": {"type": "String", "description": "Unique id for class instance.", "guessedname": "id", "guessedtype": "property"}, "fill": {"type": "Object", "description": "Contains information about the fill of the shape. \n<dl>\n<dt>color</dt><dd>The color of the fill.</dd>\n<dt>opacity</dt><dd>Number between 0 and 1 that indicates the opacity of the fill. The default value is 1.</dd>\n<dt>type</dt><dd>Type of fill.\n<dl>\n<dt>solid</dt><dd>Solid single color fill. (default)</dd>\n<dt>linear</dt><dd>Linear gradient fill.</dd>\n<dt>radial</dt><dd>Radial gradient fill.</dd>\n</dl>\n</dd>\n</dl>\n<p>If a `linear` or `radial` is specified as the fill type. The following additional property is used:\n<dl>\n<dt>stops</dt><dd>An array of objects containing the following properties:\n<dl>\n<dt>color</dt><dd>The color of the stop.</dd>\n<dt>opacity</dt><dd>Number between 0 and 1 that indicates the opacity of the stop. The default value is 1. Note: No effect for IE 6 - 8</dd>\n<dt>offset</dt><dd>Number between 0 and 1 indicating where the color stop is positioned.</dd> \n</dl>\n</dd>\n<p>Linear gradients also have the following property:</p>\n<dt>rotation</dt><dd>Linear gradients flow left to right by default. The rotation property allows you to change the flow by rotation. (e.g. A rotation of 180 would make the gradient pain from right to left.)</dd>\n<p>Radial gradients have the following additional properties:</p>\n<dt>r</dt><dd>Radius of the gradient circle.</dd>\n<dt>fx</dt><dd>Focal point x-coordinate of the gradient.</dd>\n<dt>fy</dt><dd>Focal point y-coordinate of the gradient.</dd>\n</dl>\n<p>The corresponding `SVGShape` class implements the following additional properties.</p>\n<dl>\n<dt>cx</dt><dd>\n<p>The x-coordinate of the center of the gradient circle. Determines where the color stop begins. The default value 0.5.</p>\n</dd>\n<dt>cy</dt><dd>\n<p>The y-coordinate of the center of the gradient circle. Determines where the color stop begins. The default value 0.5.</p>\n</dd>\n</dl>\n<p>These properties are not currently implemented in `CanvasShape` or `VMLShape`.</p>", "guessedname": "fill", "guessedtype": "property"}}, "constructors": [{"description": "<a href=\"http://www.w3.org/TR/html5/the-canvas-element.html\">Canvas</a> implementation of the <a href=\"Shape.html\">`Shape`</a> class. \n`CanvasShape` is not intended to be used directly. Instead, use the <a href=\"Shape.html\">`Shape`</a> class. \nIf the browser lacks <a href=\"http://www.w3.org/TR/SVG/\">SVG</a> capabilities but has \n<a href=\"http://www.w3.org/TR/html5/the-canvas-element.html\">Canvas</a> capabilities, the <a href=\"Shape.html\">`Shape`</a> \nclass will point to the `CanvasShape` class."}], "namespace": "", "module": "graphics", "guessedname": "CanvasShape", "methods": {"set": {"param": "{String|Object} name The name of the attribute. Alternatively, an object of key value pairs can \nbe passed in to set multiple attributes at once.", "params": [{"type": "String|Object", "name": "name", "description": " The name of the attribute. Alternatively, an object of key value pairs can \nbe passed in to set multiple attributes at once."}, {"type": "Any", "name": "value", "description": " The value to set the attribute to. This value is ignored if an object is received as \nthe name param."}], "description": "Sets the value of an attribute.", "guessedname": "set", "guessedtype": "function"}, "getBounds": {"return": {"type": "", "description": "Object"}, "description": "Returns the bounds for a shape.\nCalculates the a new bounding box from the original corner coordinates (base on size and position) and the transform matrix.\nThe calculated bounding box is used by the graphic instance to calculate its viewBox.", "guessedname": "getBounds", "guessedtype": "function"}, "createNode": {"guessedname": "createNode", "return": {"type": "", "description": "HTMLElement"}, "description": "Creates the dom node for the shape.", "private": "", "guessedtype": "function"}, "_drawDashedLine": {"description": "Draws a dashed line between two points.", "param": "{Number} xStart\tThe x position of the start of the line", "params": [{"type": "Number", "name": "xStart", "description": "\tThe x position of the start of the line"}, {"type": "Number", "name": "yStart", "description": "\tThe y position of the start of the line"}, {"type": "Number", "name": "xEnd", "description": "\t\tThe x position of the end of the line"}, {"type": "Number", "name": "yEnd", "description": "\t\tThe y position of the end of the line"}], "private": "", "guessedname": "_drawDashedLine", "guessedtype": "function"}, "_getDefaultStroke": {"guessedname": "_getDefaultStroke", "return": {"type": "", "description": "Object"}, "description": "Value function for stroke attribute", "private": "", "guessedtype": "function"}, "scale": {"param": "{Number} val", "params": [{"type": "Number", "name": "val", "description": ""}], "description": "Specifies a 2d scaling operation.", "guessedname": "scale", "guessedtype": "function"}, "_strokeChangeHandler": {"description": "Adds a stroke to the shape node.", "param": "{Object} stroke Properties of the `stroke` attribute.", "params": [{"type": "Object", "name": "stroke", "description": " Properties of the `stroke` attribute."}], "private": "", "guessedname": "_setStrokeProps", "guessedtype": "function"}, "skew": {"param": "{Number} x The value to skew on the x-axis.", "params": [{"type": "Number", "name": "x", "description": " The value to skew on the x-axis."}, {"type": "Number", "name": "y", "description": " The value to skew on the y-axis."}], "description": "Skews the shape around the x-axis and y-axis.", "guessedname": "skew", "guessedtype": "function"}, "contains": {"return": {"type": "", "description": "Boolean Whether or not this shape is the needle or its ancestor."}, "description": "Determines whether the node is an ancestor of another HTML element in the DOM hierarchy.", "param": "{CanvasShape | HTMLElement} needle The possible node or descendent", "params": [{"type": "CanvasShape | HTMLElement", "name": "needle", "description": " The possible node or descendent"}], "guessedname": "contains", "guessedtype": "function"}, "_setFillProps": {"description": "Adds a fill to the shape node.", "param": "{Object} fill Properties of the `fill` attribute.", "params": [{"type": "Object", "name": "fill", "description": " Properties of the `fill` attribute."}], "private": "", "guessedname": "_setFillProps", "guessedtype": "function"}, "init": {"protected": "", "description": "Init method, invoked during construction.\nCalls `initializer` method.", "guessedname": "init", "guessedtype": "function"}, "test": {"return": {"type": "", "description": "Boolean Wheter or not the shape matches the selector."}, "description": "Test if the supplied node matches the supplied selector.", "param": "{String} selector The CSS selector to test against.", "params": [{"type": "String", "name": "selector", "description": " The CSS selector to test against."}], "guessedname": "test", "guessedtype": "function"}, "destroy": {"description": "Destroys the instance.", "guessedname": "destroy", "guessedtype": "function"}, "translate": {"param": "{Number} x The value to transate on the x-axis.", "params": [{"type": "Number", "name": "x", "description": " The value to transate on the x-axis."}, {"type": "Number", "name": "y", "description": " The value to translate on the y-axis."}], "description": "Specifies a 2d translation.", "guessedname": "translate", "guessedtype": "function"}, "addClass": {"param": "{String} className the class name to add to the node's class attribute", "params": [{"type": "String", "name": "className", "description": " the class name to add to the node's class attribute"}], "description": "Add a class name to each node.", "guessedname": "addClass", "guessedtype": "function"}, "translateX": {"param": "{Number} x The value to translate.", "params": [{"type": "Number", "name": "x", "description": " The value to translate."}], "description": "Translates the shape along the x-axis. When translating x and y coordinates,\nuse the `translate` method.", "guessedname": "translateX", "guessedtype": "function"}, "translateY": {"param": "{Number} y The value to translate.", "params": [{"type": "Number", "name": "y", "description": " The value to translate."}], "description": "Performs a translate on the y-coordinate. When translating x and y coordinates,\nuse the `translate` method.", "guessedname": "translateY", "guessedtype": "function"}, "removeClass": {"param": "{String} className the class name to remove from the node's class attribute", "params": [{"type": "String", "name": "className", "description": " the class name to remove from the node's class attribute"}], "description": "Removes a class name from each node.", "guessedname": "removeClass", "guessedtype": "function"}, "_draw": {"private": "", "description": "Updates the shape.", "guessedname": "_draw", "guessedtype": "function"}, "_paint": {"private": "", "description": "Completes a shape or drawing", "guessedname": "_paint", "guessedtype": "function"}, "setXY": {"param": "{Array} Contains X & Y values for new position (coordinates are page-based)", "params": [{"type": "Array", "name": "Contains", "description": " X & Y values for new position (coordinates are page-based)"}], "description": "Set the position of the shape in page coordinates, regardless of how the node is positioned.", "guessedname": "setXY", "guessedtype": "function"}, "_addTransform": {"description": "Adds a transform to the shape.", "param": "{String} type The transform being applied.", "params": [{"type": "String", "name": "type", "description": " The transform being applied."}, {"type": "Array", "name": "args", "description": " The arguments for the transform."}], "private": "", "guessedname": "_addTransform", "guessedtype": "function"}, "skewY": {"param": "{Number} y y-coordinate", "params": [{"type": "Number", "name": "y", "description": " y-coordinate"}], "description": "Skews the shape around the y-axis.", "guessedname": "skewY", "guessedtype": "function"}, "skewX": {"param": "{Number} x x-coordinate", "params": [{"type": "Number", "name": "x", "description": " x-coordinate"}], "description": "Skews the shape around the x-axis.", "guessedname": "skewX", "guessedtype": "function"}, "_updateHandler": {"private": "", "description": "Updates `Shape` based on attribute changes.", "guessedname": "_updateHandler", "guessedtype": "function"}, "getXY": {"return": {"type": "", "description": "Array The XY position of the shape."}, "description": "Gets the current position of the node in page coordinates.", "guessedname": "getXY", "guessedtype": "function"}, "on": {"description": "Overrides default `on` method. Checks to see if its a dom interaction event. If so, \nreturn an event attached to the `node` element. If not, return the normal functionality.", "param": "{String} type event type", "params": [{"type": "String", "name": "type", "description": " event type"}, {"type": "Object", "name": "callback", "description": " function"}], "private": "", "guessedname": "on", "guessedtype": "function"}, "rotate": {"param": "{Number} deg The degree of the rotation.", "params": [{"type": "Number", "name": "deg", "description": " The degree of the rotation."}], "description": "Rotates the shape clockwise around it transformOrigin.", "guessedname": "rotate", "guessedtype": "function"}, "_initialize": {"private": "", "description": "Initializes the shape", "guessedname": "initializer", "guessedtype": "function"}, "_getDefaultFill": {"guessedname": "_getDefaultFill", "return": {"type": "", "description": "Object"}, "description": "Value function for fill attribute", "private": "", "guessedtype": "function"}, "_getRotatedCornerY": {"return": {"type": "", "description": "Number"}, "description": "Returns the y coordinate for a bounding box's corner based on the corner's original x/y coordinates, rotation and transform origin of the rotation.", "private": "", "params": [{"type": "Number", "name": "x", "description": " original x-coordinate of corner"}, {"type": "Number", "name": "y", "description": " original y-coordinate of corner"}, {"type": "Number", "name": "tox", "description": " transform origin x-coordinate of rotation"}, {"type": "Number", "name": "toy", "description": " transform origin y-coordinate of rotation"}, {"type": "Number", "name": "cosRadians", "description": " cosine (in radians) of rotation"}, {"type": "Number", "name": "sinRadians", "description": " sin (in radians) or rotation"}], "param": "{Number} x original x-coordinate of corner", "guessedname": "_getRotatedCornerY", "guessedtype": "function"}, "_getRotatedCornerX": {"return": {"type": "", "description": "Number"}, "description": "Returns the x coordinate for a bounding box's corner based on the corner's original x/y coordinates, rotation and transform origin of the rotation.", "private": "", "params": [{"type": "Number", "name": "x", "description": " original x-coordinate of corner"}, {"type": "Number", "name": "y", "description": " original y-coordinate of corner"}, {"type": "Number", "name": "tox", "description": " transform origin x-coordinate of rotation"}, {"type": "Number", "name": "toy", "description": " transform origin y-coordinate of rotation"}, {"type": "Number", "name": "cosRadians", "description": " cosine (in radians) of rotation"}, {"type": "Number", "name": "sinRadians", "description": " sin (in radians) or rotation"}], "param": "{Number} x original x-coordinate of corner", "guessedname": "_getRotatedCornerX", "guessedtype": "function"}, "compareTo": {"return": {"type": "Boolean", "description": "True if the nodes match, false if they do not."}, "description": "Compares nodes to determine if they match.\nNode instances can be compared to each other and/or HTMLElements.", "param": "{HTMLElement | Node} refNode The reference node to compare to the node.", "params": [{"type": "HTMLElement | Node", "name": "refNode", "description": " The reference node to compare to the node."}], "guessedname": "compareTo", "guessedtype": "function"}, "_updateTransform": {"private": "", "description": "Applies all transforms.", "guessedname": "_updateTransform", "guessedtype": "function"}}, "file": "graphics-canvas.js", "guessedtype": "function", "shortname": "CanvasShape", "properties": {"_bottom": {"guessedname": "_bottom", "type": "Number", "description": "Bottom edge of the path", "private": "", "guessedtype": "property"}, "_rotation": {"guessedname": "_rotation", "type": "Number", "description": "Storage for `rotation` atribute.", "private": "", "guessedtype": "property"}, "_top": {"guessedname": "_top", "type": "Number", "description": "Top edge of the path", "private": "", "guessedtype": "property"}, "_right": {"guessedname": "_right", "type": "Number", "description": "Right edge of the path", "private": "", "guessedtype": "property"}, "_transform": {"guessedname": "_transform", "type": "String", "description": "Storage for the transform attribute.", "private": "", "guessedtype": "property"}, "_left": {"guessedname": "_left", "type": "Number", "description": "Left edge of the path", "private": "", "guessedtype": "property"}}, "description": "<a href=\"http://www.w3.org/TR/html5/the-canvas-element.html\">Canvas</a> implementation of the <a href=\"Shape.html\">`Shape`</a> class. \n`CanvasShape` is not intended to be used directly. Instead, use the <a href=\"Shape.html\">`Shape`</a> class. \nIf the browser lacks <a href=\"http://www.w3.org/TR/SVG/\">SVG</a> capabilities but has \n<a href=\"http://www.w3.org/TR/html5/the-canvas-element.html\">Canvas</a> capabilities, the <a href=\"Shape.html\">`Shape`</a> \nclass will point to the `CanvasShape` class."}, "Test.Mock": {"name": "Test.Mock", "constructors": [{"params": [{"type": "Object", "name": "template", "description": " (Optional) An object whose methods\nshould be stubbed out on the mock object. This object\nis used as the prototype of the mock object so instanceof\nworks correctly."}], "description": "Creates a new mock object."}], "namespace": "Test", "module": "test", "guessedname": "Mock", "methods": {"verify": {"return": {"type": "void", "description": ""}, "description": "Verifies that all expectations of a mock object have been met and\nthrows an assertion error if not.", "param": "{Object} mock The object to verify..", "static": "", "guessedname": "verify", "guessedtype": "function", "params": [{"type": "Object", "name": "mock", "description": " The object to verify.."}]}, "expect": {"return": {"type": "void", "description": ""}, "description": "Assigns an expectation to a mock object. This is used to create\nmethods and properties on the mock object that are monitored for\ncalls and changes, respectively.", "param": "{Object} mock The object to add the expectation to.", "static": "", "guessedname": "expect", "guessedtype": "function", "params": [{"type": "Object", "name": "mock", "description": " The object to add the expectation to."}, {"type": "Object", "name": "expectation", "description": " An object defining the expectation. For\na method, the keys \"method\" and \"args\" are required with\nan optional \"returns\" key available. For properties, the keys\n\"property\" and \"value\" are required."}]}}, "file": "test.js", "guessedtype": "function", "shortname": "Mock", "description": "Creates a new mock object."}, "JSON": {"methods": {"parse": {"return": {"type": "MIXED", "description": "the native JavaScript representation of the JSON string"}, "description": "Parse a JSON string, returning the native JavaScript representation.", "param": "s {string} JSON string data", "static": "", "params": [{"type": "string", "name": "s", "description": "  JSON string data"}, {"type": "function", "name": "reviver", "description": "  (optional) function(k,v) passed each key value\npair of object literals, allowing pruning or altering values"}], "throws": "SyntaxError"}, "stringify": {"return": {"type": "string", "description": "JSON string representation of the input"}, "description": "<p>Converts an arbitrary value to a JSON string representation.</p>\n<p>Objects with cyclical references will trigger an exception.</p>\n<p>If a whitelist is provided, only matching object keys will be\nincluded.  Alternately, a replacer function may be passed as the\nsecond parameter.  This function is executed on every value in the\ninput, and its return value will be used in place of the original value.\nThis is useful to serialize specialized objects or class instances.</p>\n<p>If a positive integer or non-empty string is passed as the third\nparameter, the output will be formatted with carriage returns and\nindentation for readability.  If a String is passed (such as \"\\t\") it\nwill be used once for each indentation level.  If a number is passed,\nthat number of spaces will be used.</p>", "param": "o {MIXED} any arbitrary value to convert to JSON string", "static": "", "guessedname": "stringify", "guessedtype": "function", "params": [{"type": "MIXED", "name": "o", "description": "  any arbitrary value to convert to JSON string"}, {"type": "Array|Function", "name": "w", "description": "  (optional) whitelist of acceptable object\nkeys to include, or a replacer function to modify the\nraw value before serialization"}, {"type": "Number|String", "name": "ind", "description": "  (optional) indentation character or depth of\nspaces to format the output."}]}, "escapeException": {"return": {"type": "String", "description": "the \\unnnn escapement of the character"}, "description": "Replaces specific unicode characters with their appropriate \\unnnn\nformat. Some browsers ignore certain characters during eval.", "private": "", "params": [{"type": "String", "name": "c", "description": "  Unicode character"}], "param": "c {String} Unicode character", "guessedname": "_escapeException", "guessedtype": "function"}, "dateToString": {"return": {"type": "String", "description": "stringified Date in UTC format YYYY-MM-DDTHH:mm:SSZ"}, "description": "Serializes a Date instance as a UTC date string.  Used internally by\nstringify.  Override this method if you need Dates serialized in a\ndifferent format.", "deprecated": "Use a replacer function", "param": "d {Date} The Date to serialize", "static": "", "guessedname": "dateToString", "guessedtype": "function", "params": [{"type": "Date", "name": "d", "description": "  The Date to serialize"}]}, "_revive": {"return": {"type": "MIXED", "description": "The results of the filtered data"}, "description": "Traverses nested objects, applying a reviver function to each (key,value)\nfrom the scope if the key:value's containing object.  The value returned\nfrom the function will replace the original value in the key:value pair.\nIf the value returned is undefined, the key will be omitted from the\nreturned object.", "private": "", "params": [{"type": "MIXED", "name": "data", "description": "  Any JavaScript data"}, {"type": "Function", "name": "reviver", "description": "  filter or mutation function"}], "param": "data {MIXED} Any JavaScript data", "guessedname": "_revive", "guessedtype": "function"}}, "description": "<p>The JSON module adds support for serializing JavaScript objects into\nJSON strings and parsing JavaScript objects from strings in JSON format.</p>\n<p>The JSON namespace is added to your YUI instance including static methods\nY.JSON.parse(..) and Y.JSON.stringify(..).</p>\n<p>The functionality and method signatures follow the ECMAScript 5\nspecification.  In browsers with native JSON support, the native\nimplementation is used.</p>\n<p>The <code>json</code> module is a rollup of <code>json-parse</code> and\n<code>json-stringify</code>.</p>\n<p>As their names suggest, <code>json-parse</code> adds support for parsing\nJSON data (Y.JSON.parse) and <code>json-stringify</code> for serializing\nJavaScript data into JSON strings (Y.JSON.stringify).  You may choose to\ninclude either of the submodules individually if you don't need the\ncomplementary functionality, or include the rollup for both.</p>", "namespace": "", "module": "json", "static": "", "file": "json-parse.js", "shortname": "JSON", "main": "json", "properties": {"_BRACKETS": {"guessedname": "_BRACKETS", "type": "{RegExp}", "description": "Third step in the safety evaluation.  Regex used to remove all open\nsquare brackets following a colon, comma, or at the beginning of the\nstring.", "private": "", "guessedtype": "property"}, "_UNICODE_EXCEPTIONS": {"guessedname": "_UNICODE_EXCEPTIONS", "type": "{RegExp}", "description": "Replace certain Unicode characters that JavaScript may handle incorrectly\nduring eval--either by deleting them or treating them as line\nendings--with escape sequences.\nIMPORTANT NOTE: This regex will be used to modify the input if a match is\nfound.", "private": "", "guessedtype": "property"}, "useNativeStringify": {"description": "Leverage native JSON stringify if the browser has a native\nimplementation.  In general, this is a good idea.  See the Known Issues\nsection in the JSON user guide for caveats.  The default value is true\nfor browsers with native JSON support.", "default": "true", "static": "", "guessedname": "useNativeStringify", "guessedtype": "property", "type": "Boolean"}, "useNativeParse": {"description": "Leverage native JSON parse if the browser has a native implementation.\nIn general, this is a good idea.  See the Known Issues section in the\nJSON user guide for caveats.  The default value is true for browsers with\nnative JSON support.", "default": "true", "static": "", "guessedname": "useNativeParse", "guessedtype": "property", "type": "Boolean"}, "_UNSAFE": {"guessedname": "_UNSAFE", "type": "{RegExp}", "description": "Final step in the safety evaluation.  Regex used to test the string left\nafter all previous replacements for invalid characters.", "private": "", "guessedtype": "property"}, "_ESCAPES": {"guessedname": "_ESCAPES", "type": "{RegExp}", "description": "First step in the safety evaluation.  Regex used to replace all escape\nsequences (i.e. \"\\\\\", etc) with '@' characters (a non-JSON character).", "private": "", "guessedtype": "property"}, "_VALUES": {"guessedname": "_VALUES", "type": "{RegExp}", "description": "Second step in the safety evaluation.  Regex used to replace all simple\nvalues with ']' characters.", "private": "", "guessedtype": "property"}, "charCacheThreshold": {"description": "<p>Number of occurrences of a special character within a single call to\nstringify that should trigger promotion of that character to a dedicated\npreprocess step for future calls.  This is only used in environments\nthat don't support native JSON, or when useNativeStringify is set to\nfalse.</p>\n<p>So, if set to 50 and an object is passed to stringify that includes\nstrings containing the special character \\x07 more than 50 times,\nsubsequent calls to stringify will process object strings through a\nfaster serialization path for \\x07 before using the generic, slower,\nreplacement process for all special characters.</p>\n<p>To prime the preprocessor cache, set this value to 1, then call\n<code>Y.JSON.stringify(\"<em>(all special characters to\ncache)</em>\");</code>, then return this setting to a more conservative\nvalue.</p>\n<p>Special characters \\ \" \\b \\t \\n \\f \\r are already cached.</p>", "default": "100", "static": "", "guessedname": "charCacheThreshold", "guessedtype": "property", "type": "{Number}"}, "Native": {"guessedname": "_JSON", "type": "{Object}", "description": "Alias to native browser implementation of the JSON object if available.", "private": "", "guessedtype": "property"}}, "name": "JSON"}, "ComboSplineSeries": {"name": "ComboSplineSeries", "constructors": [{"description": "The ComboSplineSeries class renders a combination of splines, plots and areaspline fills in a single series. Each\nseries type has a corresponding boolean attribute indicating if it is rendered. By default, splines and plots \nare rendered and areaspline is not."}], "namespace": "", "module": "charts", "events": {"typeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "typeChange", "description": "Fires when the value for the configuration attribute 'type' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "ComboSplineSeries", "methods": {"drawSeries": {"protected": "", "description": "Draws the series.", "guessedname": "drawSeries", "guessedtype": "function"}}, "extends": "ComboSeries", "superclass": "ComboSeries", "file": "charts.js", "guessedtype": "property", "shortname": "ComboSplineSeries", "configs": {"type": {"default": "comboSpline", "type": "String", "description": "Read-only attribute indicating the type of series.", "guessedname": "type", "guessedtype": "property"}}, "description": "The ComboSplineSeries class renders a combination of splines, plots and areaspline fills in a single series. Each\nseries type has a corresponding boolean attribute indicating if it is rendered. By default, splines and plots \nare rendered and areaspline is not."}, "Cookie": {"name": "Cookie", "namespace": "", "module": "cookie", "guessedname": "Cookie", "methods": {"setSub": {"return": {"type": "String", "description": "The created cookie string."}, "description": "Sets a sub cookie with a given name to a particular value.", "param": "{String} name The name of the cookie to set.", "static": "", "guessedname": "setSub", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the cookie to set."}, {"type": "String", "name": "subName", "description": " The name of the subcookie to set."}, {"type": "Variant", "name": "value", "description": " The value to set."}, {"type": "Object", "name": "options", "description": " (Optional) An object containing one or more\ncookie options: path (a string), domain (a string), expires (a Date object),\nand secure (true/false)."}]}, "_parseCookieHash": {"return": {"type": "Object", "description": "An object containing entries for each cookie value."}, "description": "Parses a cookie hash string into an object.", "private": "", "static": "", "param": "{String} text The cookie hash string to parse (format: n1=v1&n2=v2).", "guessedname": "_parseCookieHash", "guessedtype": "function", "params": [{"type": "String", "name": "text", "description": " The cookie hash string to parse (format: n1=v1&n2=v2)."}]}, "set": {"return": {"type": "String", "description": "The created cookie string."}, "description": "Sets a cookie with a given name and value.", "param": "{String} name The name of the cookie to set.", "static": "", "guessedname": "set", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the cookie to set."}, {"type": "Variant", "name": "value", "description": " The value to set for the cookie."}, {"type": "Object", "name": "options", "description": " (Optional) An object containing one or more\ncookie options: path (a string), domain (a string), expires (a Date object),\nsecure (true/false), and raw (true/false). Setting raw to true indicates\nthat the cookie should not be URI encoded before being set."}]}, "setSubs": {"return": {"type": "String", "description": "The created cookie string."}, "description": "Sets a cookie with a given name to contain a hash of name-value pairs.", "param": "{String} name The name of the cookie to set.", "static": "", "guessedname": "setSubs", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the cookie to set."}, {"type": "Object", "name": "value", "description": " An object containing name-value pairs."}, {"type": "Object", "name": "options", "description": " (Optional) An object containing one or more\ncookie options: path (a string), domain (a string), expires (a Date object),\nand secure (true/false)."}]}, "exists": {"return": {"type": "Boolean", "description": "True if the cookie exists, false if not."}, "description": "Determines if the cookie with the given name exists. This is useful for\nBoolean cookies (those that do not follow the name=value convention).", "param": "{String} name The name of the cookie to check.", "static": "", "guessedname": "exists", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the cookie to check."}]}, "get": {"return": {"type": "Variant", "description": "If no converter is specified, returns a string or null if\nthe cookie doesn't exist. If the converter is specified, returns the value\nreturned from the converter or null if the cookie doesn't exist."}, "description": "Returns the cookie value for the given name.", "param": "{String} name The name of the cookie to retrieve.", "static": "", "guessedname": "get", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the cookie to retrieve."}, {"type": "Function|Object", "name": "options", "description": " (Optional) An object containing one or more\ncookie options: raw (true/false) and converter (a function).\nThe converter function is run on the value before returning it. The\nfunction is not used if the cookie doesn't exist. The function can be\npassed instead of the options object for backwards compatibility. When\nraw is set to true, the cookie value is not URI decoded."}]}, "_parseCookieString": {"return": {"type": "Object", "description": "An object containing entries for each accessible cookie."}, "description": "Parses a cookie string into an object representing all accessible cookies.", "private": "", "static": "", "param": "{String} text The cookie string to parse.", "guessedname": "_parseCookieString", "guessedtype": "function", "params": [{"type": "String", "name": "text", "description": " The cookie string to parse."}, {"type": "Boolean", "name": "shouldDecode", "description": " (Optional) Indicates if the cookie values should be decoded or not. Default is true."}]}, "_setDoc": {"return": {"type": "void", "description": ""}, "description": "Sets the document object that the cookie utility uses for setting\ncookies. This method is necessary to ensure that the cookie utility\nunit tests can pass even when run on a domain instead of locally.\nThis method should not be used otherwise; you should use \n<code>Y.config.doc</code> to change the document that the cookie\nutility uses for everyday purposes.", "private": "", "params": [{"type": "Object", "name": "newDoc", "description": " The object to use as the document."}], "param": "{Object} newDoc The object to use as the document.", "guessedname": "_setDoc", "guessedtype": "function"}, "remove": {"return": {"type": "String", "description": "The created cookie string."}, "description": "Removes a cookie from the machine by setting its expiration date to\nsometime in the past.", "param": "{String} name The name of the cookie to remove.", "static": "", "guessedname": "remove", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the cookie to remove."}, {"type": "Object", "name": "options", "description": " (Optional) An object containing one or more\ncookie options: path (a string), domain (a string), \nand secure (true/false). The expires option will be overwritten\nby the method."}]}, "removeSub": {"return": {"type": "String", "description": "The created cookie string."}, "description": "Removes a sub cookie with a given name.", "param": "{String} name The name of the cookie in which the subcookie exists.", "static": "", "guessedname": "removeSub", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the cookie in which the subcookie exists."}, {"type": "String", "name": "subName", "description": " The name of the subcookie to remove."}, {"type": "Object", "name": "options", "description": " (Optional) An object containing one or more\ncookie options: path (a string), domain (a string), expires (a Date object),\nremoveIfEmpty (true/false), and secure (true/false). This must be the same\nsettings as the original subcookie."}]}, "_createCookieHashString": {"return": {"type": "String", "description": "A string suitable for use as a cookie value."}, "description": "Formats a cookie value for an object containing multiple values.", "private": "", "static": "", "param": "{Object} hash An object of key-value pairs to create a string for.", "guessedname": "_createCookieHashString", "guessedtype": "function", "params": [{"type": "Object", "name": "hash", "description": " An object of key-value pairs to create a string for."}]}, "getSubs": {"return": {"type": "Object", "description": "An object of name-value pairs if the cookie with the given name\nexists, null if it does not."}, "description": "Returns an object containing name-value pairs stored in the cookie with the given name.", "param": "{String} name The name of the cookie to retrieve.", "static": "", "guessedname": "getSubs", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the cookie to retrieve."}]}, "getSub": {"return": {"type": "Variant", "description": "If the cookie doesn't exist, null is returned. If the subcookie\ndoesn't exist, null if also returned. If no converter is specified and the\nsubcookie exists, a string is returned. If a converter is specified and the\nsubcookie exists, the value returned from the converter is returned."}, "description": "Returns the value of a subcookie.", "param": "{String} name The name of the cookie to retrieve.", "static": "", "guessedname": "getSub", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the cookie to retrieve."}, {"type": "String", "name": "subName", "description": " The name of the subcookie to retrieve."}, {"type": "Function", "name": "converter", "description": " (Optional) A function to run on the value before returning\nit. The function is not used if the cookie doesn't exist."}]}, "_createCookieString": {"return": {"type": "String", "description": "The formatted cookie string."}, "description": "Creates a cookie string that can be assigned into document.cookie.", "private": "", "static": "", "param": "{String} name The name of the cookie.", "guessedname": "_createCookieString", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the cookie."}, {"type": "String", "name": "value", "description": " The value of the cookie."}, {"type": "Boolean", "name": "encodeValue", "description": " True to encode the value, false to leave as-is."}, {"type": "Object", "name": "options", "description": " (Optional) Options for the cookie."}]}}, "static": "", "file": "cookie.js", "guessedtype": "property", "shortname": "Cookie", "description": "Cookie utility."}, "SVGEllipse": {"name": "SVGEllipse", "constructors": [{"description": "<a href=\"http://www.w3.org/TR/SVG/\">SVG</a> implementation of the <a href=\"Ellipse.html\">`Ellipse`</a> class. \n`SVGEllipse` is not intended to be used directly. Instead, use the <a href=\"Ellipse.html\">`Ellipse`</a> class. \nIf the browser has <a href=\"http://www.w3.org/TR/SVG/\">SVG</a> capabilities, the <a href=\"Ellipse.html\">`Ellipse`</a> \nclass will point to the `SVGEllipse` class."}], "namespace": "", "module": "graphics", "guessedname": "SVGEllipse", "methods": {"_draw": {"private": "", "description": "Updates the shape.", "guessedname": "_draw", "guessedtype": "function"}}, "file": "graphics-svg-debug.js", "guessedtype": "function", "shortname": "SVGEllipse", "properties": {"_type": {"guessedname": "_type", "type": "String", "description": "Indicates the type of shape", "private": "", "guessedtype": "property"}}, "description": "<a href=\"http://www.w3.org/TR/SVG/\">SVG</a> implementation of the <a href=\"Ellipse.html\">`Ellipse`</a> class. \n`SVGEllipse` is not intended to be used directly. Instead, use the <a href=\"Ellipse.html\">`Ellipse`</a> class. \nIf the browser has <a href=\"http://www.w3.org/TR/SVG/\">SVG</a> capabilities, the <a href=\"Ellipse.html\">`Ellipse`</a> \nclass will point to the `SVGEllipse` class."}, "DataType.Date": {"name": "DataType.Date", "description": "DataType.Date provides a set of utility functions to operate against Date objects.", "namespace": "", "module": "datatype", "static": "", "file": "datatype-date-format-debug.js", "shortname": "DataType.Date", "methods": {"parse": {"return": {"type": "Date", "description": "A Date, or null."}, "description": "Converts data to type Date.", "param": "data {String | Number} Data to convert. Values supported by the Date constructor are supported.", "params": [{"type": "String | Number", "name": "data", "description": "  Data to convert. Values supported by the Date constructor are supported."}], "guessedname": "parse", "guessedtype": "function"}, "isValidDate": {"return": {"type": "Boolean", "description": "True if the date argument contains a valid value."}, "description": "Checks whether a native JavaScript Date contains a valid value.", "param": "oDate {Date} Date in the month for which the number of days is desired.", "params": [{"type": "Date", "name": "oDate", "description": "  Date in the month for which the number of days is desired."}], "guessedname": "isValidDate", "guessedtype": "function"}, "format": {"return": {"type": "HTML", "description": "Formatted date for display."}, "params": [{"type": "Date", "name": "oDate", "description": "  Date."}, {"type": "Object} (Optional) Object literal of configuration values:\n<dl>\n<dt>format {HTML} (Optional)</dt>\n<dd>\n<p>\nAny strftime string is supported, such as \"%I:%M:%S %p\". strftime has several format specifiers defined by the Open group at \n<a href=\"http://www.opengroup.org/onlinepubs/007908799/xsh/strftime.html\">http://www.opengroup.org/onlinepubs/007908799/xsh/strftime.html</a>\nPHP added a few of its own, defined at <a href=\"http://www.php.net/strftime\">http://www.php.net/strftime</a>\n</p>\n<p>\nThis javascript implementation supports all the PHP specifiers and a few more.  The full list is below.\n</p>\n<p>\nIf not specified, it defaults to the ISO 8601 standard date format: %Y-%m-%d.\nThis may be overridden by the deprecated Y.config.dateFormat property.\n</p>\n<dl>\n<dt>%a</dt> <dd>abbreviated weekday name according to the current locale</dd>\n<dt>%A</dt> <dd>full weekday name according to the current locale</dd>\n<dt>%b</dt> <dd>abbreviated month name according to the current locale</dd>\n<dt>%B</dt> <dd>full month name according to the current locale</dd>\n<dt>%c</dt> <dd>preferred date and time representation for the current locale</dd>\n<dt>%C</dt> <dd>century number (the year divided by 100 and truncated to an integer, range 00 to 99)</dd>\n<dt>%d</dt> <dd>day of the month as a decimal number (range 01 to 31)</dd>\n<dt>%D</dt> <dd>same as %m/%d/%y</dd>\n<dt>%e</dt> <dd>day of the month as a decimal number, a single digit is preceded by a space (range \" 1\" to \"31\")</dd>\n<dt>%F</dt> <dd>same as %Y-%m-%d (ISO 8601 date format)</dd>\n<dt>%g</dt> <dd>like %G, but without the century</dd>\n<dt>%G</dt> <dd>The 4-digit year corresponding to the ISO week number</dd>\n<dt>%h</dt> <dd>same as %b</dd>\n<dt>%H</dt> <dd>hour as a decimal number using a 24-hour clock (range 00 to 23)</dd>\n<dt>%I</dt> <dd>hour as a decimal number using a 12-hour clock (range 01 to 12)</dd>\n<dt>%j</dt> <dd>day of the year as a decimal number (range 001 to 366)</dd>\n<dt>%k</dt> <dd>hour as a decimal number using a 24-hour clock (range 0 to 23); single digits are preceded by a blank. (See also %H.)</dd>\n<dt>%l</dt> <dd>hour as a decimal number using a 12-hour clock (range 1 to 12); single digits are preceded by a blank. (See also %I.) </dd>\n<dt>%m</dt> <dd>month as a decimal number (range 01 to 12)</dd>\n<dt>%M</dt> <dd>minute as a decimal number</dd>\n<dt>%n</dt> <dd>newline character</dd>\n<dt>%p</dt> <dd>either \"AM\" or \"PM\" according to the given time value, or the corresponding strings for the current locale</dd>\n<dt>%P</dt> <dd>like %p, but lower case</dd>\n<dt>%r</dt> <dd>time in a.m. and p.m. notation equal to %I:%M:%S %p</dd>\n<dt>%R</dt> <dd>time in 24 hour notation equal to %H:%M</dd>\n<dt>%s</dt> <dd>number of seconds since the Epoch, ie, since 1970-01-01 00:00:00 UTC</dd>\n<dt>%S</dt> <dd>second as a decimal number</dd>\n<dt>%t</dt> <dd>tab character</dd>\n<dt>%T</dt> <dd>current time, equal to %H:%M:%S</dd>\n<dt>%u</dt> <dd>weekday as a decimal number [1,7], with 1 representing Monday</dd>\n<dt>%U</dt> <dd>week number of the current year as a decimal number, starting with the\nfirst Sunday as the first day of the first week</dd>\n<dt>%V</dt> <dd>The ISO 8601:1988 week number of the current year as a decimal number,\nrange 01 to 53, where week 1 is the first week that has at least 4 days\nin the current year, and with Monday as the first day of the week.</dd>\n<dt>%w</dt> <dd>day of the week as a decimal, Sunday being 0</dd>\n<dt>%W</dt> <dd>week number of the current year as a decimal number, starting with the\nfirst Monday as the first day of the first week</dd>\n<dt>%x</dt> <dd>preferred date representation for the current locale without the time</dd>\n<dt>%X</dt> <dd>preferred time representation for the current locale without the date</dd>\n<dt>%y</dt> <dd>year as a decimal number without a century (range 00 to 99)</dd>\n<dt>%Y</dt> <dd>year as a decimal number including the century</dd>\n<dt>%z</dt> <dd>numerical time zone representation</dd>\n<dt>%Z</dt> <dd>time zone name or abbreviation</dd>\n<dt>%%</dt> <dd>a literal \"%\" character</dd>\n</dl>\n</dd>\n<dt>locale {String", "name": "oConfig", "description": "  (Deprecated, optional)</dt>\n<dd>\n<b>Deprecated - use Y.config.lang instead, which provides access to a much larger set of built-in languages.</b>\nThe locale to use when displaying days of week, months of the year, and other locale specific\nstrings. If not specified, this defaults to \"en\" (though this may be overridden by the deprecated Y.config.locale).\nThe following locales are built in:\n<dl>\n<dt>en</dt>\n<dd>English</dd>\n<dt>en-US</dt>\n<dd>US English</dd>\n<dt>en-GB</dt>\n<dd>British English</dd>\n<dt>en-AU</dt>\n<dd>Australian English (identical to British English)</dd>\n</dl>\nMore locales may be added by subclassing of the deprecated Y.DataType.Date.Locale[\"en\"].\nSee Y.DataType.Date.Locale for more information.\n</dd>\n</dl>"}], "description": "Takes a native JavaScript Date and formats it as a string for display to user.", "guessedname": "format", "guessedtype": "function"}, "xPad": {"guessedname": "xPad", "params": [{"type": "Number", "name": "x", "description": " \tThe number to be padded"}, {"type": "String", "name": "pad", "description": "   The character to pad the number with"}, {"type": "Number", "name": "r", "description": " \t(optional) The base of the pad, eg, 10 implies to two digits, 100 implies to 3 digits."}], "description": "Pad a number with leading spaces, zeroes or something else", "private": "", "guessedtype": "function"}, "daysInMonth": {"return": {"type": "Number", "description": "A number (either 28, 29, 30 or 31) of days in the given month."}, "description": "Takes a native JavaScript Date and returns the number of days in the month that the given date belongs to.", "param": "oDate {Date} Date in the month for which the number of days is desired.", "params": [{"type": "Date", "name": "oDate", "description": "  Date in the month for which the number of days is desired."}], "guessedname": "daysInMonth", "guessedtype": "function"}}}, "OverlayContext": {"name": "OverlayContext", "configs": {"currentNode": {"default": "First item of the\n<a href=\"OverlayContext.html#config_trigger\">trigger</a> NodeList.", "type": "Node", "description": "OverlayContext allow multiple elements to be the\n<a href=\"OverlayContext.html#config_trigger\">trigger</a>, the\ncurrentNode stores the current active one.", "guessedname": "currentNode", "guessedtype": "property"}, "hideOn": {"default": "mouseout", "type": "String", "description": "The event which is responsible to hide the OverlayContext.", "guessedname": "hideOn", "guessedtype": "property"}, "align": {"default": "{ node: null, points: [ TL, BL ] }", "type": "Object", "description": "Inherited from <a href=\"Overlay.html#config_align\">Overlay</a>.", "guessedname": "align", "guessedtype": "property"}, "hideOnDocumentClick": {"default": "true", "type": "boolean", "description": "If true the instance is registered on the\n<a href=\"OverlayContextManager.html\">OverlayContextManager</a> static\nclass and will be hide when the user click on document.", "guessedname": "hideOnDocumentClick", "guessedtype": "property"}, "cancellableHide": {"default": "true", "type": "boolean", "description": "Cancel auto hide delay if the user interact with the Overlay\n(focus, click, mouseover)", "guessedname": "cancellableHide", "guessedtype": "property"}, "showDelay": {"default": "0", "type": "Number", "description": "Number of milliseconds after the show method is invoked to show the\nOverlayContext.", "guessedname": "showDelay", "guessedtype": "property"}, "visible": {"default": "false", "type": "boolean", "description": "If true the OverlayContext is visible by default after the render phase.\nInherited from <a href=\"Overlay.html\">Overlay</a>.", "guessedname": "visible", "guessedtype": "property"}, "trigger": {"default": "null", "type": "{Node | NodeList | String}", "description": "Node, NodeList or Selector which will be used as trigger elements\nto show or hide the OverlayContext.", "guessedname": "trigger", "guessedtype": "property"}, "useARIA": {"default": "true", "type": "Boolean", "description": "True if Overlay should use ARIA plugin", "guessedname": "useARIA", "guessedtype": "property"}, "showOn": {"default": "mouseover", "type": "String", "description": "The event which is responsible to show the OverlayContext.", "guessedname": "showOn", "guessedtype": "property"}, "hideDelay": {"default": "0", "type": "Number", "description": "Number of milliseconds after the hide method is invoked to hide the\nOverlayContext.", "guessedname": "hideDelay", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "<p><img src=\"assets/images/aui-overlay-context/main.png\"/></p>\nA base class for OverlayContext, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Able to display an <a href=\"Overlay.html\">Overlay</a> at a specified corner of an element <a href=\"OverlayContext.html#config_trigger\">trigger</a></li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.OverlayContext({\nboundingBox: '#OverlayBoundingBox',\nhideOn: 'mouseleave',\nshowOn: 'mouseenter',\ntrigger: '.menu-trigger'\n}).render();\n</code></pre>\nCheck the list of <a href=\"OverlayContext.html#configattributes\">Configuration Attributes</a> available for\nOverlayContext."}], "namespace": "", "module": "aui-overlay", "events": {"cancellableHideChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "cancellableHideChange", "description": "Fires when the value for the configuration attribute 'cancellableHide' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "currentNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "currentNodeChange", "description": "Fires when the value for the configuration attribute 'currentNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "useARIAChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "useARIAChange", "description": "Fires when the value for the configuration attribute 'useARIA' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "hideOnDocumentClickChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "hideOnDocumentClickChange", "description": "Fires when the value for the configuration attribute 'hideOnDocumentClick' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "showDelayChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "showDelayChange", "description": "Fires when the value for the configuration attribute 'showDelay' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "alignChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "alignChange", "description": "Fires when the value for the configuration attribute 'align' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "visibleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "visibleChange", "description": "Fires when the value for the configuration attribute 'visible' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "showOnChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "showOnChange", "description": "Fires when the value for the configuration attribute 'showOn' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "hideDelayChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "hideDelayChange", "description": "Fires when the value for the configuration attribute 'hideDelay' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "triggerChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "triggerChange", "description": "Fires when the value for the configuration attribute 'trigger' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "hideOnChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "hideOnChange", "description": "Fires when the value for the configuration attribute 'hideOn' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "OverlayContext", "methods": {"_onVisibleChangeOverlayContext": {"description": "Fires when the <a href=\"OverlayContext.html#config_visible\">visible</a>\nattribute changes.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onVisibleChangeOverlayContext", "guessedtype": "function"}, "initializer": {"protected": "", "description": "Construction logic executed during OverlayContext instantiation. Lifecycle.", "guessedname": "initializer", "guessedtype": "function"}, "toggle": {"param": "{EventFacade} event", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Toggles visibility of the OverlayContext.", "guessedname": "toggle", "guessedtype": "function"}, "_cancelAutoHide": {"description": "Cancel hide event if the user does some interaction with the\nOverlayContext (focus, click or mouseover).", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_cancelAutoHide", "guessedtype": "function"}, "_setHideOn": {"return": {"type": "String", "description": ""}, "description": "Setter for the <a href=\"OverlayContext.html#config_hideOn\">hideOn</a>\nattribute.", "param": "{boolean} value", "protected": "", "params": [{"type": "String", "name": "eventType", "description": " Event type"}], "guessedname": "_setHideOn", "guessedtype": "function"}, "refreshAlign": {"description": "Refreshes the alignment of the OverlayContext with the\n<a href=\"OverlayContext.html#config_currentNode\">currentNode</a>. See\nalso <a href=\"OverlayContext.html#config_align\">align</a>.", "guessedname": "refreshAlign", "guessedtype": "function"}, "_afterTriggerChange": {"description": "Fires after the <a href=\"OverlayContext.html#config_trigger\">trigger</a>\nattribute change.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_afterTriggerChange", "guessedtype": "function"}, "hide": {"description": "Hides the OverlayContext.", "guessedname": "hide", "guessedtype": "function"}, "_setHideDelay": {"return": {"type": "number", "description": ""}, "description": "Setter for the\n<a href=\"OverlayContext.html#config_hideDelay\">hideDelay</a>\nattribute.", "param": "{number} val", "protected": "", "params": [{"type": "number", "name": "val", "description": ""}], "guessedname": "_setHideDelay", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Bind the events on the OverlayContext UI. Lifecycle.", "guessedname": "bindUI", "guessedtype": "function"}, "_beforeShowOnChange": {"description": "Fires before the <a href=\"OverlayContext.html#config_showOn\">showOn</a>\nattribute change.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_beforeShowOnChange", "guessedtype": "function"}, "_setShowOn": {"return": {"type": "String", "description": ""}, "description": "Setter for the <a href=\"OverlayContext.html#config_showOn\">showOn</a>\nattribute.", "param": "{String} eventType Event type", "protected": "", "params": [{"type": "String", "name": "eventType", "description": " Event type"}], "guessedname": "_setShowOn", "guessedtype": "function"}, "_toggle": {"description": "Handles the logic for the\n<a href=\"OverlayContext.html#method_toggle\">toggle</a>.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_toggle", "guessedtype": "function"}, "_beforeTriggerChange": {"description": "Fires before the <a href=\"OverlayContext.html#config_trigger\">trigger</a>\nattribute change.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_beforeTriggerChange", "guessedtype": "function"}, "_stopTriggerEventPropagation": {"description": "Helper method to invoke event.stopPropagation().", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_stopTriggerEventPropagation", "guessedtype": "function"}, "_invokeHideTaskOnInteraction": {"description": "Invoke the hide event when the OverlayContext looses the focus.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_invokeHideTaskOnInteraction", "guessedtype": "function"}, "updateCurrentNode": {"param": "{EventFacade} event", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Update the\n<a href=\"OverlayContext.html#config_currentNode\">currentNode</a> with the\n<a href=\"OverlayContext.html#config_align\">align</a> node or the\nevent.currentTarget and in last case with the first item of the\n<a href=\"OverlayContext.html#config_trigger\">trigger</a>.", "guessedname": "updateCurrentNode", "guessedtype": "function"}, "syncUI": {"protected": "", "description": "Refreshes the rendered UI, based on Widget State", "guessedname": "syncUI", "guessedtype": "function"}, "_afterHideOnChange": {"description": "Fires after the <a href=\"OverlayContext.html#config_hideOn\">hideOn</a>\nattribute change.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_afterHideOnChange", "guessedtype": "function"}, "_setShowDelay": {"return": {"type": "number", "description": ""}, "description": "Setter for the\n<a href=\"OverlayContext.html#config_showDelay\">showDelay</a>\nattribute.", "param": "{number} val", "protected": "", "params": [{"type": "number", "name": "val", "description": ""}], "guessedname": "_setShowDelay", "guessedtype": "function"}, "_afterShowOnChange": {"description": "Fires after the <a href=\"OverlayContext.html#config_showOn\">showOn</a>\nattribute change.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_afterShowOnChange", "guessedtype": "function"}, "_beforeHideOnChange": {"description": "Fires before the <a href=\"OverlayContext.html#config_hideOn\">hideOn</a>\nattribute change.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_beforeHideOnChange", "guessedtype": "function"}, "clearIntervals": {"description": "Clear the intervals to show or hide the OverlayContext. See\n<a href=\"OverlayContext.html#config_hideDelay\">hideDelay</a> and\n<a href=\"OverlayContext.html#config_showDelay\">showDelay</a>.", "guessedname": "clearIntervals", "guessedtype": "function"}}, "extends": "OverlayBase", "superclass": "OverlayBase", "file": "aui-overlay.js", "guessedtype": "property", "shortname": "OverlayContext", "properties": {"OverlayContext.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the OverlayContext.", "guessedname": "ATTRS", "guessedtype": "property"}, "OverlayContext.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}}, "description": "<p><img src=\"assets/images/aui-overlay-context/main.png\"/></p>\nA base class for OverlayContext, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Able to display an <a href=\"Overlay.html\">Overlay</a> at a specified corner of an element <a href=\"OverlayContext.html#config_trigger\">trigger</a></li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.OverlayContext({\nboundingBox: '#OverlayBoundingBox',\nhideOn: 'mouseleave',\nshowOn: 'mouseenter',\ntrigger: '.menu-trigger'\n}).render();\n</code></pre>\nCheck the list of <a href=\"OverlayContext.html#configattributes\">Configuration Attributes</a> available for\nOverlayContext."}, "DataSchema.Array": {"name": "DataSchema.Array", "namespace": "", "module": "dataschema", "guessedname": "LANG", "methods": {"apply": {"return": {"type": "Object", "description": "An Object with properties `results` and `meta`"}, "description": "Applies a schema to an array of data, returning a normalized object\nwith results in the `results` property. The `meta` property of the\nresponse object is present for consistency, but is assigned an empty\nobject.  If the input data is absent or not an array, an `error`\nproperty will be added.\nThe input array is expected to contain objects, arrays, or strings.\nIf _schema_ is not specified or _schema.resultFields_ is not an array,\n`response.results` will be assigned the input array unchanged.\nWhen a _schema_ is specified, the following will occur:\nIf the input array contains strings, they will be copied as-is into the\n`response.results` array.\nIf the input array contains arrays, `response.results` will contain an\narray of objects with key:value pairs assuming the fields in\n_schema.resultFields_ are ordered in accordance with the data array\nvalues.\nIf the input array contains objects, the identified\n_schema.resultFields_ will be used to extract a value from those\nobjects for the output result.\n_schema.resultFields_ field identifiers are objects with the following properties:\n`key`   : <strong>(required)</strong> The locator name (String)\n`parser`: A function or the name of a function on `Y.Parsers` used\nto convert the input value into a normalized type.  Parser\nfunctions are passed the value as input and are expected to\nreturn a value.\nIf no value parsing is needed, you can use strings as identifiers\ninstead of objects (see example below).", "param": "{Object} [schema] Schema to apply.  Supported configuration\nproperties are:", "static": "", "guessedname": "apply", "guessedtype": "function", "params": [{"type": "Object", "name": "[schema]", "description": " Schema to apply.  Supported configuration\nproperties are:"}, {"type": "Array", "name": "[schema.resultFields]", "description": " Field identifiers to\nlocate/assign values in the response records. See above for\ndetails."}, {"type": "Array", "name": "data", "description": " Array data."}], "example": "// Process array of arrays\nvar schema = { resultFields: [ 'fruit', 'color' ] },\ndata = [\n[ 'Banana', 'yellow' ],\n[ 'Orange', 'orange' ],\n[ 'Eggplant', 'purple' ]\n];\nvar response = Y.DataSchema.Array.apply(schema, data);\n// response.results[0] is { fruit: \"Banana\", color: \"yellow\" }\n// Process array of objects\ndata = [\n{ fruit: 'Banana', color: 'yellow', price: '1.96' },\n{ fruit: 'Orange', color: 'orange', price: '2.04' },\n{ fruit: 'Eggplant', color: 'purple', price: '4.31' }\n];\nresponse = Y.DataSchema.Array.apply(schema, data);\n// response.results[0] is { fruit: \"Banana\", color: \"yellow\" }\n// Use parsers\nschema.resultFields = [\n{\nkey: 'fruit',\nparser: function (val) { return val.toUpperCase(); }\n},\n{\nkey: 'price',\nparser: 'number' // Uses Y.Parsers.number\n}\n];\nresponse = Y.DataSchema.Array.apply(schema, data);\n// Note price was converted from a numeric string to a number\n// response.results[0] looks like { fruit: \"BANANA\", price: 1.96 }"}, "_parseResults": {"return": {"type": "Object", "description": "Parsed data object."}, "description": "Schema-parsed list of results from full data", "param": "fields {Array} Schema to parse against.", "protected": "", "static": "", "guessedname": "_parseResults", "guessedtype": "function", "params": [{"type": "Array", "name": "fields", "description": "  Schema to parse against."}, {"type": "Array", "name": "array_in", "description": "  Array to parse."}, {"type": "Object", "name": "data_out", "description": "  In-progress parsed data to update."}]}}, "static": "", "superclass": "DataSchema.Base", "file": "dataschema-array.js", "guessedtype": "property", "extends": "DataSchema.Base", "shortname": "DataSchema.Array", "description": "Provides a DataSchema implementation which can be used to work with data\nstored in arrays.\nSee the `apply` method below for usage."}, "VMLPieSlice": {"name": "VMLPieSlice", "configs": {"arc": {"type": "Number", "description": "Arc of the slice.", "guessedname": "arc", "guessedtype": "property"}, "radius": {"type": "Number", "description": "Radius of the circle in which the pie slice is drawn", "guessedname": "radius", "guessedtype": "property"}, "startAngle": {"type": "Number", "description": "Starting angle in relation to a circle in which to begin the pie slice drawing.", "guessedname": "startAngle", "guessedtype": "property"}}, "constructors": [{"description": "Draws pie slices"}], "namespace": "", "module": "graphics", "guessedname": "VMLPieSlice", "methods": {"_updateHandler": {"private": "", "description": "Change event listener", "guessedname": "_draw", "guessedtype": "function"}}, "file": "graphics-vml-debug.js", "guessedtype": "function", "shortname": "VMLPieSlice", "properties": {"_type": {"guessedname": "_type", "type": "String", "description": "Indicates the type of shape", "private": "", "guessedtype": "property"}}, "description": "Draws pie slices"}, "WidgetPositionConstrain": {"name": "WidgetPositionConstrain", "namespace": "", "module": "widget-position-constrain", "events": {"preventOverlapChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "preventOverlapChange", "description": "Fires when the value for the configuration attribute 'preventOverlap' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "constrainChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "constrainChange", "description": "Fires when the value for the configuration attribute 'constrain' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "configs": {"preventOverlap": {"type": "boolean", "description": "If set to true, and WidgetPositionAlign is also added to the Widget, \nconstrained positioning will attempt to prevent the widget's bounding box from overlapping \nthe element to which it has been aligned, by flipping the orientation of the alignment\nfor corner based alignments", "guessedname": "preventOverlap", "guessedtype": "property"}, "constrain": {"default": "null", "type": "boolean | Node", "description": "The node to constrain the widget's bounding box to, when setting xy. Can also be\nset to true, to constrain to the viewport.", "guessedname": "constrain", "guessedtype": "property"}}, "methods": {"_bindUIPosConstrained": {"protected": "", "description": "Binds event listeners responsible for updating the UI state in response to \nWidget constrained positioning related state changes.\n<p>\nThis method is invoked after bindUI is invoked for the Widget class\nusing YUI's aop infrastructure.\n</p>", "guessedname": "_bindUIPosConstrained", "guessedtype": "function"}, "_constrainOnXYChange": {"description": "The on change listener for the \"xy\" attribute. Modifies the event facade's\nnewVal property with the constrained XY value.", "param": "{EventFacade} e The event facade for the attribute change", "protected": "", "params": [{"type": "EventFacade", "name": "e", "description": " The event facade for the attribute change"}], "guessedname": "_constrainOnXYChange", "guessedtype": "function"}, "_afterConstrainChange": {"description": "After change listener for the \"constrain\" attribute, responsible\nfor updating the UI, in response to attribute changes.", "param": "{EventFacade} e The event facade", "protected": "", "params": [{"type": "EventFacade", "name": "e", "description": " The event facade"}], "guessedname": "_afterConstrainChange", "guessedtype": "function"}, "enable or disable constraints listeners": {"description": "Updates the UI if enabling constraints, and sets up the xyChange event listeners\nto constrain whenever the widget is moved. Disabling constraints removes the listeners.", "param": "{boolean} enable Enable or disable constraints", "params": [{"type": "boolean", "name": "enable", "description": " Enable or disable constraints"}], "private": "", "guessedname": "_enableConstraints", "guessedtype": "function"}, "_getRegion": {"description": "Utility method to normalize region retrieval from a node instance, \nor the viewport, if no node is provided.", "param": "{Node} node Optional.", "params": [{"type": "Node", "name": "node", "description": " Optional."}], "private": "", "guessedname": "_getRegion", "guessedtype": "function"}, "_setConstrain": {"description": "The setter implementation for the \"constrain\" attribute.", "param": "{Node | boolean} val The attribute value", "protected": "", "params": [{"type": "Node | boolean", "name": "val", "description": " The attribute value"}], "guessedname": "_setConstrain", "guessedtype": "function"}, "constrain": {"param": "{Array} xy Optional. The xy values to constrain", "params": [{"type": "Array", "name": "xy", "description": " Optional. The xy values to constrain"}, {"type": "Node | boolean", "name": "node", "description": " Optional. The node to constrain to, or true for the viewport"}], "description": "Constrains the widget's bounding box to a node (or the viewport). If xy or node are not \npassed in, the current position and the value of \"constrain\" will be used respectively.\nThe widget's position will be changed to the constrained position.", "guessedname": "constrain", "guessedtype": "function"}, "_constrain": {"return": {"type": "Number", "description": "The constrained value"}, "description": "The method which performs the actual constrain calculations for a given axis (\"x\" or \"y\") based\non the regions provided.", "param": "{Number} val The value to constrain", "protected": "", "params": [{"type": "Number", "name": "val", "description": " The value to constrain"}, {"type": "String", "name": "axis", "description": " The axis to use for constrainment"}, {"type": "Region", "name": "nodeRegion", "description": " The region of the node to constrain"}, {"type": "Region", "name": "constrainingRegion", "description": " The region of the node (or viewport) to constrain to"}], "guessedname": "_constrain", "guessedtype": "function"}, "getConstrainedXY": {"return": {"type": "Array", "description": "The constrained xy values"}, "description": "Calculates the constrained positions for the XY positions provided, using\nthe provided node argument is passed in. If no node value is passed in, the value of \nthe \"constrain\" attribute is used.", "param": "{Array} xy The xy values to constrain", "params": [{"type": "Array", "name": "xy", "description": " The xy values to constrain"}, {"type": "Node | boolean", "name": "node", "description": " Optional. The node to constrain to, or true for the viewport"}], "guessedname": "getConstrainedXY", "guessedtype": "function"}, "_preventOverlap": {"return": {"type": "Number", "description": "The constrained value"}, "description": "The method which performs the preventOverlap calculations for a given axis (\"x\" or \"y\") based\non the value and regions provided.", "param": "{Number} val The value being constrain", "protected": "", "params": [{"type": "Number", "name": "val", "description": " The value being constrain"}, {"type": "String", "name": "axis", "description": " The axis to being constrained"}, {"type": "Region", "name": "nodeRegion", "description": " The region of the node being constrained"}, {"type": "Region", "name": "constrainingRegion", "description": " The region of the node (or viewport) we need to constrain to"}], "guessedname": "_preventOverlap", "guessedtype": "function"}}, "param": "{Object} User configuration object", "file": "widget-position-constrain.js", "shortname": "WidgetPositionConstrain", "properties": {"_PREVENT_OVERLAP": {"description": "The set of positions for which to prevent\noverlap.", "protected": "", "static": "", "guessedname": "PREVENT_OVERLAP_MAP", "guessedtype": "property", "type": "Object"}, "ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute \nconfiguration introduced by WidgetPositionConstrain.", "guessedname": "ATTRS", "guessedtype": "property"}}, "description": "A widget extension, which can be used to add constrained xy positioning support to the base Widget class,\nthrough the <a href=\"Base.html#method_build\">Base.build</a> method. This extension requires that \nthe WidgetPosition extension be added to the Widget (before WidgetPositionConstrain, if part of the same \nextension list passed to Base.build)."}, "Lang": {"name": "Lang", "namespace": "", "module": "yui", "guessedname": "L", "methods": {"isArray": {"return": {"type": "boolean", "description": "true if o is an array."}, "description": "Determines whether or not the provided item is an array.\nReturns `false` for array-like collections such as the function `arguments`\ncollection or `HTMLElement` collections. Use `Y.Array.test()` if you want to\ntest for an array-like collection.", "param": "o The object to test.", "static": "", "guessedname": "isArray", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " The object to test."}]}, "trim": {"return": {"type": "string", "description": "the trimmed string."}, "description": "Returns a string without any leading or trailing whitespace.  If\nthe input is not a string, the input will be returned untouched.", "param": "s {string} the string to trim.", "static": "", "guessedname": "trim", "guessedtype": "function", "params": [{"type": "string", "name": "s", "description": "  the string to trim."}]}, "isDate": {"return": {"type": "boolean", "description": "true if o is a date."}, "description": "Determines whether or not the supplied item is a date instance.", "param": "o The object to test.", "static": "", "guessedname": "isDate", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " The object to test."}]}, "isString": {"return": {"type": "boolean", "description": "true if o is a string."}, "description": "Determines whether or not the provided item is a string.", "param": "o The object to test.", "static": "", "guessedname": "isString", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " The object to test."}]}, "isBoolean": {"return": {"type": "boolean", "description": "true if o is a boolean."}, "description": "Determines whether or not the provided item is a boolean.", "param": "o The object to test.", "static": "", "guessedname": "isBoolean", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " The object to test."}]}, "trimLeft": {"return": {"type": "string", "description": "the trimmed string."}, "description": "Returns a string without any leading whitespace.", "param": "s {string} the string to trim.", "static": "", "guessedname": "trimLeft", "guessedtype": "function", "params": [{"type": "string", "name": "s", "description": "  the string to trim."}]}, "sub": {"return": {"type": "string", "description": "the substitute result."}, "description": "Lightweight version of <code>Y.substitute</code>. Uses the same template\nstructure as <code>Y.substitute</code>, but doesn't support recursion,\nauto-object coersion, or formats.", "since": "3.2.0", "param": "{string} s String to be modified.", "static": "", "guessedname": "sub", "guessedtype": "function", "params": [{"type": "string", "name": "s", "description": " String to be modified."}, {"type": "object", "name": "o", "description": " Object containing replacement values."}]}, "trimRight": {"return": {"type": "string", "description": "the trimmed string."}, "description": "Returns a string without any trailing whitespace.", "param": "s {string} the string to trim.", "static": "", "guessedname": "trimRight", "guessedtype": "function", "params": [{"type": "string", "name": "s", "description": "  the string to trim."}]}, "isNull": {"return": {"type": "boolean", "description": "true if o is null."}, "description": "Determines whether or not the provided item is null.", "param": "o The object to test.", "static": "", "guessedname": "isNull", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " The object to test."}]}, "isValue": {"return": {"type": "boolean", "description": "true if it is not null/undefined/NaN || false."}, "description": "A convenience method for detecting a legitimate non-null value.\nReturns false for null/undefined/NaN, true for other values,\nincluding 0/false/''", "param": "o The item to test.", "static": "", "guessedname": "isValue", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " The item to test."}]}, "now": {"return": {"type": "Number", "description": "Current time in milliseconds."}, "description": "Returns the current time in milliseconds.", "since": "3.3.0", "static": "", "guessedname": "now", "guessedtype": "function"}, "isFunction": {"return": {"type": "boolean", "description": "true if o is a function."}, "description": "<p>\nDetermines whether or not the provided item is a function.\nNote: Internet Explorer thinks certain functions are objects:\n</p>\n<pre>\nvar obj = document.createElement(\"object\");\nY.Lang.isFunction(obj.getAttribute) // reports false in IE\n&nbsp;\nvar input = document.createElement(\"input\"); // append to body\nY.Lang.isFunction(input.focus) // reports false in IE\n</pre>\n<p>\nYou will have to implement additional tests if these functions\nmatter to you.\n</p>", "param": "o The object to test.", "static": "", "guessedname": "isFunction", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " The object to test."}]}, "isNumber": {"return": {"type": "boolean", "description": "true if o is a number."}, "description": "Determines whether or not the provided item is a legal number.", "param": "o The object to test.", "static": "", "guessedname": "isNumber", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " The object to test."}]}, "type": {"return": {"type": "string", "description": "the detected type."}, "description": "<p>\nReturns a string representing the type of the item passed in.\n</p>\n<p>\nKnown issues:\n</p>\n<ul>\n<li>\n<code>typeof HTMLElementCollection</code> returns function in Safari, but\n<code>Y.type()</code> reports object, which could be a good thing --\nbut it actually caused the logic in <code>Y.Lang.isObject</code> to fail.\n</li>\n</ul>", "param": "o the item to test.", "static": "", "guessedname": "type", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " the item to test."}]}, "isObject": {"return": {"type": "boolean", "description": "true if o is an object."}, "description": "Determines whether or not the provided item is of type object\nor function. Note that arrays are also objects, so\n<code>Y.Lang.isObject([]) === true</code>.", "param": "o The object to test.", "see": "isPlainObject", "params": [{"type": "", "name": "o", "description": " The object to test."}, {"type": "boolean", "name": "failfn", "description": "  fail if the input is a function."}], "guessedname": "isObject", "guessedtype": "function", "static": ""}, "isUndefined": {"return": {"type": "boolean", "description": "true if o is undefined."}, "description": "Determines whether or not the provided item is undefined.", "param": "o The object to test.", "static": "", "guessedname": "isUndefined", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " The object to test."}]}}, "static": "", "file": "aui.js", "guessedtype": "property", "shortname": "Lang", "description": "Provides core language utilites and extensions used throughout YUI."}, "DD.Drag": {"name": "DD.Drag", "configs": {"node": {"type": "Node", "description": "Y.Node instance to use as the element to initiate a drag operation", "guessedname": "node", "guessedtype": "property"}, "activeHandle": {"type": "Node", "description": "This config option is set by Drag to inform you of which handle fired the drag event (in the case that there are several handles): default false.", "guessedname": "activeHandle", "guessedtype": "property"}, "dragNode": {"type": "Node", "description": "Y.Node instance to use as the draggable element, defaults to node", "guessedname": "dragNode", "guessedtype": "property"}, "move": {"type": "Boolean", "description": "If this is false, the drag element will not move with the cursor: default true. Can be used to \"resize\" the element.", "guessedname": "move", "guessedtype": "property"}, "target": {"type": "Boolean", "description": "This attribute only works if the dd-drop module has been loaded. It will make this node a drop target as well as draggable.", "guessedname": "target", "guessedtype": "property"}, "startCentered": {"type": "Boolean", "description": "Center the dragNode to the mouse position on drag:start: default false", "guessedname": "startCentered", "guessedtype": "property"}, "offsetNode": {"type": "Boolean", "description": "Offset the drag element by the difference in cursor position: default true", "guessedname": "offsetNode", "guessedtype": "property"}, "handles": {"type": "Array", "description": "Array of valid handles to add. Adding something here will set all handles, even if previously added with addHandle", "guessedname": "handles", "guessedtype": "property"}, "haltDown": {"type": "Boolean", "description": "Should the mousedown event be halted. Default: true", "guessedname": "haltDown", "guessedtype": "property"}, "clickPixelThresh": {"type": "Number", "description": "The number of pixels to move to start a drag operation, default is 3.", "guessedname": "clickPixelThresh", "guessedtype": "property"}, "bubbles": {"deprecated": "", "type": "Object", "description": "Controls the default bubble parent for this Drag instance. Default: Y.DD.DDM. Set to false to disable bubbling. Use bubbleTargets in config", "guessedname": "bubbles", "guessedtype": "property"}, "groups": {"type": "Array", "description": "Array of groups to add this drag into.", "guessedname": "groups", "guessedtype": "property"}, "lock": {"type": "Boolean", "description": "Set to lock this drag element so that it can't be dragged: default false.", "guessedname": "lock", "guessedtype": "property"}, "dragMode": {"type": "String", "description": "This attribute only works if the dd-drop module is active. It will set the dragMode (point, intersect, strict) of this Drag instance.", "guessedname": "dragMode", "guessedtype": "property"}, "useShim": {"type": "Boolean", "description": "Use the protective shim on all drag operations: default true. Only works with dd-ddm, not dd-ddm-base.", "guessedname": "useShim", "guessedtype": "property"}, "dragging": {"type": "Boolean", "description": "This attribute is not meant to be used by the implementor, it is meant to be used as an Event tracker so you can listen for it to change.", "guessedname": "dragging", "guessedtype": "property"}, "data": {"type": "Mixed", "description": "A payload holder to store arbitrary data about this drag object, can be used to store any value.", "guessedname": "data", "guessedtype": "property"}, "primaryButtonOnly": {"type": "Boolean", "description": "By default a drag operation will only begin if the mousedown occurred with the primary mouse button. Setting this to false will allow for all mousedown events to trigger a drag.", "guessedname": "primaryButtonOnly", "guessedtype": "property"}, "clickTimeThresh": {"type": "Number", "description": "The number of milliseconds a mousedown has to pass to start a drag operation, default is 1000.", "guessedname": "clickTimeThresh", "guessedtype": "property"}}, "constructors": [{"description": "Provides the ability to drag a Node."}], "namespace": "DD", "module": "dd", "properties": {"startXY": {"type": "{Array}", "description": "The initial mouse position", "guessedname": "startXY", "guessedtype": "property"}, "START_EVENT": {"static": "", "description": "This property defaults to \"mousedown\", but when drag-gestures is loaded, it is changed to \"gesturemovestart\"", "guessedname": "START_EVENT", "guessedtype": "property"}, "_fromTimeout": {"guessedname": "_fromTimeout", "type": "{Boolean}", "description": "Flag to determine if the drag operation came from a timeout", "private": "", "guessedtype": "property"}, "_handles": {"guessedname": "_handles", "type": "{Object}", "description": "A private hash of the valid drag handles", "private": "", "guessedtype": "property"}, "_ieSelectBack": {"private": "", "description": "We will hold a copy of the current \"onselectstart\" method on this property, and reset it after we are done using it.", "guessedname": "_ieSelectBack", "guessedtype": "property"}, "_invalidsDefault": {"guessedname": "_invalidsDefault", "type": "{Object}", "description": "A private hash of the default invalid selector strings: {'textarea': true, 'input': true, 'a': true, 'button': true, 'select': true}", "private": "", "guessedtype": "property"}, "lastXY": {"type": "{Array}", "description": "The position of the element as it's moving (for offset calculations)", "guessedname": "lastXY", "guessedtype": "property"}, "_groups": {"guessedname": "_groups", "type": "{Array}", "description": "Storage Array for the groups this drag belongs to.", "private": "", "guessedtype": "property"}, "_clickTimeout": {"guessedname": "_clickTimeout", "type": "{Boolean}", "description": "Holder for the setTimeout call", "private": "", "guessedtype": "property"}, "_ev_md": {"guessedname": "_ev_md", "type": "{EventFacade}", "description": "A private reference to the mousedown DOM event", "private": "", "guessedtype": "property"}, "_bubbleTargets": {"private": "", "description": "The default bubbleTarget for this object. Default: Y.DD.DDM", "guessedname": "_bubbleTargets", "guessedtype": "property"}, "_startTime": {"guessedname": "_startTime", "type": "Date", "description": "The getTime of the mousedown event. Not used, just here in case someone wants/needs to use it.", "private": "", "guessedtype": "property"}, "_endTime": {"guessedname": "_endTime", "type": "Date", "description": "The getTime of the mouseup event. Not used, just here in case someone wants/needs to use it.", "private": "", "guessedtype": "property"}, "_dragThreshMet": {"guessedname": "_dragThreshMet", "type": "{Boolean}", "description": "Private flag to see if the drag threshhold was met", "private": "", "guessedtype": "property"}, "actXY": {"type": "{Array}", "description": "The xy that the node will be set to. Changing this will alter the position as it's dragged.", "guessedname": "actXY", "guessedtype": "property"}, "realXY": {"type": "{Array}", "description": "The real xy position of the node.", "guessedname": "realXY", "guessedtype": "property"}, "deltaXY": {"type": "{Array}", "description": "The offset of the mouse position to the element's position", "guessedname": "deltaXY", "guessedtype": "property"}, "_invalids": {"guessedname": "_invalids", "type": "{Object}", "description": "A private hash of the invalid selector strings", "private": "", "guessedtype": "property"}, "nodeXY": {"type": "{Array}", "description": "The initial element position", "guessedname": "nodeXY", "guessedtype": "property"}, "target": {"type": "{Object}", "description": "This will be a reference to the Drop instance associated with this drag if the target: true config attribute is set..", "guessedname": "target", "guessedtype": "property"}, "mouseXY": {"type": "{Array}", "description": "The XY coords of the mousemove", "guessedname": "mouseXY", "guessedtype": "property"}, "region": {"type": "Object", "description": "A region object associated with this drag, used for checking regions while dragging.", "guessedname": "region", "guessedtype": "property"}}, "guessedname": "DDM", "methods": {"addToGroup": {"return": {"type": "Self", "description": ""}, "description": "Add this Drag instance to a group, this should be used for on-the-fly group additions.", "chainable": "", "param": "{String} g The group to add this Drag Instance to.", "params": [{"type": "String", "name": "g", "description": " The group to add this Drag Instance to."}], "guessedname": "addToGroup", "guessedtype": "function"}, "_setStartPosition": {"description": "Sets the current position of the Element and calculates the offset", "param": "{Array} xy The XY coords to set the position to.", "params": [{"type": "Array", "name": "xy", "description": " The XY coords to set the position to."}], "private": "", "guessedname": "_setStartPosition", "guessedtype": "function"}, "_fixDragStart": {"description": "The function we use as the ondragstart handler when we start a drag in Internet Explorer. This keeps IE from blowing up on images as drag handles.", "private": "", "guessedname": "_fixDragStart", "guessedtype": "function"}, "_defDragFn": {"description": "Default function for drag:drag. Fired from _moveNode.", "param": "{EventFacade} ev The drag:drag event", "params": [{"type": "EventFacade", "name": "ev", "description": " The drag:drag event"}], "private": "", "guessedname": "_defDragFn", "guessedtype": "function"}, "stopDrag": {"chainable": "", "return": {"type": "Self", "description": ""}, "description": "Method will forcefully stop a drag operation. For example calling this from inside an ESC keypress handler will stop this drag.", "guessedname": "stopDrag", "guessedtype": "function"}, "_move": {"description": "Fired from DragDropMgr (DDM) on mousemove.", "param": "{EventFacade} ev The mousemove DOM event", "params": [{"type": "EventFacade", "name": "ev", "description": " The mousemove DOM event"}], "private": "", "guessedname": "_move", "guessedtype": "function"}, "validClick": {"return": {"type": "Boolean", "description": ""}, "description": "Method first checks to see if we have handles, if so it validates the click against the handle. Then if it finds a valid handle, it checks it against the invalid handles list. Returns true if a good handle was used, false otherwise.", "param": "{EventFacade}", "params": [], "guessedname": "validClick", "guessedtype": "function"}, "removeInvalid": {"return": {"type": "Self", "description": ""}, "description": "Remove an invalid handle added by addInvalid", "chainable": "", "param": "{String} str The invalid handle to remove from the internal list.", "params": [{"type": "String", "name": "str", "description": " The invalid handle to remove from the internal list."}], "guessedname": "removeInvalid", "guessedtype": "function"}, "addHandle": {"return": {"type": "Self", "description": ""}, "description": "Add a handle to a drag element. Drag only initiates when a mousedown happens on this element.", "chainable": "", "param": "{String} str The selector to test for a valid handle. Must be a child of the element.", "params": [{"type": "String", "name": "str", "description": " The selector to test for a valid handle. Must be a child of the element."}], "guessedname": "addHandle", "guessedtype": "function"}, "initializer": {"description": "Internal init handler", "private": "", "guessedname": "initializer", "guessedtype": "function"}, "removeHandle": {"return": {"type": "Self", "description": ""}, "description": "Remove a Selector added by addHandle", "chainable": "", "param": "{String} str The selector for the handle to be removed.", "params": [{"type": "String", "name": "str", "description": " The selector for the handle to be removed."}], "guessedname": "removeHandle", "guessedtype": "function"}, "_handleMouseDownEvent": {"description": "Handler for the mousedown DOM event", "param": "{EventFacade}", "params": [], "private": "", "guessedname": "_handleMouseDownEvent", "guessedtype": "function"}, "end": {"chainable": "", "return": {"type": "Self", "description": ""}, "description": "Ends the drag operation", "guessedname": "end", "guessedtype": "function"}, "_moveNode": {"description": "This method performs the actual element move.", "private": "", "guessedname": "_moveNode", "guessedtype": "function"}, "destructor": {"description": "Lifecycle destructor, unreg the drag from the DDM and remove listeners", "private": "", "guessedname": "destructor", "guessedtype": "function"}, "start": {"chainable": "", "return": {"type": "Self", "description": ""}, "description": "Starts the drag operation", "guessedname": "start", "guessedtype": "function"}, "_ieSelectFix": {"description": "The function we use as the onselectstart handler when we start a drag in Internet Explorer", "private": "", "guessedname": "_ieSelectFix", "guessedtype": "function"}, "_defAlignFn": {"description": "Calculates the offsets and set's the XY that the element will move to.", "param": "{EventFacade} e The drag:align event.", "params": [{"type": "EventFacade", "name": "e", "description": " The drag:align event."}], "private": "", "guessedname": "_defAlignFn", "guessedtype": "function"}, "_createEvents": {"description": "This method creates all the events for this Event Target and publishes them so we get Event Bubbling.", "private": "", "guessedname": "_createEvents", "guessedtype": "function"}, "_timeoutCheck": {"description": "The method passed to setTimeout to determine if the clickTimeThreshold was met.", "private": "", "guessedname": "_timeoutCheck", "guessedtype": "function"}, "removeFromGroup": {"return": {"type": "Self", "description": ""}, "description": "Remove this Drag instance from a group, this should be used for on-the-fly group removals.", "chainable": "", "param": "{String} g The group to remove this Drag Instance from.", "params": [{"type": "String", "name": "g", "description": " The group to remove this Drag Instance from."}], "guessedname": "removeFromGroup", "guessedtype": "function"}, "_fixIEMouseUp": {"description": "This method copies the _ieSelectFix property back to the onselectstart listner on the document.", "private": "", "guessedname": "_fixIEMouseUp", "guessedtype": "function"}, "_defEndFn": {"description": "Handler for fixing the selection in IE", "private": "", "guessedname": "_defEndFn", "guessedtype": "function"}, "_alignNode": {"description": "This method performs the alignment before the element move.", "param": "{Array} eXY The XY to move the element to, usually comes from the mousemove DOM event.", "params": [{"type": "Array", "name": "eXY", "description": " The XY to move the element to, usually comes from the mousemove DOM event."}], "private": "", "guessedname": "_alignNode", "guessedtype": "function"}, "_canDrag": {"return": {"type": "Boolean", "description": "True or false if the Object contains the methods needed to Drag"}, "description": "Checks the object for the methods needed to drag the object around. \nNormally this would be a node instance, but in the case of Graphics, it\nmay be an SVG node or something similar.", "private": "", "params": [{"type": "Object", "name": "n", "description": " The object to check"}], "param": "{Object} n The object to check", "guessedname": "_canDrag", "guessedtype": "function"}, "_prevEndFn": {"description": "Handler for preventing the drag:end event. It will reset the node back to it's start position", "private": "", "guessedname": "_prevEndFn", "guessedtype": "function"}, "_prep": {"description": "Attach event listners and add classname", "private": "", "guessedname": "_prep", "guessedtype": "function"}, "addInvalid": {"return": {"type": "Self", "description": ""}, "description": "Add a selector string to test the handle against. If the test passes the drag operation will not continue.", "chainable": "", "param": "{String} str The selector to test against to determine if this is an invalid drag handle.", "params": [{"type": "String", "name": "str", "description": " The selector to test against to determine if this is an invalid drag handle."}], "guessedname": "addInvalid", "guessedtype": "function"}, "_defMouseDownFn": {"description": "Handler for the mousedown DOM event", "param": "{EventFacade}", "params": [], "private": "", "guessedname": "_defMouseDownFn", "guessedtype": "function"}, "_handleMouseUp": {"description": "Handler for the mouseup DOM event", "param": "{EventFacade}", "params": [], "private": "", "guessedname": "_handleMouseUp", "guessedtype": "function"}, "_align": {"description": "Calculates the offsets and set's the XY that the element will move to.", "param": "{Array} xy The xy coords to align with.", "params": [{"type": "Array", "name": "xy", "description": " The xy coords to align with."}], "private": "", "guessedname": "_align", "guessedtype": "function"}, "_handleTarget": {"return": {"type": "Boolean/Object", "description": ""}, "description": "Attribute handler for the target config attribute.", "private": "", "params": [], "param": "{Boolean/Object}", "guessedname": "_handleTarget", "guessedtype": "function"}, "_unprep": {"description": "Detach event listeners and remove classname", "private": "", "guessedname": "_unprep", "guessedtype": "function"}, "_fixIEMouseDown": {"description": "This method copies the onselectstart listner on the document to the _ieSelectFix property", "private": "", "guessedname": "_fixIEMouseDown", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "dd.js", "guessedtype": "property", "shortname": "Drag", "events": {"clickPixelThreshChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "clickPixelThreshChange", "description": "Fires when the value for the configuration attribute 'clickPixelThresh' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "groupsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "groupsChange", "description": "Fires when the value for the configuration attribute 'groups' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "drag:afterMouseDown": {"description": "Fires after the mousedown event has been cleared.", "param": "{EventFacade} event An Event Facade object with the following specific property added:\n<dl><dt>ev</dt><dd>The original mousedown event.</dd></dl>", "params": [{"type": "EventFacade", "name": "event", "description": " An Event Facade object with the following specific property added:\n<dl><dt>ev</dt><dd>The original mousedown event.</dd></dl>"}], "guessedname": "EV_AFTER_MOUSE_DOWN", "guessedtype": "property", "bubbles": "DDM", "type": "{CustomEvent}"}, "bubblesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "bubblesChange", "description": "Fires when the value for the configuration attribute 'bubbles' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "offsetNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "offsetNodeChange", "description": "Fires when the value for the configuration attribute 'offsetNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "draggingChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "draggingChange", "description": "Fires when the value for the configuration attribute 'dragging' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "handlesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "handlesChange", "description": "Fires when the value for the configuration attribute 'handles' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "dataChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "dataChange", "description": "Fires when the value for the configuration attribute 'data' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "drag:removeInvalid": {"description": "Fires after an invalid selector is removed.", "param": "{EventFacade} event An Event Facade object with the following specific property added:\n<dl><dt>handle</dt><dd>The handle that was removed.</dd></dl>", "params": [{"type": "EventFacade", "name": "event", "description": " An Event Facade object with the following specific property added:\n<dl><dt>handle</dt><dd>The handle that was removed.</dd></dl>"}], "guessedname": "EV_REMOVE_INVALID", "guessedtype": "property", "bubbles": "DDM", "type": "{CustomEvent}"}, "dragModeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "dragModeChange", "description": "Fires when the value for the configuration attribute 'dragMode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "primaryButtonOnlyChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "primaryButtonOnlyChange", "description": "Fires when the value for the configuration attribute 'primaryButtonOnly' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "drag:mouseDown": {"description": "Handles the mousedown DOM event, checks to see if you have a valid handle then starts the drag timers.", "param": "{EventFacade} event An Event Facade object with the following specific property added:\n<dl><dt>ev</dt><dd>The original mousedown event.</dd></dl>", "params": [{"type": "EventFacade", "name": "event", "description": " An Event Facade object with the following specific property added:\n<dl><dt>ev</dt><dd>The original mousedown event.</dd></dl>"}], "guessedname": "EV_MOUSE_DOWN", "guessedtype": "property", "preventable": "_defMouseDownFn", "bubbles": "DDM", "type": "{CustomEvent}"}, "drag:align": {"description": "Fires when this node is aligned.", "param": "{EventFacade} event An Event Facade object with the following specific property added:\n<dl>\n<dt>pageX</dt><dd>The current node position X.</dd>\n<dt>pageY</dt><dd>The current node position Y.</dd>\n</dl>", "params": [{"type": "EventFacade", "name": "event", "description": " An Event Facade object with the following specific property added:\n<dl>\n<dt>pageX</dt><dd>The current node position X.</dd>\n<dt>pageY</dt><dd>The current node position Y.</dd>\n</dl>"}], "guessedname": "EV_ALIGN", "guessedtype": "property", "preventable": "_defAlignFn", "bubbles": "DDM", "type": "{CustomEvent}"}, "drag:addHandle": {"description": "Fires after a handle is added.", "param": "{EventFacade} event An Event Facade object with the following specific property added:\n<dl><dt>handle</dt><dd>The handle that was added.</dd></dl>", "params": [{"type": "EventFacade", "name": "event", "description": " An Event Facade object with the following specific property added:\n<dl><dt>handle</dt><dd>The handle that was added.</dd></dl>"}], "guessedname": "EV_ADD_HANDLE", "guessedtype": "property", "bubbles": "DDM", "type": "{CustomEvent}"}, "drag:removeHandle": {"description": "Fires after a handle is removed.", "param": "{EventFacade} event An Event Facade object with the following specific property added:\n<dl><dt>handle</dt><dd>The handle that was removed.</dd></dl>", "params": [{"type": "EventFacade", "name": "event", "description": " An Event Facade object with the following specific property added:\n<dl><dt>handle</dt><dd>The handle that was removed.</dd></dl>"}], "guessedname": "EV_REMOVE_HANDLE", "guessedtype": "property", "bubbles": "DDM", "type": "{CustomEvent}"}, "drag:mouseup": {"bubbles": "DDM", "type": "{CustomEvent}", "description": "Handles the mouseup DOM event, does nothing internally just fires."}, "drag:start": {"description": "Fires at the start of a drag operation.", "param": "{EventFacade} event An Event Facade object with the following specific property added:\n<dl>\n<dt>pageX</dt><dd>The original node position X.</dd>\n<dt>pageY</dt><dd>The original node position Y.</dd>\n<dt>startTime</dt><dd>The startTime of the event. getTime on the current Date object.</dd>\n</dl>", "params": [{"type": "EventFacade", "name": "event", "description": " An Event Facade object with the following specific property added:\n<dl>\n<dt>pageX</dt><dd>The original node position X.</dd>\n<dt>pageY</dt><dd>The original node position Y.</dd>\n<dt>startTime</dt><dd>The startTime of the event. getTime on the current Date object.</dd>\n</dl>"}], "guessedname": "EV_START", "guessedtype": "property", "bubbles": "DDM", "type": "{CustomEvent}"}, "useShimChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "useShimChange", "description": "Fires when the value for the configuration attribute 'useShim' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "clickTimeThreshChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "clickTimeThreshChange", "description": "Fires when the value for the configuration attribute 'clickTimeThresh' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "lockChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "lockChange", "description": "Fires when the value for the configuration attribute 'lock' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "haltDownChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "haltDownChange", "description": "Fires when the value for the configuration attribute 'haltDown' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "targetChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "targetChange", "description": "Fires when the value for the configuration attribute 'target' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "drag:enter": {"type": "{CustomEvent}", "bubbles": "DDM", "params": [{"type": "EventFacade", "name": "event", "description": " An Event Facade object with the following specific property added:\n<dl>\n<dt>drop</dt><dd>The drop object at the time of the event.</dd>\n<dt>drag</dt><dd>The drag object at the time of the event.</dd>\n</dl>"}], "description": "Fires when this node enters a Drop Target. (Fired from dd-drop)", "param": "{EventFacade} event An Event Facade object with the following specific property added:\n<dl>\n<dt>drop</dt><dd>The drop object at the time of the event.</dd>\n<dt>drag</dt><dd>The drag object at the time of the event.</dd>\n</dl>"}, "drag:addInvalid": {"description": "Fires after an invalid selector is added.", "param": "{EventFacade} event An Event Facade object with the following specific property added:\n<dl><dt>handle</dt><dd>The handle that was added.</dd></dl>", "params": [{"type": "EventFacade", "name": "event", "description": " An Event Facade object with the following specific property added:\n<dl><dt>handle</dt><dd>The handle that was added.</dd></dl>"}], "guessedname": "EV_ADD_INVALID", "guessedtype": "property", "bubbles": "DDM", "type": "{CustomEvent}"}, "drag:drag": {"description": "Fires every mousemove during a drag operation.", "param": "{EventFacade} event An Event Facade object with the following specific property added:\n<dl>\n<dt>pageX</dt><dd>The current node position X.</dd>\n<dt>pageY</dt><dd>The current node position Y.</dd>\n<dt>scroll</dt><dd>Should a scroll action occur.</dd>\n<dt>info</dt><dd>Object hash containing calculated XY arrays: start, xy, delta, offset</dd>\n</dl>", "params": [{"type": "EventFacade", "name": "event", "description": " An Event Facade object with the following specific property added:\n<dl>\n<dt>pageX</dt><dd>The current node position X.</dd>\n<dt>pageY</dt><dd>The current node position Y.</dd>\n<dt>scroll</dt><dd>Should a scroll action occur.</dd>\n<dt>info</dt><dd>Object hash containing calculated XY arrays: start, xy, delta, offset</dd>\n</dl>"}], "guessedname": "EV_DRAG", "guessedtype": "property", "bubbles": "DDM", "type": "{CustomEvent}"}, "activeHandleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "activeHandleChange", "description": "Fires when the value for the configuration attribute 'activeHandle' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "drag:end": {"description": "Fires at the end of a drag operation.", "param": "{EventFacade} event An Event Facade object with the following specific property added:\n<dl>\n<dt>pageX</dt><dd>The current node position X.</dd>\n<dt>pageY</dt><dd>The current node position Y.</dd>\n<dt>startTime</dt><dd>The startTime of the event, from the start event.</dd>\n<dt>endTime</dt><dd>The endTime of the event. getTime on the current Date object.</dd>\n</dl>", "params": [{"type": "EventFacade", "name": "event", "description": " An Event Facade object with the following specific property added:\n<dl>\n<dt>pageX</dt><dd>The current node position X.</dd>\n<dt>pageY</dt><dd>The current node position Y.</dd>\n<dt>startTime</dt><dd>The startTime of the event, from the start event.</dd>\n<dt>endTime</dt><dd>The endTime of the event. getTime on the current Date object.</dd>\n</dl>"}], "guessedname": "EV_END", "guessedtype": "property", "bubbles": "DDM", "type": "{CustomEvent}"}, "nodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "nodeChange", "description": "Fires when the value for the configuration attribute 'node' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "dragNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "dragNodeChange", "description": "Fires when the value for the configuration attribute 'dragNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "drag:drophit": {"type": "{CustomEvent}", "bubbles": "DDM", "params": [{"type": "EventFacade", "name": "event", "description": " An Event Facade object with the following specific property added:\n<dl>\n<dt>drop</dt><dd>The best guess on what was dropped on.</dd>\n<dt>drag</dt><dd>The drag object at the time of the event.</dd>\n<dt>others</dt><dd>An array of all the other drop targets that was dropped on.</dd>\n</dl>"}], "description": "Fires when this node is dropped on a valid Drop Target. (Fired from dd-ddm-drop)", "param": "{EventFacade} event An Event Facade object with the following specific property added:\n<dl>\n<dt>drop</dt><dd>The best guess on what was dropped on.</dd>\n<dt>drag</dt><dd>The drag object at the time of the event.</dd>\n<dt>others</dt><dd>An array of all the other drop targets that was dropped on.</dd>\n</dl>"}, "drag:dropmiss": {"description": "Fires when this node is dropped on an invalid Drop Target. (Fired from dd-ddm-drop)", "param": "{EventFacade} event An Event Facade object with the following specific property added:\n<dl>\n<dt>pageX</dt><dd>The current node position X.</dd>\n<dt>pageY</dt><dd>The current node position Y.</dd>\n</dl>", "params": [{"type": "EventFacade", "name": "event", "description": " An Event Facade object with the following specific property added:\n<dl>\n<dt>pageX</dt><dd>The current node position X.</dd>\n<dt>pageY</dt><dd>The current node position Y.</dd>\n</dl>"}], "guessedname": "Drag", "guessedtype": "function", "bubbles": "DDM", "type": "{CustomEvent}"}, "drag:over": {"type": "{CustomEvent}", "bubbles": "DDM", "params": [{"type": "EventFacade", "name": "event", "description": " An Event Facade object with the following specific property added:\n<dl>\n<dt>drop</dt><dd>The drop object at the time of the event.</dd>\n<dt>drag</dt><dd>The drag object at the time of the event.</dd>\n</dl>"}], "description": "Fires when this node is over a Drop Target. (Fired from dd-drop)", "param": "{EventFacade} event An Event Facade object with the following specific property added:\n<dl>\n<dt>drop</dt><dd>The drop object at the time of the event.</dd>\n<dt>drag</dt><dd>The drag object at the time of the event.</dd>\n</dl>"}, "drag:exit": {"type": "{CustomEvent}", "bubbles": "DDM", "params": [{"type": "EventFacade", "name": "event", "description": " An Event Facade object with the following specific property added:\n<dl>\n<dt>drop</dt><dd>The drop object at the time of the event.</dd>\n</dl>"}], "description": "Fires when this node exits a Drop Target. (Fired from dd-drop)", "param": "{EventFacade} event An Event Facade object with the following specific property added:\n<dl>\n<dt>drop</dt><dd>The drop object at the time of the event.</dd>\n</dl>"}, "moveChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "moveChange", "description": "Fires when the value for the configuration attribute 'move' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "startCenteredChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "startCenteredChange", "description": "Fires when the value for the configuration attribute 'startCentered' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "description": "Provides the ability to drag a Node."}, "TreeNode": {"name": "TreeNode", "configs": {"prevSibling": {"default": "null", "type": "TreeNode", "description": "Previous sibling of the current TreeNode.", "guessedname": "prevSibling", "guessedtype": "property"}, "ownerTree": {"default": "null", "type": "TreeView", "description": "TreeView which contains the current TreeNode.", "guessedname": "ownerTree", "guessedtype": "property"}, "leaf": {"default": "true", "type": "boolean", "description": "Whether the TreeNode could have children or not (i.e. if any\nchildren is present the TreeNode is a leaf).", "guessedname": "leaf", "guessedtype": "property"}, "hitAreaEl": {"default": "Generated DOM element.", "type": "Node | String", "description": "Hitarea element.", "guessedname": "hitAreaEl", "guessedtype": "property"}, "alwaysShowHitArea": {"default": "true", "type": "boolean", "description": "Always show the hitarea icon.", "guessedname": "alwaysShowHitArea", "guessedtype": "property"}, "expanded": {"default": "false", "type": "boolean", "description": "Whether the TreeNode is expanded by default.", "guessedname": "expanded", "guessedtype": "property"}, "nextSibling": {"default": "null", "type": "TreeNode", "description": "Next sibling of the current TreeNode.", "guessedname": "nextSibling", "guessedtype": "property"}, "parentNode": {"default": "null", "type": "TreeNode", "description": "Parent node of the current TreeNode.", "guessedname": "parentNode", "guessedtype": "property"}, "label": {"default": "''", "type": "String", "description": "Label of the TreeNode.", "guessedname": "label", "guessedtype": "property"}, "draggable": {"default": "true", "type": "boolean", "description": "If true the TreeNode is draggable.", "guessedname": "draggable", "guessedtype": "property"}, "iconEl": {"type": "Node | String", "description": "Icon element.", "guessedname": "iconEl", "guessedtype": "property"}, "labelEl": {"default": "Generated DOM element.", "type": "Node | String", "description": "Label element to house the <code>label</code> attribute.", "guessedname": "labelEl", "guessedtype": "property"}, "id": {"default": "null", "type": "String", "description": "Id of the TreeNode.", "guessedname": "id", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "A base class for TreeNode, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>The node for the TreeView component</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.TreeNode({\nboundingBox: ''\n}).render();\n</code></pre>\nCheck the list of <a href=\"TreeNode.html#configattributes\">Configuration Attributes</a> available for\nTreeNode."}], "namespace": "", "module": "aui-tree", "events": {"iconElChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "iconElChange", "description": "Fires when the value for the configuration attribute 'iconEl' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "hitAreaElChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "hitAreaElChange", "description": "Fires when the value for the configuration attribute 'hitAreaEl' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "prevSiblingChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "prevSiblingChange", "description": "Fires when the value for the configuration attribute 'prevSibling' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "labelElChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "labelElChange", "description": "Fires when the value for the configuration attribute 'labelEl' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "ownerTreeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "ownerTreeChange", "description": "Fires when the value for the configuration attribute 'ownerTree' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "leafChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "leafChange", "description": "Fires when the value for the configuration attribute 'leaf' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "parentNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "parentNodeChange", "description": "Fires when the value for the configuration attribute 'parentNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "labelChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "labelChange", "description": "Fires when the value for the configuration attribute 'label' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "nextSiblingChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "nextSiblingChange", "description": "Fires when the value for the configuration attribute 'nextSibling' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "draggableChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "draggableChange", "description": "Fires when the value for the configuration attribute 'draggable' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "alwaysShowHitAreaChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "alwaysShowHitAreaChange", "description": "Fires when the value for the configuration attribute 'alwaysShowHitArea' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "expandedChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "expandedChange", "description": "Fires when the value for the configuration attribute 'expanded' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "idChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "idChange", "description": "Fires when the value for the configuration attribute 'id' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "TreeNode", "methods": {"_syncTreeNodeBBId": {"description": "Set the <code>boundingBox</code> id.", "param": "{String} id", "protected": "", "params": [{"type": "String", "name": "id", "description": ""}], "guessedname": "_syncTreeNodeBBId", "guessedtype": "function"}, "_afterSetChildren": {"description": "Fires after set children.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_afterSetChildren", "guessedtype": "function"}, "getDepth": {"return": {"type": "Number", "description": ""}, "description": "Get the depth of the current TreeNode.", "guessedname": "getDepth", "guessedtype": "function"}, "_createNodeContainer": {"protected": "", "return": {"type": "Node", "description": ""}, "description": "Render the node container.", "guessedname": "_createNodeContainer", "guessedtype": "function"}, "syncUI": {"protected": "", "description": "Sync the TreeNode UI. Lifecycle.", "guessedname": "syncUI", "guessedtype": "function"}, "_syncHitArea": {"description": "Sync the hitarea UI.", "param": "{Array} children", "protected": "", "params": [{"type": "Array", "name": "children", "description": ""}], "guessedname": "_syncHitArea", "guessedtype": "function"}, "contains": {"return": {"type": "boolean", "description": ""}, "description": "Check if the current TreeNode contains the passed <code>node</code>.", "param": "{TreeNode} node", "params": [{"type": "TreeNode", "name": "node", "description": ""}], "guessedname": "contains", "guessedtype": "function"}, "isLeaf": {"return": {"type": "boolean", "description": ""}, "description": "Whether the current TreeNode is a leaf or not.", "guessedname": "isLeaf", "guessedtype": "function"}, "initializer": {"protected": "", "description": "Construction logic executed during TreeNode instantiation. Lifecycle.", "guessedname": "initializer", "guessedtype": "function"}, "_renderUI": {"protected": "", "description": "Create the DOM structure for the TreeNode. Lifecycle. Overloading\nprivate _renderUI, don't call this._renderBox method avoid render node on\nthe body.", "guessedname": "_renderUI", "guessedtype": "function"}, "isSelected": {"return": {"type": "boolean", "description": ""}, "description": "Whether the current TreeNode is selected or not.", "guessedname": "isSelected", "guessedtype": "function"}, "toggle": {"description": "Toggle the current TreeNode, <code>collapsed</code> or <code>expanded</code>.", "guessedname": "toggle", "guessedtype": "function"}, "_renderContentBox": {"protected": "", "return": {"type": "Node", "description": ""}, "description": "Render the <code>contentBox</code> node.", "guessedname": "_renderContentBox", "guessedtype": "function"}, "expand": {"description": "Expand the current TreeNode.", "guessedname": "expand", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Bind the events on the TreeNode UI. Lifecycle.", "guessedname": "bindUI", "guessedtype": "function"}, "_renderBoundingBox": {"protected": "", "return": {"type": "Node", "description": ""}, "description": "Render the <code>boundingBox</code> node.", "guessedname": "_renderBoundingBox", "guessedtype": "function"}, "renderUI": {"protected": "", "description": "Create the DOM structure for the TreeNode. Lifecycle.", "guessedname": "renderUI", "guessedtype": "function"}, "collapse": {"description": "Collapse the current TreeNode.", "guessedname": "collapse", "guessedtype": "function"}}, "extends": "TreeData", "superclass": "TreeData", "file": "aui-tree.js", "guessedtype": "property", "shortname": "TreeNode", "properties": {"TreeNode.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the TreeNode.", "guessedname": "ATTRS", "guessedtype": "property"}, "BOUNDING_TEMPLATE": {"protected": "", "type": "String", "description": "Replaced BOUNDING_TEMPLATE with NODE_BOUNDING_TEMPLATE.", "guessedname": "BOUNDING_TEMPLATE", "guessedtype": "property"}, "TreeNode.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}, "A.TreeNode.nodeTypes": {"type": "Object", "description": "TreeNode types hash map.\n<pre><code>A.TreeNode.nodeTypes = {\nradio: A.TreeNodeRadio,\ntask: A.TreeNodeTask,\ncheck: A.TreeNodeCheck,\nnode: A.TreeNode,\nio: A.TreeNodeIO\n};</code></pre>", "guessedname": "nodeTypes", "guessedtype": "property"}, "CONTENT_TEMPLATE": {"protected": "", "type": "String", "description": "Replaced CONTENT_TEMPLATE with NODE_CONTENT_TEMPLATE.", "guessedname": "CONTENT_TEMPLATE", "guessedtype": "property"}}, "description": "A base class for TreeNode, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>The node for the TreeView component</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.TreeNode({\nboundingBox: ''\n}).render();\n</code></pre>\nCheck the list of <a href=\"TreeNode.html#configattributes\">Configuration Attributes</a> available for\nTreeNode."}, "DataSchema.JSON": {"name": "DataSchema.JSON", "namespace": "", "module": "dataschema", "guessedname": "LANG", "methods": {"getPath": {"return": {"type": "String[]", "description": "Walkable path to data value."}, "description": "Utility function converts JSON locator strings into walkable paths", "param": "locator {String} JSON value locator.", "static": "", "guessedname": "getPath", "guessedtype": "function", "params": [{"type": "String", "name": "locator", "description": "  JSON value locator."}]}, "_parseMeta": {"return": {"type": "Object", "description": "Schema-parsed meta data."}, "description": "Parses results data according to schema", "param": "metaFields {Object} Metafields definitions.", "protected": "", "static": "", "guessedname": "_parseMeta", "guessedtype": "function", "params": [{"type": "Object", "name": "metaFields", "description": "  Metafields definitions."}, {"type": "Object", "name": "json_in", "description": "  JSON to parse."}, {"type": "Object", "name": "data_out", "description": "  In-progress parsed data to update."}]}, "_getFieldValues": {"return": {"type": "Object", "description": "Parsed data object."}, "description": "Get field data values out of list of full results", "param": "fields {Array} Fields to find.", "protected": "", "static": "", "guessedname": "_getFieldValues", "guessedtype": "function", "params": [{"type": "Array", "name": "fields", "description": "  Fields to find."}, {"type": "Array", "name": "array_in", "description": "  Results to parse."}, {"type": "Object", "name": "data_out", "description": "  In-progress parsed data to update."}]}, "_parseResults": {"return": {"type": "Object", "description": "Parsed data object."}, "description": "Schema-parsed list of results from full data", "param": "schema {Object} Schema to parse against.", "protected": "", "static": "", "guessedname": "_parseResults", "guessedtype": "function", "params": [{"type": "Object", "name": "schema", "description": "  Schema to parse against."}, {"type": "Object", "name": "json_in", "description": "  JSON to parse."}, {"type": "Object", "name": "data_out", "description": "  In-progress parsed data to update."}]}, "getLocationValue": {"return": {"type": "Object", "description": "Data value at location."}, "description": "Utility function to walk a path and return the value located there.", "param": "path {String[]} Locator path.", "static": "", "guessedname": "getLocationValue", "guessedtype": "function", "params": [{"type": "String[]", "name": "path", "description": "  Locator path."}, {"type": "String", "name": "data", "description": "  Data to traverse."}]}, "apply": {"return": {"type": "Object", "description": "An Object with properties `results` and `meta`"}, "description": "Applies a schema to an array of data located in a JSON structure, returning\na normalized object with results in the `results` property. Additional\ninformation can be parsed out of the JSON for inclusion in the `meta`\nproperty of the response object.  If an error is encountered during\nprocessing, an `error` property will be added.\nThe input _data_ is expected to be an object or array.  If it is a string,\nit will be passed through `Y.JSON.parse()`.\nIf _data_ contains an array of data records to normalize, specify the\n_schema.resultListLocator_ as a dot separated path string just as you would\nreference it in JavaScript.  So if your _data_ object has a record array at\n_data.response.results_, use _schema.resultListLocator_ =\n\"response.results\". Bracket notation can also be used for array indices or\nobject properties (e.g. \"response['results']\");  This is called a \"path\nlocator\"\nField data in the result list is extracted with field identifiers in\n_schema.resultFields_.  Field identifiers are objects with the following\nproperties:\n`key`   : <strong>(required)</strong> The path locator (String)\n`parser`: A function or the name of a function on `Y.Parsers` used\nto convert the input value into a normalized type.  Parser\nfunctions are passed the value as input and are expected to\nreturn a value.\nIf no value parsing is needed, you can use path locators (strings) \ninstead of field identifiers (objects) -- see example below.\nIf no processing of the result list array is needed, _schema.resultFields_\ncan be omitted; the `response.results` will point directly to the array.\nIf the result list contains arrays, `response.results` will contain an\narray of objects with key:value pairs assuming the fields in\n_schema.resultFields_ are ordered in accordance with the data array\nvalues.\nIf the result list contains objects, the identified _schema.resultFields_\nwill be used to extract a value from those objects for the output result.\nTo extract additional information from the JSON, include an array of\npath locators in _schema.metaFields_.  The collected values will be\nstored in `response.meta`.", "param": "{Object} [schema] Schema to apply.  Supported configuration\nproperties are:", "static": "", "guessedname": "apply", "guessedtype": "function", "params": [{"type": "Object", "name": "[schema]", "description": " Schema to apply.  Supported configuration\nproperties are:"}, {"type": "String", "name": "[schema.resultListLocator]", "description": " Path locator for the\nlocation of the array of records to flatten into `response.results`"}, {"type": "Array", "name": "[schema.resultFields]", "description": " Field identifiers to\nlocate/assign values in the response records. See above for\ndetails."}, {"type": "Array", "name": "[schema.metaFields]", "description": " Path locators to extract extra\nnon-record related information from the data object."}, {"type": "Object|Array|String", "name": "data", "description": " JSON data or its string serialization."}], "example": "// Process array of arrays\nvar schema = {\nresultListLocator: 'produce.fruit',\nresultFields: [ 'name', 'color' ]\n},\ndata = {\nproduce: {\nfruit: [\n[ 'Banana', 'yellow' ],\n[ 'Orange', 'orange' ],\n[ 'Eggplant', 'purple' ]\n]\n}\n};\nvar response = Y.DataSchema.JSON.apply(schema, data);\n// response.results[0] is { name: \"Banana\", color: \"yellow\" }\n// Process array of objects + some metadata\nschema.metaFields = [ 'lastInventory' ];\ndata = {\nproduce: {\nfruit: [\n{ name: 'Banana', color: 'yellow', price: '1.96' },\n{ name: 'Orange', color: 'orange', price: '2.04' },\n{ name: 'Eggplant', color: 'purple', price: '4.31' }\n]\n},\nlastInventory: '2011-07-19'\n};\nresponse = Y.DataSchema.JSON.apply(schema, data);\n// response.results[0] is { name: \"Banana\", color: \"yellow\" }\n// response.meta.lastInventory is '2001-07-19'\n// Use parsers\nschema.resultFields = [\n{\nkey: 'name',\nparser: function (val) { return val.toUpperCase(); }\n},\n{\nkey: 'price',\nparser: 'number' // Uses Y.Parsers.number\n}\n];\nresponse = Y.DataSchema.JSON.apply(schema, data);\n// Note price was converted from a numeric string to a number\n// response.results[0] looks like { fruit: \"BANANA\", price: 1.96 }"}}, "static": "", "superclass": "DataSchema.Base", "file": "dataschema-json.js", "guessedtype": "property", "extends": "DataSchema.Base", "shortname": "DataSchema.JSON", "description": "Provides a DataSchema implementation which can be used to work with JSON data.\nSee the `apply` method for usage."}, "Column": {"name": "Column", "constructors": [{"description": "The Column class defines and manages attributes of Columns for DataTable."}], "namespace": "", "module": "datatable", "events": {"abbrChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "abbrChange", "description": "Fires when the value for the configuration attribute 'abbr' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "keyChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "keyChange", "description": "Fires when the value for the configuration attribute 'key' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "labelChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "labelChange", "description": "Fires when the value for the configuration attribute 'label' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "childrenChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "childrenChange", "description": "Fires when the value for the configuration attribute 'children' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "idChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "idChange", "description": "Fires when the value for the configuration attribute 'id' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "fieldChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "fieldChange", "description": "Fires when the value for the configuration attribute 'field' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "configs": {"id": {"readonly": "", "type": "String", "description": "Unique internal identifier, used to stamp ID on TH element.", "guessedname": "id", "guessedtype": "property"}, "field": {"type": "String", "description": "Points to underlying data field (for sorting or formatting,\nfor example). Useful when column doesn't hold any data itself, but is\njust a visual representation of data from another column or record field.\nDefaults to key.", "guessedname": "field", "guessedtype": "property"}, "abbr": {"type": "String", "description": "TH abbr attribute.", "guessedname": "abbr", "guessedtype": "property"}, "key": {"type": "String", "description": "User-supplied identifier. Defaults to id.", "guessedname": "key", "guessedtype": "property"}, "label": {"type": "String", "description": "Display label for column header. Defaults to key.", "guessedname": "label", "guessedtype": "property"}, "children": {"type": "String", "description": "Array of child column definitions (for nested headers).", "guessedname": "children", "guessedtype": "property"}}, "methods": {"_defaultKey": {"guessedname": "_defaultKey", "return": {"type": "", "description": "String"}, "description": "Return key for instance. Defaults to ID if one was not\nprovided.", "private": "", "guessedtype": "function"}, "syncUI": {"private": "", "description": "Syncs UI to intial state.", "guessedname": "syncUI", "guessedtype": "function"}, "_getClassnames": {"private": "", "description": "Returns classnames for Column.", "guessedname": "_getClassnames", "guessedtype": "function"}, "_afterAbbrChange": {"description": "Updates the UI if changes are made to abbr.", "param": "e {Event} Custom event for the attribute change.", "params": [{"type": "Event", "name": "e", "description": "  Custom event for the attribute change."}], "private": "", "guessedname": "_afterAbbrChange", "guessedtype": "function"}, "initializer": {"description": "Initializer.", "param": "config {Object} Config object.", "params": [{"type": "Object", "name": "config", "description": "  Config object."}], "private": "", "guessedname": "initializer", "guessedtype": "function"}, "destructor": {"private": "", "description": "Destructor.", "guessedname": "destructor", "guessedtype": "function"}, "_defaultId": {"guessedname": "_defaultId", "return": {"type": "", "description": "String"}, "description": "Return ID for instance.", "private": "", "guessedtype": "function"}, "_uiSetAbbr": {"description": "Updates abbr.", "param": "val {String} New abbr.", "protected": "", "params": [{"type": "String", "name": "val", "description": "  New abbr."}], "guessedname": "_uiSetAbbr", "guessedtype": "function"}, "_defaultLabel": {"guessedname": "_defaultLabel", "return": {"type": "", "description": "String"}, "description": "Return label for instance. Defaults to key if one was not\nprovided.", "private": "", "guessedtype": "function"}, "_defaultField": {"guessedname": "_defaultField", "return": {"type": "", "description": "String"}, "description": "Return field for instance. Defaults to key if one was not\nprovided.", "private": "", "guessedtype": "function"}}, "extends": "Widget", "superclass": "Widget", "file": "datatable-base.js", "shortname": "Column", "properties": {"rowSpan": {"default": "1", "type": "Number", "description": "Number of rows the header spans. Value is set by Columnset code.", "guessedname": "rowSpan", "guessedtype": "property"}, "NAME": {"description": "Class name.", "value": "\"column\"", "static": "", "guessedname": "NAME", "guessedtype": "property", "type": "String", "final": ""}, "parent": {"type": "Y.Column", "description": "Column's parent Column instance, if applicable. Value is set by Columnset\ncode.", "guessedname": "parent", "guessedtype": "property"}, "colSpan": {"default": "1", "type": "Number", "description": "Number of cells the header spans. Value is set by Columnset code.", "guessedname": "colSpan", "guessedtype": "property"}, "thNode": {"type": "Y.Node", "description": "The Node reference to the associated TH element.", "guessedname": "thNode", "guessedtype": "property"}, "headers": {"type": "String[]", "description": "Array of TH IDs associated with this column, for TD \"headers\"\nattribute. Value is set by Columnset code", "guessedname": "headers", "guessedtype": "property"}, "keyIndex": {"type": "Number", "description": "Reference to Column's current position index within its Columnset's keys\narray, if applicable. This property only applies to non-nested and bottom-\nlevel child Columns. Value is set by Columnset code.", "guessedname": "keyIndex", "guessedtype": "property"}}, "description": "The Column class defines and manages attributes of Columns for DataTable."}, "ProgressBar": {"name": "ProgressBar", "configs": {"ratio": {"readonly": "", "type": "number", "description": "Calculate the ratio based on <code>max</code> and\n<code>min</code> values.", "guessedname": "ratio", "guessedtype": "property"}, "orientation": {"default": "'horizontal'", "type": "String", "description": "Display orientation of the progressbar (i.e. vertical or\nhorizontal).", "guessedname": "orientation", "guessedtype": "property"}, "min": {"default": "0", "type": "int", "description": "Represents the lowest value for the bar. The bar will be\ntotally collapsed when reaching this value. Values lower than\nthis will be ignored.", "guessedname": "min", "guessedtype": "property"}, "max": {"default": "100", "type": "int", "description": "Represents the top value for the bar. The bar will be fully\nextended when reaching this value. Values higher than this will\nbe ignored.", "guessedname": "max", "guessedtype": "property"}, "value": {"default": "0", "type": "int | String", "description": "The value for the bar. Valid values are in between the minValue\nand maxValue attributes.", "guessedname": "value", "guessedtype": "property"}, "label": {"default": "''", "type": "String", "description": "Display label of the progressbar. If not specified try to query\nusing HTML_PARSER an element inside contentBox which matches\n<code>aui-progressbar-text</code> and get its innerHTML to be\nused as label.", "guessedname": "label", "guessedtype": "property"}, "statusNode": {"default": "Generated div element.", "type": "String", "description": "DOM Node to display the satus bar of the progressbar. If not\nspecified try to query using HTML_PARSER an element inside\ncontentBox which matches <code>aui-progressbar-status</code>.", "guessedname": "statusNode", "guessedtype": "property"}, "step": {"readonly": "", "type": "number", "description": "Calculate the progressbar step based on <code>ratio</code>\nvalue.", "guessedname": "step", "guessedtype": "property"}, "height": {"default": "25", "type": "int | String", "description": "Display height of the progressbar.", "guessedname": "height", "guessedtype": "property"}, "textNode": {"default": "Generated div element.", "type": "String", "description": "DOM Node to display the text of the progressbar. If not\nspecified try to query using HTML_PARSER an element inside\ncontentBox which matches <code>aui-progressbar-text</code>.", "guessedname": "textNode", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "<p><img src=\"assets/images/aui-progressbar/main.png\"/></p>\nA base class for Progressbar, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>A visual means of showing progress of an ongoing operation</li>\n<li>Can be enhanced via CSS styles to provide different colors, shapes and textures</li>\n<li>The bar can move horizontally or vertically</li>\n<li>The movement can be enhanced by using the Animation utility</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var progress = new A.ProgressBar({\nboundingBox: '#boudingBox',\norientation: 'horizontal',\nwidth: 300\n})\n.render();\n</code></pre>\nCheck the list of <a href=\"ProgressBar.html#configattributes\">Configuration Attributes</a> available for\nProgressBar."}], "namespace": "", "module": "aui-progressbar", "events": {"stepChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "stepChange", "description": "Fires when the value for the configuration attribute 'step' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "heightChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "heightChange", "description": "Fires when the value for the configuration attribute 'height' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "orientationChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "orientationChange", "description": "Fires when the value for the configuration attribute 'orientation' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "minChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "minChange", "description": "Fires when the value for the configuration attribute 'min' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "valueChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "valueChange", "description": "Fires when the value for the configuration attribute 'value' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "labelChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "labelChange", "description": "Fires when the value for the configuration attribute 'label' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "ratioChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "ratioChange", "description": "Fires when the value for the configuration attribute 'ratio' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "maxChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "maxChange", "description": "Fires when the value for the configuration attribute 'max' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "statusNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "statusNodeChange", "description": "Fires when the value for the configuration attribute 'statusNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "textNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "textNodeChange", "description": "Fires when the value for the configuration attribute 'textNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "ProgressBar", "methods": {"_uiSetValue": {"description": "Invoked automatically by the UI_ATTRS Widget API when bind or sync the\n<code>value</code> attribute.", "param": "{String} val Progress value", "protected": "", "params": [{"type": "String", "name": "val", "description": " Progress value"}], "guessedname": "_uiSetValue", "guessedtype": "function"}, "_renderStatusNode": {"protected": "", "description": "Render the <code>statusNode</code> of the progressbar.", "guessedname": "_renderStatusNode", "guessedtype": "function"}, "_getStep": {"protected": "", "return": {"type": "number", "description": ""}, "description": "Calculate the progressbar step based on <code>ratio</code>\nvalue.", "guessedname": "_getStep", "guessedtype": "function"}, "_uiSetLabel": {"description": "Invoked automatically by the UI_ATTRS Widget API when bind or sync the\n<code>label</code> attribute.", "param": "{String} val Display label", "protected": "", "params": [{"type": "String", "name": "val", "description": " Display label"}], "guessedname": "_uiSetLabel", "guessedtype": "function"}, "_uiSetOrientation": {"description": "Invoked automatically by the UI_ATTRS Widget API when bind or sync the\n<code>orientation</code> attribute.", "param": "{String} val Orientation", "protected": "", "params": [{"type": "String", "name": "val", "description": " Orientation"}], "guessedname": "_uiSetOrientation", "guessedtype": "function"}, "_getContentBoxSize": {"protected": "", "return": {"type": "number", "description": ""}, "description": "Calculate the contentBox size based on the\n<code>orientation</code> of the progressbar. If the orientation\nis HORIZONTAL get the width, if the orientation is VERTICAL get\nthe height.", "guessedname": "_getContentBoxSize", "guessedtype": "function"}, "_uiSizeTextNode": {"protected": "", "description": "Sync the size of the ProgressBar when some UI attribute change.", "guessedname": "_uiSizeTextNode", "guessedtype": "function"}, "_getRatio": {"protected": "", "return": {"type": "number", "description": ""}, "description": "Calculate the ratio based on <code>max</code> and\n<code>min</code> values.", "guessedname": "_getRatio", "guessedtype": "function"}, "_getPixelStep": {"protected": "", "return": {"type": "number", "description": ""}, "description": "Calculate the number of pixels to set the <code>statusNode</code>.", "guessedname": "_getPixelStep", "guessedtype": "function"}, "renderUI": {"protected": "", "description": "Create the DOM structure for the ProgressBar. Lifecycle.", "guessedname": "renderUI", "guessedtype": "function"}}, "extends": "Component", "superclass": "Component", "file": "aui-progressbar.js", "guessedtype": "property", "shortname": "ProgressBar", "properties": {"ProgressBar.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the ProgressBar.", "guessedname": "ATTRS", "guessedtype": "property"}, "ProgressBar.HTML_PARSER": {"type": "Object", "static": "", "description": "Object hash, defining how attribute values are to be parsed from\nmarkup contained in the widget's content box.", "guessedname": "HTML_PARSER", "guessedtype": "property"}, "ProgressBar.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}}, "description": "<p><img src=\"assets/images/aui-progressbar/main.png\"/></p>\nA base class for Progressbar, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>A visual means of showing progress of an ongoing operation</li>\n<li>Can be enhanced via CSS styles to provide different colors, shapes and textures</li>\n<li>The bar can move horizontally or vertically</li>\n<li>The movement can be enhanced by using the Animation utility</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var progress = new A.ProgressBar({\nboundingBox: '#boudingBox',\norientation: 'horizontal',\nwidth: 300\n})\n.render();\n</code></pre>\nCheck the list of <a href=\"ProgressBar.html#configattributes\">Configuration Attributes</a> available for\nProgressBar."}, "Transition": {"name": "Transition", "constructors": [{"description": "A class for constructing transition instances.\nAdds the \"transition\" method to Node."}], "namespace": "", "module": "transition", "guessedname": "Transition", "methods": {"run": {"guessedname": "run", "chainable": "", "description": "Starts or an animation.", "private": "", "guessedtype": "function"}}, "file": "transition.js", "guessedtype": "function", "shortname": "Transition", "description": "A class for constructing transition instances.\nAdds the \"transition\" method to Node."}, "SVGPath": {"name": "SVGPath", "configs": {"path": {"readonly": "", "type": "String", "description": "Indicates the path used for the node.", "guessedname": "path", "guessedtype": "property"}, "height": {"type": "Number", "description": "Indicates the height of the shape", "guessedname": "height", "guessedtype": "property"}, "width": {"type": "Number", "description": "Indicates the width of the shape", "guessedname": "width", "guessedtype": "property"}}, "constructors": [{"description": "<a href=\"http://www.w3.org/TR/SVG/\">SVG</a> implementation of the <a href=\"Path.html\">`Path`</a> class. \n`SVGPath` is not intended to be used directly. Instead, use the <a href=\"Path.html\">`Path`</a> class. \nIf the browser has <a href=\"http://www.w3.org/TR/SVG/\">SVG</a> capabilities, the <a href=\"Path.html\">`Path`</a> \nclass will point to the `SVGPath` class."}], "namespace": "", "module": "graphics", "guessedname": "SVGPath", "extends": "SVGShape", "superclass": "SVGShape", "file": "graphics-svg-debug.js", "guessedtype": "function", "shortname": "SVGPath", "properties": {"_bottom": {"guessedname": "_bottom", "type": "Number", "description": "Bottom edge of the path", "private": "", "guessedtype": "property"}, "_type": {"description": "Indicates the type of shape", "private": "", "readonly": "", "guessedname": "_type", "guessedtype": "property", "type": "String"}, "_top": {"guessedname": "_top", "type": "Number", "description": "Top edge of the path", "private": "", "guessedtype": "property"}, "_right": {"guessedname": "_right", "type": "Number", "description": "Right edge of the path", "private": "", "guessedtype": "property"}, "_left": {"guessedname": "_left", "type": "Number", "description": "Left edge of the path", "private": "", "guessedtype": "property"}, "_path": {"guessedname": "_path", "type": "String", "description": "Storage for path", "private": "", "guessedtype": "property"}}, "description": "<a href=\"http://www.w3.org/TR/SVG/\">SVG</a> implementation of the <a href=\"Path.html\">`Path`</a> class. \n`SVGPath` is not intended to be used directly. Instead, use the <a href=\"Path.html\">`Path`</a> class. \nIf the browser has <a href=\"http://www.w3.org/TR/SVG/\">SVG</a> capabilities, the <a href=\"Path.html\">`Path`</a> \nclass will point to the `SVGPath` class."}, "DropDownCellEditor": {"name": "DropDownCellEditor", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "DropDownCellEditor class.\nCheck the list of <a href=\"DropDownCellEditor.html#configattributes\">Configuration Attributes</a> available for\nDropDownCellEditor."}], "namespace": "", "module": "aui-component", "guessedname": "DropDownCellEditor", "extends": "A.DropDownCellEditor", "superclass": "A.DropDownCellEditor", "file": "aui-datatable.js", "guessedtype": "property", "shortname": "DropDownCellEditor", "description": "DropDownCellEditor class.\nCheck the list of <a href=\"DropDownCellEditor.html#configattributes\">Configuration Attributes</a> available for\nDropDownCellEditor."}, "CanvasPath": {"name": "CanvasPath", "configs": {"width": {"type": "Number", "description": "Indicates the width of the shape", "guessedname": "width", "guessedtype": "property"}, "path": {"readonly": "", "type": "String", "description": "Indicates the path used for the node.", "guessedname": "path", "guessedtype": "property"}, "height": {"type": "Number", "description": "Indicates the height of the shape", "guessedname": "height", "guessedtype": "property"}}, "namespace": "", "module": "graphics", "guessedname": "CanvasPath", "methods": {"end": {"description": "Completes a drawing operation.", "guessedname": "end", "guessedtype": "function"}, "createNode": {"guessedname": "createNode", "return": {"type": "", "description": "HTMLElement"}, "description": "Creates the dom node for the shape.", "private": "", "guessedtype": "function"}, "_draw": {"private": "", "description": "Draws the shape.", "guessedname": "_draw", "guessedtype": "function"}}, "extends": "CanvasShape", "superclass": "CanvasShape", "file": "graphics-canvas.js", "guessedtype": "function", "shortname": "CanvasPath", "properties": {"_type": {"guessedname": "_type", "type": "String", "description": "Indicates the type of shape", "private": "", "guessedtype": "property"}}, "description": "<a href=\"http://www.w3.org/TR/html5/the-canvas-element.html\">Canvas</a> implementation of the <a href=\"Path.html\">`Path`</a> class. \n`CanvasPath` is not intended to be used directly. Instead, use the <a href=\"Path.html\">`Path`</a> class. \nIf the browser lacks <a href=\"http://www.w3.org/TR/SVG/\">SVG</a> capabilities but has \n<a href=\"http://www.w3.org/TR/html5/the-canvas-element.html\">Canvas</a> capabilities, the <a href=\"Path.html\">`Path`</a> \nclass will point to the `CanvasPath` class."}, "StackedSplineSeries": {"name": "StackedSplineSeries", "constructors": [{"description": "StackedSplineSeries creates spline graphs in which the different series are stacked along a value axis\nto indicate their contribution to a cumulative total."}], "namespace": "", "module": "charts", "events": {"typeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "typeChange", "description": "Fires when the value for the configuration attribute 'type' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "StackedSplineSeries", "methods": {"setAreaData": {"protected": "", "description": "Calculates the coordinates for the series. Overrides base implementation.", "guessedname": "setAreaData", "guessedtype": "function"}}, "extends": "SplineSeries", "superclass": "SplineSeries", "file": "charts.js", "guessedtype": "property", "shortname": "StackedSplineSeries", "configs": {"type": {"default": "stackedSpline", "type": "String", "description": "Read-only attribute indicating the type of series.", "guessedname": "type", "guessedtype": "property"}}, "description": "StackedSplineSeries creates spline graphs in which the different series are stacked along a value axis\nto indicate their contribution to a cumulative total."}, "Dialog": {"name": "Dialog", "configs": {"draggable": {"default": "true", "type": "boolean", "description": "Boolean specifying if the Panel should be draggable.", "guessedname": "draggable", "guessedtype": "property"}, "dragInstance": {"default": "null", "type": "A.DD.Drag", "description": "Stores the Drag instance for the <code>A.DD.Drag</code> used by\nthis Dialog.", "guessedname": "dragInstance", "guessedtype": "property"}, "resizable": {"default": "true", "type": "boolean", "description": "Boolean specifying if the Panel should be resizable.", "guessedname": "resizable", "guessedtype": "property"}, "stack": {"default": "true", "type": "boolean", "description": "If <code>true</code> give stacking habilities to the Dialog.", "guessedname": "stack", "guessedtype": "property"}, "strings": {"default": "null", "type": "Object", "description": "Collection of strings used to label elements of the Dialog's UI.", "guessedname": "strings", "guessedtype": "property"}, "destroyOnClose": {"default": "false", "type": "boolean", "description": "Invoke the <a href=\"Dialog.html#method_destroy\">destroy</a>\nmethod when the dialog is closed (i.e., remove the Dialog\n<code>boundingBox</code> from the body, purge events etc).", "guessedname": "destroyOnClose", "guessedtype": "property"}, "dragConfig": {"type": "{}", "description": "Drag configuration.", "guessedname": "dragConfig", "guessedtype": "property"}, "resizableInstance": {"default": "null", "type": "A.DD.Drag", "description": "Stores the Resize instance for the <code>A.Resize</code> used by\nthis Dialog.", "guessedname": "resizableInstance", "guessedtype": "property"}, "buttons": {"default": "[]", "type": "Array", "description": "<p>Array of object literals, each containing a set of properties\ndefining a button to be appended into the Dialog's footer. Each\nbutton object in the buttons array can have two properties:</p>\n<dl>\n<dt>text:</dt>\n<dd>\nThe text that will display on the face of the button. The text can include\nHTML, as long as it is compliant with HTML Button specifications.\n</dd>\n<dt>handler:</dt>\n<dd>\nA reference to a function that should fire when the button is clicked.\n(In this case scope of this function is always its Dialog instance.)\n</dd>\n</dl>", "guessedname": "buttons", "guessedtype": "property"}, "modal": {"default": "false", "type": "boolean", "description": "True if the Panel should be displayed in a modal fashion,\nautomatically creating a transparent mask over the document that\nwill not be removed until the Dialog is dismissed. Uses\n<a href=\"OverlayMask.html\">OverlayMask</a>.", "guessedname": "modal", "guessedtype": "property"}, "bodyContent": {"default": "HTMLTextNode", "type": "Node | String", "description": "See <a href=\"WidgetStdMod.html#config_bodyContent\">WidgetStdMod bodyContent</a>.", "guessedname": "bodyContent", "guessedtype": "property"}, "close": {"default": "true", "type": "boolean", "description": "If <code>true</code> the close icon will be displayed on the\nDialog header.", "guessedname": "close", "guessedtype": "property"}, "constrain2view": {"type": "Object", "description": "Will attempt to constrain the dialog to the boundaries of the\nviewport region.", "guessedname": "constrain2view", "guessedtype": "property"}, "resizableConfig": {"type": "{}", "description": "Resize configuration.", "guessedname": "resizableConfig", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "<p><img src=\"assets/images/aui-dialog/main.png\"/></p>\nA base class for Dialog, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Emulate the behavior of an dialog window using a floating, draggable HTML element</li>\n<li>Interface for easily gathering information from the user without leaving the underlying page context</li>\n<li>Using the <a href=\"IOPlugin.html\">IOPlugin</a>, supports the submission of form data either through an XMLHttpRequest, through a normal form submission, or through a fully script-based response</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.Dialog({\nbodyContent: 'Dialog body',\ncentered: true,\nconstrain2view: true,\ndestroyOnClose: true,\ndraggable: true,\nheight: 250,\nresizable: false,\nstack: true,\ntitle: 'Dialog title',\nwidth: 500\n}).render();\n</code></pre>\nCheck the list of <a href=\"Dialog.html#configattributes\">Configuration Attributes</a> available for\nDialog."}], "namespace": "", "module": "aui-dialog", "events": {"constrain2viewChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "constrain2viewChange", "description": "Fires when the value for the configuration attribute 'constrain2view' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "buttonsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "buttonsChange", "description": "Fires when the value for the configuration attribute 'buttons' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "stringsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "stringsChange", "description": "Fires when the value for the configuration attribute 'strings' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "destroyOnCloseChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "destroyOnCloseChange", "description": "Fires when the value for the configuration attribute 'destroyOnClose' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "modalChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "modalChange", "description": "Fires when the value for the configuration attribute 'modal' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "resizableConfigChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "resizableConfigChange", "description": "Fires when the value for the configuration attribute 'resizableConfig' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "resizableChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "resizableChange", "description": "Fires when the value for the configuration attribute 'resizable' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "bodyContentChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "bodyContentChange", "description": "Fires when the value for the configuration attribute 'bodyContent' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "dragConfigChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "dragConfigChange", "description": "Fires when the value for the configuration attribute 'dragConfig' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "dragInstanceChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "dragInstanceChange", "description": "Fires when the value for the configuration attribute 'dragInstance' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "closeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "closeChange", "description": "Fires when the value for the configuration attribute 'close' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "draggableChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "draggableChange", "description": "Fires when the value for the configuration attribute 'draggable' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "stackChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "stackChange", "description": "Fires when the value for the configuration attribute 'stack' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "resizableInstanceChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "resizableInstanceChange", "description": "Fires when the value for the configuration attribute 'resizableInstance' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "Dialog", "methods": {"_setDefaultARIAValues": {"protected": "", "description": "Set default ARIA roles and attributes.", "guessedname": "_setDefaultARIAValues", "guessedtype": "function"}, "_setResizableInstance": {"return": {"type": "boolean", "description": ""}, "description": "Setter for the <a href=\"Dialog.html#config_resizable\">resizable</a> attribute.", "param": "{boolean} value", "protected": "", "params": [{"type": "boolean", "name": "value", "description": ""}], "guessedname": "_setResizableInstance", "guessedtype": "function"}, "alignToViewport": {"param": "int offsetLeft An offset number to be added to the left coordinate value.", "params": [{"type": "", "name": "int", "description": " offsetLeft An offset number to be added to the left coordinate value."}, {"type": "", "name": "int", "description": " offsetTop An offset number to be added to the top coordinate value."}], "description": "Aligns the Dialog to the viewport.", "guessedname": "alignToViewport", "guessedtype": "function"}, "initializer": {"protected": "", "description": "Construction logic executed during Dialog instantiation. Lifecycle.", "guessedname": "initializer", "guessedtype": "function"}, "close": {"description": "Fires the close event to close the Dialog.", "guessedname": "close", "guessedtype": "function"}, "destructor": {"protected": "", "description": "Descructor lifecycle implementation for the Dialog class.\nPurges events attached to the node (and all child nodes).", "guessedname": "destructor", "guessedtype": "function"}, "_handleEvent": {"description": "Handles the close event logic.", "param": "{EventFacade} event close event facade", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " close event facade"}], "guessedname": "_close", "guessedtype": "function"}, "_syncResizableDimentions": {"description": "Sync dialog dimentions based on resizable end and resize events.", "param": "{EventFacade} Resizable event", "protected": "", "params": [{"type": "EventFacade", "name": "Resizable", "description": " event"}], "guessedname": "_syncResizableDimentions", "guessedtype": "function"}, "_updateDDConstrain2view": {"description": "Plug and Unplug A.Plugin.DDConstrained to the dragInstance depending on\nthe value of constrain2view attribute.", "param": "{A.DD.Drag} dragInstance", "protected": "", "params": [{"type": "A.DD.Drag", "name": "dragInstance", "description": ""}], "guessedname": "_updateDDConstrain2view", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Bind the events on the Dialog UI. Lifecycle.", "guessedname": "bindUI", "guessedtype": "function"}, "_initLazyComponents": {"private": "", "description": "Forces <code>lazyAdd:true</code> attributtes invoke the setter methods.", "guessedname": "_initLazyComponents", "guessedtype": "function"}, "_setDragInstance": {"return": {"type": "boolean", "description": ""}, "description": "Setter for the <a href=\"Dialog.html#config_draggable\">draggable</a> attribute.", "param": "{boolean} value", "protected": "", "params": [{"type": "boolean", "name": "value", "description": ""}], "guessedname": "_setDragInstance", "guessedtype": "function"}, "_afterRenderer": {"description": "Fires after the render phase. Invoke\n<a href=\"Dialog.html#method__initButtons\">_initButtons</a>.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_afterRenderer", "guessedtype": "function"}, "_setModal": {"return": {"type": "boolean", "description": ""}, "description": "Setter for the <a href=\"Dialog.html#config_modal\">modal</a> attribute.", "param": "{boolean} value", "protected": "", "params": [{"type": "boolean", "name": "value", "description": ""}], "guessedname": "_setModal", "guessedtype": "function"}, "_setStack": {"return": {"type": "boolean", "description": ""}, "description": "Setter for the <a href=\"Dialog.html#config_stack\">stack</a>\nattribute.", "param": "{boolean} value", "protected": "", "params": [{"type": "boolean", "name": "value", "description": ""}], "guessedname": "_setStack", "guessedtype": "function"}, "_afterResizableChange": {"description": "Fires after the value of the\n<a href=\"Overlay.html#config_resizable\">resizable</a> attribute change.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_afterResizableChange", "guessedtype": "function"}, "syncUI": {"protected": "", "description": "Refreshes the rendered UI, based on Widget State", "guessedname": "syncUI", "guessedtype": "function"}, "_afterSetVisible": {"description": "Fires after the value of the\n<a href=\"Overlay.html#config_visible\">visible</a> attribute change.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_afterSetVisible", "guessedtype": "function"}, "_initButtons": {"protected": "", "description": "Render the buttons on the footer of the Dialog.", "guessedname": "_initButtons", "guessedtype": "function"}, "_afterConstrain2viewChange": {"description": "Fires after the value of the\n<a href=\"Overlay.html#config_constrain2view\">constrain2view</a> attribute change.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_afterConstrain2viewChange", "guessedtype": "function"}, "_afterResizableInstanceChange": {"description": "Fires after the value of the\n<a href=\"Overlay.html#config_resizableInstance\">resizableInstance</a> attribute change.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_afterResizableInstanceChange", "guessedtype": "function"}, "_bindLazyComponents": {"private": "", "description": "Bind a <code>mouseenter</code> listener to the <code>boundingBox</code>\nto invoke the\n<a href=\"Dialog.html#config__initLazyComponents\">_initLazyComponents</a>.\nPerformance reasons.", "guessedname": "_bindLazyComponents", "guessedtype": "function"}, "_afterDragInstanceChange": {"description": "Fires after the value of the\n<a href=\"Overlay.html#config_dragInstance\">dragInstance</a> attribute change.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_afterDragInstanceChange", "guessedtype": "function"}, "_afterDraggableChange": {"description": "Fires after the value of the\n<a href=\"Overlay.html#config_draggable\">draggable</a> attribute change.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_afterDraggableChange", "guessedtype": "function"}}, "uses": ["WidgetPosition", "WidgetStack", "WidgetPositionAlign", "WidgetPositionConstrain"], "superclass": "Panel", "file": "aui-dialog.js", "guessedtype": "function", "extends": "Panel", "shortname": "Dialog", "properties": {"Dialog.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}, "Dialog.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the Dialog.", "guessedname": "ATTRS", "guessedtype": "property"}}, "description": "<p><img src=\"assets/images/aui-dialog/main.png\"/></p>\nA base class for Dialog, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Emulate the behavior of an dialog window using a floating, draggable HTML element</li>\n<li>Interface for easily gathering information from the user without leaving the underlying page context</li>\n<li>Using the <a href=\"IOPlugin.html\">IOPlugin</a>, supports the submission of form data either through an XMLHttpRequest, through a normal form submission, or through a fully script-based response</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.Dialog({\nbodyContent: 'Dialog body',\ncentered: true,\nconstrain2view: true,\ndestroyOnClose: true,\ndraggable: true,\nheight: 250,\nresizable: false,\nstack: true,\ntitle: 'Dialog title',\nwidth: 500\n}).render();\n</code></pre>\nCheck the list of <a href=\"Dialog.html#configattributes\">Configuration Attributes</a> available for\nDialog."}, "StackingUtil": {"name": "StackingUtil", "constructors": [{"description": "Utility class used for creating stacked series."}], "namespace": "", "module": "charts", "methods": {"_stackCoordinates": {"protected": "", "description": "Adjusts coordinate values for stacked series.", "guessedname": "_stackCoordinates", "guessedtype": "function"}}, "file": "charts.js", "shortname": "StackingUtil", "description": "Utility class used for creating stacked series."}, "Highlight": {"name": "Highlight", "namespace": "", "module": "highlight", "guessedname": "YArray", "methods": {"startFold": {"return": {"type": "String", "description": "Escaped and highlighted copy of <em>haystack</em>."}, "description": "Accent-folding version of <code>start()</code>.", "param": "{String} haystack String to apply highlighting to.", "static": "", "guessedname": "startFold", "guessedtype": "function", "params": [{"type": "String", "name": "haystack", "description": " String to apply highlighting to."}, {"type": "String|Array", "name": "needles", "description": " String or array of strings that should be\nhighlighted."}]}, "all": {"return": {"type": "String", "description": "Escaped and highlighted copy of <em>haystack</em>."}, "description": "Highlights all occurrences in the <em>haystack</em> string of the items\nin the <em>needles</em> array, regardless of where they occur. The\nreturned string will have all HTML characters escaped except for the\nhighlighting markup.", "param": "{String} haystack String to apply highlighting to.", "static": "", "guessedname": "all", "guessedtype": "function", "params": [{"type": "String", "name": "haystack", "description": " String to apply highlighting to."}, {"type": "String|Array", "name": "needles", "description": " String or array of strings that should be\nhighlighted."}, {"type": "Object", "name": "options", "description": " (optional) Options object, which may contain\nzero or more of the following properties:\n<dl>\n<dt>caseSensitive (Boolean)</dt>\n<dd>\nIf <code>true</code>, matching will be case-sensitive. Default is\n<code>false</code>.\n</dd>\n<dt>startsWith (Boolean)<dt>\n<dd>\nBy default, needles are highlighted wherever they appear in the\nhaystack. If <code>startsWith</code> is <code>true</code>, matches\nmust be anchored to the beginning of the string.\n</dd>\n</dl>"}]}, "wordsFold": {"return": {"type": "String", "description": "Escaped and highlighted copy of <em>haystack</em>."}, "description": "Accent-folding version of <code>words()</code>.", "param": "{String} haystack String to apply highlighting to.", "static": "", "guessedname": "wordsFold", "guessedtype": "function", "params": [{"type": "String", "name": "haystack", "description": " String to apply highlighting to."}, {"type": "String|Array", "name": "needles", "description": " String or array of strings containing words\nthat should be highlighted. If a string is passed, it will be split\ninto words; if an array is passed, it is assumed to have already been\nsplit."}]}, "words": {"return": {"type": "String", "description": "Escaped and highlighted copy of <em>haystack</em>."}, "description": "Highlights complete words in the <em>haystack</em> string that are also\nin the <em>needles</em> array. The returned string will have all HTML\ncharacters escaped except for the highlighting markup.", "param": "{String} haystack String to apply highlighting to.", "static": "", "guessedname": "words", "guessedtype": "function", "params": [{"type": "String", "name": "haystack", "description": " String to apply highlighting to."}, {"type": "String|Array", "name": "needles", "description": " String or array of strings containing words\nthat should be highlighted. If a string is passed, it will be split\ninto words; if an array is passed, it is assumed to have already been\nsplit."}, {"type": "Object", "name": "options", "description": " (optional) Options object, which may contain\nzero or more of the following properties:\n<dl>\n<dt>caseSensitive (Boolean)</dt>\n<dd>\nIf <code>true</code>, matching will be case-sensitive. Default is\n<code>false</code>.\n</dd>\n</dl>"}]}, "allFold": {"return": {"type": "String", "description": "Escaped and highlighted copy of <em>haystack</em>."}, "description": "Accent-folding version of <code>all()</code>.", "param": "{String} haystack String to apply highlighting to.", "static": "", "guessedname": "allFold", "guessedtype": "function", "params": [{"type": "String", "name": "haystack", "description": " String to apply highlighting to."}, {"type": "String|Array", "name": "needles", "description": " String or array of strings that should be\nhighlighted."}, {"type": "Object", "name": "options", "description": " (optional) Options object, which may contain\nzero or more of the following properties:\n<dl>\n<dt>startsWith (Boolean)<dt>\n<dd>\nBy default, needles are highlighted wherever they appear in the\nhaystack. If <code>startsWith</code> is <code>true</code>, matches\nmust be anchored to the beginning of the string.\n</dd>\n</dl>"}]}, "start": {"return": {"type": "String", "description": "Escaped and highlighted copy of <em>haystack</em>."}, "description": "Highlights <em>needles</em> that occur at the start of <em>haystack</em>.\nThe returned string will have all HTML characters escaped except for the\nhighlighting markup.", "param": "{String} haystack String to apply highlighting to.", "static": "", "guessedname": "start", "guessedtype": "function", "params": [{"type": "String", "name": "haystack", "description": " String to apply highlighting to."}, {"type": "String|Array", "name": "needles", "description": " String or array of strings that should be\nhighlighted."}, {"type": "Object", "name": "options", "description": " (optional) Options object, which may contain\nzero or more of the following properties:\n<dl>\n<dt>caseSensitive (Boolean)</dt>\n<dd>\nIf <code>true</code>, matching will be case-sensitive. Default is\n<code>false</code>.\n</dd>\n</dl>"}]}, "allCase": {"return": {"type": "String", "description": "Escaped and highlighted copy of <em>haystack</em>."}, "description": "Same as <code>all()</code>, but case-sensitive by default.", "param": "{String} haystack String to apply highlighting to.", "static": "", "guessedname": "allCase", "guessedtype": "function", "params": [{"type": "String", "name": "haystack", "description": " String to apply highlighting to."}, {"type": "String|Array", "name": "needles", "description": " String or array of strings that should be\nhighlighted."}, {"type": "Object", "name": "options", "description": " (optional) Options object. See <code>all()</code>\nfor details."}]}, "wordsCase": {"return": {"type": "String", "description": "Escaped and highlighted copy of <em>haystack</em>."}, "description": "Same as <code>words()</code>, but case-sensitive by default.", "param": "{String} haystack String to apply highlighting to.", "static": "", "guessedname": "wordsCase", "guessedtype": "function", "params": [{"type": "String", "name": "haystack", "description": " String to apply highlighting to."}, {"type": "String|Array", "name": "needles", "description": " String or array of strings containing words\nthat should be highlighted. If a string is passed, it will be split\ninto words; if an array is passed, it is assumed to have already been\nsplit."}]}, "startCase": {"return": {"type": "String", "description": "Escaped and highlighted copy of <em>haystack</em>."}, "description": "Same as <code>start()</code>, but case-sensitive by default.", "param": "{String} haystack String to apply highlighting to.", "static": "", "guessedname": "startCase", "guessedtype": "function", "params": [{"type": "String", "name": "haystack", "description": " String to apply highlighting to."}, {"type": "String|Array", "name": "needles", "description": " String or array of strings that should be\nhighlighted."}]}}, "static": "", "file": "highlight-accentfold.js", "guessedtype": "property", "shortname": "Highlight", "properties": {"_REPLACER": {"description": "Regex replacer function or string for normal matches.", "protected": "", "static": "", "guessedname": "_REPLACER", "guessedtype": "function", "type": "{Function|String}", "final": ""}, "_START_REGEX": {"description": "<p>\nRegular expression template for highlighting start-of-string matches\n(i.e., only matches that occur at the beginning of a string). The\nplaceholder <code>%needles</code> will be replaced with a list of needles\nto match, joined by <code>|</code> characters.\n</p>\n<p>\nSee <code>_REGEX</code> for a description of the capturing subpatterns\nthis regex should contain.\n</p>", "protected": "", "static": "", "guessedname": "_START_REGEX", "guessedtype": "property", "type": "{String}", "final": ""}, "_TEMPLATE": {"description": "Highlight template which will be used as a replacement for matched\nsubstrings. The placeholder <code>{s}</code> will be replaced with the\nmatched substring.", "default": "'<b class=\"yui3-highlight\">{s}</b>'", "protected": "", "static": "", "guessedname": "_TEMPLATE", "guessedtype": "property", "type": "{String}", "final": ""}, "_REGEX": {"description": "<p>\nRegular expression template for highlighting a match that occurs anywhere\nin a string. The placeholder <code>%needles</code> will be replaced with\na list of needles to match, joined by <code>|</code> characters.\n</p>\n<p>\nThis regex should have two capturing subpatterns: the first should match\nan unclosed HTML entity (e.g. \"&amp\" without a \";\" at the end) 0 or 1\ntimes; the second should contain the <code>%needles</code> placeholder.\nThe first subpattern match is used to emulate a negative lookbehind\nassertion, in order to prevent highlighting inside HTML entities.\n</p>", "protected": "", "static": "", "guessedname": "_REGEX", "guessedtype": "property", "type": "{String}", "final": ""}}, "description": "<p>\nProvides methods for highlighting strings within other strings by wrapping\nthem in HTML.\n</p>\n<p>\nThe highlight methods first escape any special HTML characters in the input\nstrings and then highlight the appropriate substrings by wrapping them in a\n<code>&lt;b class=\"yui3-highlight\"&gt;&lt;/b&gt;</code> element. The\n<code>&lt;b&gt;</code> element is used rather than\n<code>&lt;strong&gt;</code> in accordance with HTML5's definition of\n<code>&lt;b&gt;</code> as being purely presentational, which is exactly what\nhighlighting is.\n</p>"}, "Plugin.AutoComplete": {"name": "Plugin.AutoComplete", "namespace": "", "module": "autocomplete", "guessedname": "Plugin", "extends": "AutoCompleteList", "superclass": "AutoCompleteList", "file": "autocomplete-plugin.js", "guessedtype": "property", "shortname": "Plugin.AutoComplete", "description": "<p>\nBinds an AutoCompleteList instance to a Node instance.\n</p>\n<p>\nExample:\n</p>\n<pre>\nY.one('#my-input').plug(Y.Plugin.AutoComplete, {\n&nbsp;&nbsp;source: 'select * from search.suggest where query=\"{query}\"'\n});\n&nbsp;\n// You can now access the AutoCompleteList instance at Y.one('#my-input').ac\n</pre>"}, "SWF": {"name": "SWF", "constructors": [{"params": [{"type": "String|HTMLElement", "name": "id", "description": " The id of the element, or the element itself that the SWF will be inserted into.  \nThe width and height of the SWF will be set to the width and height of this container element."}, {"type": "String", "name": "swfURL", "description": " The URL of the SWF to be embedded into the page."}, {"type": "Object", "name": "p_oAttributes", "description": " (optional) Configuration parameters for the Flash application and values for Flashvars\nto be passed to the SWF. The p_oAttributes object allows the following additional properties:\n<dl>\n<dt>version : String</dt>\n<dd>The minimum version of Flash required on the user's machine.</dd>\n<dt>fixedAttributes : Object</dt>\n<dd>An object literal containing one or more of the following String keys and their values: <code>align, \nallowFullScreen, allowNetworking, allowScriptAccess, base, bgcolor, menu, name, quality, salign, scale,\ntabindex, wmode.</code> event from the thumb</dd>\n</dl>"}], "description": "Creates the SWF instance and keeps the configuration data"}], "namespace": "", "module": "swf", "properties": {"_instances": {"guessedname": "_instances", "type": "Object", "description": "The static collection of all instances of the SWFs on the page.", "private": "", "guessedtype": "property"}}, "methods": {"eventHandler": {"description": "Handles an event coming from within the SWF and delegate it\nto a specific instance of SWF.", "param": "swfid {String} the id of the SWF dispatching the event", "params": [{"type": "String", "name": "swfid", "description": "  the id of the SWF dispatching the event"}, {"type": "Object", "name": "event", "description": "  the event being transmitted."}], "private": "", "guessedname": "eventHandler", "guessedtype": "function"}, "callSWF": {"param": "func {String} the name of the function to call", "params": [{"type": "String", "name": "func", "description": "  the name of the function to call"}, {"type": "Object", "name": "args", "description": "  the set of arguments to pass to the function."}], "description": "Calls a specific function exposed by the SWF's\nExternalInterface.", "guessedname": "callSWF", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "Unique name of the SWF instance."}, "description": "Public accessor to the unique name of the SWF instance.", "guessedname": "toString", "guessedtype": "function"}, "_eventHandler": {"description": "Propagates a specific event from Flash to JS.", "param": "event {Object} The event to be propagated from Flash.", "params": [{"type": "Object", "name": "event", "description": "  The event to be propagated from Flash."}], "private": "", "guessedname": "_eventHandler", "guessedtype": "function"}}, "file": "swf.js", "augments": "Y.Event.Target", "shortname": "SWF", "events": {"wrongflashversion": {"description": "Fired when the Flash player version on the user's machine is below the required value."}}, "description": "Creates the SWF instance and keeps the configuration data"}, "CanvasCircle": {"name": "CanvasCircle", "configs": {"width": {"type": "Number", "description": "Indicates the width of the shape", "guessedname": "width", "guessedtype": "property"}, "radius": {"type": "Number", "description": "Radius of the circle", "guessedname": "radius", "guessedtype": "property"}, "height": {"type": "Number", "description": "Indicates the height of the shape", "guessedname": "height", "guessedtype": "property"}}, "constructors": [{"description": "<a href=\"http://www.w3.org/TR/html5/the-canvas-element.html\">Canvas</a> implementation of the <a href=\"Circle.html\">`Circle`</a> class. \n`CanvasCircle` is not intended to be used directly. Instead, use the <a href=\"Circle.html\">`Circle`</a> class. \nIf the browser lacks <a href=\"http://www.w3.org/TR/SVG/\">SVG</a> capabilities but has \n<a href=\"http://www.w3.org/TR/html5/the-canvas-element.html\">Canvas</a> capabilities, the <a href=\"Circle.html\">`Circle`</a> \nclass will point to the `CanvasCircle` class."}], "namespace": "", "module": "graphics", "guessedname": "CanvasCircle", "methods": {"_draw": {"private": "", "description": "Draws the shape.", "guessedname": "_draw", "guessedtype": "function"}}, "file": "graphics-canvas.js", "guessedtype": "function", "shortname": "CanvasCircle", "properties": {"_type": {"readonly": "", "type": "String", "description": "Indicates the type of shape", "guessedname": "_type", "guessedtype": "property"}}, "description": "<a href=\"http://www.w3.org/TR/html5/the-canvas-element.html\">Canvas</a> implementation of the <a href=\"Circle.html\">`Circle`</a> class. \n`CanvasCircle` is not intended to be used directly. Instead, use the <a href=\"Circle.html\">`Circle`</a> class. \nIf the browser lacks <a href=\"http://www.w3.org/TR/SVG/\">SVG</a> capabilities but has \n<a href=\"http://www.w3.org/TR/html5/the-canvas-element.html\">Canvas</a> capabilities, the <a href=\"Circle.html\">`Circle`</a> \nclass will point to the `CanvasCircle` class."}, "Plugin.Host": {"name": "Plugin.Host", "description": "<p>\nAn augmentable class, which provides the augmented class with the ability to host plugins.\nIt adds <a href=\"#method_plug\">plug</a> and <a href=\"#method_unplug\">unplug</a> methods to the augmented class, which can \nbe used to add or remove plugins from instances of the class.\n</p>\n<p>Plugins can also be added through the constructor configuration object passed to the host class' constructor using\nthe \"plugins\" property. Supported values for the \"plugins\" property are those defined by the <a href=\"#method_plug\">plug</a> method. \nFor example the following code would add the AnimPlugin and IOPlugin to Overlay (the plugin host):\n<xmp>\nvar o = new Overlay({plugins: [ AnimPlugin, {fn:IOPlugin, cfg:{section:\"header\"}}]});\n</xmp>\n</p>\n<p>\nPlug.Host's protected <a href=\"#method_initPlugins\">_initPlugins</a> and <a href=\"#method_destroyPlugins\">_destroyPlugins</a> \nmethods should be invoked by the host class at the appropriate point in the host's lifecyle.  \n</p>", "namespace": "", "module": "pluginhost-base", "guessedname": "L", "file": "pluginhost-base.js", "guessedtype": "property", "shortname": "Plugin.Host", "properties": {"PluginHost": {"submodule": "pluginhost-config", "description": "Adds pluginhost constructor configuration and static configuration support", "guessedname": "PluginHost", "guessedtype": "property"}}, "methods": {"plug": {"return": "{Base} A reference to the host object", "description": "Registers plugins to be instantiated at the class level (plugins \nwhich should be plugged into every instance of the class by default).", "chainable": "", "param": "{Function} hostClass The host class on which to register the plugins", "static": "", "guessedname": "plug", "guessedtype": "function", "params": [{"type": "Function", "name": "hostClass", "description": " The host class on which to register the plugins"}, {"type": "Function | Array", "name": "plugin", "description": " Either the plugin class, an array of plugin classes or an array of objects (with fn and cfg properties defined)"}, {"type": "Object", "name": "config", "description": " (Optional) If plugin is the plugin class, the configuration for the plugin"}]}, "hasPlugin": {"return": {"type": "boolean", "description": "returns true, if the plugin has been plugged into this host, false otherwise."}, "description": "Determines if a plugin has plugged into this host.", "param": "{String} ns The plugin's namespace", "params": [{"type": "String", "name": "ns", "description": " The plugin's namespace"}], "guessedname": "hasPlugin", "guessedtype": "function"}, "_destroyPlugins": {"private": "", "description": "Unplugs and destroys all plugins on the host", "guessedname": "_destroyPlugins", "guessedtype": "function"}, "unplug": {"return": "{Base} A reference to the host object", "description": "Unregisters any class level plugins which have been registered by the host class, or any\nother class in the hierarchy.", "chainable": "", "param": "{Function} hostClass The host class from which to unregister the plugins", "static": "", "guessedname": "unplug", "guessedtype": "function", "params": [{"type": "Function", "name": "hostClass", "description": " The host class from which to unregister the plugins"}, {"type": "Function | Array", "name": "plugin", "description": " The plugin class, or an array of plugin classes"}]}, "_initConfigPlugins": {"description": "A protected initialization method, used by the host class to initialize\nplugin configurations passed the constructor, through the config object.\nHost objects should invoke this method at the appropriate time in their\nconstruction lifecycle.", "param": "{Object} config The configuration object passed to the constructor", "protected": "", "params": [{"type": "Object", "name": "config", "description": " The configuration object passed to the constructor"}], "guessedname": "_initConfigPlugins", "guessedtype": "function"}, "_initPlugins": {"description": "Initializes static plugins registered on the host (using the\nBase.plug static method) and any plugins passed to the \ninstance through the \"plugins\" configuration property.", "param": "{Config} config The configuration object with property name/value pairs.", "params": [{"type": "Config", "name": "config", "description": " The configuration object with property name/value pairs."}], "private": "", "guessedname": "_initPlugins", "guessedtype": "function"}}}, "RecordsetFilter": {"name": "RecordsetFilter", "namespace": "", "module": "recordset", "methods": {"filter": {"return": {"type": "Recordset", "description": "A new filtered Recordset instance"}, "description": "Filter through the recordset with a custom filter function, or a key-value\npair.", "param": "{Function|String} filter A custom filter function or a string\nrepresenting the key to filter by.", "params": [{"type": "Function|String", "name": "filter", "description": " A custom filter function or a string\nrepresenting the key to filter by."}, {"type": "Any", "name": "[value]", "description": " If filtering by key (_filter_ is a string), further\nfilter by a specific value."}], "guessedname": "filter", "guessedtype": "function"}, "grep": {"return": {"type": "Recordset", "description": "A Recordset instance containing all the items in the\ncollection that produce a match against the supplied regular\nexpression. If no items match, an empty Recordset instance is returned."}, "description": "Iterates over the Recordset, returning a new Recordset of all the elements\nthat match the supplied regular expression", "param": "{RegExp} pattern The regular expression to test against each record.", "params": [{"type": "RegExp", "name": "pattern", "description": " The regular expression to test against each record."}], "guessedname": "grep", "guessedtype": "function"}, "reject": {"return": {"type": "Recordset", "description": "A new Recordset instance containing the items on which\nthe supplied function returned false."}, "description": "The inverse of filter. Executes the supplied function on each item. Returns\na new Recordset containing the items that the supplied function returned\n`false` for.", "param": "{Function} filter A boolean function, executed on each item.", "params": [{"type": "Function", "name": "filter", "description": " A boolean function, executed on each item."}], "guessedname": "reject", "guessedtype": "function"}}, "file": "recordset-filter.js", "shortname": "RecordsetFilter", "description": "Plugin that provides the ability to filter through a recordset.\nUses the filter methods available on Y.Array (see arrayextras submodule) to filter the recordset."}, "StackedComboSplineSeries": {"name": "StackedComboSplineSeries", "constructors": [{"description": "The StackedComboSplineSeries class renders a combination of splines, plots and areaspline fills in a single series. Series\nare stacked along the value axis to indicate each series contribution to a cumulative total. Each\nseries type has a corresponding boolean attribute indicating if it is rendered. By default, all three types are\nrendered."}], "namespace": "", "module": "charts", "events": {"showAreaFillChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "showAreaFillChange", "description": "Fires when the value for the configuration attribute 'showAreaFill' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "typeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "typeChange", "description": "Fires when the value for the configuration attribute 'type' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "StackedComboSplineSeries", "methods": {"drawSeries": {"protected": "", "description": "Draws the series.", "guessedname": "drawSeries", "guessedtype": "function"}}, "uses": ["CurveUtil"], "superclass": "StackedComboSeries", "file": "charts.js", "guessedtype": "property", "extends": "StackedComboSeries", "shortname": "StackedComboSplineSeries", "configs": {"type": {"default": "stackedComboSpline", "type": "String", "description": "Read-only attribute indicating the type of series.", "guessedname": "type", "guessedtype": "property"}, "showAreaFill": {"default": "true", "type": "Boolean", "description": "Indicates whether a fill is displayed.", "guessedname": "showAreaFill", "guessedtype": "property"}}, "description": "The StackedComboSplineSeries class renders a combination of splines, plots and areaspline fills in a single series. Series\nare stacked along the value axis to indicate each series contribution to a cumulative total. Each\nseries type has a corresponding boolean attribute indicating if it is rendered. By default, all three types are\nrendered."}, "CanvasRect": {"name": "CanvasRect", "constructors": [{"description": "<a href=\"http://www.w3.org/TR/html5/the-canvas-element.html\">Canvas</a> implementation of the <a href=\"Rect.html\">`Rect`</a> class. \n`CanvasRect` is not intended to be used directly. Instead, use the <a href=\"Rect.html\">`Rect`</a> class. \nIf the browser lacks <a href=\"http://www.w3.org/TR/SVG/\">SVG</a> capabilities but has \n<a href=\"http://www.w3.org/TR/html5/the-canvas-element.html\">Canvas</a> capabilities, the <a href=\"Rect.html\">`Rect`</a> \nclass will point to the `CanvasRect` class."}], "namespace": "", "module": "graphics", "guessedname": "CanvasRect", "methods": {"_draw": {"private": "", "description": "Draws the shape.", "guessedname": "_draw", "guessedtype": "function"}}, "file": "graphics-canvas.js", "guessedtype": "function", "shortname": "CanvasRect", "properties": {"_type": {"guessedname": "_type", "type": "String", "description": "Indicates the type of shape", "private": "", "guessedtype": "property"}}, "description": "<a href=\"http://www.w3.org/TR/html5/the-canvas-element.html\">Canvas</a> implementation of the <a href=\"Rect.html\">`Rect`</a> class. \n`CanvasRect` is not intended to be used directly. Instead, use the <a href=\"Rect.html\">`Rect`</a> class. \nIf the browser lacks <a href=\"http://www.w3.org/TR/SVG/\">SVG</a> capabilities but has \n<a href=\"http://www.w3.org/TR/html5/the-canvas-element.html\">Canvas</a> capabilities, the <a href=\"Rect.html\">`Rect`</a> \nclass will point to the `CanvasRect` class."}, "AreaSeries": {"name": "AreaSeries", "constructors": [{"description": "The AreaSeries class renders quantitative data on a graph by creating a fill between 0\nand the relevant data points."}], "namespace": "", "module": "charts", "events": {"typeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "typeChange", "description": "Fires when the value for the configuration attribute 'type' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "stylesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "stylesChange", "description": "Fires when the value for the configuration attribute 'styles' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "AreaSeries", "methods": {"drawSeries": {"protected": "", "description": "Renders the series.", "guessedname": "drawSeries", "guessedtype": "function"}, "_setStyles": {"return": {"type": "", "description": "Object"}, "description": "Method used by `styles` setter. Overrides base implementation.", "param": "{Object} newStyles Hash of properties to update.", "protected": "", "params": [{"type": "Object", "name": "newStyles", "description": " Hash of properties to update."}], "guessedname": "_setStyles", "guessedtype": "function"}, "_getDefaultStyles": {"protected": "", "return": {"type": "", "description": "Object"}, "description": "Gets the default value for the `styles` attribute. Overrides\nbase implementation.", "guessedname": "_getDefaultStyles", "guessedtype": "function"}}, "uses": ["Fills"], "superclass": "CartesianSeries", "file": "charts.js", "guessedtype": "property", "extends": "CartesianSeries", "shortname": "AreaSeries", "configs": {"styles": {"type": "Object", "description": "Style properties used for drawing area fills. This attribute is inherited from `Renderer`. Below are the default values:\n<dl>\n<dt>color</dt><dd>The color of the fill. The default value is determined by the order of the series on the graph. The color will be \nretrieved from the following array:\n`[\"#66007f\", \"#a86f41\", \"#295454\", \"#996ab2\", \"#e8cdb7\", \"#90bdbd\",\"#000000\",\"#c3b8ca\", \"#968373\", \"#678585\"]`\n</dd>\n<dt>alpha</dt><dd>Number between 0 and 1 that indicates the opacity of the fill. The default value is 1</dd>\n</dl>"}, "type": {"default": "area", "type": "String", "description": "Read-only attribute indicating the type of series.", "guessedname": "type", "guessedtype": "property"}}, "description": "The AreaSeries class renders quantitative data on a graph by creating a fill between 0\nand the relevant data points."}, "Intl": {"name": "Intl", "namespace": "", "module": "yui", "guessedname": "SPLIT_REGEX", "methods": {"setLang": {"return": {"type": "", "description": "boolean true if successful, false if not."}, "description": "Sets the active language for the given module.\nReturns false on failure, which would happen if the language had not been registered through the <a href=\"#method_add\">add()</a> method.", "param": "{String} module The module name.", "params": [{"type": "String", "name": "module", "description": " The module name."}, {"type": "String", "name": "lang", "description": " The BCP 47 language tag."}], "guessedname": "setLang", "guessedtype": "function"}, "get": {"return": {"type": "", "description": "String | Object A copy of the module's localized resources, or a single value if key is provided."}, "description": "Gets the module's localized resources for the currently active language (as provided by the <a href=\"#method_getLang\">getLang</a> method).\n<p>\nOptionally, the localized resources for alternate languages which have been added to Intl (see the <a href=\"#method_add\">add</a> method) can\nbe retrieved by providing the BCP 47 language tag as the lang parameter.\n</p>", "param": "{String} module The module name.", "params": [{"type": "String", "name": "module", "description": " The module name."}, {"type": "String", "name": "key", "description": " Optional. A single resource key. If not provided, returns a copy (shallow clone) of all resources."}, {"type": "String", "name": "lang", "description": " Optional. The BCP 47 language tag. If not provided, the module's currently active language is used."}], "guessedname": "get", "guessedtype": "function"}, "getLang": {"return": {"type": "String", "description": "The BCP 47 language tag."}, "description": "Get the currently active language for the given module.", "param": "{String} module The module name.", "params": [{"type": "String", "name": "module", "description": " The module name."}], "guessedname": "getLang", "guessedtype": "function"}, "getAvailableLangs": {"return": {"type": "Array", "description": "The array of languages available."}, "description": "Gets the list of languages for which localized resources are available for a given module, based on the module\nmeta-data (part of loader). If loader is not on the page, returns an empty array.", "param": "{String} module The name of the module", "params": [{"type": "String", "name": "module", "description": " The name of the module"}], "guessedname": "getAvailableLangs", "guessedtype": "function"}, "add": {"param": "{String} module The module name.", "params": [{"type": "String", "name": "module", "description": " The module name."}, {"type": "String", "name": "lang", "description": " The BCP 47 language tag."}, {"type": "Object", "name": "strings", "description": " The hash of localized values, keyed by the string name."}], "description": "Register a hash of localized resources for the given module and language", "guessedname": "add", "guessedtype": "function"}, "lookupBestLang": {"return": {"type": "String", "description": "The available language that best matches the\npreferred language list, or \"\"."}, "description": "Returns the language among those available that\nbest matches the preferred language list, using the Lookup\nalgorithm of BCP 47.\nIf none of the available languages meets the user's preferences,\nthen \"\" is returned.\nExtended language ranges are not supported.", "since": "3.1.0", "param": "{String[] | String} preferredLanguages The list of preferred\nlanguages in descending preference order, represented as BCP 47\nlanguage tags. A string array or a comma-separated list.", "params": [{"type": "String[] | String", "name": "preferredLanguages", "description": " The list of preferred\nlanguages in descending preference order, represented as BCP 47\nlanguage tags. A string array or a comma-separated list."}, {"type": "String[]", "name": "availableLanguages", "description": " The list of languages\nthat the application supports, represented as BCP 47 language\ntags."}], "guessedname": "lookupBestLang", "guessedtype": "function"}, "_mod": {"return": {"type": "Object", "description": "The hash of localized resources for the module, keyed by BCP language tag"}, "description": "Private method to retrieve the language hash for a given module.", "private": "", "params": [{"type": "String", "name": "module", "description": " The name of the module"}], "param": "{String} module The name of the module", "guessedname": "_mod", "guessedtype": "function"}}, "uses": ["EventTarget"], "file": "aui.js", "guessedtype": "property", "static": "", "shortname": "Intl", "events": {"intl:langChange": {"param": "{EventFacade} e The event facade\n<p>The event facade contains:</p>\n<dl>\n<dt>module</dt><dd>The name of the module for which the language changed</dd>\n<dt>newVal</dt><dd>The new language tag</dd>\n<dt>prevVal</dt><dd>The current language tag</dd>\n</dl>", "params": [{"type": "EventFacade", "name": "e", "description": " The event facade\n<p>The event facade contains:</p>\n<dl>\n<dt>module</dt><dd>The name of the module for which the language changed</dd>\n<dt>newVal</dt><dd>The new language tag</dd>\n<dt>prevVal</dt><dd>The current language tag</dd>\n</dl>"}], "description": "Notification event to indicate when the lang for a module has changed. There is no default behavior associated with this event,\nso the on and after moments are equivalent.", "guessedname": "emitFacade", "guessedtype": "property"}}, "description": "The Intl utility provides a central location for managing sets of\nlocalized resources (strings and formatting patterns)."}, "Frame": {"name": "Frame", "for": "Frame", "configs": {"lang": {"type": "String", "description": "The default language. Default: en-US", "guessedname": "lang", "guessedtype": "property"}, "src": {"type": "String", "description": "The src of the iframe/window. Defaults to javascript:;", "guessedname": "src", "guessedtype": "property"}, "use": {"guessedtype": "property", "type": "Array", "description": "Array of modules to include in the scoped YUI instance at render time. Default: ['none', 'selector-css2']", "guessedname": "use", "writeonce": ""}, "container": {"type": "String/HTMLElement/Node", "description": "The container to append the iFrame to on render.", "guessedname": "container", "guessedtype": "property"}, "title": {"type": "String", "description": "The title to give the blank page.", "guessedname": "title", "guessedtype": "property"}, "defaultblock": {"type": "String", "description": "The default tag to use for block level items, defaults to: p", "guessedname": "defaultblock", "guessedtype": "property"}, "node": {"type": "Node", "description": "The Node instance of the iframe.", "guessedname": "node", "guessedtype": "property"}, "extracss": {"type": "String", "description": "A string of CSS to add to the Head of the Editor", "guessedname": "extracss", "guessedtype": "property"}, "content": {"type": "String", "description": "The string to inject into the body of the new frame/window.", "guessedname": "content", "guessedtype": "property"}, "host": {"type": "Object", "description": "A reference to the Editor instance", "guessedname": "host", "guessedtype": "property"}, "designMode": {"guessedtype": "property", "type": "Boolean", "description": "Should designMode be turned on after creation.", "guessedname": "designMode", "writeonce": ""}, "basehref": {"type": "String", "description": "The base href to use in the iframe.", "guessedname": "basehref", "guessedtype": "property"}, "id": {"guessedtype": "property", "type": "String", "description": "Set the id of the new Node. (optional)", "guessedname": "id", "writeonce": ""}, "dir": {"type": "String", "description": "The default text direction for this new frame. Default: ltr", "guessedname": "dir", "guessedtype": "property"}, "linkedcss": {"type": "String", "description": "An array of url's to external linked style sheets", "guessedname": "linkedcss", "guessedtype": "property"}}, "constructors": [{"description": "Creates a wrapper around an iframe. It loads the content either from a local\nfile or from script and creates a local YUI instance bound to that new window and document."}], "namespace": "", "module": "editor", "events": {"contentChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "contentChange", "description": "Fires when the value for the configuration attribute 'content' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "hostChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "hostChange", "description": "Fires when the value for the configuration attribute 'host' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "designModeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "designModeChange", "description": "Fires when the value for the configuration attribute 'designMode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "dirChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "dirChange", "description": "Fires when the value for the configuration attribute 'dir' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "langChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "langChange", "description": "Fires when the value for the configuration attribute 'lang' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "extracssChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "extracssChange", "description": "Fires when the value for the configuration attribute 'extracss' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "linkedcssChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "linkedcssChange", "description": "Fires when the value for the configuration attribute 'linkedcss' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "useChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "useChange", "description": "Fires when the value for the configuration attribute 'use' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "basehrefChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "basehrefChange", "description": "Fires when the value for the configuration attribute 'basehref' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "defaultblockChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "defaultblockChange", "description": "Fires when the value for the configuration attribute 'defaultblock' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "idChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "idChange", "description": "Fires when the value for the configuration attribute 'id' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "nodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "nodeChange", "description": "Fires when the value for the configuration attribute 'node' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "titleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "titleChange", "description": "Fires when the value for the configuration attribute 'title' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "containerChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "containerChange", "description": "Fires when the value for the configuration attribute 'container' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "srcChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "srcChange", "description": "Fires when the value for the configuration attribute 'src' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "Frame", "methods": {"_setLinkedCSS": {"description": "Set's the linked CSS on the instance..", "private": "", "guessedname": "_getLinkedCSS", "guessedtype": "function"}, "render": {"return": {"type": "Frame", "description": ""}, "description": "Render the iframe into the container config option or open the window.", "chainable": "", "param": "{String/HTMLElement/Node} node The node to render to", "params": [{"type": "String/HTMLElement/Node", "name": "node", "description": " The node to render to"}], "guessedname": "render", "guessedtype": "function"}, "show": {"chainable": "", "return": {"type": "Frame", "description": ""}, "description": "Show the iframe instance", "guessedname": "show", "guessedtype": "function"}, "focus": {"return": {"type": "Frame", "description": ""}, "description": "Set the focus to the iframe", "chainable": "", "param": "{Function} fn Callback function to execute after focus happens", "params": [{"type": "Function", "name": "fn", "description": " Callback function to execute after focus happens"}], "guessedname": "focus", "guessedtype": "function"}, "_setExtraCSS": {"description": "Set's the extra CSS on the instance..", "private": "", "guessedname": "_setExtraCSS", "guessedtype": "function"}, "use": {"description": "This is a scoped version of the normal YUI.use method & is bound to this frame/window.\nAt setup, the inst.use method is mapped to this method.", "guessedname": "use", "guessedtype": "function"}, "_DOMPaste": {"description": "Simple pass thru handler for the paste event so we can do content cleanup", "param": "{Event.Facade} e", "params": [{"type": "Event.Facade", "name": "e", "description": ""}], "private": "", "guessedname": "_DOMPaste", "guessedtype": "function"}, "hide": {"chainable": "", "return": {"type": "Frame", "description": ""}, "description": "Hide the iframe instance", "guessedname": "hide", "guessedtype": "function"}, "getInstance": {"return": {"type": "YUI", "description": "The internal YUI instance"}, "description": "Get a reference to the internal YUI instance.", "guessedname": "getInstance", "guessedtype": "function"}, "_onContentReady": {"description": "Called once the content is available in the frame/window and calls the final use call\non the internal instance so that the modules are loaded properly.", "private": "", "guessedname": "_onContentReady", "guessedtype": "function"}, "_instanceLoaded": {"description": "Called from the first YUI instance that sets up the internal instance.\nThis loads the content into the window/frame and attaches the contentready event.", "param": "{YUI} inst The internal YUI instance bound to the frame/window", "params": [{"type": "YUI", "name": "inst", "description": " The internal YUI instance bound to the frame/window"}], "private": "", "guessedname": "_instanceLoaded", "guessedtype": "function"}, "_ieSetBodyHeight": {"private": "", "description": "Internal method to set the height of the body to the height of the document in IE.\nWith contenteditable being set, the document becomes unresponsive to clicks, this \nmethod expands the body to be the height of the document so that doesn't happen.", "guessedname": "_ieSetBodyHeight", "guessedtype": "function"}, "_onDomEvent": {"description": "Generic handler for all DOM events fired by the iframe or window. This handler\ntakes the current EventFacade and augments it to fire on the Frame host. It adds two new properties\nto the EventFacade called frameX and frameY which adds the scroll and xy position of the iframe\nto the original pageX and pageY of the event so external nodes can be positioned over the frame.", "param": "{Event.Facade} e", "params": [{"type": "Event.Facade", "name": "e", "description": ""}], "private": "", "guessedname": "_onDomEvent", "guessedtype": "function"}, "_create": {"guessedname": "_create", "return": {"type": "Object", "description": "Hash table containing references to the new Document & Window"}, "description": "Create the iframe or Window and get references to the Document & Window", "private": "", "guessedtype": "function"}, "_handleFocus": {"description": "Does some tricks on focus to set the proper cursor position.", "private": "", "guessedname": "_handleFocus", "guessedtype": "function"}, "_fixIECursors": {"private": "", "description": "It appears that having a BR tag anywhere in the source \"below\" a table with a percentage width (in IE 7 & 8)\nif there is any TEXTINPUT's outside the iframe, the cursor will rapidly flickr and the CPU would occasionally \nspike. This method finds all <BR>'s below the sourceIndex of the first table. Does some checks to see if they\ncan be modified and replaces then with a <WBR> so the layout will remain in tact, but the flickering will\nno longer happen.", "guessedname": "_fixIECursors", "guessedtype": "function"}, "_getHTML": {"return": {"type": "String", "description": ""}, "description": "Get the content from the iframe", "private": "", "params": [{"type": "String", "name": "html", "description": " The raw HTML from the body of the iframe."}], "param": "{String} html The raw HTML from the body of the iframe.", "guessedname": "_getHTML", "guessedtype": "function"}, "_setHTML": {"return": {"type": "String", "description": ""}, "description": "Set the content of the iframe", "private": "", "params": [{"type": "String", "name": "html", "description": " The raw HTML to set the body of the iframe to."}], "param": "{String} html The raw HTML to set the body of the iframe to.", "guessedname": "_setHTML", "guessedtype": "function"}, "_resolveBaseHref": {"return": {"type": "String", "description": ""}, "description": "Resolves the basehref of the page the frame is created on. Only applies to dynamic content.", "private": "", "params": [{"type": "String", "name": "href", "description": " The new value to use, if empty it will be resolved from the current url."}], "param": "{String} href The new value to use, if empty it will be resolved from the current url.", "guessedname": "_resolveBaseHref", "guessedtype": "function"}, "delegate": {"return": {"type": "EventHandle", "description": "The Event handle returned from Y.delegate"}, "description": "A delegate method passed to the instance's delegate method", "param": "{String} type The type of event to listen for", "params": [{"type": "String", "name": "type", "description": " The type of event to listen for"}, {"type": "Function", "name": "fn", "description": " The method to attach"}, {"type": "String", "name": "cont", "description": " The container to act as a delegate, if no \"sel\" passed, the body is assumed as the container."}, {"type": "String", "name": "sel", "description": " The selector to match in the event (optional)"}], "guessedname": "delegate", "guessedtype": "function"}, "_defReadyFn": {"description": "Binds DOM events, sets the iframe to visible and fires the ready event", "private": "", "guessedname": "_defReadyFn", "guessedtype": "function"}, "_resolveWinDoc": {"return": {"type": "Object", "description": "Object hash of window and document references, if a YUI config was passed, it is returned."}, "description": "Resolves the document and window from an iframe or window instance", "private": "", "params": [{"type": "Object", "name": "c", "description": " The YUI Config to add the window and document to"}], "param": "{Object} c The YUI Config to add the window and document to", "guessedname": "_resolveWinDoc", "guessedtype": "function"}, "getDocType": {"returns": "{String} The normalized DocType to apply to the iframe", "static": "", "description": "Parses document.doctype and generates a DocType to match the parent page, if supported.\nFor IE8, it grabs document.all[0].nodeValue and uses that. For IE < 8, it falls back to Frame.DOC_TYPE.", "guessedname": "getDocType", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "editor.js", "guessedtype": "function", "shortname": "Frame", "properties": {"DOC_TYPE": {"type": "String", "static": "", "description": "The DOCTYPE to prepend to the new document when created. Should match the one on the page being served.", "guessedname": "DOC_TYPE", "guessedtype": "property"}, "NAME": {"type": "String", "static": "", "description": "The name of the class (frame)", "guessedname": "NAME", "guessedtype": "property"}, "META": {"type": "String", "static": "", "description": "The meta-tag for Content-Type to add to the dynamic document", "guessedname": "META", "guessedtype": "property"}, "_instance": {"guessedname": "_instance", "type": "YUI", "description": "Internal reference to the YUI instance bound to the iFrame or window", "private": "", "guessedtype": "property"}, "_rendered": {"guessedname": "_rendered", "type": "Boolean", "description": "Internal reference set when render is called.", "private": "", "guessedtype": "property"}, "_ready": {"guessedname": "_ready", "type": "Boolean", "description": "Internal reference set when the content is ready.", "private": "", "guessedtype": "property"}, "HTML": {"static": "", "type": "String", "description": "The template string used to create the iframe"}, "_iframe": {"guessedname": "_iframe", "type": "Node", "description": "Internal Node reference to the iFrame or the window", "private": "", "guessedtype": "property"}, "THROTTLE_TIME": {"description": "The throttle time for key events in IE", "default": "100", "static": "", "guessedname": "THROTTLE_TIME", "guessedtype": "property", "type": "Number"}, "DOM_EVENTS": {"type": "Object", "static": "", "description": "The DomEvents that the frame automatically attaches and bubbles", "guessedname": "DOM_EVENTS", "guessedtype": "property"}, "DEFAULT_CSS": {"static": "", "type": "String", "description": "The default css used when creating the document."}, "PAGE_HTML": {"type": "String", "static": "", "description": "The template used to create the page when created dynamically.", "guessedname": "PAGE_HTML", "guessedtype": "property"}}, "description": "Creates a wrapper around an iframe. It loads the content either from a local\nfile or from script and creates a local YUI instance bound to that new window and document."}, "CacheOffline": {"name": "CacheOffline", "constructors": [{"description": "Extends Cache utility with offline functionality."}], "namespace": "", "module": "cache", "properties": {"NAME": {"description": "Class name.", "value": "\"cacheOffline\"", "static": "", "guessedname": "NAME", "guessedtype": "property", "type": "String", "final": ""}}, "configs": {"max": {"default": "null", "readonly": "", "description": "Disabled.", "guessedname": "max", "guessedtype": "property"}, "sandbox": {"description": "A string that must be passed in via the constructor.\nThis identifier is used to sandbox one cache instance's entries\nfrom another. Calling the cache instance's flush and length methods\nor get(\"entries\") will apply to only these sandboxed entries.", "default": "\"default\"", "initonly": "", "guessedname": "sandbox", "guessedtype": "property", "type": "String"}, "expires": {"default": "86400000 (one day)", "type": "Date | Number", "description": "Absolute Date when data expires or\nrelative number of milliseconds. Zero disables expiration.", "guessedname": "expires", "guessedtype": "property"}, "uniqueKeys": {"default": "true", "readonly": "", "description": "Always true for CacheOffline.", "guessedname": "uniqueKeys", "guessedtype": "property"}}, "methods": {"retrieve": {"return": {"type": "Object", "description": "Cached object with the properties request, response,\nand expires, or null."}, "description": "Retrieves cached object for given request, if available.\nReturns null if there is no cache match.", "param": "request {Object} Request object.", "params": [{"type": "Object", "name": "request", "description": "  Request object."}], "guessedname": "retrieve", "guessedtype": "function"}, "_setMax": {"protected": "", "description": "Always return null.", "guessedname": "_setMax", "guessedtype": "function"}, "_getEntries": {"protected": "", "description": "Gets all entries.", "guessedname": "_getEntries", "guessedtype": "function"}, "_defFlushFn": {"description": "Flushes cache.", "param": "e {Event.Facade} Event Facade object.", "protected": "", "params": [{"type": "Event.Facade", "name": "e", "description": "  Event Facade object."}], "guessedname": "_defFlushFn", "guessedtype": "function"}, "add": {"params": [{"type": "Object", "name": "request", "description": "  Request value must be a String or JSON."}, {"type": "Object", "name": "response", "description": "  Response value must be a String or JSON."}], "description": "Adds a new entry to the cache of the format\n{request:request, response:response, cached:cached, expires: expires}.", "param": "request {Object} Request value must be a String or JSON."}, "_getSize": {"protected": "", "description": "Gets size.", "guessedname": "_getSize", "guessedtype": "function"}, "_defAddFn": {"description": "Adds entry to cache.", "param": "e {Event.Facade} Event Facade with the following properties:\n<dl>\n<dt>entry (Object)</dt> <dd>The cached entry.</dd>\n</dl>", "protected": "", "params": [{"type": "Event.Facade", "name": "e", "description": "  Event Facade with the following properties:\n<dl>\n<dt>entry (Object)</dt> <dd>The cached entry.</dd>\n</dl>"}], "guessedname": "_defAddFn", "guessedtype": "function"}, "flushAll": {"static": "", "description": "Removes all items from all sandboxes. Useful if localStorage has\nexceeded quota. Only supported on browsers that implement HTML 5\nlocalStorage.", "guessedname": "flushAll", "guessedtype": "function"}}, "extends": "Cache", "superclass": "Cache", "file": "cache-offline.js", "shortname": "CacheOffline", "events": {"expiresChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "expiresChange", "description": "Fires when the value for the configuration attribute 'expires' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "uniqueKeysChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "uniqueKeysChange", "description": "Fires when the value for the configuration attribute 'uniqueKeys' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "maxChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "maxChange", "description": "Fires when the value for the configuration attribute 'max' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "sandboxChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "sandboxChange", "description": "Fires when the value for the configuration attribute 'sandbox' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "error": {"description": "Fired when an entry could not be added, most likely due to\nexceeded browser quota.\n<dl>\n<dt>error (Object)</dt> <dd>The error object.</dd>\n</dl>"}}, "description": "Extends Cache utility with offline functionality."}, "Test.Assert.UnexpectedError": {"name": "Test.Assert.UnexpectedError", "constructors": [{"params": [{"type": "Error", "name": "cause", "description": " The unexpected error that caused this error to be \nthrown."}], "description": "UnexpectedError is subclass of Error that is thrown whenever\nan error occurs within the course of a test and the test was not expected\nto throw an error."}], "namespace": "Test", "module": "test", "guessedname": "UnexpectedError", "extends": "Assert.Error", "superclass": "Assert.Error", "file": "test.js", "guessedtype": "function", "shortname": "Assert.UnexpectedError", "properties": {"cause": {"type": "Error", "description": "The unexpected error that occurred.", "guessedname": "cause", "guessedtype": "property"}, "name": {"type": "String", "description": "The name of the error that occurred.", "guessedname": "name", "guessedtype": "property"}, "stack": {"type": "String", "description": "Stack information for the error (if provided).", "guessedname": "stack", "guessedtype": "property"}}, "description": "UnexpectedError is subclass of Error that is thrown whenever\nan error occurs within the course of a test and the test was not expected\nto throw an error."}, "Plugin.ResizeProxy": {"properties": {"PROXY_TEMPLATE": {"type": "{String}", "description": "Template used to create the resize proxy.", "guessedname": "PROXY_TEMPLATE", "guessedtype": "property"}}, "name": "Plugin.ResizeProxy", "constructors": [{"description": "Adds a `proxyNode` attribute and resizes it instead of the actual node. __very similar to DDProxy__\nvar resize = new Y.Resize({\n//Selector of the node to resize\nnode: '#demo'\n});\nresize.plug(Y.Plugin.ResizeProxy);"}], "namespace": "Plugin", "module": "resize", "events": {"proxyNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "proxyNodeChange", "description": "Fires when the value for the configuration attribute 'proxyNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "methods": {"_syncProxyUI": {"protected": "", "description": "Sync the proxy UI with internal values from\n<a href=\"ResizeProxy.html#property_info\">info</a>.", "guessedname": "_syncProxyUI", "guessedtype": "function"}, "_renderProxy": {"protected": "", "description": "Render the <a href=\"ResizeProxy.html#config_proxyNode\">proxyNode</a> element and\nmake it sibling of the <a href=\"Resize.html#config_node\">node</a>.", "guessedname": "_renderProxy", "guessedtype": "function"}}, "extends": "Plugin.Base", "superclass": "Plugin.Base", "file": "resize.js", "shortname": "ResizeProxy", "configs": {"proxyNode": {"default": "Generated using an internal HTML markup", "type": "String|Node", "description": "The Resize proxy element.", "guessedname": "proxyNode", "guessedtype": "property"}}, "description": "Adds a `proxyNode` attribute and resizes it instead of the actual node. __very similar to DDProxy__\nvar resize = new Y.Resize({\n//Selector of the node to resize\nnode: '#demo'\n});\nresize.plug(Y.Plugin.ResizeProxy);"}, "StyleSheet": {"name": "StyleSheet", "constructors": [{"params": [{"type": "String|HTMLElement|Node", "name": "seed", "description": "  a style or link node, its id, or a\nname or guid of a StyleSheet, or a string of css text"}, {"type": "String", "name": "name", "description": "  (optional) name to register instance for future static\naccess"}], "description": "Create an instance of StyleSheet to encapsulate a css stylesheet.\nThe constructor can be called using function or constructor syntax.\n<pre><code>var sheet = Y.StyleSheet(..);</pre></code>\nor\n<pre><code>var sheet = new Y.StyleSheet(..);</pre></code>\nThe first parameter passed can be any of the following things:\n<ul>\n<li>The desired string name to register a new empty sheet</li>\n<li>The string name of an existing StyleSheet instance</li>\n<li>The unique guid generated for an existing StyleSheet instance</li>\n<li>The id of an existing <code>&lt;link&gt;</code> or <code>&lt;style&gt;</code> node</li>\n<li>The node reference for an existing <code>&lt;link&gt;</code> or <code>&lt;style&gt;</code> node</li>\n<li>The Y.Node instance wrapping an existing <code>&lt;link&gt;</code> or <code>&lt;style&gt;</code> node</li>\n<li>A chunk of css text to create a new stylesheet from</li>\n</ul>\n<p>If a string is passed, StyleSheet will first look in its static name\nregistry for an existing sheet, then in the DOM for an element with that id.\nIf neither are found and the string contains the { character, it will be\nused as a the initial cssText for a new StyleSheet.  Otherwise, a new empty\nStyleSheet is created, assigned the string value as a name, and registered\nstatically by that name.</p>\n<p>The optional second parameter is a string name to register the sheet as.\nThis param is largely useful when providing a node id/ref or chunk of css\ntext to create a populated instance.</p>"}], "namespace": "", "module": "stylesheet", "methods": {"toCssText": {"return": {"type": "String", "description": "the resulting cssText string"}, "description": "<p>Converts an object literal of style properties and values into a string\nof css text.  This can then be assigned to el.style.cssText.</p>\n<p>The optional second parameter is a cssText string representing the\nstarting state of the style prior to alterations.  This is most often\nextracted from the eventual target's current el.style.cssText.</p>", "param": "css {Object} object literal of style properties and values", "static": "", "guessedname": "toCssText", "guessedtype": "property", "params": [{"type": "Object", "name": "css", "description": "  object literal of style properties and values"}, {"type": "String", "name": "cssText", "description": "  (optional) starting cssText value"}]}, "enable": {"chainable": "", "return": {"type": "StyleSheet", "description": ""}, "description": "Enable all the rules in the sheet", "guessedname": "enable", "guessedtype": "function"}, "getCssText": {"return": {"type": "String", "description": ""}, "description": "Get the current cssText for a rule or the entire sheet.  If the\nselector param is supplied, only the cssText for that rule will be\nreturned, if found.  If the selector string targets multiple\nselectors separated by commas, the cssText of the first rule only\nwill be returned.  If no selector string, the stylesheet's full\ncssText will be returned.", "param": "sel {String} Selector string", "params": [{"type": "String", "name": "sel", "description": "  Selector string"}], "guessedname": "getCssText", "guessedtype": "function"}, "isEnabled": {"return": {"type": "Boolean", "description": ""}, "description": "Returns false if the StyleSheet is disabled.  Otherwise true.", "guessedname": "isEnabled", "guessedtype": "function"}, "register": {"return": {"type": "Boolean", "description": "false if no name or sheet is not a StyleSheet\ninstance. true otherwise."}, "description": "Registers a StyleSheet instance in the static registry by the given name", "param": "name {String} the name to assign the StyleSheet in the registry", "static": "", "guessedname": "register", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": "  the name to assign the StyleSheet in the registry"}, {"type": "StyleSheet", "name": "sheet", "description": "  The StyleSheet instance"}]}, "disable": {"chainable": "", "return": {"type": "StyleSheet", "description": ""}, "description": "Disable all the rules in the sheet.  Rules may be changed while the\nStyleSheet is disabled.", "guessedname": "disable", "guessedtype": "function"}, "set": {"return": {"type": "StyleSheet", "description": ""}, "description": "<p>Set style properties for a provided selector string.\nIf the selector includes commas, it will be split into individual\nselectors and applied accordingly.  If the selector string does not\nhave a corresponding rule in the sheet, it will be added.</p>\n<p>The object properties in the second parameter must be the JavaScript\nnames of style properties.  E.g. fontSize rather than font-size.</p>\n<p>The float style property will be set by any of &quot;float&quot;,\n&quot;styleFloat&quot;, or &quot;cssFloat&quot;.</p>", "chainable": "", "param": "sel {String} the selector string to apply the changes to", "params": [{"type": "String", "name": "sel", "description": "  the selector string to apply the changes to"}, {"type": "Object", "name": "css", "description": "  Object literal of style properties and new values"}], "guessedname": "set", "guessedtype": "function"}, "getId": {"return": {"type": "Number", "description": "the static id"}, "description": "Get the unique stamp for this StyleSheet instance", "guessedname": "getId", "guessedtype": "function"}, "isValidSelector": {"return": {"type": "Boolean", "description": ""}, "description": "<p>Determines if a selector string is safe to use.  Used internally\nin set to prevent IE from locking up when attempting to add a rule for a\n&quot;bad selector&quot;.</p>\n<p>Bad selectors are considered to be any string containing unescaped\n`~!@$%^&()+=|{}[];'\"?< or space. Also forbidden are . or # followed by\nanything other than an alphanumeric.  Additionally -abc or .-abc or\n#_abc or '# ' all fail.  There are likely more failure cases, so\nplease file a bug if you encounter one.</p>", "param": "sel {String} the selector string", "static": "", "guessedname": "isValidSelector", "guessedtype": "function", "params": [{"type": "String", "name": "sel", "description": "  the selector string"}]}, "unset": {"return": {"type": "StyleSheet", "description": ""}, "description": "<p>Unset style properties for a provided selector string, removing\ntheir effect from the style cascade.</p>\n<p>If the selector includes commas, it will be split into individual\nselectors and applied accordingly.  If there are no properties\nremaining in the rule after unsetting, the rule is removed.</p>\n<p>The style property or properties in the second parameter must be the\nJavaScript style property names. E.g. fontSize rather than font-size.</p>\n<p>The float style property will be unset by any of &quot;float&quot;,\n&quot;styleFloat&quot;, or &quot;cssFloat&quot;.</p>", "chainable": "", "param": "sel {String} the selector string to apply the changes to", "params": [{"type": "String", "name": "sel", "description": "  the selector string to apply the changes to"}, {"type": "String|Array", "name": "css", "description": "  style property name or Array of names"}], "guessedname": "unset", "guessedtype": "function"}}, "file": "stylesheet.js", "shortname": "StyleSheet", "description": "Create an instance of StyleSheet to encapsulate a css stylesheet.\nThe constructor can be called using function or constructor syntax.\n<pre><code>var sheet = Y.StyleSheet(..);</pre></code>\nor\n<pre><code>var sheet = new Y.StyleSheet(..);</pre></code>\nThe first parameter passed can be any of the following things:\n<ul>\n<li>The desired string name to register a new empty sheet</li>\n<li>The string name of an existing StyleSheet instance</li>\n<li>The unique guid generated for an existing StyleSheet instance</li>\n<li>The id of an existing <code>&lt;link&gt;</code> or <code>&lt;style&gt;</code> node</li>\n<li>The node reference for an existing <code>&lt;link&gt;</code> or <code>&lt;style&gt;</code> node</li>\n<li>The Y.Node instance wrapping an existing <code>&lt;link&gt;</code> or <code>&lt;style&gt;</code> node</li>\n<li>A chunk of css text to create a new stylesheet from</li>\n</ul>\n<p>If a string is passed, StyleSheet will first look in its static name\nregistry for an existing sheet, then in the DOM for an element with that id.\nIf neither are found and the string contains the { character, it will be\nused as a the initial cssText for a new StyleSheet.  Otherwise, a new empty\nStyleSheet is created, assigned the string value as a name, and registered\nstatically by that name.</p>\n<p>The optional second parameter is a string name to register the sheet as.\nThis param is largely useful when providing a node id/ref or chunk of css\ntext to create a populated instance.</p>"}, "Plugin.WidgetAnim": {"name": "Plugin.WidgetAnim", "namespace": "Plugin", "module": "widget-anim", "events": {"animHideChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "animHideChange", "description": "Fires when the value for the configuration attribute 'animHide' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "animShowChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "animShowChange", "description": "Fires when the value for the configuration attribute 'animShow' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "durationChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "durationChange", "description": "Fires when the value for the configuration attribute 'duration' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "configs": {"duration": {"default": "0.2 (seconds", "type": "Number", "description": "Default duration in seconds. Used as the default duration for the default animation implementations", "guessedname": "duration", "guessedtype": "property"}, "animShow": {"default": "WidgetAnim.ANIMATIONS.fadeIn", "type": "Anim", "description": "Default animation instance used for showing the widget (opacity fade-in)", "guessedname": "animShow", "guessedtype": "property"}, "animHide": {"default": "WidgetAnim.ANIMATIONS.fadeOut", "type": "Anim", "description": "Default animation instance used for hiding the widget (opacity fade-out)", "guessedname": "animHide", "guessedtype": "property"}}, "methods": {"_uiSetVisible": {"description": "The original Widget _uiSetVisible implementation. This currently needs to be replicated,\nso it can be invoked before or after the animation starts or stops, since the original\nmethods is not available to the AOP implementation.", "param": "{boolean} val true, if making the widget visible. false, if hiding it.", "params": [{"type": "boolean", "name": "val", "description": " true, if making the widget visible. false, if hiding it."}], "private": "", "guessedname": "_uiSetVisible", "guessedtype": "function"}, "_uiAnimSetVisible": {"description": "The injected method used to override the host widget's _uiSetVisible implementation with\nan animated version of the same.\n<p>This method replaces the default _uiSetVisible handler\nWidget provides, by injecting itself before _uiSetVisible,\nand preventing the default behavior. </p>", "param": "{boolean} val true, if making the widget visible. false, if hiding it.", "protected": "", "params": [{"type": "boolean", "name": "val", "description": " true, if making the widget visible. false, if hiding it."}], "guessedname": "_uiAnimSetVisible", "guessedtype": "function"}, "_bindAnimHide": {"private": "", "description": "Binds a listener to invoke the original visibility handling when the animHide animation is complete", "guessedname": "_bindAnimHide", "guessedtype": "function"}, "initializer": {"param": "{Object} config The user configuration for the plugin", "params": [{"type": "Object", "name": "config", "description": " The user configuration for the plugin"}], "description": "The initializer lifecycle implementation. Modifies the host widget's \nvisibililty implementation to add animation.", "guessedname": "initializer", "guessedtype": "function"}, "destructor": {"description": "The initializer destructor implementation. Responsible for destroying the configured\nanimation instances.", "guessedname": "destructor", "guessedtype": "function"}, "_bindAnimShow": {"private": "", "description": "Binds a listener to invoke the original visibility handling when the animShow animation is started", "guessedname": "_bindAnimShow", "guessedtype": "function"}}, "extends": "Plugin.Base", "superclass": "Plugin.Base", "file": "widget-anim.js", "shortname": "WidgetAnim", "properties": {"ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute \nconfiguration for the plugin.", "guessedname": "ATTRS", "guessedtype": "property"}, "NS": {"description": "The namespace for the plugin. This will be the property on the widget, which will \nreference the plugin instance, when it's plugged in.", "default": "\"anim\"", "static": "", "guessedname": "NS", "guessedtype": "property", "type": "String"}, "NAME": {"description": "The NAME of the WidgetAnim class. Used to prefix events generated\nby the plugin class.", "default": "\"pluginWidgetAnim\"", "static": "", "guessedname": "NAME", "guessedtype": "property", "type": "String"}, "ANIMATIONS": {"description": "Pre-Packaged Animation implementations, which can be used for animShow and animHide attribute \nvalues.", "default": "\"pluginWidgetAnim\"", "static": "", "guessedname": "ANIMATIONS", "guessedtype": "property", "type": "Object"}}, "description": "A plugin class which can be used to animate widget visibility changes."}, "AutoCompleteList": {"name": "AutoCompleteList", "configs": {"activeItem": {"type": "Node", "description": "Item that's currently active, if any. When the user presses enter,\nthis is the item that will be selected.", "guessedname": "activeItem", "guessedtype": "property"}, "activateFirstItem": {"default": "false", "type": "Boolean", "description": "If <code>true</code>, the first item in the list will be activated by\ndefault when the list is initially displayed and when results change.", "guessedname": "activateFirstItem", "guessedtype": "property"}, "listNode": {"type": "Node|null", "initonly": "", "description": "Node that will contain result items.", "guessedname": "listNode", "guessedtype": "property"}, "scrollIntoView": {"default": "false", "type": "Boolean", "description": "If <code>true</code>, the viewport will be scrolled to ensure that\nthe active list item is visible when necessary.", "guessedname": "scrollIntoView", "guessedtype": "property"}, "alwaysShowList": {"default": "false", "type": "Boolean", "description": "If <code>true</code>, the list will remain visible even when there\nare no results to display.", "guessedname": "alwaysShowList", "guessedtype": "property"}, "tabSelect": {"default": "true", "type": "Boolean", "description": "If <code>true</code>, pressing the tab key while the list is visible\nwill select the active item, if any.", "guessedname": "tabSelect", "guessedtype": "property"}, "hoveredItem": {"readonly": "", "type": "Node|null", "description": "Item currently being hovered over by the mouse, if any.", "guessedname": "hoveredItem", "guessedtype": "property"}, "strings": {"type": "Object", "description": "Translatable strings used by the AutoCompleteList widget.", "guessedname": "strings", "guessedtype": "property"}, "circular": {"default": "true", "type": "Boolean", "description": "If <code>true</code>, keyboard navigation will wrap around to the\nopposite end of the list when navigating past the first or last item.", "guessedname": "circular", "guessedtype": "property"}}, "description": "Traditional autocomplete dropdown list widget, just like Mom used to make.", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Configuration object."}], "description": "Traditional autocomplete dropdown list widget, just like Mom used to make."}], "namespace": "", "module": "autocomplete", "guessedname": "Lang", "uses": ["AutoCompleteBase", "WidgetPosition", "WidgetPositionAlign"], "superclass": "Widget", "file": "autocomplete-list.js", "guessedtype": "property", "extends": "Widget", "shortname": "AutoCompleteList", "events": {"circularChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "circularChange", "description": "Fires when the value for the configuration attribute 'circular' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "listNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "listNodeChange", "description": "Fires when the value for the configuration attribute 'listNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "stringsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "stringsChange", "description": "Fires when the value for the configuration attribute 'strings' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "tabSelectChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "tabSelectChange", "description": "Fires when the value for the configuration attribute 'tabSelect' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "scrollIntoViewChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "scrollIntoViewChange", "description": "Fires when the value for the configuration attribute 'scrollIntoView' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "activeItemChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "activeItemChange", "description": "Fires when the value for the configuration attribute 'activeItem' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "hoveredItemChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "hoveredItemChange", "description": "Fires when the value for the configuration attribute 'hoveredItem' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "alwaysShowListChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "alwaysShowListChange", "description": "Fires when the value for the configuration attribute 'alwaysShowList' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "activateFirstItemChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "activateFirstItemChange", "description": "Fires when the value for the configuration attribute 'activateFirstItem' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "select": {"preventable": "_defSelectFn", "params": [{"type": "EventFacade", "name": "e", "description": " Event facade with the following additional\nproperties:\n<dl>\n<dt>itemNode (Node)</dt>\n<dd>\nList item node that was selected.\n</dd>\n<dt>result (Object)</dt>\n<dd>\nAutoComplete result object.\n</dd>\n</dl>"}], "description": "Fires when an autocomplete suggestion is selected from the list,\ntypically via a keyboard action or mouse click.", "param": "{EventFacade} e Event facade with the following additional\nproperties:\n<dl>\n<dt>itemNode (Node)</dt>\n<dd>\nList item node that was selected.\n</dd>\n<dt>result (Object)</dt>\n<dd>\nAutoComplete result object.\n</dd>\n</dl>"}}, "methods": {"_keyUp": {"protected": "", "description": "Called when the up arrow key is pressed.", "guessedname": "_keyUp", "guessedtype": "function"}, "_keyDown": {"protected": "", "description": "Called when the down arrow key is pressed.", "guessedname": "_keyDown", "guessedtype": "function"}, "_defSelectFn": {"description": "Default <code>select</code> event handler.", "param": "{EventTarget} e", "protected": "", "params": [{"type": "EventTarget", "name": "e", "description": ""}], "guessedname": "_defSelectFn", "guessedtype": "function"}, "_bindList": {"protected": "", "description": "Binds list events.", "guessedname": "_bindList", "guessedtype": "function"}, "_add": {"return": {"type": "NodeList", "description": "Added nodes."}, "description": "Appends the specified result <i>items</i> to the list inside a new item\nnode.", "param": "{Array|Node|HTMLElement|String} items Result item or array of\nresult items.", "protected": "", "params": [{"type": "Array|Node|HTMLElement|String", "name": "items", "description": " Result item or array of\nresult items."}], "guessedname": "_add", "guessedtype": "function"}, "_syncPosition": {"protected": "", "description": "Synchronizes the result list's position and alignment.", "guessedname": "_syncPosition", "guessedtype": "function"}, "_bindKeys": {"protected": "", "description": "Binds keyboard events.", "guessedname": "_bindKeys", "guessedtype": "function"}, "_getFirstItemNode": {"protected": "", "return": {"type": "Node|null", "description": ""}, "description": "Gets the first item node in the list, or <code>null</code> if the list is\nempty.", "guessedname": "_getFirstItemNode", "guessedtype": "function"}, "_afterMouseOut": {"description": "Handles <code>mouseout</code> events.", "param": "{EventTarget} e", "protected": "", "params": [{"type": "EventTarget", "name": "e", "description": ""}], "guessedname": "_afterMouseOut", "guessedtype": "function"}, "_syncShim": {"protected": "", "description": "Synchronizes the size of the iframe shim used for IE6 and lower. In other\nbrowsers, this method is a noop.", "guessedname": "_syncShim", "guessedtype": "function"}, "_onListInputBlur": {"description": "Handles <code>inputNode</code> <code>blur</code> events.", "param": "{EventTarget} e", "protected": "", "params": [{"type": "EventTarget", "name": "e", "description": ""}], "guessedname": "_onListInputBlur", "guessedtype": "function"}, "_createAriaNode": {"protected": "", "return": {"type": "Node", "description": "ARIA node."}, "description": "Creates and returns an ARIA live region node.", "guessedname": "_createAriaNode", "guessedtype": "function"}, "hide": {"guessedname": "hide", "chainable": "", "description": "Hides the list, unless the <code>alwaysShowList</code> attribute is\n<code>true</code>.", "see": "show", "guessedtype": "function"}, "_initKeys": {"protected": "", "description": "Initializes keyboard command mappings.", "guessedname": "_initKeys", "guessedtype": "function"}, "_onItemClick": {"description": "Delegated event handler for item <code>click</code> events.", "param": "{EventTarget} e", "protected": "", "params": [{"type": "EventTarget", "name": "e", "description": ""}], "guessedname": "_onItemClick", "guessedtype": "function"}, "_afterResultsChange": {"description": "Handles <code>resultsChange</code> events.", "param": "{EventFacade} e", "protected": "", "params": [{"type": "EventFacade", "name": "e", "description": ""}], "guessedname": "_afterResultsChange", "guessedtype": "function"}, "_bindInput": {"protected": "", "description": "Binds <code>inputNode</code> events and behavior.", "guessedname": "_bindInput", "guessedtype": "function"}, "_syncResults": {"description": "Synchronizes the results displayed in the list with those in the\n<i>results</i> argument, or with the <code>results</code> attribute if an\nargument is not provided.", "param": "{Array} results (optional) Results.", "protected": "", "params": [{"type": "Array", "name": "results", "description": " (optional) Results."}], "guessedname": "_syncResults", "guessedtype": "function"}, "_afterHoveredItemChange": {"description": "Handles <code>hoveredItemChange</code> events.", "param": "{EventTarget} e", "protected": "", "params": [{"type": "EventTarget", "name": "e", "description": ""}], "guessedname": "_afterHoveredItemChange", "guessedtype": "function"}, "_onInputKey": {"description": "Handles <code>inputNode</code> key events.", "param": "{EventTarget} e", "protected": "", "params": [{"type": "EventTarget", "name": "e", "description": ""}], "guessedname": "_onInputKey", "guessedtype": "function"}, "_clear": {"protected": "", "description": "Clears the contents of the tray.", "guessedname": "_clear", "guessedtype": "function"}, "_createItemNode": {"return": {"type": "Node", "description": "Item node."}, "description": "Creates and returns an item node with the specified <i>content</i>.", "param": "{Object} result Result object.", "protected": "", "params": [{"type": "Object", "name": "result", "description": " Result object."}], "guessedname": "_createItemNode", "guessedtype": "function"}, "_afterMouseOver": {"description": "Handles <code>mouseover</code> events.", "param": "{EventTarget} e", "protected": "", "params": [{"type": "EventTarget", "name": "e", "description": ""}], "guessedname": "_afterMouseOver", "guessedtype": "function"}, "_keyEnter": {"protected": "", "description": "Called when the enter key is pressed.", "guessedname": "_keyEnter", "guessedtype": "function"}, "_activatePrevItem": {"chainable": "", "protected": "", "description": "Activates the item previous to the currently active item. If there is no\nprevious item and the <code>circular</code> attribute is\n<code>true</code>, focus will wrap back to the input node.", "guessedname": "_activatePrevItem", "guessedtype": "function"}, "_afterVisibleChange": {"description": "Handles <code>visibleChange</code> events.", "param": "{EventFacade} e", "protected": "", "params": [{"type": "EventFacade", "name": "e", "description": ""}], "guessedname": "_afterVisibleChange", "guessedtype": "function"}, "_keyTab": {"protected": "", "description": "Called when the tab key is pressed.", "guessedname": "_keyTab", "guessedtype": "function"}, "_getLastItemNode": {"protected": "", "return": {"type": "Node|null", "description": ""}, "description": "Gets the last item node in the list, or <code>null</code> if the list is\nempty.", "guessedname": "_getLastItemNode", "guessedtype": "function"}, "_syncVisibility": {"description": "Synchronizes the visibility of the tray with the <i>visible</i> argument,\nor with the <code>visible</code> attribute if an argument is not\nprovided.", "param": "{Boolean} visible (optional) Visibility.", "protected": "", "params": [{"type": "Boolean", "name": "visible", "description": " (optional) Visibility."}], "guessedname": "_syncVisibility", "guessedtype": "function"}, "_afterAlwaysShowListChange": {"description": "Handles <code>alwaysShowListChange</code> events.", "param": "{EventTarget} e", "protected": "", "params": [{"type": "EventTarget", "name": "e", "description": ""}], "guessedname": "_afterAlwaysShowListChange", "guessedtype": "function"}, "selectItem": {"description": "Selects the specified <i>itemNode</i>, or the current\n<code>activeItem</code> if <i>itemNode</i> is not specified.", "chainable": "", "param": "{Node} itemNode (optional) Item node to select.", "params": [{"type": "Node", "name": "itemNode", "description": " (optional) Item node to select."}, {"type": "EventFacade", "name": "originEvent", "description": " (optional) Event that triggered the\nselection, if any."}], "guessedname": "selectItem", "guessedtype": "function"}, "_ariaSay": {"description": "Updates the ARIA live region with the specified message.", "param": "{String} stringId String id (from the <code>strings</code>\nattribute) of the message to speak.", "protected": "", "params": [{"type": "String", "name": "stringId", "description": " String id (from the <code>strings</code>\nattribute) of the message to speak."}, {"type": "Object", "name": "subs", "description": " (optional) Substitutions for placeholders in the\nstring."}], "guessedname": "_ariaSay", "guessedtype": "function"}, "_activateNextItem": {"chainable": "", "protected": "", "description": "Activates the next item after the currently active item. If there is no\nnext item and the <code>circular</code> attribute is <code>true</code>,\nfocus will wrap back to the input node.", "guessedname": "_activateNextItem", "guessedtype": "function"}, "_createListNode": {"protected": "", "return": {"type": "Node", "description": "List node."}, "description": "Creates and returns a list node. If the `listNode` attribute is already\nset to an existing node, that node will be used.", "guessedname": "_createListNode", "guessedtype": "function"}, "_unbindKeys": {"protected": "", "description": "Unbinds keyboard events.", "guessedname": "_unbindKeys", "guessedtype": "function"}, "_keyEsc": {"protected": "", "description": "Called when the escape key is pressed.", "guessedname": "_keyEsc", "guessedtype": "function"}, "_afterActiveItemChange": {"description": "Handles <code>activeItemChange</code> events.", "param": "{EventTarget} e", "protected": "", "params": [{"type": "EventTarget", "name": "e", "description": ""}], "guessedname": "_afterActiveItemChange", "guessedtype": "function"}}}, "Renderer": {"properties": {"_styles": {"guessedname": "_styles", "type": "Object", "description": "Storage for `styles` attribute.", "private": "", "guessedtype": "property"}}, "name": "Renderer", "constructors": [{"description": "The Renderer class is a base class for chart components that use the `styles`\nattribute."}], "namespace": "", "module": "charts", "events": {"graphicChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "graphicChange", "description": "Fires when the value for the configuration attribute 'graphic' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "stylesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "stylesChange", "description": "Fires when the value for the configuration attribute 'styles' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "methods": {"_getDefaultStyles": {"protected": "", "return": {"type": "", "description": "Object"}, "description": "Gets the default value for the `styles` attribute.", "guessedname": "_getDefaultStyles", "guessedtype": "function"}, "_setStyles": {"return": {"type": "", "description": "Object"}, "description": "Method used by `styles` setter.", "param": "{Object} newStyles Hash of properties to update.", "protected": "", "params": [{"type": "Object", "name": "newStyles", "description": " Hash of properties to update."}], "guessedname": "_setStyles", "guessedtype": "function"}, "_mergeStyles": {"return": {"type": "", "description": "Object"}, "description": "Merges to object literals so that only specified properties are \noverwritten.", "param": "{Object} a Hash of new styles", "protected": "", "params": [{"type": "Object", "name": "a", "description": " Hash of new styles"}, {"type": "Object", "name": "b", "description": " Hash of original styles"}], "guessedname": "_mergeStyles", "guessedtype": "function"}}, "file": "charts.js", "shortname": "Renderer", "configs": {"styles": {"type": "Object", "description": "Style properties for class", "guessedname": "styles", "guessedtype": "property"}, "graphic": {"type": "Graphic", "description": "The graphic in which drawings will be rendered.", "guessedname": "graphic", "guessedtype": "property"}}, "description": "The Renderer class is a base class for chart components that use the `styles`\nattribute."}, "DataType.Boolean": {"name": "DataType.Boolean", "namespace": "", "module": "aui-datatype", "guessedname": "DB", "methods": {"parse": {"return": {"type": "boolean", "description": "Parsed value"}, "description": "Parses any <code>falsey</code> value to <code>false</code> and\n<code>non-falsey</code> to <code>true</code>.", "param": "{*} data falsey or non-falsey values (i.e., falsey values: null, false, undefined, NaN; non-falsey values: 1, true, 'abc').", "params": [{"type": "*", "name": "data", "description": " falsey or non-falsey values (i.e., falsey values: null, false, undefined, NaN; non-falsey values: 1, true, 'abc')."}], "guessedname": "parse", "guessedtype": "function"}}, "static": "", "file": "aui-datatype.js", "guessedtype": "property", "shortname": "DataType.Boolean", "description": "DataType.Boolean provides a set of utility to parse <code>falsey</code>\nvalue to <code>false</code> and <code>non-falsey</code> to\n<code>true</code>."}, "DataSource.Function": {"name": "DataSource.Function", "configs": {"source": {"default": "null", "type": "MIXED", "description": "Pointer to live data.", "guessedname": "source", "guessedtype": "property"}}, "constructors": [{"description": "Function subclass for the DataSource Utility."}], "namespace": "", "module": "datasource", "events": {"sourceChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "sourceChange", "description": "Fires when the value for the configuration attribute 'source' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "LANG", "methods": {"_defRequestFn": {"description": "Passes query string to IO. Fires <code>response</code> event when\nresponse is received asynchronously.", "param": "e {Event.Facade} Event Facade with the following properties:\n<dl>\n<dt>tId (Number)</dt> <dd>Unique transaction ID.</dd>\n<dt>request (Object)</dt> <dd>The request.</dd>\n<dt>callback (Object)</dt> <dd>The callback object with the following properties:\n<dl>\n<dt>success (Function)</dt> <dd>Success handler.</dd>\n<dt>failure (Function)</dt> <dd>Failure handler.</dd>\n</dl>\n</dd>\n<dt>cfg (Object)</dt> <dd>Configuration object.</dd>\n</dl>", "protected": "", "params": [{"type": "Event.Facade", "name": "e", "description": "  Event Facade with the following properties:\n<dl>\n<dt>tId (Number)</dt> <dd>Unique transaction ID.</dd>\n<dt>request (Object)</dt> <dd>The request.</dd>\n<dt>callback (Object)</dt> <dd>The callback object with the following properties:\n<dl>\n<dt>success (Function)</dt> <dd>Success handler.</dd>\n<dt>failure (Function)</dt> <dd>Failure handler.</dd>\n</dl>\n</dd>\n<dt>cfg (Object)</dt> <dd>Configuration object.</dd>\n</dl>"}], "guessedname": "_defRequestFn", "guessedtype": "function"}}, "extends": "DataSource.Local", "superclass": "DataSource.Local", "file": "datasource-function.js", "guessedtype": "property", "shortname": "DataSource.Function", "properties": {"NAME": {"description": "Class name.", "value": "\"dataSourceFunction\"", "static": "", "guessedname": "NAME", "guessedtype": "property", "type": "String", "final": ""}}, "description": "Function subclass for the DataSource Utility."}, "StackedLineSeries": {"name": "StackedLineSeries", "constructors": [{"description": "StackedLineSeries creates line graphs in which the different series are stacked along a value axis\nto indicate their contribution to a cumulative total."}], "namespace": "", "module": "charts", "events": {"typeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "typeChange", "description": "Fires when the value for the configuration attribute 'type' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "StackedLineSeries", "methods": {"setAreaData": {"protected": "", "description": "Calculates the coordinates for the series. Overrides base implementation.", "guessedname": "setAreaData", "guessedtype": "function"}}, "uses": ["StackingUtil"], "superclass": "LineSeries", "file": "charts.js", "guessedtype": "property", "extends": "LineSeries", "shortname": "StackedLineSeries", "configs": {"type": {"default": "stackedLine", "type": "String", "description": "Read-only attribute indicating the type of series.", "guessedname": "type", "guessedtype": "property"}}, "description": "StackedLineSeries creates line graphs in which the different series are stacked along a value axis\nto indicate their contribution to a cumulative total."}, "PortalLayout": {"name": "PortalLayout", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "A base class for PortalLayout, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>DragDrop utility for drag lists, portal layouts (portlets)</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var portalLayout = new A.PortalLayout({\ndragNodes: '.portlet',\ndropNodes: '.column',\nproxyNode: A.Node.create('<div class=\"aui-portal-layout-proxy\"></div>'),\nlazyStart: true\n</code></pre>\nCheck the list of <a href=\"PortalLayout.html#configattributes\">Configuration Attributes</a> available for\nPortalLayout."}], "namespace": "", "module": "aui-portal-layout", "guessedname": "PortalLayout", "methods": {"initializer": {"protected": "", "description": "Construction logic executed during PortalLayout instantiation. Lifecycle.", "guessedname": "initializer", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "aui-portal-layout.js", "guessedtype": "property", "shortname": "PortalLayout", "properties": {"PortalLayout.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the PortalLayout.", "guessedname": "ATTRS", "guessedtype": "property"}, "PortalLayout.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}}, "description": "A base class for PortalLayout, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>DragDrop utility for drag lists, portal layouts (portlets)</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var portalLayout = new A.PortalLayout({\ndragNodes: '.portlet',\ndropNodes: '.column',\nproxyNode: A.Node.create('<div class=\"aui-portal-layout-proxy\"></div>'),\nlazyStart: true\n</code></pre>\nCheck the list of <a href=\"PortalLayout.html#configattributes\">Configuration Attributes</a> available for\nPortalLayout."}, "MarkerSeries": {"name": "MarkerSeries", "constructors": [{"description": "The MarkerSeries class renders quantitative data by plotting relevant data points \non a graph."}], "namespace": "", "module": "charts", "events": {"typeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "typeChange", "description": "Fires when the value for the configuration attribute 'type' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "stylesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "stylesChange", "description": "Fires when the value for the configuration attribute 'styles' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "MarkerSeries", "methods": {"drawSeries": {"protected": "", "description": "Draws the series.", "guessedname": "drawSeries", "guessedtype": "function"}, "_setStyles": {"return": {"type": "", "description": "Object"}, "description": "Method used by `styles` setter. Overrides base implementation.", "param": "{Object} newStyles Hash of properties to update.", "protected": "", "params": [{"type": "Object", "name": "newStyles", "description": " Hash of properties to update."}], "guessedname": "_setStyles", "guessedtype": "function"}, "_getDefaultStyles": {"protected": "", "return": {"type": "", "description": "Object"}, "description": "Gets the default value for the `styles` attribute. Overrides\nbase implementation.", "guessedname": "_getDefaultStyles", "guessedtype": "function"}}, "uses": ["Plots"], "superclass": "CartesianSeries", "file": "charts.js", "guessedtype": "property", "extends": "CartesianSeries", "shortname": "MarkerSeries", "configs": {"styles": {"type": "Object", "description": "Style properties used for drawing markers. This attribute is inherited from `Renderer`. Below are the default values:\n<dl>\n<dt>fill</dt><dd>A hash containing the following values:\n<dl>\n<dt>color</dt><dd>Color of the fill. The default value is determined by the order of the series on the graph. The color\nwill be retrieved from the below array:<br/>\n`[\"#6084d0\", \"#eeb647\", \"#6c6b5f\", \"#d6484f\", \"#ce9ed1\", \"#ff9f3b\", \"#93b7ff\", \"#e0ddd0\", \"#94ecba\", \"#309687\"]`\n</dd>\n<dt>alpha</dt><dd>Number from 0 to 1 indicating the opacity of the marker fill. The default value is 1.</dd>\n</dl>\n</dd>\n<dt>border</dt><dd>A hash containing the following values:\n<dl>\n<dt>color</dt><dd>Color of the border. The default value is determined by the order of the series on the graph. The color\nwill be retrieved from the below array:<br/>\n`[\"#205096\", \"#b38206\", \"#000000\", \"#94001e\", \"#9d6fa0\", \"#e55b00\", \"#5e85c9\", \"#adab9e\", \"#6ac291\", \"#006457\"]`\n<dt>alpha</dt><dd>Number from 0 to 1 indicating the opacity of the marker border. The default value is 1.</dd>\n<dt>weight</dt><dd>Number indicating the width of the border. The default value is 1.</dd>\n</dl>\n</dd>\n<dt>width</dt><dd>indicates the width of the marker. The default value is 10.</dd>\n<dt>height</dt><dd>indicates the height of the marker The default value is 10.</dd>\n<dt>over</dt><dd>hash containing styles for markers when highlighted by a `mouseover` event. The default \nvalues for each style is null. When an over style is not set, the non-over value will be used. For example,\nthe default value for `marker.over.fill.color` is equivalent to `marker.fill.color`.</dd>\n</dl>"}, "type": {"default": "marker", "type": "String", "description": "Read-only attribute indicating the type of series.", "guessedname": "type", "guessedtype": "property"}}, "description": "The MarkerSeries class renders quantitative data by plotting relevant data points \non a graph."}, "DatepickerManager": {"name": "DatepickerManager", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "A base class for DatepickerManager:"}], "namespace": "", "module": "aui-calendar", "events": {"calendarChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "calendarChange", "description": "Fires when the value for the configuration attribute 'calendar' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "zIndexBaseChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "zIndexBaseChange", "description": "Fires when the value for the configuration attribute 'zIndexBase' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "stackChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "stackChange", "description": "Fires when the value for the configuration attribute 'stack' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "setValueChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "setValueChange", "description": "Fires when the value for the configuration attribute 'setValue' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "formatterChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "formatterChange", "description": "Fires when the value for the configuration attribute 'formatter' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "DatepickerManager", "methods": {"_onShowOverlay": {"description": "Fires before the DatePicker overlay show. Responsible to invoke the\nrender phase of the Calendar.", "param": "{Event} event", "protected": "", "params": [{"type": "Event", "name": "event", "description": ""}], "guessedname": "_onShowOverlay", "guessedtype": "function"}, "_afterSelectDate": {"description": "Fires when a date is selected on the Calendar.", "param": "{Event} event", "protected": "", "params": [{"type": "Event", "name": "event", "description": ""}], "guessedname": "_afterSelectDate", "guessedtype": "function"}, "destructor": {"protected": "", "description": "Descructor lifecycle implementation for the Datepicker class.\nPurges events attached to the node (and all child nodes).", "guessedname": "destructor", "guessedtype": "function"}, "_setCalendar": {"return": {"type": "", "description": ""}, "description": "Setter for the <a href=\"DatePicker.html#calendar\">calendar</a>\nattribute.", "param": "{String} eventType Event type", "protected": "", "params": [{"type": "String", "name": "eventType", "description": " Event type"}], "guessedname": "_setCalendar", "guessedtype": "function"}, "_setStack": {"return": {"type": "boolean", "description": ""}, "description": "Setter for the <a href=\"Calendar.html#config_stack\">stack</a> attribute.", "param": "{boolean} value", "protected": "", "params": [{"type": "boolean", "name": "value", "description": ""}], "guessedname": "_setStack", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Bind the events on the Datepicker UI. Lifecycle.", "guessedname": "bindUI", "guessedtype": "function"}, "_renderCalendar": {"protected": "", "description": "Render the Calendar used inside the DatePicker.", "guessedname": "_renderCalendar", "guessedtype": "function"}, "initializer": {"protected": "", "description": "Construction logic executed during Datepicker instantiation. Lifecycle.", "guessedname": "initializer", "guessedtype": "function"}, "_setTriggerValue": {"description": "Set the value of the trigger input with the date information.", "param": "{Object} dateObj Object containing date information", "protected": "", "params": [{"type": "Object", "name": "dateObj", "description": " Object containing date information"}], "guessedname": "_setTriggerValue", "guessedtype": "function"}}, "static": "", "superclass": "OverlayManager", "file": "aui-datepicker.js", "guessedtype": "property", "extends": "OverlayManager", "shortname": "DatepickerManager", "configs": {"calendar": {"default": "{}", "type": "Object", "description": "<a href=\"Calendar.html\">Calendar</a> configuration Object.</a>", "guessedname": "calendar", "guessedtype": "property"}, "formatter": {"default": "function(dates) { return dates.formatted.join(','); }", "type": "function", "description": "Function to format the array of the selected dates before set the\nvalue of the input.", "guessedname": "formatter", "guessedtype": "property"}, "stack": {"default": "true", "type": "boolean", "description": "If true is able to do stacking with another overlays.", "guessedname": "stack", "guessedtype": "property"}, "setValue": {"default": "true", "type": "boolean", "description": "If true set the selected date with the correct\n<a href=\"Calendar.html#config_dateFormat\">dateFormat</a> to the\nvalue of the input field which is hosting the Calendar.", "guessedname": "setValue", "guessedtype": "property"}, "zIndexBase": {"default": "1000", "type": "Number", "description": "ZIndex default value passed to the\n<a href=\"OverlayManager.html#config_zIndexBase\">zIndexBase</a> of\n<a href=\"OverlayManager.html\">OverlayManager</a>.", "guessedname": "zIndexBase", "guessedtype": "property"}}, "description": "A base class for DatepickerManager:"}, "Plugin.EditorBR": {"name": "Plugin.EditorBR", "constructors": [{"description": "Plugin for Editor to normalize BR's."}], "namespace": "", "module": "editor", "guessedname": "EditorBR", "methods": {"_afterEditorReady": {"private": "", "description": "Adds listeners for keydown in IE and Webkit. Also fires insertbeonreturn for supporting browsers.", "guessedname": "_afterEditorReady", "guessedtype": "function"}, "_onNodeChange": {"description": "Adds a nodeChange listener only for FF, in the event of a backspace or delete, it creates an empy textNode\ninserts it into the DOM after the e.changedNode, then removes it. Causing FF to redraw the content.", "param": "{Event} e The nodeChange event.", "params": [{"type": "Event", "name": "e", "description": " The nodeChange event."}], "private": "", "guessedname": "_onNodeChange", "guessedtype": "function"}, "_onKeyDown": {"private": "", "description": "Frame keyDown handler that normalizes BR's when pressing ENTER.", "guessedname": "_onKeyDown", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "editor.js", "guessedtype": "function", "shortname": "Plugin.EditorBR", "properties": {"NS": {"static": "", "description": "editorBR", "guessedname": "NS", "guessedtype": "property"}, "NAME": {"static": "", "description": "editorBR", "guessedname": "NAME", "guessedtype": "property"}}, "description": "Plugin for Editor to normalize BR's."}, "WidgetParent": {"name": "WidgetParent", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " User configuration object."}], "description": "Widget extension providing functionality enabling a Widget to be a \nparent of another Widget.\n<p>In addition to the set of attributes supported by WidgetParent, the constructor\nconfiguration object can also contain a <code>children</code> which can be used\nto add child widgets to the parent during construction. The <code>children</code>\nproperty is an array of either child widget instances or child widget configuration \nobjects, and is sugar for the <a href=\"#method_add\">add</a> method. See the \n<a href=\"#method_add\">add</a> for details on the structure of the child widget \nconfiguration object."}], "namespace": "", "module": "widget-parent", "properties": {"_childrenContainer": {"description": "<p>By default WidgetParent will render it's children to the parent's content box.</p>\n<p>If the children need to be rendered somewhere else, the _childrenContainer property\ncan be set to the Node which the children should be rendered to. This property should be\nset before the _renderChildren method is invoked, ideally in your renderUI method, \nas soon as you create the element to be rendered to.</p>", "value": "The content box", "protected": "", "guessedname": "renderTo", "guessedtype": "property", "type": "Node"}}, "configs": {"selection": {"readonly": "", "type": "{ArrayList|Widget}", "description": "Returns the currently selected child Widget.  If the \n<code>mulitple</code> attribte is set to <code>true</code> will \nreturn an Y.ArrayList instance containing the currently selected \nchildren.  If no children are selected, will return null.", "guessedname": "selection", "guessedtype": "property"}, "activeDescendant": {"readonly": "", "type": "Widget", "description": "Returns the Widget's currently focused descendant Widget.", "guessedname": "activeDescendant", "guessedtype": "property"}, "multiple": {"description": "Boolean indicating if multiple children can be selected at \nonce.  Whether or not multiple selection is enabled is always delegated\nto the value of the <code>multiple</code> attribute of the root widget\nin the object hierarchy.", "writeonce": "", "default": "false", "guessedname": "multiple", "guessedtype": "property", "type": "Boolean"}, "defaultChildType": {"type": "{String|Object}", "description": "String representing the default type of the children \nmanaged by this Widget.  Can also supply default type as a constructor\nreference.", "guessedname": "defaultChildType", "guessedtype": "property"}}, "methods": {"selectAll": {"description": "Selects all children.", "guessedname": "selectAll", "guessedtype": "function"}, "selectChild": {"param": "{Number} i the index of the child to be selected", "params": [{"type": "Number", "name": "i", "description": " the index of the child to be selected"}], "description": "Selects the child at the given index (zero-based).", "guessedname": "selectChild", "guessedtype": "function"}, "_updateActiveDescendant": {"description": "Attribute change listener for the <code>focused</code> \nattribute of child Widgets, responsible for setting the value of the \nparent's <code>activeDescendant</code> attribute.", "param": "{EventFacade} event The event facade for the attribute change.", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " The event facade for the attribute change."}], "guessedname": "_updateActiveDescendant", "guessedtype": "function"}, "_bindUIParent": {"protected": "", "description": "Sets up DOM and CustomEvent listeners for the parent widget.\n<p>\nThis method in invoked after bindUI is invoked for the Widget class\nusing YUI's aop infrastructure.\n</p>", "guessedname": "_bindUIParent", "guessedtype": "function"}, "_add": {"return": {"type": "Widget|Array", "description": "Successfully added Widget or Array containing the \nsuccessfully added Widget instance(s). If no children where added, will \nwill return undefined."}, "description": "Adds a Widget as a child.  If the specified Widget already\nhas a parent it will be removed from its current parent before\nbeing added as a child.", "param": "child {Widget|Object} The Widget instance, or configuration \nobject for the Widget to be added as a child.", "protected": "", "params": [{"type": "Widget|Object", "name": "child", "description": "  The Widget instance, or configuration \nobject for the Widget to be added as a child."}, {"type": "Array", "name": "child", "description": "  Array of Widget instances, or configuration \nobjects for the Widgets to be added as a children."}, {"type": "Number", "name": "index", "description": "  (Optional.)  Number representing the position at \nwhich the child should be inserted."}], "guessedname": "_add", "guessedtype": "function"}, "_updateSelection": {"description": "Attribute change listener for the <code>selected</code> \nattribute of child Widgets, responsible for setting the value of the \nparent's <code>selection</code> attribute.", "param": "{EventFacade} event The event facade for the attribute change.", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " The event facade for the attribute change."}], "guessedname": "_updateSelection", "guessedtype": "function"}, "_afterParentSelectedChange": {"description": "Attribute change listener for the <code>selected</code> \nattribute, responsible for syncing the selected state of all children to \nmatch that of their parent Widget.", "param": "{EventFacade} event The event facade for the attribute change.", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " The event facade for the attribute change."}], "guessedname": "_afterParentSelectedChange", "guessedtype": "function"}, "_defRemoveChildFn": {"description": "Default removeChild handler", "param": "event {EventFacade} The Event object", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": "  The Event object"}, {"type": "Widget", "name": "child", "description": "  The Widget instance to be removed."}, {"type": "Number", "name": "index", "description": "  Number representing the index of the Widget to \nbe removed."}], "guessedname": "_defRemoveChildFn", "guessedtype": "function"}, "_afterDestroyChild": {"description": "Destroy event listener for each child Widget, responsible for removing \nthe destroyed child Widget from the parent's internal array of children\n(_items property).", "param": "{EventFacade} event The event facade for the attribute change.", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " The event facade for the attribute change."}], "guessedname": "_afterDestroyChild", "guessedtype": "function"}, "add": {"return": {"type": "ArrayList", "description": "Y.ArrayList containing the successfully added \nWidget instance(s).  If no children where added, will return an empty \nY.ArrayList instance."}, "description": "Adds a Widget as a child.  If the specified Widget already\nhas a parent it will be removed from its current parent before\nbeing added as a child.", "param": "child {Widget|Object} The Widget instance, or configuration \nobject for the Widget to be added as a child. The configuration object\nfor the child can include a <code>childType</code> property, which is either\na constructor function or a string which names a constructor function on the \nY instance (e.g. \"Tab\" would refer to Y.Tab) (<code>childType</code> used to be \nnamed <code>type</code>, support for which has been deprecated, but is still\nmaintained for backward compatibility. <code>childType</code> takes precedence\nover <code>type</code> if both are defined.", "params": [{"type": "Widget|Object", "name": "child", "description": "  The Widget instance, or configuration \nobject for the Widget to be added as a child. The configuration object\nfor the child can include a <code>childType</code> property, which is either\na constructor function or a string which names a constructor function on the \nY instance (e.g. \"Tab\" would refer to Y.Tab) (<code>childType</code> used to be \nnamed <code>type</code>, support for which has been deprecated, but is still\nmaintained for backward compatibility. <code>childType</code> takes precedence\nover <code>type</code> if both are defined."}, {"type": "Array", "name": "child", "description": "  Array of Widget instances, or configuration \nobjects for the Widgets to be added as a children."}, {"type": "Number", "name": "index", "description": "  (Optional.)  Number representing the position at \nwhich the child should be inserted."}], "guessedname": "add", "guessedtype": "function"}, "_afterActiveDescendantChange": {"description": "Attribute change listener for the <code>activeDescendant</code> \nattribute, responsible for setting the value of the \nparent's <code>activeDescendant</code> attribute.", "param": "{EventFacade} event The event facade for the attribute change.", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " The event facade for the attribute change."}], "guessedname": "_afterActiveDescendantChange", "guessedtype": "function"}, "_createChild": {"description": "Creates an instance of a child Widget using the specified configuration.\nBy default Widget instances will be created of the type specified \nby the <code>defaultChildType</code> attribute.  Types can be explicitly\ndefined via the <code>childType</code> property of the configuration object\nliteral. The use of the <code>type</code> property has been deprecated, but \nwill still be used as a fallback, if <code>childType</code> is not defined,\nfor backwards compatibility.", "param": "config {Object} Object literal representing the configuration \nused to create an instance of a Widget.", "protected": "", "params": [{"type": "Object", "name": "config", "description": "  Object literal representing the configuration \nused to create an instance of a Widget."}], "guessedname": "_createChild", "guessedtype": "function"}, "_uiAddChild": {"description": "Updates the UI in response to a child being added.", "param": "child {Widget} The child Widget instance to render.", "protected": "", "params": [{"type": "Widget", "name": "child", "description": "  The child Widget instance to render."}, {"type": "Object", "name": "parentNode", "description": "  The Node under which the \nchild Widget is to be rendered."}], "guessedname": "_uiAddChild", "guessedtype": "function"}, "_setSelection": {"return": {"type": "Widget|Array", "description": "Widget or Array of Widget instances."}, "description": "Default setter for <code>selection</code> attribute changes.", "param": "child {Widget|Array} Widget or Array of Widget instances.", "protected": "", "params": [{"type": "Widget|Array", "name": "child", "description": "  Widget or Array of Widget instances."}], "guessedname": "_setSelection", "guessedtype": "function"}, "_destroyChildren": {"protected": "", "description": "Destroys all child Widgets for the parent.\n<p>\nThis method is invoked before the destructor is invoked for the Widget \nclass using YUI's aop infrastructure.\n</p>", "guessedname": "_destroyChildren", "guessedtype": "function"}, "deselectAll": {"description": "Deselects all children.", "guessedname": "deselectAll", "guessedtype": "function"}, "_afterSelectionChange": {"description": "Attribute change listener for the <code>selection</code> \nattribute, responsible for setting the value of the \nparent's <code>selected</code> attribute.", "param": "{EventFacade} event The event facade for the attribute change.", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " The event facade for the attribute change."}], "guessedname": "_afterSelectionChange", "guessedtype": "function"}, "_renderChildren": {"protected": "", "description": "Renders all child Widgets for the parent.\n<p>\nThis method in invoked after renderUI is invoked for the Widget class\nusing YUI's aop infrastructure.\n</p>", "guessedname": "_renderChildren", "guessedtype": "function"}, "_uiRemoveChild": {"description": "Updates the UI in response to a child being removed.", "param": "child {Widget} The child Widget instance to render.", "protected": "", "params": [{"type": "Widget", "name": "child", "description": "  The child Widget instance to render."}], "guessedname": "_uiRemoveChild", "guessedtype": "function"}, "remove": {"return": {"type": "Widget", "description": "Widget instance that was successfully removed, otherwise\nundefined."}, "description": "Removes the Widget from its parent.  Optionally, can remove\na child by specifying its index.", "param": "index {Number} (Optional.)  Number representing the index of the \nchild to be removed.", "params": [{"type": "Number", "name": "index", "description": "  (Optional.)  Number representing the index of the \nchild to be removed."}], "guessedname": "remove", "guessedtype": "function"}, "removeAll": {"return": {"type": "ArrayList", "description": "Y.ArrayList instance containing Widgets that were \nsuccessfully removed.  If no children where removed, will return an empty \nY.ArrayList instance."}, "description": "Removes all of the children from the Widget.", "guessedname": "removeAll", "guessedtype": "function"}, "_defAddChildFn": {"description": "Default addChild handler", "param": "event {EventFacade} The Event object", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": "  The Event object"}, {"type": "Widget", "name": "child", "description": "  The Widget instance, or configuration \nobject for the Widget to be added as a child."}, {"type": "Number", "name": "index", "description": "  Number representing the position at \nwhich the child will be inserted."}], "guessedname": "_defAddChildFn", "guessedtype": "function"}}, "uses": ["ArrayList"], "file": "widget-parent.js", "shortname": "WidgetParent", "events": {"defaultChildTypeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "defaultChildTypeChange", "description": "Fires when the value for the configuration attribute 'defaultChildType' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "multipleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "multipleChange", "description": "Fires when the value for the configuration attribute 'multiple' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "addChild": {"preventable": "_defAddChildFn", "params": [{"type": "EventFacade", "name": "e", "description": " The Event Facade"}], "description": "Fires when a Widget is add as a child.  The event object will have a \n'child' property that returns a reference to the child Widget, as well \nas an 'index' property that returns a reference to the index specified \nwhen the add() method was called.\n<p>\nSubscribers to the \"on\" moment of this event, will be notified \nbefore a child is added.\n</p>\n<p>\nSubscribers to the \"after\" moment of this event, will be notified\nafter a child is added.\n</p>", "param": "{EventFacade} e The Event Facade"}, "activeDescendantChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "activeDescendantChange", "description": "Fires when the value for the configuration attribute 'activeDescendant' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "selectionChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "selectionChange", "description": "Fires when the value for the configuration attribute 'selection' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "removeChild": {"preventable": "_defRemoveChildFn", "params": [{"type": "EventFacade", "name": "e", "description": " The Event Facade"}], "description": "Fires when a child Widget is removed.  The event object will have a \n'child' property that returns a reference to the child Widget, as well \nas an 'index' property that returns a reference child's ordinal position.\n<p>\nSubscribers to the \"on\" moment of this event, will be notified \nbefore a child is removed.\n</p>\n<p>\nSubscribers to the \"after\" moment of this event, will be notified\nafter a child is removed.\n</p>", "param": "{EventFacade} e The Event Facade"}}, "description": "Widget extension providing functionality enabling a Widget to be a \nparent of another Widget.\n<p>In addition to the set of attributes supported by WidgetParent, the constructor\nconfiguration object can also contain a <code>children</code> which can be used\nto add child widgets to the parent during construction. The <code>children</code>\nproperty is an array of either child widget instances or child widget configuration \nobjects, and is sugar for the <a href=\"#method_add\">add</a> method. See the \n<a href=\"#method_add\">add</a> for details on the structure of the child widget \nconfiguration object."}, "SliderBase": {"name": "SliderBase", "configs": {"length": {"default": "150px", "type": "{String | Number} e.g. \"200px\" or 200", "description": "The length of the rail (exclusive of the end caps if positioned by\nCSS).  This corresponds to the movable range of the thumb.", "guessedname": "length", "guessedtype": "property"}, "thumbUrl": {"default": "thumb-x.png or thumb-y.png in the sam skin directory of the\ncurrent build path for Slider", "type": "{String}", "description": "Path to the thumb image.  This will be used as both the thumb and\nshadow as a sprite.  Defaults at render() to thumb-x.png or\nthumb-y.png in the skin directory of the current skin.", "guessedname": "thumbUrl", "guessedtype": "property"}, "axis": {"description": "Axis upon which the Slider's thumb moves.  &quot;x&quot; for\nhorizontal, &quot;y&quot; for vertical.", "writeonce": "", "default": "&quot;x&quot;", "guessedname": "axis", "guessedtype": "property", "type": "{String}"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Configuration object"}], "description": "Create a slider to represent an input control capable of representing a\nseries of intermediate states based on the position of the slider's thumb.\nThese states are typically aligned to a value algorithm whereby the thumb\nposition corresponds to a given value. Sliders may be oriented vertically or\nhorizontally, based on the <code>axis</code> configuration."}], "namespace": "", "module": "slider", "events": {"axisChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "axisChange", "description": "Fires when the value for the configuration attribute 'axis' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "thumbMove": {"params": [{"type": "Event", "name": "event", "description": "  The event object for the thumbMove with the\nfollowing extra properties:\n<dl>\n<dt>offset</dt>\n<dd>Pixel offset from top/left of the slider to the new\nthumb position</dd>\n<dt>ddEvent (deprecated)</dt>\n<dd><code>drag:drag</code> event from the thumb</dd>\n<dt>originEvent</dt>\n<dd><code>drag:drag</code> event from the thumb</dd>\n</dl>"}], "description": "Signals that the thumb has moved.  Payload includes the thumb's\npixel offset from the top/left edge of the rail, and if triggered by\ndragging the thumb, the <code>drag:drag</code> event.", "param": "event {Event} The event object for the thumbMove with the\nfollowing extra properties:\n<dl>\n<dt>offset</dt>\n<dd>Pixel offset from top/left of the slider to the new\nthumb position</dd>\n<dt>ddEvent (deprecated)</dt>\n<dd><code>drag:drag</code> event from the thumb</dd>\n<dt>originEvent</dt>\n<dd><code>drag:drag</code> event from the thumb</dd>\n</dl>"}, "slideEnd": {"params": [{"type": "Event", "name": "event", "description": "  The event object for the slideEnd with the\nfollowing extra properties:\n<dl>\n<dt>ddEvent (deprecated)</dt>\n<dd><code>drag:end</code> event from the thumb</dd>\n<dt>originEvent</dt>\n<dd><code>drag:end</code> event from the thumb</dd>\n</dl>"}], "description": "Signals the end of a thumb drag operation.  Payload includes\nthe thumb's drag:end event.", "param": "event {Event} The event object for the slideEnd with the\nfollowing extra properties:\n<dl>\n<dt>ddEvent (deprecated)</dt>\n<dd><code>drag:end</code> event from the thumb</dd>\n<dt>originEvent</dt>\n<dd><code>drag:end</code> event from the thumb</dd>\n</dl>"}, "slideStart": {"params": [{"type": "Event", "name": "event", "description": "  The event object for the slideStart with the\nfollowing extra properties:\n<dl>\n<dt>ddEvent (deprecated)</dt>\n<dd><code>drag:start</code> event from the thumb</dd>\n<dt>originEvent</dt>\n<dd><code>drag:start</code> event from the thumb</dd>\n</dl>"}], "description": "Signals the beginning of a thumb drag operation.  Payload includes\nthe thumb's drag:start event.", "param": "event {Event} The event object for the slideStart with the\nfollowing extra properties:\n<dl>\n<dt>ddEvent (deprecated)</dt>\n<dd><code>drag:start</code> event from the thumb</dd>\n<dt>originEvent</dt>\n<dd><code>drag:start</code> event from the thumb</dd>\n</dl>"}, "thumbUrlChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "thumbUrlChange", "description": "Fires when the value for the configuration attribute 'thumbUrl' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "lengthChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "lengthChange", "description": "Fires when the value for the configuration attribute 'length' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "methods": {"_afterLengthChange": {"description": "Handles changes to the <code>length</code> attribute.  By default, it\ntriggers an update to the UI.", "param": "e {Event} The lengthChange event object", "protected": "", "params": [{"type": "Event", "name": "e", "description": "  The lengthChange event object"}], "guessedname": "_afterLengthChange", "guessedtype": "function"}, "renderRail": {"return": {"type": "Node", "description": "the rail node subtree"}, "description": "Creates the Slider rail DOM subtree for insertion into the Slider's\n<code>contentBox</code>.  Override this method if you want to provide\nthe rail element (presumably from existing markup).", "guessedname": "renderRail", "guessedtype": "function"}, "_setLength": {"return": {"type": "String", "description": "the sanitized value"}, "description": "<p>Ensures the stored length value is a string with a quantity and unit.\nUnit will be defaulted to &quot;px&quot; if not included.  Rejects\nvalues less than or equal to 0 and those that don't at least start with\na number.</p>\n<p>Currently only pixel lengths are supported.</p>", "param": "v {String} proposed value for the length attribute", "protected": "", "params": [{"type": "String", "name": "v", "description": "  proposed value for the length attribute"}], "guessedname": "_setLength", "guessedtype": "function"}, "syncUI": {"description": "Synchronizes the DOM state with the attribute settings.", "guessedname": "syncUI", "guessedtype": "function"}, "_bindValueLogic": {"protected": "", "description": "Stub implementation.  Override this (presumably in a class extension) to\ninitialize any value logic that depends on the presence of the Drag\ninstance.", "guessedname": "_bindValueLogic", "guessedtype": "function"}, "_onDragEnd": {"description": "Dispatches the <code>slideEnd</code> event.", "param": "e {Event} the <code>drag:end</code> event from the thumb", "protected": "", "params": [{"type": "Event", "name": "e", "description": "  the <code>drag:end</code> event from the thumb"}], "guessedname": "_afterDragEnd", "guessedtype": "function"}, "_setAxis": {"return": {"type": "String", "description": "lowercased first character of the input string"}, "description": "Validates the axis is &quot;x&quot; or &quot;y&quot; (case insensitive).\nConverts to lower case for storage.", "param": "v {String} proposed value for the axis attribute", "protected": "", "params": [{"type": "String", "name": "v", "description": "  proposed value for the axis attribute"}], "guessedname": "_setAxis", "guessedtype": "function"}, "_onDragStart": {"description": "Dispatches the <code>slideStart</code> event.", "param": "e {Event} the <code>drag:start</code> event from the thumb", "protected": "", "params": [{"type": "Event", "name": "e", "description": "  the <code>drag:start</code> event from the thumb"}], "guessedname": "_onDragStart", "guessedtype": "function"}, "renderThumb": {"return": {"type": "Node", "description": "the thumb node subtree"}, "description": "Creates the Slider thumb DOM subtree for insertion into the Slider's\nrail.  Override this method if you want to provide the thumb element\n(presumably from existing markup).", "guessedname": "renderThumb", "guessedtype": "function"}, "_initThumbUrl": {"protected": "", "description": "<p>Defaults the thumbURL attribute according to the current skin, or\n&quot;sam&quot; if none can be determined.  Horizontal Sliders will have\ntheir <code>thumbUrl</code> attribute set to</p>\n<p><code>&quot;/<em>configured</em>/<em>yu</em>i/<em>builddi</em>r/slider-base/assets/skins/sam/thumb-x.png&quot;</code></p>\n<p>And vertical thumbs will get</p>\n<p><code>&quot;/<em>configured</em>/<em>yui</em>/<em>builddir</em>/slider-base/assets/skins/sam/thumb-y.png&quot;</code></p>", "guessedname": "_initThumbUrl", "guessedtype": "function"}, "_uiSetRailLength": {"description": "Sets the rail length according to the <code>length</code> attribute.", "param": "length {String} the length to apply to the rail style", "protected": "", "params": [{"type": "String", "name": "length", "description": "  the length to apply to the rail style"}], "guessedname": "_uiSetRailLength", "guessedtype": "function"}, "_uiMoveThumb": {"description": "Moves the thumb to pixel offset position along the rail.", "param": "offset {Number} the pixel offset to set as left or top style", "protected": "", "params": [{"type": "Number", "name": "offset", "description": "  the pixel offset to set as left or top style"}], "guessedname": "_uiMoveThumb", "guessedtype": "function"}, "_bindThumbDD": {"protected": "", "description": "Makes the thumb draggable and constrains it to the rail.", "guessedname": "_bindThumbDD", "guessedtype": "function"}, "_afterDisabledChange": {"description": "Locks or unlocks the thumb.", "param": "e {Event} The disabledChange event object", "protected": "", "params": [{"type": "Event", "name": "e", "description": "  The disabledChange event object"}], "guessedname": "_afterDisabledChange", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Creates the Y.DD.Drag instance used to handle the thumb movement and\nbinds Slider interaction to the configured value model.", "guessedname": "bindUI", "guessedtype": "function"}, "initializer": {"protected": "", "description": "Construction logic executed during Slider instantiation.", "guessedname": "initializer", "guessedtype": "function"}, "_syncThumbPosition": {"protected": "", "description": "Stub implementation.  Override this (presumably in a class extension) to\nensure the thumb is in the correct position according to the value\nalogorithm.\ninstance.", "guessedname": "_syncThumbPosition", "guessedtype": "function"}, "renderUI": {"protected": "", "description": "Create the DOM structure for the Slider.", "guessedname": "renderUI", "guessedtype": "function"}, "_afterDrag": {"description": "Dispatches the <code>thumbMove</code> event.", "param": "e {Event} the <code>drag:drag</code> event from the thumb", "protected": "", "params": [{"type": "Event", "name": "e", "description": "  the <code>drag:drag</code> event from the thumb"}], "guessedname": "_afterDrag", "guessedtype": "function"}}, "extends": "Widget", "superclass": "Widget", "file": "slider-base.js", "shortname": "SliderBase", "properties": {"CONTENT_TEMPLATE": {"default": "&lt;span>&lt;/span>", "type": "{String}", "description": "Content box template that will contain the Slider's rail and thumb.", "guessedname": "CONTENT_TEMPLATE", "guessedtype": "property"}, "thumb": {"type": "{Node}", "description": "The Node instance of the Slider's thumb element.  Do not write to\nthis property.", "guessedname": "thumb", "guessedtype": "property"}, "NAME": {"description": "The identity of the widget.", "default": "'sliderBase'", "readonly": "", "protected": "", "static": "", "guessedname": "NAME", "guessedtype": "property", "type": "String"}, "_key": {"protected": "", "type": "{Object}", "description": "Cached fast access map for DOM properties and attributes that\npertain to accessing dimensional or positioning information\naccording to the Slider's axis (e.g. &quot;height&quot; vs.\n&quot;width&quot;).  Extension classes should add to this collection\nfor axis related strings if necessary.", "guessedname": "_key", "guessedtype": "property"}, "rail": {"type": "{Node}", "description": "The Node instance of the Slider's rail element.  Do not write to\nthis property.", "guessedname": "rail", "guessedtype": "property"}, "_dd": {"protected": "", "type": "{DD.Drag}", "description": "The DD.Drag instance linked to the thumb node.", "guessedname": "_dd", "guessedtype": "property"}, "BOUNDING_TEMPLATE": {"default": "&lt;span>&lt;/span>", "type": "{String}", "description": "Bounding box template that will contain the Slider's DOM subtree.  &lt;span&gt;s are used to support inline-block styling.", "guessedname": "BOUNDING_TEMPLATE", "guessedtype": "property"}, "RAIL_TEMPLATE": {"default": "&lt;span class=\"{railClass}\">&lt;span class=\"{railMinCapClass}\">&lt;/span>&lt;span class=\"{railMaxCapClass}\">&lt;/span>&lt;/span>", "type": "{String}", "description": "Rail template that will contain the end caps and the thumb.\n{placeholder}s are used for template substitution at render time.", "guessedname": "RAIL_TEMPLATE", "guessedtype": "property"}, "ATTRS": {"description": "Static property used to define the default attribute configuration of\nthe Widget.", "protected": "", "static": "", "guessedname": "ATTRS", "guessedtype": "property", "type": "{Object}"}, "THUMB_TEMPLATE": {"default": "&lt;span class=\"{thumbClass}\" tabindex=\"-1\">&lt;img src=\"{thumbShadowUrl}\" alt=\"Slider thumb shadow\" class=\"{thumbShadowClass}\">&lt;img src=\"{thumbImageUrl}\" alt=\"Slider thumb\" class=\"{thumbImageClass}\">&lt;/span>", "type": "{String}", "description": "Thumb template that will contain the thumb image and shadow. &lt;img>\ntags are used instead of background images to avoid a flicker bug in IE.\n{placeholder}s are used for template substitution at render time.", "guessedname": "THUMB_TEMPLATE", "guessedtype": "property"}, "axis": {"protected": "", "type": "{String}", "description": "The configured axis, stored for fast lookup since it's a writeOnce\nattribute.  This is for use by extension classes.  For\nimplementation code, use <code>get( &quot;axis&quot; )</code> for\nauthoritative source.  Never write to this property.", "guessedname": "axis", "guessedtype": "property"}}, "description": "Create a slider to represent an input control capable of representing a\nseries of intermediate states based on the position of the slider's thumb.\nThese states are typically aligned to a value algorithm whereby the thumb\nposition corresponds to a given value. Sliders may be oriented vertically or\nhorizontally, based on the <code>axis</code> configuration."}, "Plugin.Cache": {"name": "Plugin.Cache", "namespace": "", "module": "cache", "uses": ["Plugin.Base"], "superclass": "Cache", "file": "cache-plugin.js", "extends": "Cache", "shortname": "Plugin.Cache", "properties": {"NS": {"description": "The namespace for the plugin. This will be the property on the host which\nreferences the plugin instance.", "value": "\"cache\"", "static": "", "guessedname": "NS", "guessedtype": "property", "type": "String", "final": ""}, "NAME": {"description": "Class name.", "value": "\"dataSourceCache\"", "static": "", "guessedname": "NAME", "guessedtype": "property", "type": "String", "final": ""}}, "description": "Plugin.Cache adds pluginizability to Cache."}, "Overlay": {"name": "Overlay", "constructors": [{"params": [{"type": "Object", "name": "object", "description": " The user configuration for the instance."}], "description": "A basic Overlay Widget, which can be positioned based on Page XY co-ordinates and is stackable (z-index support).\nIt also provides alignment and centering support and uses a standard module format for it's content, with header,\nbody and footer section support."}], "namespace": "", "module": "overlay", "guessedname": "Overlay", "uses": ["WidgetStdMod", "WidgetPosition", "WidgetStack", "WidgetPositionAlign", "WidgetPositionConstrain"], "superclass": "Widget", "file": "overlay.js", "guessedtype": "property", "extends": "Widget", "shortname": "Overlay", "description": "A basic Overlay Widget, which can be positioned based on Page XY co-ordinates and is stackable (z-index support).\nIt also provides alignment and centering support and uses a standard module format for it's content, with header,\nbody and footer section support."}, "DataTableScroll": {"properties": {"_parentTableNode": {"guessedname": "_parentTableNode", "type": "Y.Node", "description": "The table node created in datatable-base", "private": "", "guessedtype": "property"}, "_parentContainer": {"guessedname": "_parentContainer", "type": "Y.Node", "description": "The contentBox specified for the datatable in datatable-base", "private": "", "guessedtype": "property"}, "_parentTbodyNode": {"guessedname": "_parentTbodyNode", "type": "Y.Node", "description": "The TBODY node which resides within the table node created in datatable-base", "private": "", "guessedtype": "property"}, "_headerContainerNode": {"guessedname": "_headerContainerNode", "type": "Y.Node", "description": "The DIV node that contains a table with a THEAD in it (which syncs its horizontal scroll with the _bodyContainerNode above)", "private": "", "guessedtype": "property"}, "_parentMsgNode": {"guessedname": "_parentMsgNode", "type": "Y.Node", "description": "The TBODY Message node which resides within the table node created in datatable-base", "private": "", "guessedtype": "property"}, "_bodyContainerNode": {"guessedname": "_bodyContainerNode", "type": "Y.Node", "description": "The DIV node that contains all the scrollable elements (a table with a tbody on it)", "private": "", "guessedtype": "property"}, "_parentTheadNode": {"guessedname": "_parentTheadNode", "type": "Y.Node", "description": "The THEAD node which resides within the table node created in datatable-base", "private": "", "guessedtype": "property"}}, "name": "DataTableScroll", "namespace": "", "module": "datatable", "events": {"heightChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "heightChange", "description": "Fires when the value for the configuration attribute 'height' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "scrollChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "scrollChange", "description": "Fires when the value for the configuration attribute 'scroll' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "COLOR_COLUMNFILLERChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "COLOR_COLUMNFILLERChange", "description": "Fires when the value for the configuration attribute 'COLOR_COLUMNFILLER' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "widthChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "widthChange", "description": "Fires when the value for the configuration attribute 'width' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "methods": {"_setContentBoxDimensions": {"private": "", "description": "Sets an auto width on the content box if it doesn't exist or if its a y-datatable.", "guessedname": "_setContentBoxDimensions", "guessedtype": "function"}, "_removeCaptionNode": {"private": "", "description": "Remove the caption created in base. Scrolling datatables dont support captions.", "guessedname": "_removeCaptionNode", "guessedtype": "function"}, "_setStylesForThead": {"private": "", "description": "Creates styles for the THEAD based on what type of datatable it is.", "guessedname": "_setStylesForThead", "guessedtype": "function"}, "_setStylesForTbody": {"private": "", "description": "Creates styles for the TBODY based on what type of table it is.", "guessedname": "_setStylesForTbody", "guessedtype": "function"}, "_attachTheadThNode": {"private": "", "description": "Adds the approriate width to the liner divs of the TH nodes before they are appended to DOM", "guessedname": "_attachTheadThNode", "guessedtype": "function"}, "_setUpParentTheadNode": {"private": "", "description": "Stores the main &lt;thead&gt; node provided by the host as a private property", "guessedname": "_setUpParentTheadNode", "guessedtype": "function"}, "_attachTbodyTdNode": {"private": "", "description": "Adds the appropriate width to the liner divs of the TD nodes before they are appended to DOM", "guessedname": "_attachTbodyTdNode", "guessedtype": "function"}, "_syncScrollY": {"private": "", "description": "Snaps container width for y-scrolling tables.", "guessedname": "_syncScrollY", "guessedtype": "function"}, "_syncScrollX": {"private": "", "description": "Snaps container height for x-scrolling tables in IE. Syncs message TBODY width. \nTaken from YUI2 ScrollingDataTable.js", "guessedname": "_syncScrollX", "guessedtype": "function"}, "_syncWidths": {"private": "", "description": "Adjusts the width of the TH and the TDs to make sure that the two are in sync\nImplementation Details: \nCompares the width of the TH liner div to the the width of the TD node. The TD liner width\nis not actually used because the TD often stretches past the liner if the parent DIV is very\nlarge. Measuring the TD width is more accurate.\nInstead of measuring via .get('width'), 'clientWidth' is used, as it returns a number, whereas\n'width' returns a string, In IE6, 'clientWidth' is not supported, so 'offsetWidth' is used.\n'offsetWidth' is not as accurate on Chrome,FF as 'clientWidth' - thus the need for the fork.", "guessedname": "_syncWidths", "guessedtype": "function"}, "_setUpParentTbodyNode": {"private": "", "description": "Stores the main &lt;tbody&gt; node provided by the host as a private property", "guessedname": "_setUpParentTbodyNode", "guessedtype": "function"}, "_createBodyContainer": {"private": "", "description": "Creates the body DIV that contains all the data.", "guessedname": "_createBodyContainer", "guessedtype": "function"}, "_setUpParentTableNode": {"private": "", "description": "Stores the main &lt;table&gt; node provided by the host as a private property", "guessedname": "_setUpParentTableNode", "guessedtype": "function"}, "_setUpParentMessageNode": {"private": "", "description": "Stores the main &lt;tbody&gt; message node provided by the host as a private property", "guessedname": "_setUpParentMessageNode", "guessedtype": "function"}, "_syncScroll": {"private": "", "description": "Syncs padding around scrollable tables, including Column header right-padding\nand container width and height.", "guessedname": "_syncScroll", "guessedtype": "function"}, "_setOverhangValue": {"description": "Sets Column header overhang to given width.\nTaken from YUI2 ScrollingDataTable.js with minor modifications", "param": "nBorderWidth {Number} Value of new border for overhang.", "params": [{"type": "Number", "name": "nBorderWidth", "description": "  Value of new border for overhang."}], "private": "", "guessedname": "_setOverhangValue", "guessedtype": "function"}, "_createHeaderContainer": {"private": "", "description": "Creates the DIV that contains a &lt;table&gt; with all the headers.", "guessedname": "_createHeaderContainer", "guessedtype": "function"}, "syncUI": {"description": "Post rendering method that is responsible for creating a column\nfiller, and performing width and scroll synchronization between the &lt;th&gt; \nelements and the &lt;td&gt; elements.\nThis method fires after syncUI is called on datatable-base", "public": "", "guessedname": "syncUI", "guessedtype": "function"}, "_onScroll": {"private": "", "description": "Ensures that scrolling is synced across the two tables", "guessedname": "_onScroll", "guessedtype": "function"}, "_setUpNodes": {"private": "", "description": "Set up methods to fire after host methods execute", "guessedname": "_setUpNodes", "guessedtype": "function"}, "_syncScrollOverhang": {"private": "", "description": "Adds/removes Column header overhang as necesary.\nTaken from YUI2 ScrollingDataTable.js", "guessedname": "_syncScrollOverhang", "guessedtype": "function"}, "renderUI": {"description": "Primary rendering method that takes the datatable rendered in\nthe host, and splits it up into two separate &lt;divs&gt; each containing two \nseparate tables (one containing the head and one containing the body). \nThis method fires after renderUI is called on datatable-base.", "public": "", "guessedname": "renderUI", "guessedtype": "function"}}, "extends": "Plugin.Base", "superclass": "Plugin.Base", "file": "datatable-scroll.js", "shortname": "DataTableScroll", "configs": {"width": {"public": "", "type": "string", "description": "The width for the table. Set to a string (ex: \"200px\", \"20em\") if you want the table to scroll in the x direction.", "guessedname": "width", "guessedtype": "property"}, "scroll": {"guessedname": "_scroll", "type": "string", "description": "The scrolling direction for the table.", "private": "", "guessedtype": "property"}, "COLOR_COLUMNFILLER": {"public": "", "type": "string", "description": "The hexadecimal colour value to set on the top-right of the table if a scrollbar exists.", "guessedname": "COLOR_COLUMNFILLER", "guessedtype": "property"}, "height": {"public": "", "type": "string", "description": "The height for the table. Set to a string (ex: \"200px\", \"20em\") if you want the table to scroll in the y-direction.", "guessedname": "height", "guessedtype": "property"}}, "description": "Adds scrolling to DataTable."}, "AsyncQueue": {"name": "AsyncQueue", "constructors": [{"params": [{"type": "Function|Object", "name": "callback*", "description": "  0..n callbacks to seed the queue"}], "description": "<p>A specialized queue class that supports scheduling callbacks to execute\nsequentially, iteratively, even asynchronously.</p>\n<p>Callbacks can be function refs or objects with the following keys.  Only\nthe <code>fn</code> key is required.</p>\n<ul>\n<li><code>fn</code> -- The callback function</li>\n<li><code>context</code> -- The execution context for the callbackFn.</li>\n<li><code>args</code> -- Arguments to pass to callbackFn.</li>\n<li><code>timeout</code> -- Millisecond delay before executing callbackFn.\n(Applies to each iterative execution of callback)</li>\n<li><code>iterations</code> -- Number of times to repeat the callback.\n<li><code>until</code> -- Repeat the callback until this function returns\ntrue.  This setting trumps iterations.</li>\n<li><code>autoContinue</code> -- Set to false to prevent the AsyncQueue from\nexecuting the next callback in the Queue after\nthe callback completes.</li>\n<li><code>id</code> -- Name that can be used to get, promote, get the\nindexOf, or delete this callback.</li>\n</ul>"}], "namespace": "", "module": "async-queue", "events": {"complete": {"description": "Event fired after the last queued callback is executed."}}, "guessedname": "AsyncQueue", "methods": {"_initEvents": {"protected": "", "description": "Initializes the instance events.", "guessedname": "_initEvents", "guessedtype": "function"}, "_defRemoveFn": {"description": "<p>Default functionality for the &quot;remove&quot; event.  Removes the\ncallback from the queue.</p>\n<p>The event object will contain a property &quot;callback&quot;, which\nholds the id of a callback or the callback object itself.</p>", "param": "e {Event} the custom event", "protected": "", "params": [{"type": "Event", "name": "e", "description": "  the custom event"}], "guessedname": "_defRemoveFn", "guessedtype": "function"}, "pause": {"chainable": "", "return": {"type": "AsyncQueue", "description": "the AsyncQueue instance"}, "description": "Pause the execution of the queue after the execution of the current\ncallback completes.  If called from code outside of a queued callback,\nclears the timeout for the pending callback. Paused queue can be\nrestarted with q.run()", "guessedname": "pause", "guessedtype": "function"}, "run": {"chainable": "", "return": {"type": "AsyncQueue", "description": "the AsyncQueue instance"}, "description": "Sets the queue in motion.  All queued callbacks will be executed in\norder unless pause() or stop() is called or if one of the callbacks is\nconfigured with autoContinue: false.", "guessedname": "run", "guessedtype": "function"}, "_schedule": {"return": {"type": "Boolean", "description": "whether the run loop should continue"}, "description": "Schedules the execution of asynchronous callbacks.", "param": "callback {Object} the callback object to execute", "protected": "", "params": [{"type": "Object", "name": "callback", "description": "  the callback object to execute"}], "guessedname": "_schedule", "guessedtype": "function"}, "_defShiftFn": {"description": "Default functionality for the &quot;shift&quot; event.  Shifts the\ncallback stored in the event object's <em>callback</em> property from\nthe queue if it is the first item.", "param": "e {Event} The event object", "protected": "", "params": [{"type": "Event", "name": "e", "description": "  The event object"}], "guessedname": "_defShiftFn", "guessedtype": "function"}, "_execute": {"return": {"type": "Boolean", "description": "whether the run loop should continue"}, "description": "Handles the execution of callbacks. Returns a boolean indicating\nwhether it is appropriate to continue running.", "param": "callback {Object} the callback object to execute", "protected": "", "params": [{"type": "Object", "name": "callback", "description": "  the callback object to execute"}], "guessedname": "_execute", "guessedtype": "function"}, "stop": {"chainable": "", "return": {"type": "AsyncQueue", "description": "the AsyncQueue instance"}, "description": "Stop and clear the queue after the current execution of the\ncurrent callback completes.", "guessedname": "stop", "guessedtype": "function"}, "_init": {"protected": "", "description": "Initializes the AsyncQueue instance properties and events.", "guessedname": "_init", "guessedtype": "function"}, "remove": {"return": {"type": "AsyncQueue", "description": "the AsyncQueue instance"}, "description": "Removes the callback from the queue.  If the queue is active, the\nremoval is scheduled to occur after the current callback has completed.", "chainable": "", "param": "callback {String|Object} the callback object or a callback's id", "params": [{"type": "String|Object", "name": "callback", "description": "  the callback object or a callback's id"}], "guessedname": "remove", "guessedtype": "function"}, "next": {"return": {"type": "Function", "description": "the callback to execute"}, "description": "Returns the next callback needing execution.  If a callback is\nconfigured to repeat via iterations or until, it will be returned until\nthe completion criteria is met.\nWhen the queue is empty, null is returned.", "guessedname": "next", "guessedtype": "function"}, "indexOf": {"return": {"type": "Number", "description": "index of the callback or -1 if not found"}, "description": "Returns the current index of a callback.  Pass in either the id or\ncallback function from getCallback.", "param": "callback {String|Function} the callback or its specified id", "params": [{"type": "String|Function", "name": "callback", "description": "  the callback or its specified id"}], "guessedname": "indexOf", "guessedtype": "function"}, "add": {"return": {"type": "AsyncQueue", "description": "the AsyncQueue instance"}, "description": "Add any number of callbacks to the end of the queue. Callbacks may be\nprovided as functions or objects.", "chainable": "", "param": "callback* {Function|Object} 0..n callbacks", "params": [{"type": "Function|Object", "name": "callback*", "description": "  0..n callbacks"}], "guessedname": "add", "guessedtype": "function"}, "_defExecFn": {"description": "Default functionality for the &quot;execute&quot; event.  Executes the\ncallback function", "param": "e {Event} the event object", "protected": "", "params": [{"type": "Event", "name": "e", "description": "  the event object"}], "guessedname": "_defExecFn", "guessedtype": "function"}, "getCallback": {"return": {"type": "Object", "description": "the callback object"}, "description": "Retrieve a callback by its id.  Useful to modify the configuration\nwhile the queue is running.", "param": "id {String} the id assigned to the callback", "params": [{"type": "String", "name": "id", "description": "  the id assigned to the callback"}], "guessedname": "getCallback", "guessedtype": "function"}, "_defPromoteFn": {"description": "<p>Default functionality for the &quot;promote&quot; event.  Promotes the\nnamed callback to the head of the queue.</p>\n<p>The event object will contain a property &quot;callback&quot;, which\nholds the id of a callback or the callback object itself.</p>", "param": "e {Event} the custom event", "protected": "", "params": [{"type": "Event", "name": "e", "description": "  the custom event"}], "guessedname": "_defPromoteFn", "guessedtype": "function"}, "_prepare": {"return": {"type": "Function", "description": "a decorated function wrapper to execute the callback"}, "description": "Creates a wrapper function to execute the callback using the aggregated \nconfiguration generated by combining the static AsyncQueue.defaults, the\ninstance defaults, and the specified callback settings.\nThe wrapper function is decorated with the callback configuration as\nproperties for runtime modification.", "param": "callback {Object|Function} the raw callback", "protected": "", "params": [{"type": "Object|Function", "name": "callback", "description": "  the raw callback"}], "guessedname": "_prepare", "guessedtype": "function"}, "promote": {"return": {"type": "AsyncQueue", "description": "the AsyncQueue instance"}, "description": "Promotes the named callback to the top of the queue. If a callback is\ncurrently executing or looping (via until or iterations), the promotion\nis scheduled to occur after the current callback has completed.", "chainable": "", "param": "callback {String|Object} the callback object or a callback's id", "params": [{"type": "String|Object", "name": "callback", "description": "  the callback object or a callback's id"}], "guessedname": "promote", "guessedtype": "function"}, "_defAddFn": {"description": "Default functionality for the &quot;add&quot; event.  Adds the callbacks\nin the event facade to the queue. Callbacks successfully added to the\nqueue are present in the event's <code>added</code> property in the\nafter phase.", "param": "e {Event} the event object", "protected": "", "params": [{"type": "Event", "name": "e", "description": "  the event object"}], "guessedname": "_defAddFn", "guessedtype": "function"}, "isRunning": {"return": {"type": "Boolean", "description": "true if queue is waiting for a \nfrom any initiated transactions"}, "description": "Determines if the queue is waiting for a callback to complete execution.", "guessedname": "isRunning", "guessedtype": "function"}, "size": {"return": {"type": "Number", "description": ""}, "description": "Returns the number of callbacks in the queue.", "guessedname": "size", "guessedtype": "function"}}, "extends": "EventTarget", "superclass": "EventTarget", "file": "async-queue.js", "guessedtype": "function", "shortname": "AsyncQueue", "properties": {"_running": {"protected": "", "type": "{Boolean|Object} true for synchronous callback execution, the\nreturn handle from Y.later for async callbacks.\nOtherwise false.", "description": "Used to indicate the queue is currently executing a callback.", "guessedname": "_running", "guessedtype": "property"}, "defaults": {"type": "{Object}", "static": "", "description": "<p>Static default values used to populate callback configuration properties.\nPreconfigured defaults include:</p>\n<ul>\n<li><code>autoContinue</code>: <code>true</code></li>\n<li><code>iterations</code>: 1</li>\n<li><code>timeout</code>: 10 (10ms between callbacks)</li>\n<li><code>until</code>: (function to run until iterations &lt;= 0)</li>\n</ul>", "guessedname": "defaults", "guessedtype": "property"}}, "description": "<p>A specialized queue class that supports scheduling callbacks to execute\nsequentially, iteratively, even asynchronously.</p>\n<p>Callbacks can be function refs or objects with the following keys.  Only\nthe <code>fn</code> key is required.</p>\n<ul>\n<li><code>fn</code> -- The callback function</li>\n<li><code>context</code> -- The execution context for the callbackFn.</li>\n<li><code>args</code> -- Arguments to pass to callbackFn.</li>\n<li><code>timeout</code> -- Millisecond delay before executing callbackFn.\n(Applies to each iterative execution of callback)</li>\n<li><code>iterations</code> -- Number of times to repeat the callback.\n<li><code>until</code> -- Repeat the callback until this function returns\ntrue.  This setting trumps iterations.</li>\n<li><code>autoContinue</code> -- Set to false to prevent the AsyncQueue from\nexecuting the next callback in the Queue after\nthe callback completes.</li>\n<li><code>id</code> -- Name that can be used to get, promote, get the\nindexOf, or delete this callback.</li>\n</ul>"}, "ColumnSeries": {"name": "ColumnSeries", "constructors": [{"description": "The ColumnSeries class renders columns positioned horizontally along a category or time axis. The columns'\nlengths are proportional to the values they represent along a vertical axis.\nand the relevant data points."}], "namespace": "", "module": "charts", "events": {"typeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "typeChange", "description": "Fires when the value for the configuration attribute 'type' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "stylesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "stylesChange", "description": "Fires when the value for the configuration attribute 'styles' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "ColumnSeries", "methods": {"_getMarkerDimensions": {"return": {"type": "", "description": "Object"}, "description": "Helper method for calculating the size of markers.", "private": "", "params": [{"type": "Number", "name": "xcoord", "description": " The x-coordinate representing the data point for the marker."}, {"type": "Number", "name": "ycoord", "description": " The y-coordinate representing the data point for the marker."}, {"type": "Number", "name": "calculatedSize", "description": " The calculated size for the marker. For a `BarSeries` is it the width. For a `ColumnSeries` it is the height."}, {"type": "Number", "name": "offset", "description": " Distance of position offset dictated by other marker series in the same graph."}], "param": "{Number} xcoord The x-coordinate representing the data point for the marker.", "guessedname": "_getMarkerDimensions", "guessedtype": "function"}, "updateMarkerState": {"description": "Resizes and positions markers based on a mouse interaction.", "param": "{String} type state of the marker", "protected": "", "params": [{"type": "String", "name": "type", "description": " state of the marker"}, {"type": "Number", "name": "i", "description": " index of the marker"}], "guessedname": "updateMarkerState", "guessedtype": "function"}}, "uses": ["Histogram"], "superclass": "MarkerSeries", "file": "charts.js", "guessedtype": "property", "extends": "MarkerSeries", "shortname": "ColumnSeries", "configs": {"styles": {"type": "Object", "description": "Style properties used for drawing markers. This attribute is inherited from `MarkerSeries`. Below are the default values:\n<dl>\n<dt>fill</dt><dd>A hash containing the following values:\n<dl>\n<dt>color</dt><dd>Color of the fill. The default value is determined by the order of the series on the graph. The color\nwill be retrieved from the below array:<br/>\n`[\"#66007f\", \"#a86f41\", \"#295454\", \"#996ab2\", \"#e8cdb7\", \"#90bdbd\",\"#000000\",\"#c3b8ca\", \"#968373\", \"#678585\"]`\n</dd>\n<dt>alpha</dt><dd>Number from 0 to 1 indicating the opacity of the marker fill. The default value is 1.</dd>\n</dl>\n</dd>\n<dt>border</dt><dd>A hash containing the following values:\n<dl>\n<dt>color</dt><dd>Color of the border. The default value is determined by the order of the series on the graph. The color\nwill be retrieved from the below array:<br/>\n`[\"#205096\", \"#b38206\", \"#000000\", \"#94001e\", \"#9d6fa0\", \"#e55b00\", \"#5e85c9\", \"#adab9e\", \"#6ac291\", \"#006457\"]`\n<dt>alpha</dt><dd>Number from 0 to 1 indicating the opacity of the marker border. The default value is 1.</dd>\n<dt>weight</dt><dd>Number indicating the width of the border. The default value is 1.</dd>\n</dl>\n</dd>\n<dt>width</dt><dd>indicates the width of the marker. The default value is 12.</dd>\n<dt>over</dt><dd>hash containing styles for markers when highlighted by a `mouseover` event. The default \nvalues for each style is null. When an over style is not set, the non-over value will be used. For example,\nthe default value for `marker.over.fill.color` is equivalent to `marker.fill.color`.</dd>\n</dl>"}, "type": {"description": "Read-only attribute indicating the type of series.", "default": "column", "readonly": "", "guessedname": "type", "guessedtype": "property", "type": "String"}}, "description": "The ColumnSeries class renders columns positioned horizontally along a category or time axis. The columns'\nlengths are proportional to the values they represent along a vertical axis.\nand the relevant data points."}, "A.Node": {"name": "A.Node", "constructors": [{"description": "Augment the <a href=\"Node.html\">YUI3 Node</a> with more util methods.\nCheck the list of <a href=\"Node.html#methods\">Methods</a> available for\nAUI Node."}], "namespace": "", "module": "aui-node", "methods": {"ancestors": {"return": {"type": "NodeList", "description": ""}, "description": "<p>Returns the current ancestors of the node element. If a selector is\nspecified, the ancestors are filtered to match the selector.</p>\nExample:\n<pre><code>\nA.one('#nodeId').ancestors('div');\n</code></pre>", "param": "{String} selector A selector to filter the ancestor elements against.", "params": [{"type": "String", "name": "selector", "description": " A selector to filter the ancestor elements against."}], "guessedname": "ancestors", "guessedtype": "function"}, "getBorderWidth": {"return": {"type": "number", "description": ""}, "description": "Return the combined width of the border for the specified sides.", "param": "{string} sides Can be t, r, b, l or any combination of\nthose to represent the top, right, bottom, or left sides.", "params": [{"type": "string", "name": "sides", "description": " Can be t, r, b, l or any combination of\nthose to represent the top, right, bottom, or left sides."}], "guessedname": "getBorderWidth", "guessedtype": "function"}, "center": {"description": "<p>Centralize the current Node instance with the passed\n<code>val</code> Array, Node, String, or Region, if not specified, the body will be\nused.</p>\nExample:\n<pre><code>var node = A.one('#nodeId');\n// Center the <code>node</code> with the <code>#container</code>.\nnode.center('#container');\n</code></pre>", "chainable": "", "param": "{Array | Node | Region | String} val Array, Node, String, or Region to center with", "params": [{"type": "Array | Node | Region | String", "name": "val", "description": " Array, Node, String, or Region to center with"}], "guessedname": "center", "guessedtype": "function"}, "clone": {"return": {"type": "Node", "description": ""}, "description": "Normalizes the behavior of cloning a node, which by default should not clone\nthe events that are attached to it.\nExample:\n<pre><code>var node = A.one('#nodeId');\nnode.clone().appendTo('body');\n</code></pre>", "guessedname": "clone", "guessedtype": "function"}, "getDOM": {"return": {"type": "HTMLNode", "description": "The DOM node bound to the Node instance."}, "description": "Retrieves the DOM node bound to a Node instance. See\n<a href=\"Node.html#method_getDOMNode\">getDOMNode</a>.", "guessedname": "getDOM", "guessedtype": "function"}, "appendTo": {"return": {"type": "String", "description": ""}, "description": "<p>Insert the node instance to the end of the <code>selector</code>\nelement.</p>\nExample:\n<pre><code>var node = A.one('#nodeId');\n// using another Node instance\nvar body = A.one('body');\nnode.appendTo(body);\n// using a CSS selector\nnode.appendTo('#container');\n</code></pre>", "chainable": "", "param": "{Node | String} selector A selector, element, HTML string, Node", "params": [{"type": "Node | String", "name": "selector", "description": " A selector, element, HTML string, Node"}], "guessedname": "appendTo", "guessedtype": "function"}, "empty": {"chainable": "", "description": "<p>This method removes not only child (and other descendant) elements,\nbut also any text within the set of matched elements. This is because,\naccording to the DOM specification, any string of text within an element\nis considered a child node of that element.</p>\nExample:\n<pre><code>var node = A.one('#nodeId');\nnode.empty();\n</code></pre>", "guessedname": "empty", "guessedtype": "function"}, "attr": {"return": {"type": "String", "description": ""}, "description": "<p>Get or Set the value of an attribute for the first element in the\nset of matched elements. If only the <code>name</code> is passed it\nworks as a getter.</p>\nExample:\n<pre><code>var node = A.one('#nodeId');\nnode.attr('title', 'Setting a new title attribute');\n// Alert the value of the title attribute: 'Setting a new title attribute'\nalert( node.attr('title') );\n</code></pre>", "param": "{String} name The name of the attribute", "params": [{"type": "String", "name": "name", "description": " The name of the attribute"}, {"type": "String", "name": "value", "description": " The value of the attribute to be set. Optional."}], "guessedname": "attr", "guessedtype": "function"}}, "uses": ["Node"], "file": "aui-node.js", "shortname": "A.Node", "description": "Augment the <a href=\"Node.html\">YUI3 Node</a> with more util methods.\nCheck the list of <a href=\"Node.html#methods\">Methods</a> available for\nAUI Node."}, "Tooltip": {"name": "Tooltip", "configs": {"anim": {"default": "{ show: false }", "type": "Object", "description": "See <a href=\"OverlayContextPanel.html#config_anim\">OverlayContextPanel anim</a>.", "guessedname": "anim", "guessedtype": "property"}, "hideOn": {"default": "mouseout", "type": "String", "description": "See <a href=\"OverlayContext.html#config_showOn\">OverlayContext showOn</a>.", "guessedname": "hideOn", "guessedtype": "property"}, "title": {"default": "false", "type": "boolean", "description": "Use the content of the <code>title</code> attribute as the Tooltip\ncontent.", "guessedname": "title", "guessedtype": "property"}, "align": {"default": "{ node: null, points: [ BL, TR ] }", "type": "Object", "description": "See <a href=\"Overlay.html#config_align\">OverlayContextPanel align</a>.", "guessedname": "align", "guessedtype": "property"}, "showOn": {"default": "mouseover", "type": "String", "description": "See <a href=\"OverlayContext.html#config_showOn\">OverlayContext showOn</a>.", "guessedname": "showOn", "guessedtype": "property"}, "hideDelay": {"default": "500", "type": "Number", "description": "See <a href=\"OverlayContext.html#config_hideDelay\">OverlayContext hideDelay</a>.", "guessedname": "hideDelay", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "<p><img src=\"assets/images/aui-tooltip/main.png\"/></p>\nA base class for Tooltip, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Additional information when hovering over a target element</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.Tooltip({\ntrigger: '#element',\nalign: { points: [ 'lc', 'rc' ] },\nbodyContent: 'Simple tooltip'\n}).render();\n</code></pre>\nCheck the list of <a href=\"Tooltip.html#configattributes\">Configuration Attributes</a> available for\nTooltip."}], "namespace": "", "module": "aui-tooltip", "events": {"alignChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "alignChange", "description": "Fires when the value for the configuration attribute 'align' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "showOnChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "showOnChange", "description": "Fires when the value for the configuration attribute 'showOn' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "animChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "animChange", "description": "Fires when the value for the configuration attribute 'anim' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "hideDelayChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "hideDelayChange", "description": "Fires when the value for the configuration attribute 'hideDelay' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "titleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "titleChange", "description": "Fires when the value for the configuration attribute 'title' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "hideOnChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "hideOnChange", "description": "Fires when the value for the configuration attribute 'hideOn' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "Tooltip", "methods": {"bindUI": {"protected": "", "description": "Bind the events on the Tooltip UI. Lifecycle.", "guessedname": "bindUI", "guessedtype": "function"}, "_afterBodyChange": {"description": "Fires after the attribute <code>bodyContent</code> change.", "param": "{EventFacade} e", "protected": "", "params": [{"type": "EventFacade", "name": "e", "description": ""}], "guessedname": "_afterBodyChange", "guessedtype": "function"}, "_loadBodyContentFromTitle": {"description": "Use the <code>title</code> content of the <code>currentNode</code> as\nthe content of the Tooltip.", "param": "{Node} currentNode Current node being used by the Tooltip", "protected": "", "params": [{"type": "Node", "name": "currentNode", "description": " Current node being used by the Tooltip"}], "guessedname": "_loadBodyContentFromTitle", "guessedtype": "function"}, "show": {"description": "Over-ride the <code>show</code> to invoke the\n<a href=\"Tooltip.html#method__loadBodyContentFromTitle\">_loadBodyContentFromTitle</a>.\nSee <a href=\"OverlayContext.html#config_show\">OverlayContext show</a>.", "guessedname": "show", "guessedtype": "function"}}, "extends": "OverlayContextPanel", "superclass": "OverlayContextPanel", "file": "aui-tooltip.js", "guessedtype": "property", "shortname": "Tooltip", "properties": {"Tooltip.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}, "Tooltip.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the Tooltip.", "guessedname": "ATTRS", "guessedtype": "property"}}, "description": "<p><img src=\"assets/images/aui-tooltip/main.png\"/></p>\nA base class for Tooltip, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Additional information when hovering over a target element</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.Tooltip({\ntrigger: '#element',\nalign: { points: [ 'lc', 'rc' ] },\nbodyContent: 'Simple tooltip'\n}).render();\n</code></pre>\nCheck the list of <a href=\"Tooltip.html#configattributes\">Configuration Attributes</a> available for\nTooltip."}, "Test.DateAssert": {"name": "Test.DateAssert", "namespace": "Test", "module": "test", "guessedname": "DateAssert", "methods": {"datesAreEqual": {"description": "Asserts that a date's month, day, and year are equal to another date's.", "param": "{Date} expected The expected date.", "static": "", "guessedname": "datesAreEqual", "guessedtype": "function", "params": [{"type": "Date", "name": "expected", "description": " The expected date."}, {"type": "Date", "name": "actual", "description": " The actual date to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "timesAreEqual": {"description": "Asserts that a date's hour, minutes, and seconds are equal to another date's.", "param": "{Date} expected The expected date.", "static": "", "guessedname": "timesAreEqual", "guessedtype": "function", "params": [{"type": "Date", "name": "expected", "description": " The expected date."}, {"type": "Date", "name": "actual", "description": " The actual date to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}}, "static": "", "file": "test.js", "guessedtype": "property", "shortname": "DateAssert", "description": "The DateAssert object provides functions to test JavaScript Date objects\nfor a variety of cases."}, "Subscriber": {"name": "Subscriber", "constructors": [{"params": [{"type": "Function", "name": "fn", "description": "       The wrapped function to execute."}, {"type": "Object", "name": "context", "description": "  The value of the keyword 'this' in the listener."}, {"type": "Array", "name": "args*", "description": "       0..n additional arguments to supply the listener."}], "description": "Stores the subscriber information to be used when the event fires."}], "namespace": "", "module": "event-custom", "guessedname": "Subscriber", "methods": {"contains": {"return": {"type": "boolean", "description": "true if the supplied arguments match this\nsubscriber's signature."}, "description": "Returns true if the fn and obj match this objects properties.\nUsed by the unsubscribe method to match the right subscriber.", "param": "{Function} fn the function to execute.", "params": [{"type": "Function", "name": "fn", "description": " the function to execute."}, {"type": "Object", "name": "context", "description": " optional 'this' keyword for the listener."}], "guessedname": "contains", "guessedtype": "function"}, "notify": {"param": "args {Array} Arguments array for the subscriber.", "params": [{"type": "Array", "name": "args", "description": "  Arguments array for the subscriber."}, {"type": "CustomEvent", "name": "ce", "description": "  The custom event that sent the notification."}], "description": "Executes the subscriber.", "guessedname": "notify", "guessedtype": "function"}}, "file": "event-custom-base.js", "guessedtype": "function", "shortname": "Subscriber", "properties": {"args": {"type": "Array", "description": "Additional arguments to propagate to the subscriber", "guessedname": "args", "guessedtype": "property"}, "id": {"type": "String", "description": "Unique subscriber id", "guessedname": "id", "guessedtype": "property"}, "context": {"type": "Object", "description": "Optional 'this' keyword for the listener", "guessedname": "context", "guessedtype": "property"}, "events": {"type": "{EventTarget}", "description": "Custom events for a given fire transaction."}, "fn": {"type": "Function", "description": "The callback that will be execute when the event fires\nThis is wrapped by Y.rbind if obj was supplied.", "guessedname": "fn", "guessedtype": "property"}, "once": {"description": "This listener only reacts to the event once"}}, "description": "Stores the subscriber information to be used when the event fires."}, "RadioCellEditor": {"name": "RadioCellEditor", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "RadioCellEditor class.\nCheck the list of <a href=\"RadioCellEditor.html#configattributes\">Configuration Attributes</a> available for\nRadioCellEditor."}], "namespace": "", "module": "aui-component", "guessedname": "RadioCellEditor", "extends": "A.RadioCellEditor", "superclass": "A.RadioCellEditor", "file": "aui-datatable.js", "guessedtype": "property", "shortname": "RadioCellEditor", "description": "RadioCellEditor class.\nCheck the list of <a href=\"RadioCellEditor.html#configattributes\">Configuration Attributes</a> available for\nRadioCellEditor."}, "Test.ArrayAssert": {"name": "Test.ArrayAssert", "namespace": "Test", "module": "test", "guessedname": "ArrayAssert", "methods": {"containsMatch": {"description": "Asserts that a value matching some condition is present in an array. This uses\na function to determine a match.", "param": "{Function} matcher A function that returns true if the items matches or false if not.", "static": "", "guessedname": "containsMatch", "guessedtype": "function", "params": [{"type": "Function", "name": "matcher", "description": " A function that returns true if the items matches or false if not."}, {"type": "Array", "name": "haystack", "description": " An array of values."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "doesNotContain": {"description": "Asserts that a value is not present in an array. This uses the triple equals \nAsserts that a value is not present in an array. This uses the triple equals \nsign so no type cohersion may occur.", "param": "{Object} needle The value that is expected in the array.", "static": "", "guessedname": "doesNotContain", "guessedtype": "function", "params": [{"type": "Object", "name": "needle", "description": " The value that is expected in the array."}, {"type": "Array", "name": "haystack", "description": " An array of values."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "indexOf": {"description": "Asserts that the given value is contained in an array at the specified index.\nThis uses the triple equals sign so no type cohersion will occur.", "param": "{Object} needle The value to look for.", "static": "", "guessedname": "indexOf", "guessedtype": "function", "params": [{"type": "Object", "name": "needle", "description": " The value to look for."}, {"type": "Array", "name": "haystack", "description": " The array to search in."}, {"type": "int", "name": "index", "description": " The index at which the value should exist."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "itemsAreSame": {"description": "Asserts that the values in an array are the same, and in the same position,\nas values in another array. This uses the triple equals sign\nso no type cohersion will occur. Note that the array objects themselves\nneed not be the same for this test to pass.", "param": "{Array} expected An array of the expected values.", "static": "", "guessedname": "itemsAreSame", "guessedtype": "function", "params": [{"type": "Array", "name": "expected", "description": " An array of the expected values."}, {"type": "Array", "name": "actual", "description": " Any array of the actual values."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "contains": {"description": "Asserts that a value is present in an array. This uses the triple equals \nsign so no type cohersion may occur.", "param": "{Object} needle The value that is expected in the array.", "static": "", "guessedname": "contains", "guessedtype": "function", "params": [{"type": "Object", "name": "needle", "description": " The value that is expected in the array."}, {"type": "Array", "name": "haystack", "description": " An array of values."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "containsItems": {"description": "Asserts that a set of values are present in an array. This uses the triple equals \nsign so no type cohersion may occur. For this assertion to pass, all values must\nbe found.", "param": "{Object[]} needles An array of values that are expected in the array.", "static": "", "guessedname": "containsItems", "guessedtype": "function", "params": [{"type": "Object[]", "name": "needles", "description": " An array of values that are expected in the array."}, {"type": "Array", "name": "haystack", "description": " An array of values to check."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "doesNotContainItems": {"description": "Asserts that a set of values are not present in an array. This uses the triple equals \nsign so no type cohersion may occur. For this assertion to pass, all values must\nnot be found.", "param": "{Object[]} needles An array of values that are not expected in the array.", "static": "", "guessedname": "doesNotContainItems", "guessedtype": "function", "params": [{"type": "Object[]", "name": "needles", "description": " An array of values that are not expected in the array."}, {"type": "Array", "name": "haystack", "description": " An array of values to check."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "itemsAreEquivalent": {"return": {"type": "Void", "description": ""}, "description": "Asserts that the values in an array are equivalent, and in the same position,\nas values in another array. This uses a function to determine if the values\nare equivalent. Note that the array objects themselves\nneed not be the same for this test to pass.", "param": "{Array} expected An array of the expected values.", "static": "", "guessedname": "itemsAreEquivalent", "guessedtype": "function", "params": [{"type": "Array", "name": "expected", "description": " An array of the expected values."}, {"type": "Array", "name": "actual", "description": " Any array of the actual values."}, {"type": "Function", "name": "comparator", "description": " A function that returns true if the values are equivalent\nor false if not."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "itemsAreEqual": {"description": "Asserts that the values in an array are equal, and in the same position,\nas values in another array. This uses the double equals sign\nso type cohersion may occur. Note that the array objects themselves\nneed not be the same for this test to pass.", "param": "{Array} expected An array of the expected values.", "static": "", "guessedname": "itemsAreEqual", "guessedtype": "function", "params": [{"type": "Array", "name": "expected", "description": " An array of the expected values."}, {"type": "Array", "name": "actual", "description": " Any array of the actual values."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "isEmpty": {"description": "Asserts that an array is empty.", "param": "{Array} actual The array to test.", "static": "", "guessedname": "isEmpty", "guessedtype": "function", "params": [{"type": "Array", "name": "actual", "description": " The array to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "lastIndexOf": {"description": "Asserts that the given value is contained in an array at the specified index,\nstarting from the back of the array.\nThis uses the triple equals sign so no type cohersion will occur.", "param": "{Object} needle The value to look for.", "static": "", "guessedname": "lastIndexOf", "guessedtype": "function", "params": [{"type": "Object", "name": "needle", "description": " The value to look for."}, {"type": "Array", "name": "haystack", "description": " The array to search in."}, {"type": "int", "name": "index", "description": " The index at which the value should exist."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "isNotEmpty": {"description": "Asserts that an array is not empty.", "param": "{Array} actual The array to test.", "static": "", "guessedname": "isNotEmpty", "guessedtype": "function", "params": [{"type": "Array", "name": "actual", "description": " The array to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "doesNotContainMatch": {"description": "Asserts that no values matching a condition are present in an array. This uses\na function to determine a match.", "param": "{Function} matcher A function that returns true if the items matches or false if not.", "static": "", "guessedname": "doesNotContainMatch", "guessedtype": "function", "params": [{"type": "Function", "name": "matcher", "description": " A function that returns true if the items matches or false if not."}, {"type": "Array", "name": "haystack", "description": " An array of values."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}}, "static": "", "file": "test.js", "guessedtype": "property", "shortname": "ArrayAssert", "description": "The ArrayAssert object provides functions to test JavaScript array objects\nfor a variety of cases."}, "YUI~substitute": {"name": "YUI~substitute", "namespace": "", "module": "substitute", "methods": {"substitute": {"return": {"type": "string", "description": "the substituted string."}, "description": "Does variable substitution on a string. It scans through the string\nlooking for expressions enclosed in { } braces. If an expression\nis found, it is used a key on the object.  If there is a space in\nthe key, the first word is used for the key and the rest is provided\nto an optional function to be used to programatically determine the\nvalue (the extra information might be used for this decision). If\nthe value for the key in the object, or what is returned from the\nfunction has a string value, number value, or object value, it is\nsubstituted for the bracket expression and it repeats.  If this\nvalue is an object, it uses the Object's toString() if this has\nbeen overridden, otherwise it does a shallow dump of the key/value\npairs if Y.dump is available (if dump isn't available, toString()\nis used).\nThis method is included in the 'substitute' module.  It is not included\nin the YUI module.", "param": "{string} s The string that will be modified.", "params": [{"type": "string", "name": "s", "description": " The string that will be modified."}, {"type": "object", "name": "o", "description": " An object containing the replacement values."}, {"type": "function", "name": "f", "description": " An optional function that can be used to\nprocess each match.  It receives the key,\nvalue, and any extra metadata included with\nthe key inside of the braces."}, {"type": "boolean", "name": "recurse", "description": " if true, the replacement will be recursive,\nletting you have replacement tokens in replacement text.  The\ndefault is false."}], "guessedname": "substitute", "guessedtype": "function"}}, "file": "substitute.js", "shortname": "YUI~substitute", "description": "The following methods are added to the YUI instance"}, "AreaSplineSeries": {"name": "AreaSplineSeries", "constructors": [{"description": "AreaSplineSeries renders an area graph with data points connected by a curve."}], "namespace": "", "module": "charts", "events": {"typeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "typeChange", "description": "Fires when the value for the configuration attribute 'type' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "stylesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "stylesChange", "description": "Fires when the value for the configuration attribute 'styles' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "AreaSplineSeries", "methods": {"drawSeries": {"protected": "", "description": "Draws the series.", "guessedname": "drawSeries", "guessedtype": "function"}}, "uses": ["Fills", "CurveUtil"], "superclass": "CartesianSeries", "file": "charts.js", "guessedtype": "property", "extends": "CartesianSeries", "shortname": "AreaSplineSeries", "configs": {"styles": {"type": "Object", "description": "Style properties used for drawing area fills. This attribute is inherited from `Renderer`. Below are the default values:\n<dl>\n<dt>color</dt><dd>The color of the fill. The default value is determined by the order of the series on the graph. The color will be \nretrieved from the following array:\n`[\"#66007f\", \"#a86f41\", \"#295454\", \"#996ab2\", \"#e8cdb7\", \"#90bdbd\",\"#000000\",\"#c3b8ca\", \"#968373\", \"#678585\"]`\n</dd>\n<dt>alpha</dt><dd>Number between 0 and 1 that indicates the opacity of the fill. The default value is 1</dd>\n</dl>"}, "type": {"default": "areaSpline", "type": "String", "description": "Read-only attribute indicating the type of series.", "guessedname": "type", "guessedtype": "property"}}, "description": "AreaSplineSeries renders an area graph with data points connected by a curve."}, "Rating": {"name": "Rating", "configs": {"elements": {"description": "<a href=\"NodeList.html\">NodeList</a> of elements used on the\nRating. Each element is one Star.", "writeonce": "", "readonly": "", "guessedname": "elements", "guessedtype": "property", "type": "NodeList"}, "labelNode": {"default": "Generated div element.", "type": "String", "description": "DOM Node to display the text of the StarRating. If not\nspecified try to query using HTML_PARSER an element inside\nboundingBox which matches <code>aui-rating-label-element</code>.", "guessedname": "labelNode", "guessedtype": "property"}, "defaultSelected": {"description": "The number of selected starts when the Rating render.", "writeonce": "", "default": "0", "guessedname": "defaultSelected", "guessedtype": "property", "type": "Number"}, "inputName": {"default": "''", "type": "String", "description": "Name of the <a\nhref=\"Rating.html#config_hiddenInput\">hiddenInput</a> element. If\nnot specified will use the name of the replaced radio.", "guessedname": "inputName", "guessedtype": "property"}, "value": {"default": "null", "type": "String", "description": "Stores the value of the current selected Rating element.", "guessedname": "value", "guessedtype": "property"}, "label": {"default": "''", "type": "String", "description": "Label to be displayed with the Rating elements.", "guessedname": "label", "guessedtype": "property"}, "disabled": {"default": "false", "type": "boolean", "description": "Whether the Rating is disabled or not. Disabled Ratings don't allow\nhover or click, just display selected stars.", "guessedname": "disabled", "guessedtype": "property"}, "hiddenInput": {"type": "Node", "description": "Hidden input to handle the selected value. This hidden input\nreplace the radio elements and keep the same name.", "guessedname": "hiddenInput", "guessedtype": "property"}, "selectedIndex": {"default": "-1", "type": "Number", "description": "Stores the index of the selected element.", "guessedname": "selectedIndex", "guessedtype": "property"}, "title": {"default": "null", "type": "String", "description": "If set, will be used when there is no DOM <code>title</code> on the\nradio elements.", "guessedname": "title", "guessedtype": "property"}, "size": {"default": "5", "type": "Number", "description": "Number of Rating elements to be displayed.", "guessedname": "size", "guessedtype": "property"}, "showTitle": {"default": "true", "type": "boolean", "description": "If <code>true</code> will extract the value of the\n<code>title</code> attribute on the radio, and use it on the\ngenerated Rating elements.", "guessedname": "showTitle", "guessedtype": "property"}, "canReset": {"default": "true", "type": "boolean", "description": "If <code>true</code> could be reseted (i.e., have no values\nselected).", "guessedname": "canReset", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "<p><img src=\"assets/images/aui-rating/main.png\"/></p>\nA base class for Rating, providing:\n<ul>\n<li>A non-obstrusive star rating control</li>\n<li>Could be based on a set of radio input boxes</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.Rating({\nboundingBox: '#rating',\ndefaultSelected: 3,\ndisabled: false,\nlabel: 'Label'\n}).render();\n</code></pre>\nCheck the list of <a href=\"Rating.html#configattributes\">Configuration Attributes</a> available for\nRating."}], "namespace": "", "module": "aui-rating", "events": {"showTitleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "showTitleChange", "description": "Fires when the value for the configuration attribute 'showTitle' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "canResetChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "canResetChange", "description": "Fires when the value for the configuration attribute 'canReset' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "itemClick": {"preventable": "_defRatingItemClickFn", "params": [{"type": "Event.Facade", "name": "event", "description": " The itemClick event."}], "description": "Handles the itemClick event.", "param": "{Event.Facade} event The itemClick event.", "type": "{Event.Custom}"}, "sizeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "sizeChange", "description": "Fires when the value for the configuration attribute 'size' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "inputNameChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "inputNameChange", "description": "Fires when the value for the configuration attribute 'inputName' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "hiddenInputChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "hiddenInputChange", "description": "Fires when the value for the configuration attribute 'hiddenInput' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "selectedIndexChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "selectedIndexChange", "description": "Fires when the value for the configuration attribute 'selectedIndex' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "itemSelect": {"preventable": "_defRatingItemSelectFn", "params": [{"type": "Event.Facade", "name": "event", "description": " The itemSelect event."}], "description": "Handles the itemSelect event.", "param": "{Event.Facade} event The itemOver event.", "type": "{Event.Custom}"}, "valueChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "valueChange", "description": "Fires when the value for the configuration attribute 'value' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "defaultSelectedChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "defaultSelectedChange", "description": "Fires when the value for the configuration attribute 'defaultSelected' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "elementsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "elementsChange", "description": "Fires when the value for the configuration attribute 'elements' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "labelNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "labelNodeChange", "description": "Fires when the value for the configuration attribute 'labelNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "itemOut": {"preventable": "_defRatingItemOutFn", "params": [{"type": "Event.Facade", "name": "event", "description": " The itemOut event."}], "description": "Handles the itemOut event.", "param": "{Event.Facade} event The itemOut event.", "type": "{Event.Custom}"}, "titleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "titleChange", "description": "Fires when the value for the configuration attribute 'title' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "disabledChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "disabledChange", "description": "Fires when the value for the configuration attribute 'disabled' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "labelChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "labelChange", "description": "Fires when the value for the configuration attribute 'label' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "Rating", "methods": {"_defRatingItemOverFn": {"description": "Fires the itemOver event.", "param": "{EventFacade} event itemOver event facade", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " itemOver event facade"}], "guessedname": "_defRatingItemOverFn", "guessedtype": "function"}, "_renderLabel": {"protected": "", "description": "Render the Rating label.", "guessedname": "_renderLabel", "guessedtype": "function"}, "_handleMouseOverEvent": {"description": "Fires the mouseOver event.", "param": "{EventFacade} event mouseOver event facade", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " mouseOver event facade"}], "guessedname": "_handleMouseOverEvent", "guessedtype": "function"}, "_handleClickEvent": {"description": "Fires the click event.", "param": "{EventFacade} event click event facade", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " click event facade"}], "guessedname": "_handleClickEvent", "guessedtype": "function"}, "initializer": {"protected": "", "description": "Construction logic executed during Rating instantiation. Lifecycle.", "guessedname": "initializer", "guessedtype": "function"}, "select": {"param": "{Number} index Index to be selected", "params": [{"type": "Number", "name": "index", "description": " Index to be selected"}], "description": "Selects the <code>index</code> Rating element.", "guessedname": "select", "guessedtype": "function"}, "_defRatingItemClickFn": {"description": "Fires the itemClick event.", "param": "{EventFacade} event itemClick event facade", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " itemClick event facade"}], "guessedname": "_defRatingItemClickFn", "guessedtype": "function"}, "clearSelection": {"description": "Clear all selected starts to the default state.", "guessedname": "clearSelection", "guessedtype": "function"}, "_defRatingItemSelectFn": {"description": "Fires the itemSelect event.", "param": "{EventFacade} event itemSelect event facade", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " itemSelect event facade"}], "guessedname": "_defRatingItemSelectFn", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Bind the events on the Rating UI. Lifecycle.", "guessedname": "bindUI", "guessedtype": "function"}, "_createElements": {"protected": "", "return": {"type": "NodeList", "description": ""}, "description": "Create rating elements based on the <code>size</code>\nattribute. It's only invoked when the HTML_PARSER does not find\nnothing.", "guessedname": "_createElements", "guessedtype": "function"}, "_parseInputElements": {"protected": "", "description": "Parse the HTML radio elements from the markup to be Rating elements.", "guessedname": "_parseInputElements", "guessedtype": "function"}, "_createEvents": {"protected": "", "description": "Create the custom events.", "guessedname": "_createEvents", "guessedtype": "function"}, "_syncElements": {"protected": "", "description": "Sync the Rating elements.", "guessedname": "_syncElements", "guessedtype": "function"}, "_canFireCustomEvent": {"return": {"type": "Boolean", "description": ""}, "description": "Check if the Rating element can fire the custom events. Disabled\nelements won't fire nothing.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_canFireCustomEvent", "guessedtype": "function"}, "indexOf": {"return": {"type": "Number", "description": ""}, "description": "Finds the index of the <code>elem</code>.", "param": "{Node} elem Rating element", "params": [{"type": "Node", "name": "elem", "description": " Rating element"}], "guessedname": "indexOf", "guessedtype": "function"}, "_handleMouseOutEvent": {"description": "Fires the mouseOut event.", "param": "{EventFacade} event mouseOut event facade", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " mouseOut event facade"}], "guessedname": "_handleMouseOutEvent", "guessedtype": "function"}, "_getInputData": {"protected": "", "description": "Get the <code>index</code> element input data stored on <a\nhref=\"Rating.html#property_inputElementsData\">inputElementsData</a>.", "guessedname": "_getInputData", "guessedtype": "function"}, "syncUI": {"protected": "", "description": "Sync the Rating UI. Lifecycle.", "guessedname": "syncUI", "guessedtype": "function"}, "fillTo": {"param": "{Number} index Index to be selected", "params": [{"type": "Number", "name": "index", "description": " Index to be selected"}, {"type": "String", "name": "className", "description": " Class name to be applied when fill the Rating elements"}], "description": "Add the <code>className</code> on the the <code>index</code> element\nand all the previous Rating elements.", "guessedname": "fillTo", "guessedtype": "function"}, "_renderElements": {"protected": "", "description": "Render the Rating elements.", "guessedname": "_renderElements", "guessedtype": "function"}, "_syncLabelUI": {"protected": "", "description": "Sync the Rating label UI.", "guessedname": "_syncLabelUI", "guessedtype": "function"}, "_defRatingItemOutFn": {"description": "Fires the itemOut event.", "param": "{EventFacade} event itemOut event facade", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " itemOut event facade"}], "guessedname": "_defRatingItemOutFn", "guessedtype": "function"}, "_afterSetLabel": {"description": "Fires after the value of the\n<a href=\"Rating.html#config_label\">label</a> attribute change.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_afterSetLabel", "guessedtype": "function"}, "renderUI": {"protected": "", "description": "Create the DOM structure for the Rating. Lifecycle.", "guessedname": "renderUI", "guessedtype": "function"}}, "extends": "Component", "superclass": "Component", "file": "aui-rating.js", "guessedtype": "property", "shortname": "Rating", "properties": {"Rating.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the Rating.", "guessedname": "ATTRS", "guessedtype": "property"}, "StarRating.HTML_PARSER": {"type": "Object", "static": "", "description": "Object hash, defining how attribute values are to be parsed from\nmarkup contained in the widget's content box.", "guessedname": "HTML_PARSER", "guessedtype": "property"}, "Rating.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}}, "description": "<p><img src=\"assets/images/aui-rating/main.png\"/></p>\nA base class for Rating, providing:\n<ul>\n<li>A non-obstrusive star rating control</li>\n<li>Could be based on a set of radio input boxes</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.Rating({\nboundingBox: '#rating',\ndefaultSelected: 3,\ndisabled: false,\nlabel: 'Label'\n}).render();\n</code></pre>\nCheck the list of <a href=\"Rating.html#configattributes\">Configuration Attributes</a> available for\nRating."}, "SVGGraphic": {"name": "SVGGraphic", "constructors": [{"description": "<a href=\"http://www.w3.org/TR/SVG/\">SVG</a> implementation of the <a href=\"Graphic.html\">`Graphic`</a> class. \n`SVGGraphic` is not intended to be used directly. Instead, use the <a href=\"Graphic.html\">`Graphic`</a> class. \nIf the browser has <a href=\"http://www.w3.org/TR/SVG/\">SVG</a> capabilities, the <a href=\"Graphic.html\">`Graphic`</a> \nclass will point to the `SVGGraphic` class."}], "namespace": "", "module": "graphics", "properties": {"_resizeDown": {"type": "Boolean", "private": "", "guessedname": "_resizeDown", "guessedtype": "property"}, "_shapeClass": {"guessedname": "_shapeClass", "type": "Object", "description": "Look up for shape classes. Used by `addShape` to retrieve a class for instantiation.", "private": "", "guessedtype": "property"}, "_y": {"guessedname": "_y", "type": "Number", "description": "Storage for `y` attribute.", "private": "", "guessedtype": "property"}, "_x": {"guessedname": "_x", "type": "Number", "description": "Storage for `x` attribute.", "private": "", "guessedtype": "property"}}, "guessedname": "SVGGraphic", "methods": {"getXY": {"return": {"type": "", "description": "Array The XY position of the shape."}, "description": "Gets the current position of the graphic instance in page coordinates.", "guessedname": "getXY", "guessedtype": "function"}, "_appendShape": {"description": "Adds a shape instance to the graphic instance.", "param": "{Shape} shape The shape instance to be added to the graphic.", "params": [{"type": "Shape", "name": "shape", "description": " The shape instance to be added to the graphic."}], "private": "", "guessedname": "_appendShape", "guessedtype": "function"}, "addToRedrawQueue": {"description": "Adds a shape to the redraw queue and calculates the contentBounds. Used internally \nby `Shape` instances.", "param": "shape {SVGShape}", "protected": "", "params": [{"type": "SVGShape", "name": "shape", "description": ""}], "guessedname": "addToRedrawQueue", "guessedtype": "function"}, "_getUpdatedContentBounds": {"guessedname": "_getUpdatedContentBounds", "return": {"type": "Object", "description": ""}, "description": "Recalculates and returns the `contentBounds` for the `Graphic` instance.", "private": "", "guessedtype": "function"}, "render": {"param": "{HTMLElement} parentNode node in which to render the graphics node into.", "params": [{"type": "HTMLElement", "name": "parentNode", "description": " node in which to render the graphics node into."}], "description": "Adds the graphics node to the dom.", "guessedname": "render", "guessedtype": "function"}, "_createGraphics": {"private": "", "description": "Creates a contentNode element", "guessedname": "_createGraphics", "guessedtype": "function"}, "removeAllShapes": {"description": "Removes all shape instances from the dom.", "guessedname": "removeAllShapes", "guessedtype": "function"}, "_removeChildren": {"description": "Removes all child nodes.", "param": "{HTMLElement} node", "params": [{"type": "HTMLElement", "name": "node", "description": ""}], "private": "", "guessedname": "_removeChildren", "guessedtype": "function"}, "clear": {"description": "Clears the graphics object.", "guessedname": "clear", "guessedtype": "function"}, "_createGraphicNode": {"return": {"type": "", "description": "HTMLElement"}, "description": "Creates a graphic node", "private": "", "params": [{"type": "String", "name": "type", "description": " node type to create"}, {"type": "String", "name": "pe", "description": " specified pointer-events value"}], "param": "{String} type node type to create", "guessedname": "_createGraphicNode", "guessedtype": "function"}, "batch": {"param": "{Function} method Method to execute.", "params": [{"type": "Function", "name": "method", "description": " Method to execute."}], "description": "Allows for creating multiple shapes in order to batch appending and redraw operations.", "guessedname": "batch", "guessedtype": "function"}, "initializer": {"private": "", "description": "Initializes the class.", "guessedname": "initializer", "guessedtype": "function"}, "getShapeById": {"return": {"type": "", "description": "Shape"}, "description": "Returns a shape based on the id of its dom node.", "param": "{String} id Dom id of the shape's node attribute.", "params": [{"type": "String", "name": "id", "description": " Dom id of the shape's node attribute."}], "guessedname": "getShapeById", "guessedtype": "function"}, "removeShape": {"param": "{Shape|String} shape The instance or id of the shape to be removed.", "params": [{"type": "Shape|String", "name": "shape", "description": " The instance or id of the shape to be removed."}], "description": "Removes a shape instance from from the graphic instance.", "guessedname": "removeShape", "guessedtype": "function"}, "_getDocFrag": {"guessedname": "_getDocFrag", "return": {"type": "", "description": "DocumentFragment"}, "description": "Returns a document fragment to for attaching shapes.", "private": "", "guessedtype": "function"}, "_redraw": {"private": "", "description": "Redraws all shapes.", "guessedname": "_redraw", "guessedtype": "function"}, "destroy": {"description": "Removes all nodes.", "guessedname": "destroy", "guessedtype": "function"}, "getGradientNode": {"return": {"type": "", "description": "HTMLElement"}, "description": "Returns a reference to a gradient definition based on an id and type.", "param": "{String} key id that references the gradient definition", "protected": "", "params": [{"type": "String", "name": "key", "description": " id that references the gradient definition"}, {"type": "String", "name": "type", "description": " description of the gradient type"}], "guessedname": "getGradientNode", "guessedtype": "function"}, "addShape": {"return": {"type": "", "description": "Shape"}, "description": "Generates a shape instance by type.", "param": "{Object} cfg attributes for the shape", "params": [{"type": "Object", "name": "cfg", "description": " attributes for the shape"}], "guessedname": "addShape", "guessedtype": "function"}, "_toggleVisible": {"description": "Toggles visibility", "param": "{Boolean} val indicates visibilitye", "params": [{"type": "Boolean", "name": "val", "description": " indicates visibilitye"}], "private": "", "guessedname": "_toggleVisible", "guessedtype": "function"}, "_getShapeClass": {"return": {"type": "", "description": "Function"}, "description": "Returns a shape class. Used by `addShape`.", "private": "", "params": [{"type": "Shape | String", "name": "val", "description": " Indicates which shape class."}], "param": "{Shape | String} val Indicates which shape class.", "guessedname": "_getShapeClass", "guessedtype": "function"}}, "file": "graphics-svg-debug.js", "guessedtype": "function", "shortname": "SVGGraphic", "configs": {"node": {"readonly": "", "type": "HTMLElement", "description": "The html element that represents to coordinate system of the Graphic instance.", "guessedname": "node", "guessedtype": "property"}, "autoSize": {"default": "false", "type": "Boolean", "description": "Determines how the size of instance is calculated. If true, the width and height are determined by the size of the contents.\nIf false, the width and height values are either explicitly set or determined by the size of the parent node's dimensions.", "guessedname": "autoSize", "guessedtype": "property"}, "resizeDown": {"type": "Boolean", "description": "The contentBounds will resize to greater values but not to smaller values. (for performance)\nWhen resizing the contentBounds down is desirable, set the resizeDown value to true.", "guessedname": "resizeDown", "guessedtype": "property"}, "render": {"type": "Node | String", "description": "Whether or not to render the `Graphic` automatically after to a specified parent node after init. This can be a Node instance or a CSS selector string.", "guessedname": "render", "guessedtype": "property"}, "height": {"type": "Number", "description": "Indicates the height of the `Graphic`.", "guessedname": "height", "guessedtype": "property"}, "shapes": {"readonly": "", "type": "Object", "description": "Key value pairs in which a shape instance is associated with its id.", "guessedname": "shapes", "guessedtype": "property"}, "width": {"type": "Number", "description": "Indicates the width of the `Graphic`.", "guessedname": "width", "guessedtype": "property"}, "contentBounds": {"readonly": "", "type": "Object", "description": "Object containing size and coordinate data for the content of a Graphic in relation to the coordSpace node.", "guessedname": "contentBounds", "guessedtype": "property"}, "y": {"type": "Number", "description": "Indicates the y-coordinate for the instance.", "guessedname": "y", "guessedtype": "property"}, "x": {"type": "Number", "description": "Indicates the x-coordinate for the instance.", "guessedname": "x", "guessedtype": "property"}, "autoDraw": {"description": "Indicates whether or not the instance will automatically redraw after a change is made to a shape.\nThis property will get set to false when batching operations.", "default": "true", "private": "", "guessedname": "autoDraw", "guessedtype": "property", "type": "Boolean"}, "id": {"type": "String", "description": "Unique id for class instance.", "guessedname": "id", "guessedtype": "property"}}, "description": "<a href=\"http://www.w3.org/TR/SVG/\">SVG</a> implementation of the <a href=\"Graphic.html\">`Graphic`</a> class. \n`SVGGraphic` is not intended to be used directly. Instead, use the <a href=\"Graphic.html\">`Graphic`</a> class. \nIf the browser has <a href=\"http://www.w3.org/TR/SVG/\">SVG</a> capabilities, the <a href=\"Graphic.html\">`Graphic`</a> \nclass will point to the `SVGGraphic` class."}, "SVGDrawing": {"name": "SVGDrawing", "constructors": [{"description": "<a href=\"http://www.w3.org/TR/SVG/\">SVG</a> implementation of the <a href=\"Drawing.html\">`Drawing`</a> class. \n`SVGDrawing` is not intended to be used directly. Instead, use the <a href=\"Drawing.html\">`Drawing`</a> class. \nIf the browser has <a href=\"http://www.w3.org/TR/SVG/\">SVG</a> capabilities, the <a href=\"Drawing.html\">`Drawing`</a> \nclass will point to the `SVGDrawing` class."}], "namespace": "", "module": "graphics", "guessedname": "prototype", "methods": {"quadraticCurveTo": {"params": [{"type": "Number", "name": "cpx", "description": " x-coordinate for the control point."}, {"type": "Number", "name": "cpy", "description": " y-coordinate for the control point."}, {"type": "Number", "name": "x", "description": " x-coordinate for the end point."}, {"type": "Number", "name": "y", "description": " y-coordinate for the end point."}], "description": "Draws a quadratic bezier curve.", "guessedname": "quadraticCurveTo", "guessedtype": "function"}, "moveTo": {"params": [{"type": "Number", "name": "x", "description": " x-coordinate for the end point."}, {"type": "Number", "name": "y", "description": " y-coordinate for the end point."}], "description": "Moves the current drawing position to specified x and y coordinates.", "guessedname": "moveTo", "guessedtype": "function"}, "lineTo": {"params": [{"type": "Number", "name": "point1", "description": " x-coordinate for the end point."}, {"type": "Number", "name": "point2", "description": " y-coordinate for the end point."}], "description": "Draws a line segment using the current line style from the current drawing position to the specified x and y coordinates.", "guessedname": "lineTo", "guessedtype": "function"}, "end": {"description": "Completes a drawing operation.", "guessedname": "end", "guessedtype": "function"}, "curveTo": {"params": [{"type": "Number", "name": "cp1x", "description": " x-coordinate for the first control point."}, {"type": "Number", "name": "cp1y", "description": " y-coordinate for the first control point."}, {"type": "Number", "name": "cp2x", "description": " x-coordinate for the second control point."}, {"type": "Number", "name": "cp2y", "description": " y-coordinate for the second control point."}, {"type": "Number", "name": "x", "description": " x-coordinate for the end point."}, {"type": "Number", "name": "y", "description": " y-coordinate for the end point."}], "description": "Draws a bezier curve.", "guessedname": "curveTo", "guessedtype": "function"}, "clear": {"description": "Clears the path.", "guessedname": "clear", "guessedtype": "function"}, "_closePath": {"private": "", "description": "Draws the path.", "guessedname": "_closePath", "guessedtype": "function"}, "_trackSize": {"guessedname": "_trackSize", "params": [{"type": "Number", "name": "w", "description": " width"}, {"type": "Number", "name": "h", "description": " height"}], "description": "Updates the size of the graphics object", "private": "", "guessedtype": "function"}, "drawWedge": {"guessedname": "drawWedge", "params": [{"type": "Number", "name": "x", "description": " x-coordinate of the wedge's center point"}, {"type": "Number", "name": "y", "description": " y-coordinate of the wedge's center point"}, {"type": "Number", "name": "startAngle", "description": " starting angle in degrees"}, {"type": "Number", "name": "arc", "description": " sweep of the wedge. Negative values draw clockwise."}, {"type": "Number", "name": "radius", "description": " radius of wedge. If [optional] yRadius is defined, then radius is the x radius."}, {"type": "Number", "name": "yRadius", "description": " [optional] y radius for wedge."}], "description": "Draws a wedge.", "private": "", "guessedtype": "function"}, "drawRect": {"param": "{Number} x x-coordinate", "params": [{"type": "Number", "name": "x", "description": " x-coordinate"}, {"type": "Number", "name": "y", "description": " y-coordinate"}, {"type": "Number", "name": "w", "description": " width"}, {"type": "Number", "name": "h", "description": " height"}], "description": "Draws a rectangle.", "guessedname": "drawRect", "guessedtype": "function"}}, "file": "graphics-svg-debug.js", "guessedtype": "property", "shortname": "SVGDrawing", "properties": {"_type": {"description": "Indicates the type of shape", "private": "", "readonly": "", "guessedname": "_type", "guessedtype": "property", "type": "String"}}, "description": "<a href=\"http://www.w3.org/TR/SVG/\">SVG</a> implementation of the <a href=\"Drawing.html\">`Drawing`</a> class. \n`SVGDrawing` is not intended to be used directly. Instead, use the <a href=\"Drawing.html\">`Drawing`</a> class. \nIf the browser has <a href=\"http://www.w3.org/TR/SVG/\">SVG</a> capabilities, the <a href=\"Drawing.html\">`Drawing`</a> \nclass will point to the `SVGDrawing` class."}, "CategoryAxis": {"name": "CategoryAxis", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " (optional) Configuration parameters for the Chart."}], "description": "CategoryAxis manages category data on an axis."}], "namespace": "", "module": "charts", "methods": {"getMajorUnitDistance": {"return": {"type": "", "description": "Number"}, "description": "Returns the distance between major units on an axis.", "param": "{Number} len Number of ticks", "params": [{"type": "Number", "name": "len", "description": " Number of ticks"}, {"type": "Number", "name": "uiLen", "description": " Size of the axis."}, {"type": "Object", "name": "majorUnit", "description": " Hash of properties used to determine the majorUnit"}], "guessedname": "getMajorUnitDistance", "guessedtype": "function"}, "getLabelByIndex": {"return": {"type": "", "description": "String"}, "description": "Calculates and returns a value based on the number of labels and the index of\nthe current label.", "param": "{Number} i Index of the label.", "params": [{"type": "Number", "name": "i", "description": " Index of the label."}, {"type": "Number", "name": "l", "description": " Total number of labels."}], "guessedname": "getLabelByIndex", "guessedtype": "function"}, "getTotalMajorUnits": {"return": {"type": "", "description": "Number"}, "description": "Returns the total number of majorUnits that will appear on an axis.", "param": "{Object} majorUnit Object containing properties related to the majorUnit.", "params": [{"type": "Object", "name": "majorUnit", "description": " Object containing properties related to the majorUnit."}, {"type": "Number", "name": "len", "description": " Length of the axis."}], "guessedname": "getTotalMajorUnits", "guessedtype": "function"}, "getDataByKey": {"return": {"type": "", "description": "Array"}, "description": "Returns an array of values based on an identifier key.", "param": "{String} value value used to identify the array", "params": [{"type": "String", "name": "value", "description": " value used to identify the array"}], "guessedname": "getDataByKey", "guessedtype": "function"}, "getEdgeOffset": {"return": {"type": "", "description": "Number"}, "description": "Gets the distance that the first and last ticks are offset from there respective\nedges.", "param": "{Number} ct Number of ticks on the axis.", "params": [{"type": "Number", "name": "ct", "description": " Number of ticks on the axis."}, {"type": "Number", "name": "l", "description": " Length (in pixels) of the axis."}], "guessedname": "getEdgeOffset", "guessedtype": "function"}, "_getKeyArray": {"return": {"type": "", "description": "Array"}, "description": "Gets an array of values based on a key.", "private": "", "params": [{"type": "String", "name": "key", "description": " Value key associated with the data array."}, {"type": "Array", "name": "data", "description": " Array in which the data resides."}], "param": "{String} key Value key associated with the data array.", "guessedname": "_getKeyArray", "guessedtype": "function"}, "_setDataByKey": {"description": "Sets data by key", "param": "{String} key Key value to use.", "params": [{"type": "String", "name": "key", "description": " Key value to use."}, {"type": "Array", "name": "data", "description": " Array to use."}], "private": "", "guessedname": "_setDataByKey", "guessedtype": "function"}, "_updateMinAndMax": {"private": "", "description": "Calculates the maximum and minimum values for the `Axis`.", "guessedname": "_updateMinAndMax", "guessedtype": "function"}}, "extends": "AxisType", "superclass": "AxisType", "file": "charts.js", "shortname": "CategoryAxis", "properties": {"GUID": {"guessedname": "GUID", "type": "String", "description": "Constant used to generate unique id.", "private": "", "guessedtype": "property"}, "_dataType": {"guessedname": "_type", "readonly": "", "description": "Type of data used in `Axis`.", "private": "", "guessedtype": "property"}, "_indices": {"private": "", "description": "Object storing key data.", "guessedname": "_indices", "guessedtype": "property"}}, "description": "CategoryAxis manages category data on an axis."}, "A.HTML5": {"name": "A.HTML5", "namespace": "", "module": "aui-node", "guessedname": "HTML5", "methods": {"IECreateFix": {"return": {"type": "Node | DocumentFragment", "description": ""}, "description": "Receives a <code>frag</code> and a HTML content. This method\nshivs the HTML5 nodes appended to a Node or fragment which is not\non the document yet.", "param": "{Node | DocumentFragment} frag Fragment to be fixed.", "params": [{"type": "Node | DocumentFragment", "name": "frag", "description": " Fragment to be fixed."}, {"type": "String", "name": "content", "description": " HTML to be set (using innerHTML) on the <code>frag</code>."}], "guessedname": "IECreateFix", "guessedtype": "function"}, "_doBeforeCreate": {"return": {"type": "DocumentFragment", "description": ""}, "description": "AOP listener to the A.DOM._create method. This method\nintercepts all the calls to the A.DOM._create and append the\ngenerated fragment to <a\nhref=\"A.HTML5.html#property_A.HTML._fragHTML5Shived\">A.HTML._fragHTML5Shived</a>,\nthis fixes the IE bug for painting the HTML5 nodes on the HTML\nfragment.", "param": "{String} html HTML content", "protected": "", "params": [{"type": "String", "name": "html", "description": " HTML content"}, {"type": "String", "name": "doc", "description": ""}, {"type": "String", "name": "tag", "description": ""}], "guessedname": "_doBeforeCreate", "guessedtype": "function"}}, "file": "aui-node.js", "guessedtype": "property", "shortname": "A.HTML5", "properties": {"A.HTML._fragHTML5Shived": {"protected": "", "type": "DocumentFragment (shived)", "description": "A global DocumentFragment already HTML5 shived, for performance\nreasons. (i.e., all nodes and its HTML5 children appended to this\nfragment iherits the styles on IE).", "guessedname": "_fragHTML5Shived", "guessedtype": "property"}}, "description": "<p>An object that encapsulates util methods for HTML5 shiving.</p>\n<h2>What is a \"shiv\"?</h1>\n<p>To the world, a shiv is a slang term for a sharp object used as a\nknife-like weapon. To Internet Explorer, a shiv is a script that, when\nexecuted, forces the browser to recognize HTML5 elements.</p>"}, "SynthRegistry": {"name": "SynthRegistry", "constructors": [{"params": [{"type": "HTMLElement", "name": "el", "description": "  the DOM element"}, {"type": "String", "name": "yuid", "description": "  the yuid stamp for the element"}, {"type": "String", "name": "key", "description": "  the generated id token used to identify an event type +\nelement in the global DOM subscription map."}], "description": "Manager object for synthetic event subscriptions to aggregate multiple synths on the same node without colliding with actual DOM subscription entries in the global map of DOM subscriptions.  Also facilitates proper cleanup on page unload."}], "namespace": "", "private": "", "methods": {"_unregisterSub": {"description": "Removes the subscription from the Notifier registry.", "since": "3.4.0", "param": "sub {Subscription} the subscription", "params": [{"type": "Subscription", "name": "sub", "description": "  the subscription"}], "guessedname": "unregister", "guessedtype": "function"}, "register": {"description": "Adds a subscription from the Notifier registry.", "since": "3.4.0", "param": "handle {EventHandle} the subscription", "params": [{"type": "EventHandle", "name": "handle", "description": "  the subscription"}], "guessedname": "register", "guessedtype": "function"}, "detachAll": {"guessedname": "detachAll", "since": "3.4.0", "description": "Used by the event system's unload cleanup process.  When navigating\naway from the page, the event system iterates the global map of element\nsubscriptions and detaches everything using detachAll().  Normally,\nthe map is populated with custom events, so this object needs to\nat least support the detachAll method to duck type its way to\ncleanliness.", "private": "", "guessedtype": "function"}}, "module": "event-simulate", "file": "event-synthetic.js", "shortname": "SynthRegistry", "description": "Manager object for synthetic event subscriptions to aggregate multiple synths on the same node without colliding with actual DOM subscription entries in the global map of DOM subscriptions.  Also facilitates proper cleanup on page unload."}, "DataTableSort": {"name": "DataTableSort", "configs": {"lastSortedBy": {"type": "Object", "description": "Describes last known sort state: {key,dir}, where\n\"key\" is column key and \"dir\" is either \"asc\" or \"desc\".", "guessedname": "lastSortedBy", "guessedtype": "property"}, "trigger": {"description": "Defines the trigger that causes a column to be sorted:\n{event, selector}, where \"event\" is an event type and \"selector\" is\nis a node query selector.", "writeonce": "", "default": "{event:\"click\", selector:\"th\"}", "guessedname": "trigger", "guessedtype": "property", "type": "Object"}, "template": {"default": "'<a class=\"{link_class}\" title=\"{link_title}\" href=\"{link_href}\">{value}</a>'", "type": "String", "description": "Tokenized markup template for TH sort element.", "guessedname": "template", "guessedtype": "property"}}, "namespace": "", "module": "datatable", "events": {"triggerChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "triggerChange", "description": "Fires when the value for the configuration attribute 'trigger' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "templateChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "templateChange", "description": "Fires when the value for the configuration attribute 'template' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "lastSortedByChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "lastSortedByChange", "description": "Fires when the value for the configuration attribute 'lastSortedBy' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "YgetClassName", "methods": {"_beforeAttachTheadThNode": {"description": "Before header cell element is attached, sets applicable class names.", "param": "o {Object} {value, column, tr}.", "protected": "", "params": [{"type": "Object} {value, column, tr", "name": "o", "description": " ."}], "guessedname": "_beforeAttachTheadThNode", "guessedtype": "function"}, "_onEventSortColumn": {"description": "In response to the \"trigger\" event, sorts the underlying Recordset and\nupdates the lastSortedBy attribute.", "param": "o {Object} {value, column, tr}.", "protected": "", "params": [{"type": "Object} {value, column, tr", "name": "o", "description": " ."}], "guessedname": "_onEventSortColumn", "guessedtype": "function"}, "_setLastSortedBy": {"return": {"type": "key, dir, notdir", "description": ""}, "description": "Normalizes lastSortedBy", "private": "", "params": [{"type": "String | Object} {key, dir", "name": "val", "description": "  or \"key\""}], "param": "val {String | Object} {key, dir} or \"key\"", "guessedname": "_setLastSortedBy", "guessedtype": "function"}, "_before_beforeAttachTbodyTdNode": {"description": "Before header cell element is attached, sets applicable class names.", "param": "o {Object} {record, column, tr, headers, classnames, value}.", "protected": "", "params": [{"type": "Object} {record, column, tr, headers, classnames, value", "name": "o", "description": " ."}], "guessedname": "_beforeAttachTbodyTdNode", "guessedtype": "function"}, "initializer": {"description": "Initializer.", "param": "config {Object} Config object.", "params": [{"type": "Object", "name": "config", "description": "  Config object."}], "private": "", "guessedname": "initializer", "guessedtype": "function"}, "_uiSetLastSortedBy": {"description": "Updates sort UI.", "param": "val {Object} New lastSortedBy object {key,dir}.", "protected": "", "params": [{"type": "Object} New lastSortedBy object {key,dir", "name": "val", "description": " ."}, {"type": "Y.DataTable.Base", "name": "dt", "description": "  Host."}], "guessedname": "_uiSetLastSortedBy", "guessedtype": "function"}, "_beforeCreateTheadThNode": {"description": "Before header cell element is created, inserts link markup around {value}.", "param": "o {Object} {value, column, tr}.", "protected": "", "params": [{"type": "Object} {value, column, tr", "name": "o", "description": " ."}], "guessedname": "_beforeCreateTheadThNode", "guessedtype": "function"}}, "extends": "Plugin.Base", "superclass": "Plugin.Base", "file": "datatable-sort.js", "guessedtype": "property", "shortname": "DataTableSort", "properties": {"NS": {"description": "The namespace for the plugin. This will be the property on the host which\nreferences the plugin instance.", "value": "\"sort\"", "static": "", "guessedname": "NS", "guessedtype": "property", "type": "String", "final": ""}, "NAME": {"description": "Class name.", "value": "\"dataTableSort\"", "static": "", "guessedname": "NAME", "guessedtype": "property", "type": "String", "final": ""}}, "description": "Adds column sorting to DataTable."}, "Test.ObjectAssert": {"name": "Test.ObjectAssert", "namespace": "Test", "module": "test", "guessedname": "ObjectAssert", "methods": {"hasKeys": {"description": "Asserts that an object has all properties of a reference object. The properties may exist either\non the object instance or in its prototype chain. The same as testing \n\"property\" in object.", "param": "{Array} properties An array of property names that should be on the object.", "static": "", "guessedname": "hasKeys", "guessedtype": "function", "params": [{"type": "Array", "name": "properties", "description": " An array of property names that should be on the object."}, {"type": "Object", "name": "object", "description": " The object to search."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "ownsKeys": {"description": "Asserts that all properties exist on an object instance (not on its prototype).", "param": "{Array} properties An array of property names that should be on the object.", "static": "", "guessedname": "ownsKeys", "guessedtype": "function", "params": [{"type": "Array", "name": "properties", "description": " An array of property names that should be on the object."}, {"type": "Object", "name": "object", "description": " The object to search."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "hasKey": {"description": "Asserts that an object has a property with the given name. The property may exist either\non the object instance or in its prototype chain. The same as testing \n\"property\" in object.", "param": "{String} propertyName The name of the property to test.", "static": "", "guessedname": "hasKey", "guessedtype": "function", "params": [{"type": "String", "name": "propertyName", "description": " The name of the property to test."}, {"type": "Object", "name": "object", "description": " The object to search."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "ownsNoKeys": {"description": "Asserts that an object owns no properties.", "param": "{Object} object The object to check.", "static": "", "guessedname": "ownsNoKeys", "guessedtype": "function", "params": [{"type": "Object", "name": "object", "description": " The object to check."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "ownsKey": {"description": "Asserts that a property with the given name exists on an object instance (not on its prototype).", "param": "{String} propertyName The name of the property to test.", "static": "", "guessedname": "ownsKey", "guessedtype": "function", "params": [{"type": "String", "name": "propertyName", "description": " The name of the property to test."}, {"type": "Object", "name": "object", "description": " The object to search."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}}, "static": "", "file": "test.js", "guessedtype": "property", "shortname": "ObjectAssert", "description": "The ObjectAssert object provides functions to test JavaScript objects\nfor a variety of cases."}, "Do": {"name": "Do", "namespace": "", "module": "event-custom", "guessedname": "DO_BEFORE", "methods": {"_inject": {"return": {"type": "string", "description": "handle for the subscription"}, "description": "Execute the supplied method before or after the specified function.\nUsed by <code>before</code> and <code>after</code>.", "private": "", "static": "", "param": "when {string} before or after", "guessedname": "_inject", "guessedtype": "function", "params": [{"type": "string", "name": "when", "description": "  before or after"}, {"type": "Function", "name": "fn", "description": "  the function to execute"}, {"type": "", "name": "obj", "description": " the object hosting the method to displace"}, {"type": "string", "name": "sFn", "description": "  the name of the method to displace"}, {"type": "", "name": "c", "description": " The execution context for fn"}]}, "detach": {"description": "Detach a before or after subscription.", "param": "handle {string} the subscription handle", "static": "", "guessedname": "detach", "guessedtype": "function", "params": [{"type": "string", "name": "handle", "description": "  the subscription handle"}]}, "after": {"return": {"type": "string", "description": "handle for the subscription"}, "description": "<p>Execute the supplied method after the specified function.  Wrapping\nfunction may optionally return an instance of the following classes to\nfurther alter runtime behavior:</p>\n<dl>\n<dt></code>Y.Do.Halt(message, returnValue)</code></dt>\n<dd>Immediatly stop execution and return\n<code>returnValue</code>.  No other wrapping functions will be\nexecuted.</dd>\n<dt></code>Y.Do.AlterReturn(message, returnValue)</code></dt>\n<dd>Return <code>returnValue</code> instead of the wrapped\nmethod's original return value.  This can be further altered by\nother after phase wrappers.</dd>\n</dl>\n<p>The static properties <code>Y.Do.originalRetVal</code> and\n<code>Y.Do.currentRetVal</code> will be populated for reference.</p>", "param": "fn {Function} the function to execute", "static": "", "guessedname": "after", "guessedtype": "function", "params": [{"type": "Function", "name": "fn", "description": "  the function to execute"}, {"type": "", "name": "obj", "description": " the object hosting the method to displace"}, {"type": "string", "name": "sFn", "description": "  the name of the method to displace"}, {"type": "", "name": "c", "description": " The execution context for fn"}, {"type": "mixed", "name": "arg*", "description": "  0..n additional arguments to supply to the subscriber"}]}, "before": {"return": {"type": "string", "description": "handle for the subscription"}, "description": "<p>Execute the supplied method before the specified function.  Wrapping\nfunction may optionally return an instance of the following classes to\nfurther alter runtime behavior:</p>\n<dl>\n<dt></code>Y.Do.Halt(message, returnValue)</code></dt>\n<dd>Immediatly stop execution and return\n<code>returnValue</code>.  No other wrapping functions will be\nexecuted.</dd>\n<dt></code>Y.Do.AlterArgs(message, newArgArray)</code></dt>\n<dd>Replace the arguments that the original function will be\ncalled with.</dd>\n<dt></code>Y.Do.Prevent(message)</code></dt>\n<dd>Don't execute the wrapped function.  Other before phase\nwrappers will be executed.</dd>\n</dl>", "param": "fn {Function} the function to execute", "static": "", "guessedname": "before", "guessedtype": "function", "params": [{"type": "Function", "name": "fn", "description": "  the function to execute"}, {"type": "", "name": "obj", "description": " the object hosting the method to displace"}, {"type": "string", "name": "sFn", "description": "  the name of the method to displace"}, {"type": "", "name": "c", "description": " The execution context for fn"}, {"type": "mixed", "name": "arg*", "description": "  0..n additional arguments to supply to the subscriber\nwhen the event fires."}]}}, "static": "", "file": "event-custom-base.js", "guessedtype": "property", "shortname": "Do", "properties": {"Do.currentRetVal": {"since": "3.2.0", "static": "", "description": "Contains the current state of the return value, consumable by\n'after' event listeners, and updated if an after subscriber\nchanges the return value generated by the wrapped function."}, "Do.originalRetVal": {"since": "3.2.0", "static": "", "description": "Contains the return value from the wrapped method, accessible\nby 'after' event listeners."}, "objs": {"static": "", "description": "Cache of objects touched by the utility", "guessedname": "objs", "guessedtype": "property"}, "currentRetVal": {"since": "3.2.0", "static": "", "description": "Contains the current state of the return value, consumable by\n'after' event listeners, and updated if an after subscriber\nchanges the return value generated by the wrapped function."}, "originalRetVal": {"since": "3.2.0", "static": "", "description": "Contains the return value from the wrapped method, accessible\nby 'after' event listeners."}}, "description": "Allows for the insertion of methods that are executed before or after\na specified method"}, "StackedComboSeries": {"name": "StackedComboSeries", "constructors": [{"description": "The StackedComboSeries class renders a combination of lines, plots and area fills in a single series. Series\nare stacked along the value axis to indicate each series contribution to a cumulative total. Each\nseries type has a corresponding boolean attribute indicating if it is rendered. By default, all three types are\nrendered."}], "namespace": "", "module": "charts", "events": {"showAreaFillChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "showAreaFillChange", "description": "Fires when the value for the configuration attribute 'showAreaFill' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "typeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "typeChange", "description": "Fires when the value for the configuration attribute 'type' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "StackedComboSeries", "methods": {"setAreaData": {"protected": "", "description": "Calculates the coordinates for the series. Overrides base implementation.", "guessedname": "setAreaData", "guessedtype": "function"}, "drawSeries": {"protected": "", "description": "Draws the series.", "guessedname": "drawSeries", "guessedtype": "function"}}, "uses": ["StackingUtil"], "superclass": "ComboSeries", "file": "charts.js", "guessedtype": "property", "extends": "ComboSeries", "shortname": "StackedComboSeries", "configs": {"type": {"default": "stackedCombo", "type": "String", "description": "Read-only attribute indicating the type of series.", "guessedname": "type", "guessedtype": "property"}, "showAreaFill": {"default": "true", "type": "Boolean", "description": "Indicates whether a fill is displayed.", "guessedname": "showAreaFill", "guessedtype": "property"}}, "description": "The StackedComboSeries class renders a combination of lines, plots and area fills in a single series. Series\nare stacked along the value axis to indicate each series contribution to a cumulative total. Each\nseries type has a corresponding boolean attribute indicating if it is rendered. By default, all three types are\nrendered."}, "Anim": {"name": "Anim", "for": "Anim", "configs": {"node": {"type": "Node", "description": "The object to be animated.", "guessedname": "node", "guessedtype": "property"}, "paused": {"description": "Whether or not the animation is currently paused.", "default": "false", "readonly": "", "guessedname": "paused", "guessedtype": "property", "type": "Boolean"}, "direction": {"default": "\"normal\"", "type": "String", "description": "How iterations of the animation should behave. \nPossible values are \"normal\" and \"alternate\".\nNormal will repeat the animation, alternate will reverse on every other pass.", "guessedname": "direction", "guessedtype": "property"}, "from": {"type": "Object", "description": "The starting values for the animated properties.\nFields may be strings, numbers, or functions.\nIf a function is used, the return value becomes the from value.\nIf no from value is specified, the DEFAULT_GETTER will be used.\nSupports any unit, provided it matches the \"to\" (or default)\nunit (e.g. `{width: '10em', color: 'rgb(0, 0 0)', borderColor: '#ccc'}`).\nIf using the default ('px' for length-based units), the unit may be omitted\n(e.g. `{width: 100}, borderColor: 'ccc'}`, which defaults to pixels\nand hex, respectively).", "guessedname": "from", "guessedtype": "property"}, "iterations": {"default": "1", "type": "Int", "description": "The number of times the animation should run", "guessedname": "iterations", "guessedtype": "property"}, "iterationCount": {"description": "The number of iterations that have occurred.\nResets when an animation ends (reaches iteration count or stop() called).", "default": "0", "readonly": "", "guessedname": "iterationCount", "guessedtype": "property", "type": "Int"}, "elapsedTime": {"description": "Current time the animation has been running.", "default": "0", "readonly": "", "guessedname": "elapsedTime", "guessedtype": "property", "type": "Int"}, "to": {"type": "Object", "description": "The ending values for the animated properties.\nFields may be strings, numbers, or functions.\nSupports any unit, provided it matches the \"from\" (or default)\nunit (e.g. `{width: '50%', color: 'red', borderColor: '#ccc'}`).\nIf using the default ('px' for length-based units), the unit may be omitted\n(e.g. `{width: 100, borderColor: 'ccc'}`, which defaults to pixels\nand hex, respectively).", "guessedname": "to", "guessedtype": "property"}, "running": {"description": "Whether or not the animation is currently running.", "default": "false", "readonly": "", "guessedname": "running", "guessedtype": "property", "type": "Boolean"}, "startTime": {"description": "Date stamp for the first frame of the animation.", "default": "0", "readonly": "", "guessedname": "startTime", "guessedtype": "property", "type": "Int"}, "duration": {"type": "NUM", "description": "The length of the animation.  Defaults to \"1\" (second).", "guessedname": "duration", "guessedtype": "property"}, "easing": {"type": "Function", "description": "The method that will provide values to the attribute(s) during the animation. \nDefaults to \"Easing.easeNone\".", "guessedname": "easing", "guessedtype": "property"}, "reverse": {"default": "false", "type": "Boolean", "description": "If true, animation begins from last frame", "guessedname": "reverse", "guessedtype": "property"}}, "description": "A class for constructing animation instances.", "constructors": [{"description": "A class for constructing animation instances."}], "namespace": "", "module": "anim", "properties": {"behaviors": {"static": "", "description": "Bucket for custom getters and setters", "guessedname": "behaviors", "guessedtype": "property"}, "DEFAULT_UNIT": {"static": "", "description": "The default unit to use with properties that pass the RE_DEFAULT_UNIT test.", "guessedname": "DEFAULT_UNIT", "guessedtype": "property"}, "RE_DEFAULT_UNIT": {"static": "", "description": "Regex of properties that should use the default unit.", "guessedname": "RE_DEFAULT_UNIT", "guessedtype": "property"}, "DEFAULT_GETTER": {"static": "", "description": "The default getter to use when getting object properties.", "guessedname": "DEFAULT_GETTER", "guessedtype": "function"}, "intervalTime": {"default": "20", "static": "", "description": "Time in milliseconds passed to setInterval for frame processing", "guessedname": "_intervalTime", "guessedtype": "property"}, "DEFAULT_SETTER": {"static": "", "description": "The default setter to use when setting object properties.", "guessedname": "DEFAULT_SETTER", "guessedtype": "function"}}, "guessedname": "RUNNING", "extends": "Base", "superclass": "Base", "file": "anim.js", "guessedtype": "property", "shortname": "Anim", "events": {"iterationCountChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "iterationCountChange", "description": "Fires when the value for the configuration attribute 'iterationCount' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "reverseChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "reverseChange", "description": "Fires when the value for the configuration attribute 'reverse' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "end": {"description": "fires after the animation completes.", "param": "{Event} ev The end event.", "params": [{"type": "Event", "name": "ev", "description": " The end event."}], "guessedname": "END", "guessedtype": "property", "type": "Event.Custom"}, "durationChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "durationChange", "description": "Fires when the value for the configuration attribute 'duration' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "resume": {"type": "Event.Custom", "params": [{"type": "Event", "name": "ev", "description": " The pause event."}], "description": "fires when an animation is resumed (run from pause).", "param": "{Event} ev The pause event."}, "iteration": {"type": "Event.Custom", "params": [{"type": "Event", "name": "ev", "description": " The iteration event."}], "description": "fires when an animation begins an iteration.", "param": "{Event} ev The iteration event."}, "toChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "toChange", "description": "Fires when the value for the configuration attribute 'to' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "iterationsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "iterationsChange", "description": "Fires when the value for the configuration attribute 'iterations' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "nodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "nodeChange", "description": "Fires when the value for the configuration attribute 'node' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "tween": {"description": "fires every frame of the animation.", "param": "{Event} ev The tween event.", "params": [{"type": "Event", "name": "ev", "description": " The tween event."}], "guessedname": "TWEEN", "guessedtype": "property", "type": "Event.Custom"}, "start": {"description": "fires when an animation begins.", "param": "{Event} ev The start event.", "params": [{"type": "Event", "name": "ev", "description": " The start event."}], "guessedname": "START", "guessedtype": "property", "type": "Event.Custom"}, "fromChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "fromChange", "description": "Fires when the value for the configuration attribute 'from' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "pause": {"type": "Event.Custom", "params": [{"type": "Event", "name": "ev", "description": " The pause event."}], "description": "fires when an animation is paused.", "param": "{Event} ev The pause event."}, "runningChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "runningChange", "description": "Fires when the value for the configuration attribute 'running' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "pausedChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "pausedChange", "description": "Fires when the value for the configuration attribute 'paused' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "startTimeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "startTimeChange", "description": "Fires when the value for the configuration attribute 'startTime' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "directionChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "directionChange", "description": "Fires when the value for the configuration attribute 'direction' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "elapsedTimeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "elapsedTimeChange", "description": "Fires when the value for the configuration attribute 'elapsedTime' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "easingChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "easingChange", "description": "Fires when the value for the configuration attribute 'easing' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "methods": {"getBezier": {"return": {"type": "Array", "description": "An array containing int x and y member data"}, "description": "Get the current position of the animated element based on t.\nEach point is an array of \"x\" and \"y\" values (0 = x, 1 = y)\nAt least 2 points are required (start and end).\nFirst point is start. Last point is end.\nAdditional control points are optional.", "param": "{Array} points An array containing Bezier points", "static": "", "guessedname": "getBezier", "guessedtype": "function", "params": [{"type": "Array", "name": "points", "description": " An array containing Bezier points"}, {"type": "Number", "name": "t", "description": " A number between 0 and 1 which is the basis for determining current position"}]}, "stop": {"description": "Stops all animation instances.", "chainable": "", "param": "{Boolean} finish If true, the animation will move to the last frame", "static": "", "guessedname": "stop", "guessedtype": "function"}, "pause": {"chainable": "", "static": "", "description": "Pauses all animation instances.", "guessedname": "pause", "guessedtype": "function"}, "run": {"chainable": "", "static": "", "description": "Runs all animation instances.", "guessedname": "run", "guessedtype": "function"}, "_runFrame": {"guessedname": "_runFrame", "static": "", "description": "Called per Interval to handle each animation frame.", "private": "", "guessedtype": "function"}}}, "Plugin.DDProxy": {"name": "Plugin.DDProxy", "configs": {"moveOnEnd": {"type": "Boolean", "description": "Move the original node at the end of the drag. Default: true", "guessedname": "moveOnEnd", "guessedtype": "property"}, "resizeFrame": {"type": "Boolean", "description": "Make the Proxy node assume the size of the original node. Default: true", "guessedname": "resizeFrame", "guessedtype": "property"}, "cloneNode": {"type": "Boolean", "description": "Should the node be cloned into the proxy for you. Default: false", "guessedname": "cloneNode", "guessedtype": "property"}, "positionProxy": {"type": "Boolean", "description": "Make the Proxy node appear in the same place as the original node. Default: true", "guessedname": "positionProxy", "guessedtype": "property"}, "hideOnEnd": {"type": "Boolean", "description": "Hide the drag node at the end of the drag. Default: true", "guessedname": "hideOnEnd", "guessedtype": "property"}, "borderStyle": {"type": "Boolean", "description": "The default border style for the border of the proxy. Default: 1px solid #808080", "guessedname": "borderStyle", "guessedtype": "property"}}, "constructors": [{"description": "Plugin for dd-drag for creating a proxy drag node, instead of dragging the original node."}], "namespace": "Plugin", "module": "dd", "events": {"hideOnEndChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "hideOnEndChange", "description": "Fires when the value for the configuration attribute 'hideOnEnd' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "positionProxyChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "positionProxyChange", "description": "Fires when the value for the configuration attribute 'positionProxy' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "moveOnEndChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "moveOnEndChange", "description": "Fires when the value for the configuration attribute 'moveOnEnd' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "resizeFrameChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "resizeFrameChange", "description": "Fires when the value for the configuration attribute 'resizeFrame' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "cloneNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "cloneNodeChange", "description": "Fires when the value for the configuration attribute 'cloneNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "borderStyleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "borderStyleChange", "description": "Fires when the value for the configuration attribute 'borderStyle' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "DDM", "methods": {"_init": {"description": "Handler for the proxy config attribute", "private": "", "guessedname": "_init", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "dd.js", "guessedtype": "property", "shortname": "DDProxy", "properties": {"NS": {"description": "The Proxy instance will be placed on the Drag instance under the proxy namespace.", "default": "con", "readonly": "", "protected": "", "static": "", "guessedname": "NS", "guessedtype": "property", "type": "{String}"}, "_hands": {"private": "", "description": "Holds the event handles for setting the proxy", "guessedname": "_hands", "guessedtype": "property"}}, "description": "Plugin for dd-drag for creating a proxy drag node, instead of dragging the original node."}, "BaseCellEditor": {"description": "Abstract class BaseCellEditor.\nCheck the list of <a href=\"BaseCellEditor.html#configattributes\">Configuration Attributes</a> available for\nBaseCellEditor.", "module": "aui-component", "abstract": "", "namespace": "", "param": "config {Object} Object literal specifying widget configuration properties.", "guessedname": "BaseCellEditor", "extends": "A.Overlay", "superclass": "A.Overlay", "file": "aui-datatable.js", "guessedtype": "property", "shortname": "BaseCellEditor", "name": "BaseCellEditor"}, "DD.DDM": {"name": "DD.DDM", "configs": {"dragMode": {"type": "String", "description": "This attribute only works if the dd-drop module is active. It will set the dragMode (point, intersect, strict) of all future Drag instances.", "guessedname": "dragMode", "guessedtype": "property"}, "dragCursor": {"type": "String", "description": "The cursor to apply when dragging, if shimmed the shim will get the cursor.", "guessedname": "dragCursor", "guessedtype": "property"}, "throttleTime": {"type": "Number", "description": "The number of milliseconds to throttle the mousemove event. Default: 150", "guessedname": "throttleTime", "guessedtype": "property"}, "clickPixelThresh": {"type": "Number", "description": "The number of pixels to move to start a drag operation, default is 3.", "guessedname": "clickPixelThresh", "guessedtype": "property"}, "clickTimeThresh": {"type": "Number", "description": "The number of milliseconds a mousedown has to pass to start a drag operation, default is 1000.", "guessedname": "clickTimeThresh", "guessedtype": "property"}}, "description": "Provides the base Drag Drop Manger required for making a Node draggable.", "constructors": [{"description": "Provides the base Drag Drop Manger required for making a Node draggable."}], "namespace": "DD", "module": "dd", "events": {"clickPixelThreshChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "clickPixelThreshChange", "description": "Fires when the value for the configuration attribute 'clickPixelThresh' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "dragCursorChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "dragCursorChange", "description": "Fires when the value for the configuration attribute 'dragCursor' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "ddm:start": {"type": "{CustomEvent}", "description": "Fires from the DDM before all drag events fire."}, "dragModeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "dragModeChange", "description": "Fires when the value for the configuration attribute 'dragMode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "ddm:end": {"type": "{CustomEvent}", "description": "Fires from the DDM after the DDM finishes, before the drag end events.", "guessedname": "skinnable", "guessedtype": "property"}, "clickTimeThreshChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "clickTimeThreshChange", "description": "Fires when the value for the configuration attribute 'clickTimeThresh' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "throttleTimeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "throttleTimeChange", "description": "Fires when the value for the configuration attribute 'throttleTime' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "DDMBase", "extends": "Base", "superclass": "Base", "file": "dd.js", "guessedtype": "function", "shortname": "DDM", "properties": {"_active": {"type": "{Boolean}", "description": "flag set when we activate our first drag, so DDM can start listening for events.", "guessedname": "_active", "guessedtype": "property"}, "_noShim": {"guessedname": "_noShim", "type": "{Boolean}", "description": "This flag turns off the use of the mouseover/mouseout shim. It should not be used unless you know what you are doing.", "private": "", "guessedtype": "property"}, "_pg": {"guessedname": "_pg", "type": "{Node}", "description": "The shim placed over the screen to track the mousemove event.", "private": "", "guessedtype": "property"}, "useHash": {"type": "{Boolean}", "description": "Should we only check targets that are in the viewport on drags (for performance), default: true", "guessedname": "useHash", "guessedtype": "property"}, "activeDrag": {"type": "{Drag}", "description": "A reference to the currently active draggable object.", "guessedname": "activeDrag", "guessedtype": "property"}, "POINT": {"guessedname": "POINT", "type": "Number", "description": "In point mode, a Drop is targeted by the cursor being over the Target", "private": "", "guessedtype": "property"}, "_activeShims": {"guessedname": "_activeShims", "type": "{Array}", "description": "Placeholder for all active shims on the page", "private": "", "guessedtype": "property"}, "otherDrops": {"type": "{Object}", "description": "An object literal of Other Drop Targets that we encountered during this interaction (in the case of overlapping Drop Targets)", "guessedname": "otherDrops", "guessedtype": "property"}, "_delegates": {"guessedname": "_delegates", "type": "Array", "description": "Holder for all Y.DD.Delegate instances", "private": "", "guessedtype": "property"}, "validDrops": {"type": "{Array}", "description": "An array of the valid Drop Targets for this interaction."}, "CSS_PREFIX": {"type": "{String}", "description": "The PREFIX to attach to all DD CSS class names", "guessedname": "CSS_PREFIX", "guessedtype": "property"}, "STRICT": {"guessedname": "STRICT", "type": "Number", "description": "In strict mode, a Drop is targeted by the \"entire\" drag node being over the Target", "private": "", "guessedtype": "property"}, "mode": {"guessedname": "mode", "type": "Number", "description": "The mode that the drag operations will run in 0 for Point, 1 for Intersect, 2 for Strict", "private": "", "guessedtype": "property"}, "INTERSECT": {"guessedname": "INTERSECT", "type": "Number", "description": "In intersect mode, a Drop is targeted by \"part\" of the drag node being over the Target", "private": "", "guessedtype": "property"}, "_debugShim": {"guessedname": "_debugShim", "type": "{Boolean}", "description": "Set this to true to set the shims opacity to .5 for debugging it, default: false.", "private": "", "guessedtype": "property"}, "targets": {"type": "{Array}", "description": "All of the Targets", "guessedname": "targets", "guessedtype": "property"}, "_drags": {"guessedname": "_drags", "type": "{Array}", "description": "Holder for all registered drag elements.", "private": "", "guessedtype": "property"}, "activeDrop": {"type": "{Object}", "description": "A reference to the active Drop Target", "guessedname": "activeDrop", "guessedtype": "property"}}, "methods": {"_calcTickArray": {"return": {"type": "", "description": "The tick position"}, "description": "This method is used with the tickXArray and tickYArray config options", "private": "", "params": [{"type": "Number", "name": "pos", "description": " The current X or Y position"}, {"type": "Number", "name": "ticks", "description": " The array containing our custom tick positions."}, {"type": "Number", "name": "off1", "description": " The min offset that we can't pass (region)"}, {"type": "Number", "name": "off2", "description": " The max offset that we can't pass (region)"}], "param": "{Number} pos The current X or Y position", "guessedname": "_calcTickArray", "guessedtype": "function"}, "cssSizestoObject": {"return": {"type": "Object", "description": "The gutter Object Literal."}, "description": "//TODO Private, rename??...", "private": "", "params": [{"type": "String", "name": "gutter", "description": " CSS style string for gutter: '5 0' (sets top and bottom to 5px, left and right to 0px), '1 2 3 4' (top 1px, right 2px, bottom 3px, left 4px)"}], "param": "{String} gutter CSS style string for gutter: '5 0' (sets top and bottom to 5px, left and right to 0px), '1 2 3 4' (top 1px, right 2px, bottom 3px, left 4px)", "guessedname": "cssSizestoObject", "guessedtype": "function"}, "_createPG": {"description": "Creates the shim and adds it's listeners to it.", "private": "", "guessedname": "_createPG", "guessedtype": "function"}, "_pg_deactivate": {"description": "Deactivates the shim", "private": "", "guessedname": "_pg_deactivate", "guessedtype": "function"}, "_deactivateTargets": {"description": "This method fires the drop:hit, drag:drophit, drag:dropmiss methods and deactivates the shims..", "private": "", "guessedname": "_deactivateTargets", "guessedtype": "function"}, "regDelegate": {"description": "Register a Delegate with the DDM", "guessedname": "regDelegate", "guessedtype": "function"}, "stopDrag": {"chainable": "", "return": {"type": "Self", "description": ""}, "description": "Method will forcefully stop a drag operation. For example calling this from inside an ESC keypress handler will stop this drag.", "guessedname": "stopDrag", "guessedtype": "function"}, "getDrop": {"return": {"type": "Object", "description": ""}, "description": "Get a valid Drop instance back from a Node or a selector string, false otherwise", "param": "{String/Object} node The Node instance or Selector string to check for a valid Drop Object", "params": [{"type": "String/Object", "name": "node", "description": " The Node instance or Selector string to check for a valid Drop Object"}], "guessedname": "getDrop", "guessedtype": "function"}, "_start": {"description": "Internal method used by Drag to signal the start of a drag operation", "private": "", "guessedname": "_start", "guessedtype": "function"}, "_dropMove": {"description": "This method is called when the move method is called on the Drag Object.", "private": "", "guessedname": "_dropMove", "guessedtype": "function"}, "_unregDrag": {"description": "Remove this drag object from the DDM._drags array.", "param": "{Drag} d The drag object.", "params": [{"type": "Drag", "name": "d", "description": " The drag object."}], "private": "", "guessedname": "_unregDrag", "guessedtype": "function"}, "clearCache": {"description": "Clears the cache data used for this interaction.", "guessedname": "clearCache", "guessedtype": "function"}, "_hasActiveShim": {"guessedname": "_hasActiveShim", "return": {"type": "Boolean", "description": ""}, "description": "This method checks the _activeShims Object to see if there is a shim active.", "private": "", "guessedtype": "function"}, "_startDrag": {"description": "Factory method to be overwritten by other DDM's", "param": "{Number} x The x position of the drag element", "params": [{"type": "Number", "name": "x", "description": " The x position of the drag element"}, {"type": "Number", "name": "y", "description": " The y position of the drag element"}, {"type": "Number", "name": "w", "description": " The width of the drag element"}, {"type": "Number", "name": "h", "description": " The height of the drag element"}], "private": "", "guessedname": "_startDrag", "guessedtype": "function"}, "_createFrame": {"guessedname": "_createFrame", "description": "Create the proxy element if it doesn't already exist and set the DD.DDM._proxy value", "private": "", "guessedtype": "function"}, "_addActiveShim": {"description": "Adds a Drop Target to the list of active shims", "param": "{Object} d The Drop instance to add to the list.", "params": [{"type": "Object", "name": "d", "description": " The Drop instance to add to the list."}], "private": "", "guessedname": "_addActiveShim", "guessedtype": "function"}, "_end": {"description": "Internal method used by Drag to signal the end of a drag operation", "private": "", "guessedname": "_end", "guessedtype": "function"}, "getBestMatch": {"return": {"type": "Object or Array", "description": ""}, "description": "This method will gather the area for all potential targets and see which has the hightest covered area and return it.", "param": "{Array} drops An Array of drops to scan for the best match.", "params": [{"type": "Array", "name": "drops", "description": " An Array of drops to scan for the best match."}, {"type": "Boolean", "name": "all", "description": " If present, it returns an Array. First item is best match, second is an Array of the other items in the original Array."}], "guessedname": "getBestMatch", "guessedtype": "function"}, "_removeActiveShim": {"description": "Removes a Drop Target to the list of active shims", "param": "{Object} d The Drop instance to remove from the list.", "params": [{"type": "Object", "name": "d", "description": " The Drop instance to remove from the list."}], "private": "", "guessedname": "_removeActiveShim", "guessedtype": "function"}, "swapPosition": {"return": {"type": "Node", "description": ""}, "description": "Swap the position of 2 nodes based on their CSS positioning.", "param": "{Node} n1 The first node to swap", "params": [{"type": "Node", "name": "n1", "description": " The first node to swap"}, {"type": "Node", "name": "n2", "description": " The first node to swap"}], "guessedname": "swapPosition", "guessedtype": "function"}, "isOverTarget": {"return": {"type": "Boolean", "description": ""}, "description": "Check to see if the Drag element is over the target, method varies on current mode", "param": "{Object} drop The drop to check against", "params": [{"type": "Object", "name": "drop", "description": " The drop to check against"}], "guessedname": "isOverTarget", "guessedtype": "function"}, "_move": {"description": "Internal listener for the mousemove DOM event to pass to the Drag's move method.", "param": "{Event.Facade} ev The Dom mousemove Event", "params": [{"type": "Event.Facade", "name": "ev", "description": " The Dom mousemove Event"}], "private": "", "guessedname": "_move", "guessedtype": "function"}, "_activateTargets": {"description": "Clear the cache and activate the shims of all the targets", "private": "", "guessedname": "_activateTargets", "guessedtype": "function"}, "_addValid": {"return": {"type": "Self", "description": ""}, "description": "Add a Drop Target to the list of Valid Targets. This list get's regenerated on each new drag operation.", "chainable": "", "private": "", "params": [{"type": "Object", "name": "drop", "description": ""}], "param": "{Object} drop", "guessedname": "_addValid", "guessedtype": "function"}, "syncActiveShims": {"param": "{Boolean} force Resize/sync all Targets.", "params": [{"type": "Boolean", "name": "force", "description": " Resize/sync all Targets."}], "description": "This method will sync the position of the shims on the Drop Targets that are currently active.", "guessedname": "syncActiveShims", "guessedtype": "function"}, "_removeValid": {"return": {"type": "Self", "description": ""}, "description": "Removes a Drop Target from the list of Valid Targets. This list get's regenerated on each new drag operation.", "chainable": "", "private": "", "params": [{"type": "Object", "name": "drop", "description": ""}], "param": "{Object} drop", "guessedname": "_removeValid", "guessedtype": "function"}, "swapNode": {"return": {"type": "Node", "description": ""}, "description": "Swap the position of 2 nodes based on their DOM location.", "param": "{Node} n1 The first node to swap", "params": [{"type": "Node", "name": "n1", "description": " The first node to swap"}, {"type": "Node", "name": "n2", "description": " The first node to swap"}], "guessedname": "swapNode", "guessedtype": "function"}, "_regTarget": {"description": "Add the passed in Target to the targets collection", "param": "{Object} t The Target to add to the targets collection", "params": [{"type": "Object", "name": "t", "description": " The Target to add to the targets collection"}], "private": "", "guessedname": "_regTarget", "guessedtype": "function"}, "_endDrag": {"description": "Factory method to be overwritten by other DDM's", "private": "", "guessedname": "_endDrag", "guessedtype": "function"}, "_setupListeners": {"description": "Add the document listeners.", "private": "", "guessedname": "_setupListeners", "guessedtype": "function"}, "_unregTarget": {"description": "Remove the passed in Target from the targets collection", "param": "{Object} drop The Target to remove from the targets collection", "params": [{"type": "Object", "name": "drop", "description": " The Target to remove from the targets collection"}], "private": "", "guessedname": "_unregTarget", "guessedtype": "function"}, "getDelegate": {"returns": "Y.DD.Delegate", "description": "Get a delegate instance from a container node", "guessedname": "getDelegate", "guessedtype": "function"}, "_pg_activate": {"description": "Activates the shim", "private": "", "guessedname": "_pg_activate", "guessedtype": "function"}, "_lookup": {"guessedname": "_lookup", "return": {"type": "Array", "description": "The valid Drop Targets that are in the viewport."}, "description": "Filters the list of Drops down to those in the viewport.", "private": "", "guessedtype": "function"}, "_calcTicks": {"return": {"type": "Number", "description": "The new position based on the tick calculation"}, "description": "Helper method to calculate the tick offsets for a given position", "private": "", "params": [{"type": "Number", "name": "pos", "description": " The current X or Y position"}, {"type": "Number", "name": "start", "description": " The start X or Y position"}, {"type": "Number", "name": "tick", "description": " The X or Y tick increment"}, {"type": "Number", "name": "off1", "description": " The min offset that we can't pass (region)"}, {"type": "Number", "name": "off2", "description": " The max offset that we can't pass (region)"}], "param": "{Number} pos The current X or Y position", "guessedname": "_calcTicks", "guessedtype": "function"}, "_setFrame": {"guessedname": "_setFrame", "description": "If resizeProxy is set to true (default) it will resize the proxy element to match the size of the Drag Element.\nIf positionProxy is set to true (default) it will position the proxy element in the same location as the Drag Element.", "private": "", "guessedtype": "function"}, "getDrag": {"return": {"type": "Object", "description": ""}, "description": "Get a valid Drag instance back from a Node or a selector string, false otherwise", "param": "{String/Object} node The Node instance or Selector string to check for a valid Drag Object", "params": [{"type": "String/Object", "name": "node", "description": " The Node instance or Selector string to check for a valid Drag Object"}], "guessedname": "getDrag", "guessedtype": "function"}, "_regDrag": {"description": "Adds a reference to the drag object to the DDM._drags array, called in the constructor of Drag.", "param": "{Drag} d The Drag object", "params": [{"type": "Drag", "name": "d", "description": " The Drag object"}], "private": "", "guessedname": "_regDrag", "guessedtype": "function"}, "_pg_size": {"description": "Sizes the shim on: activatation, window:scroll, window:resize", "private": "", "guessedname": "_pg_size", "guessedtype": "function"}, "_handleTargetOver": {"description": "This method execs _handleTargetOver on all valid Drop Targets", "private": "", "guessedname": "_handleTargetOver", "guessedtype": "function"}, "_setDragMode": {"return": {"type": "", "description": "Number The Mode to be set"}, "description": "Handler for dragMode attribute setter.", "private": "", "params": [{"type": "", "name": "String/Number", "description": " The Number value or the String for the DragMode to default all future drag instances to."}], "param": "String/Number The Number value or the String for the DragMode to default all future drag instances to.", "guessedname": "_setDragMode", "guessedtype": "function"}, "getNode": {"return": {"type": "Node", "description": ""}, "description": "Return a node instance from the given node, selector string or Y.Base extended object.", "param": "{Node/Object/String} n The node to resolve.", "params": [{"type": "Node/Object/String", "name": "n", "description": " The node to resolve."}], "guessedname": "getNode", "guessedtype": "function"}}}, "DelayedTask": {"name": "DelayedTask", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}, {"type": "function", "name": "fn", "description": " Callback"}, {"type": "Object", "name": "scope", "description": " Context object. Optional."}, {"type": "", "name": "args", "description": " 0..n additional arguments that should be provided to the listener."}], "description": "A base class for DelayedTask, providing:\n<ul>\n<li>Executes the supplied function in the context of the supplied object 'when' milliseconds later</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var delayed = new A.DelayedTask({\nfunction() {\n// This callback will be executed when the <code>DelayedTask</code> be invoked\n},\nscope\n});\n// executes after 1000ms the callback\ndelayed.delay(1000);\n</code></pre>\nCheck the list of <a href=\"DelayedTask.html#configattributes\">Configuration Attributes</a> available for\nDelayedTask."}], "namespace": "", "module": "aui-delayed-task", "guessedname": "DelayedTask", "methods": {"delay": {"param": "{Number} delay Delay in milliseconds.", "params": [{"type": "Number", "name": "delay", "description": " Delay in milliseconds."}, {"type": "function", "name": "newFn", "description": " Callback."}, {"type": "Object", "name": "newScope", "description": " Context object. Optional."}, {"type": "", "name": "newArgs", "description": " 0..n additional arguments that should be provided to the listener."}], "description": "<p>This function is responsible to execute the user callback, passed in\nthe <code>constructor</code> after <code>delay</code> milliseconds.</p>\nExample:\n<pre><code>// executes after 1000ms the callback\ndelayed.delay(1000);</code></pre>", "guessedname": "delay", "guessedtype": "function"}, "cancel": {"description": "Cancel the delayed task in case it's running (i.e., clearInterval from\nthe current running <a href=\"DelayedTask.html#property__id\">_id</a>).", "guessedname": "cancel", "guessedtype": "function"}, "_getTime": {"protected": "", "return": {"type": "Number", "description": "Current timestamp"}, "description": "Get the current timestamp (i.e., now).", "guessedname": "_getTime", "guessedtype": "function"}}, "file": "aui-delayed-task.js", "guessedtype": "function", "shortname": "DelayedTask", "properties": {"_delay": {"description": "Stores the passed <code>delay</code> attribute.", "default": "0", "protected": "", "guessedname": "_delay", "guessedtype": "property", "type": "Number"}, "_scope": {"description": "Stores the passed <code>scope</code> attribute.", "default": "instance", "protected": "", "guessedname": "_scope", "guessedtype": "property", "type": "Object"}, "_args": {"protected": "", "type": "Object", "description": "Stores the passed <code>args</code> attribute.", "guessedname": "_args", "guessedtype": "property"}, "_time": {"description": "Stores the current timestamp given from\n<a href=\"DelayedTask.html#method__getTime\">_getTime</a>.", "default": "0", "protected": "", "guessedname": "_time", "guessedtype": "property", "type": "Number"}, "_id": {"description": "Stores the timer <code>id</code> given from the <code>setInterval</code>.", "default": "null", "protected": "", "guessedname": "_id", "guessedtype": "property", "type": "Number"}, "_fn": {"protected": "", "type": "function", "description": "Stores the passed <code>fn</code> attribute.", "guessedname": "_fn", "guessedtype": "property"}}, "description": "A base class for DelayedTask, providing:\n<ul>\n<li>Executes the supplied function in the context of the supplied object 'when' milliseconds later</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var delayed = new A.DelayedTask({\nfunction() {\n// This callback will be executed when the <code>DelayedTask</code> be invoked\n},\nscope\n});\n// executes after 1000ms the callback\ndelayed.delay(1000);\n</code></pre>\nCheck the list of <a href=\"DelayedTask.html#configattributes\">Configuration Attributes</a> available for\nDelayedTask."}, "Pollable": {"name": "Pollable", "namespace": "", "module": "datasource", "methods": {"setInterval": {"return": {"type": "Number", "description": "Interval ID."}, "description": "Sets up a polling mechanism to send requests at set intervals and\nforward responses to given callback.", "param": "msec {Number} Length of interval in milliseconds.", "params": [{"type": "Number", "name": "msec", "description": "  Length of interval in milliseconds."}, {"type": "Object", "name": "request", "description": "  An object literal with the following properties:\n<dl>\n<dt><code>request</code></dt>\n<dd>The request to send to the live data source, if any.</dd>\n<dt><code>callback</code></dt>\n<dd>An object literal with the following properties:\n<dl>\n<dt><code>success</code></dt>\n<dd>The function to call when the data is ready.</dd>\n<dt><code>failure</code></dt>\n<dd>The function to call upon a response failure condition.</dd>\n<dt><code>argument</code></dt>\n<dd>Arbitrary data payload that will be passed back to the success and failure handlers.</dd>\n</dl>\n</dd>\n<dt><code>cfg</code></dt>\n<dd>Configuration object, if any.</dd>\n</dl>"}], "guessedname": "setInterval", "guessedtype": "function"}, "clearInterval": {"param": "id {Number} Interval ID.", "params": [{"type": "Number", "name": "id", "description": "  Interval ID."}], "description": "Disables polling mechanism associated with the given interval ID.", "guessedname": "clearInterval", "guessedtype": "function"}, "clearAllIntervals": {"description": "Clears all intervals.", "guessedname": "clearAllIntervals", "guessedtype": "function"}}, "extends": "DataSource.Local", "superclass": "DataSource.Local", "file": "datasource-polling.js", "shortname": "Pollable", "properties": {"_intervals": {"private": "", "description": "Hash of polling interval IDs that have been enabled,\nstored here to be able to clear all intervals.", "guessedname": "_intervals", "guessedtype": "property"}}, "description": "Adds polling to the DataSource Utility."}, "VMLShape": {"name": "VMLShape", "configs": {"node": {"readonly": "", "type": "HTMLElement", "description": "Dom node for the shape.", "guessedname": "node", "guessedtype": "property"}, "graphic": {"type": "Graphic", "description": "Reference to the container Graphic.", "guessedname": "graphic", "guessedtype": "property"}, "visible": {"type": "Boolean", "description": "Indicates whether the shape is visible.", "guessedname": "visible", "guessedtype": "property"}, "transformOrigin": {"type": "Array", "description": "An array of x, y values which indicates the transformOrigin in which to rotate the shape. Valid values range between 0 and 1 representing a \nfraction of the shape's corresponding bounding box dimension. The default value is [0.5, 0.5].", "guessedname": "transformOrigin", "guessedtype": "property"}, "transform": {"type": "String", "description": "<p>A string containing, in order, transform operations applied to the shape instance. The `transform` string can contain the following values:\n<dl>\n<dt>rotate</dt><dd>Rotates the shape clockwise around it transformOrigin.</dd>\n<dt>translate</dt><dd>Specifies a 2d translation.</dd>\n<dt>skew</dt><dd>Skews the shape around the x-axis and y-axis.</dd>\n<dt>scale</dt><dd>Specifies a 2d scaling operation.</dd>\n<dt>translateX</dt><dd>Translates the shape along the x-axis.</dd>\n<dt>translateY</dt><dd>Translates the shape along the y-axis.</dd>\n<dt>skewX</dt><dd>Skews the shape around the x-axis.</dd>\n<dt>skewY</dt><dd>Skews the shape around the y-axis.</dd>\n</dl>\n</p>\n<p>Applying transforms through the transform attribute will reset the transform matrix and apply a new transform. The shape class also contains corresponding methods for each transform\nthat will apply the transform to the current matrix. The below code illustrates how you might use the `transform` attribute to instantiate a recangle with a rotation of 45 degrees.</p>\nvar myRect = new Y.Rect({\ntype:\"rect\",\nwidth: 50,\nheight: 40,\ntransform: \"rotate(45)\"\n};\n<p>The code below would apply `translate` and `rotate` to an existing shape.</p>\nmyRect.set(\"transform\", \"translate(40, 50) rotate(45)\");", "guessedname": "transform", "guessedtype": "property"}, "width": {"guessedname": "width", "guessedtype": "property"}, "stroke": {"type": "Object", "description": "Contains information about the stroke of the shape.\n<dl>\n<dt>color</dt><dd>The color of the stroke.</dd>\n<dt>weight</dt><dd>Number that indicates the width of the stroke.</dd>\n<dt>opacity</dt><dd>Number between 0 and 1 that indicates the opacity of the stroke. The default value is 1.</dd>\n<dt>dashstyle</dt>Indicates whether to draw a dashed stroke. When set to \"none\", a solid stroke is drawn. When set to an array, the first index indicates the\nlength of the dash. The second index indicates the length of gap.\n<dt>linecap</dt><dd>Specifies the linecap for the stroke. The following values can be specified:\n<dl>\n<dt>butt (default)</dt><dd>Specifies a butt linecap.</dd>\n<dt>square</dt><dd>Specifies a sqare linecap.</dd>\n<dt>round</dt><dd>Specifies a round linecap.</dd>\n</dl>\n</dd>\n<dt>linejoin</dt><dd>Specifies a linejoin for the stroke. The following values can be specified:\n<dl>\n<dt>round (default)</dt><dd>Specifies that the linejoin will be round.</dd>\n<dt>bevel</dt><dd>Specifies a bevel for the linejoin.</dd>\n<dt>miter limit</dt><dd>An integer specifying the miter limit of a miter linejoin. If you want to specify a linejoin of miter, you simply specify the limit as opposed to having\nseparate miter and miter limit values.</dd>\n</dl>\n</dd>\n</dl>", "guessedname": "stroke", "guessedtype": "property"}, "y": {"type": "Number", "description": "Indicates the y position of shape.", "guessedname": "y", "guessedtype": "property"}, "x": {"type": "Number", "description": "Indicates the x position of shape.", "guessedname": "x", "guessedtype": "property"}, "height": {"guessedname": "height", "guessedtype": "property"}, "id": {"type": "String", "description": "Unique id for class instance.", "guessedname": "id", "guessedtype": "property"}, "fill": {"type": "Object", "description": "Contains information about the fill of the shape. \n<dl>\n<dt>color</dt><dd>The color of the fill.</dd>\n<dt>opacity</dt><dd>Number between 0 and 1 that indicates the opacity of the fill. The default value is 1.</dd>\n<dt>type</dt><dd>Type of fill.\n<dl>\n<dt>solid</dt><dd>Solid single color fill. (default)</dd>\n<dt>linear</dt><dd>Linear gradient fill.</dd>\n<dt>radial</dt><dd>Radial gradient fill.</dd>\n</dl>\n</dd>\n</dl>\n<p>If a `linear` or `radial` is specified as the fill type. The following additional property is used:\n<dl>\n<dt>stops</dt><dd>An array of objects containing the following properties:\n<dl>\n<dt>color</dt><dd>The color of the stop.</dd>\n<dt>opacity</dt><dd>Number between 0 and 1 that indicates the opacity of the stop. The default value is 1. Note: No effect for IE 6 - 8</dd>\n<dt>offset</dt><dd>Number between 0 and 1 indicating where the color stop is positioned.</dd> \n</dl>\n</dd>\n<p>Linear gradients also have the following property:</p>\n<dt>rotation</dt><dd>Linear gradients flow left to right by default. The rotation property allows you to change the flow by rotation. (e.g. A rotation of 180 would make the gradient pain from right to left.)</dd>\n<p>Radial gradients have the following additional properties:</p>\n<dt>r</dt><dd>Radius of the gradient circle.</dd>\n<dt>fx</dt><dd>Focal point x-coordinate of the gradient.</dd>\n<dt>fy</dt><dd>Focal point y-coordinate of the gradient.</dd>\n</dl>\n<p>The corresponding `SVGShape` class implements the following additional properties.</p>\n<dl>\n<dt>cx</dt><dd>\n<p>The x-coordinate of the center of the gradient circle. Determines where the color stop begins. The default value 0.5.</p>\n</dd>\n<dt>cy</dt><dd>\n<p>The y-coordinate of the center of the gradient circle. Determines where the color stop begins. The default value 0.5.</p>\n</dd>\n</dl>\n<p>These properties are not currently implemented in `CanvasShape` or `VMLShape`.</p>", "guessedname": "fill", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "cfg", "description": " (optional) Attribute configs"}], "description": "<a href=\"http://www.w3.org/TR/NOTE-VML\">VML</a> implementation of the <a href=\"Shape.html\">`Shape`</a> class. \n`VMLShape` is not intended to be used directly. Instead, use the <a href=\"Shape.html\">`Shape`</a> class. \nIf the browser lacks <a href=\"http://www.w3.org/TR/SVG/\">SVG</a> and <a href=\"http://www.w3.org/TR/html5/the-canvas-element.html\">Canvas</a> \ncapabilities, the <a href=\"Shape.html\">`Shape`</a> class will point to the `VMLShape` class."}], "namespace": "", "module": "graphics", "guessedname": "VMLShape", "methods": {"set": {"params": [{"type": "String|Object", "name": "name", "description": " The name of the attribute. Alternatively, an object of key value pairs can \nbe passed in to set multiple attributes at once."}, {"type": "Any", "name": "value", "description": " The value to set the attribute to. This value is ignored if an object is received as \nthe name param."}], "description": "Sets the value of an attribute.", "guessedname": "set", "guessedtype": "function"}, "getBounds": {"return": {"type": "", "description": "Object"}, "params": [{"type": "Matrix", "name": "[optional]", "description": " cfg Reference to matrix instance"}], "description": "Returns the bounds for a shape.\nCalculates the a new bounding box from the original corner coordinates (base on size and position) and the transform matrix.\nThe calculated bounding box is used by the graphic instance to calculate its viewBox.", "guessedname": "getBounds", "guessedtype": "function"}, "_getFillProps": {"guessedname": "_getFillProps", "return": {"type": "", "description": "Object"}, "description": "Calculates and returns properties for setting an initial fill.", "private": "", "guessedtype": "function"}, "createNode": {"guessedname": "createNode", "return": {"type": "", "description": "HTMLElement"}, "description": "Creates the dom node for the shape.", "private": "", "guessedtype": "function"}, "_createGraphicNode": {"return": {"type": "", "description": "HTMLElement"}, "description": "Creates a graphic node", "private": "", "params": [{"type": "String", "name": "type", "description": " node type to create"}], "guessedname": "_createGraphicNode", "guessedtype": "function"}, "_getStrokeProps": {"guessedname": "_getStrokeProps", "return": {"type": "", "description": "Object"}, "description": "Calculates and returns properties for setting an initial stroke.", "private": "", "guessedtype": "function"}, "_getDefaultStroke": {"guessedname": "_getDefaultStroke", "return": {"type": "", "description": "Object"}, "description": "Value function for stroke attribute", "private": "", "guessedtype": "function"}, "_fillChangeHandler": {"private": "", "description": "Adds a fill to the shape node.", "guessedname": "_fillChangeHandler", "guessedtype": "function"}, "scale": {"params": [{"type": "Number", "name": "val", "description": ""}], "description": "Specifies a 2d scaling operation.", "guessedname": "scale", "guessedtype": "function"}, "_strokeChangeHandler": {"private": "", "description": "Adds a stroke to the shape node.", "guessedname": "_strokeChangeHandler", "guessedtype": "function"}, "skew": {"params": [{"type": "Number", "name": "x", "description": " The value to skew on the x-axis."}, {"type": "Number", "name": "y", "description": " The value to skew on the y-axis."}], "description": "Skews the shape around the x-axis and y-axis.", "guessedname": "skew", "guessedtype": "function"}, "contains": {"return": {"type": "", "description": "Boolean Whether or not this shape is the needle or its ancestor."}, "params": [{"type": "VMLShape | HTMLElement", "name": "needle", "description": " The possible node or descendent"}], "description": "Determines whether the node is an ancestor of another HTML element in the DOM hierarchy.", "guessedname": "contains", "guessedtype": "function"}, "init": {"protected": "", "description": "Init method, invoked during construction.\nCalls `initializer` method.", "guessedname": "init", "guessedtype": "function"}, "_getGradientFill": {"return": {"type": "", "description": "Object"}, "description": "Calculates and returns an object containing gradient properties for a fill node.", "private": "", "params": [{"type": "Object", "name": "fill", "description": " Object containing fill properties."}], "guessedname": "_getGradientFill", "guessedtype": "function"}, "test": {"return": {"type": "", "description": "Boolean Wheter or not the shape matches the selector."}, "params": [{"type": "String", "name": "selector", "description": " The CSS selector to test against."}], "description": "Test if the supplied node matches the supplied selector.", "guessedname": "test", "guessedtype": "function"}, "destroy": {"description": "Destroys shape", "guessedname": "destroy", "guessedtype": "function"}, "translate": {"params": [{"type": "Number", "name": "x", "description": " The value to transate on the x-axis."}, {"type": "Number", "name": "y", "description": " The value to translate on the y-axis."}], "description": "Specifies a 2d translation.", "guessedname": "translate", "guessedtype": "function"}, "addClass": {"params": [{"type": "String", "name": "className", "description": " the class name to add to the node's class attribute"}], "description": "Add a class name to each node.", "guessedname": "addClass", "guessedtype": "function"}, "translateX": {"params": [{"type": "Number", "name": "x", "description": " The value to translate."}], "description": "Translates the shape along the x-axis. When translating x and y coordinates,\nuse the `translate` method.", "guessedname": "translateX", "guessedtype": "function"}, "translateY": {"params": [{"type": "Number", "name": "y", "description": " The value to translate."}], "description": "Performs a translate on the y-coordinate. When translating x and y coordinates,\nuse the `translate` method.", "guessedname": "translateY", "guessedtype": "function"}, "removeClass": {"params": [{"type": "String", "name": "className", "description": " the class name to remove from the node's class attribute"}], "description": "Removes a class name from each node.", "guessedname": "removeClass", "guessedtype": "function"}, "_draw": {"private": "", "description": "Draws the shape.", "guessedname": "_draw", "guessedtype": "function"}, "setXY": {"params": [{"type": "Array", "name": "Contains", "description": " x & y values for new position (coordinates are page-based)"}], "description": "Set the position of the shape in page coordinates, regardless of how the node is positioned.", "guessedname": "setXY", "guessedtype": "function"}, "_addTransform": {"guessedname": "_addTransform", "params": [{"type": "String", "name": "type", "description": " The transform being applied."}, {"type": "Array", "name": "args", "description": " The arguments for the transform."}], "description": "Adds a transform to the shape.", "private": "", "guessedtype": "function"}, "skewY": {"params": [{"type": "Number", "name": "y", "description": " y-coordinate"}], "description": "Skews the shape around the y-axis.", "guessedname": "skewY", "guessedtype": "function"}, "skewX": {"params": [{"type": "Number", "name": "x", "description": " x-coordinate"}], "description": "Skews the shape around the x-axis.", "guessedname": "skewX", "guessedtype": "function"}, "_updateHandler": {"private": "", "description": "Updates `Shape` based on attribute changes.", "guessedname": "_updateHandler", "guessedtype": "function"}, "getXY": {"return": {"type": "", "description": "Array The XY position of the shape."}, "description": "Gets the current position of the node in page coordinates.", "guessedname": "getXY", "guessedtype": "function"}, "on": {"guessedname": "on", "params": [{"type": "String", "name": "type", "description": " event type"}, {"type": "Object", "name": "callback", "description": " function"}], "description": "Overrides default `on` method. Checks to see if its a dom interaction event. If so, \nreturn an event attached to the `node` element. If not, return the normal functionality.", "private": "", "guessedtype": "function"}, "rotate": {"params": [{"type": "Number", "name": "deg", "description": " The degree of the rotation."}], "description": "Rotates the shape clockwise around it transformOrigin.", "guessedname": "rotate", "guessedtype": "function"}, "_initialize": {"private": "", "description": "Initializes the shape", "guessedname": "initializer", "guessedtype": "function"}, "_getDefaultFill": {"guessedname": "_getDefaultFill", "return": {"type": "", "description": "Object"}, "description": "Value function for fill attribute", "private": "", "guessedtype": "function"}, "compareTo": {"return": {"type": "Boolean", "description": "True if the nodes match, false if they do not."}, "params": [{"type": "HTMLElement | Node", "name": "refNode", "description": " The reference node to compare to the node."}], "description": "Compares nodes to determine if they match.\nNode instances can be compared to each other and/or HTMLElements.", "guessedname": "compareTo", "guessedtype": "function"}, "_updateTransform": {"private": "", "description": "Applies all transforms.", "guessedname": "_updateTransform", "guessedtype": "function"}}, "file": "graphics-vml-debug.js", "guessedtype": "function", "shortname": "VMLShape", "properties": {"_type": {"guessedname": "_type", "type": "String", "description": "Indicates the type of shape", "private": "", "guessedtype": "property"}, "_transform": {"guessedname": "_transform", "type": "String", "description": "Storage for the transform attribute.", "private": "", "guessedtype": "property"}, "_rotation": {"guessedname": "_rotation", "type": "Number", "description": "Storage for `rotation` atribute.", "private": "", "guessedtype": "property"}, "_translateX": {"guessedname": "_translateX", "type": "Number", "description": "Storage for translateX", "private": "", "guessedtype": "property"}, "_translateY": {"guessedname": "_translateY", "type": "Number", "description": "Storage for translateY", "private": "", "guessedtype": "property"}}, "description": "<a href=\"http://www.w3.org/TR/NOTE-VML\">VML</a> implementation of the <a href=\"Shape.html\">`Shape`</a> class. \n`VMLShape` is not intended to be used directly. Instead, use the <a href=\"Shape.html\">`Shape`</a> class. \nIf the browser lacks <a href=\"http://www.w3.org/TR/SVG/\">SVG</a> and <a href=\"http://www.w3.org/TR/html5/the-canvas-element.html\">Canvas</a> \ncapabilities, the <a href=\"Shape.html\">`Shape`</a> class will point to the `VMLShape` class."}, "PieChart": {"name": "PieChart", "constructors": [{"description": "The PieChart class creates a pie chart"}], "namespace": "", "module": "charts", "events": {"typeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "typeChange", "description": "Fires when the value for the configuration attribute 'type' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "axesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "axesChange", "description": "Fires when the value for the configuration attribute 'axes' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "seriesCollectionChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "seriesCollectionChange", "description": "Fires when the value for the configuration attribute 'seriesCollection' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "PieChart", "methods": {"_addAxes": {"private": "", "description": "Adds axes to the chart.", "guessedname": "_addAxes", "guessedtype": "function"}, "_parseSeriesAxes": {"description": "Parse and sets the axes for the chart.", "param": "{Array} c A collection `PieSeries` instance.", "params": [{"type": "Array", "name": "c", "description": " A collection `PieSeries` instance."}], "private": "", "guessedname": "_parseSeriesAxes", "guessedtype": "function"}, "_parseAxes": {"return": {"type": "", "description": "Object"}, "description": "Creates `Axis` instances.", "private": "", "params": [{"type": "Object", "name": "val", "description": " Object containing `Axis` instances or objects in which to construct `Axis` instances."}], "param": "{Object} val Object containing `Axis` instances or objects in which to construct `Axis` instances.", "guessedname": "_parseAxes", "guessedtype": "function"}, "getSeriesItem": {"return": {"type": "", "description": "Object"}, "description": "Returns an object literal containing a categoryItem and a valueItem for a given series index.", "param": "series Reference to a series.", "params": [{"type": "", "name": "series", "description": " Reference to a series."}, {"type": "", "name": "index", "description": " Index of the specified item within a series."}], "guessedname": "getSeriesItems", "guessedtype": "function"}, "_redraw": {"private": "", "description": "Redraws the chart instance.", "guessedname": "_redraw", "guessedtype": "function"}, "_getDefaultAxes": {"guessedname": "_getDefaultAxes", "return": {"type": "", "description": "Object"}, "description": "Generates and returns a key-indexed object containing `Axis` instances or objects used to create `Axis` instances.", "private": "", "guessedtype": "function"}, "_addSeries": {"private": "", "description": "Renders the Graph.", "guessedname": "_addSeries", "guessedtype": "function"}, "_sizeChanged": {"description": "Handler for sizeChanged event.", "param": "{Object} e Event object.", "params": [{"type": "Object", "name": "e", "description": " Event object."}], "private": "", "guessedname": "_sizeChanged", "guessedtype": "function"}, "_getSeriesCollection": {"guessedname": "_getSeriesCollection", "return": {"type": "", "description": "Array"}, "description": "Calculates and returns a `seriesCollection`.", "private": "", "guessedtype": "function"}}, "extends": "ChartBase", "superclass": "ChartBase", "file": "charts.js", "guessedtype": "property", "shortname": "PieChart", "configs": {"type": {"type": "String", "description": "Type of chart when there is no series collection specified.", "guessedname": "type", "guessedtype": "property"}, "axes": {"type": "Object", "description": "Axes to appear in the chart.", "guessedname": "axes", "guessedtype": "property"}, "seriesCollection": {"type": "Array", "description": "Collection of series to appear on the chart. This can be an array of Series instances or object literals\nused to describe a Series instance.", "guessedname": "seriesCollection", "guessedtype": "property"}}, "description": "The PieChart class creates a pie chart"}, "Console": {"name": "Console", "configs": {"height": {"default": "\"300px\"", "type": "{String | Number}", "description": "String with units, or number, representing the height of the Console,\ninclusive of header and footer. If a number is provided, the default\nunit, defined by Widget's DEF_UNIT, property is used.", "guessedname": "height", "guessedtype": "property"}, "consoleLimit": {"default": "300", "type": "Number", "description": "Maximum number of Console entries allowed in the Console body at one\ntime.  This is used to keep acquired messages from exploding the\nDOM tree and impacting page performance.", "guessedname": "consoleLimit", "guessedtype": "property"}, "width": {"default": "\"300px\"", "type": "{String | Number}", "description": "String with units, or number, representing the width of the Console.\nIf a number is provided, the default unit, defined by Widget's\nDEF_UNIT, property is used.", "guessedname": "width", "guessedtype": "property"}, "logLevel": {"default": "Y.config.logLevel or Console.LOG_LEVEL_INFO", "type": "String", "description": "Minimum entry log level to render into the Console.  The initial\nlogLevel value for all Console instances defaults from the\nY.config.logLevel YUI configuration, or Console.LOG_LEVEL_INFO if\nthat configuration is not set.\nPossible values are &quot;info&quot;, &quot;warn&quot;,\n&quot;error&quot; (case insensitive), or their corresponding statics\nConsole.LOG_LEVEL_INFO and so on.", "guessedname": "logLevel", "guessedtype": "property"}, "printLimit": {"default": "50", "type": "Number", "description": "Maximum number of entries printed in each iteration of the print\nloop. This is used to prevent excessive logging locking the page UI.", "guessedname": "printLimit", "guessedtype": "property"}, "collapsed": {"default": "false", "type": "Boolean", "description": "Controls the collapsed state of the Console", "guessedname": "collapsed", "guessedtype": "property"}, "useBrowserConsole": {"default": "false", "type": "{Boolean}", "description": "Pass through to the YUI instance useBrowserConsole configuration.\nBy default this is set to false, which will disable logging to the\nbrowser console when a Console instance is created.  If the\nlogSource is not a YUI instance, this has no effect.", "guessedname": "useBrowserConsole", "guessedtype": "property"}, "logSource": {"default": "Y", "type": "EventTarget", "description": "Object that will emit the log events.  By default the YUI instance.\nTo have a single Console capture events from all YUI instances, set\nthis to the Y.Global object.", "guessedname": "logSource", "guessedtype": "property"}, "printTimeout": {"default": "100", "type": "Number", "description": "Millisecond timeout between iterations of the print loop, moving\nentries from the buffer to the UI.", "guessedname": "printTimeout", "guessedtype": "property"}, "defaultSource": {"default": "\"global\"", "type": "String", "description": "If a source is not specified in the Y.log(..) statement, this\nsource will be used.", "guessedname": "defaultSource", "guessedtype": "property"}, "paused": {"default": "false", "type": "boolean", "description": "Boolean to pause the outputting of new messages to the console.\nWhen paused, messages will accumulate in the buffer.", "guessedname": "paused", "guessedtype": "property"}, "newestOnTop": {"default": "true", "type": "Boolean", "description": "New entries should display at the top of the Console or the bottom?", "guessedname": "newestOnTop", "guessedtype": "property"}, "logEvent": {"default": "\"yui:log\"", "type": "String", "description": "Name of the custom event that will communicate log messages.", "guessedname": "logEvent", "guessedtype": "property"}, "style": {"default": "'separate'", "type": "{String}", "description": "Allows the Console to flow in the document.  Available values are\n'inline', 'block', and 'separate' (the default).", "guessedname": "style", "guessedtype": "property"}, "startTime": {"default": "The moment the console module is <code>use</code>d", "type": "Date", "description": "The baseline time for this Console instance, used to measure elapsed\ntime from the moment the console module is <code>use</code>d to the\nmoment each new entry is logged (not rendered).\nThis value is reset by the instance method myConsole.reset().", "guessedname": "startTime", "guessedtype": "property"}, "entryTemplate": {"default": "Console.ENTRY_TEMPLATE", "type": "String", "description": "Markup template used to create the DOM structure for Console entries.", "guessedname": "entryTemplate", "guessedtype": "property"}, "scrollIntoView": {"default": "true", "type": "Boolean", "description": "When new entries are added to the Console UI, should they be\nscrolled into view?", "guessedname": "scrollIntoView", "guessedtype": "property"}, "lastTime": {"default": "The moment the console module is <code>use</code>d", "type": "Date", "description": "The precise time the last entry was logged.  Used to measure elapsed\ntime between log messages.", "guessedname": "lastTime", "guessedtype": "property"}, "defaultCategory": {"default": "\"info\"", "type": "String", "description": "If a category is not specified in the Y.log(..) statement, this\ncategory will be used. Categories &quot;info&quot;,\n&quot;warn&quot;, and &quot;error&quot; are also called log level.", "guessedname": "defaultCategory", "guessedtype": "property"}, "strings": {"type": "Object", "description": "Collection of strings used to label elements in the Console UI.\nDefault collection contains the following name:value pairs:\n<ul>\n<li>title : &quot;Log Console&quot;</li>\n<li>pause : &quot;Pause&quot;</li>\n<li>clear : &quot;Clear&quot;</li>\n<li>collapse : &quot;Collapse&quot;</li>\n<li>expand : &quot;Expand&quot;</li>\n</ul>", "guessedname": "strings", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "conf", "description": "  Configuration object (see Configuration attributes)"}], "description": "Console creates a visualization for messages logged through calls to a YUI\ninstance's <code>Y.log( message, category, source )</code> method.  The\ndebug versions of YUI modules will include logging statements to offer some\ninsight into the steps executed during that module's operation.  Including\nlog statements in your code will cause those messages to also appear in the\nConsole.  Use Console to aid in developing your page or application.\nEntry categories &quot;info&quot;, &quot;warn&quot;, and &quot;error&quot;\nare also referred to as the log level, and entries are filtered against the\nconfigured logLevel."}], "namespace": "", "module": "console", "events": {"scrollIntoViewChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "scrollIntoViewChange", "description": "Fires when the value for the configuration attribute 'scrollIntoView' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "heightChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "heightChange", "description": "Fires when the value for the configuration attribute 'height' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "lastTimeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "lastTimeChange", "description": "Fires when the value for the configuration attribute 'lastTime' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "consoleLimitChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "consoleLimitChange", "description": "Fires when the value for the configuration attribute 'consoleLimit' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "newestOnTopChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "newestOnTopChange", "description": "Fires when the value for the configuration attribute 'newestOnTop' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "stringsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "stringsChange", "description": "Fires when the value for the configuration attribute 'strings' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "logSourceChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "logSourceChange", "description": "Fires when the value for the configuration attribute 'logSource' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "logLevelChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "logLevelChange", "description": "Fires when the value for the configuration attribute 'logLevel' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "startTimeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "startTimeChange", "description": "Fires when the value for the configuration attribute 'startTime' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "defaultSourceChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "defaultSourceChange", "description": "Fires when the value for the configuration attribute 'defaultSource' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "entryTemplateChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "entryTemplateChange", "description": "Fires when the value for the configuration attribute 'entryTemplate' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "logEventChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "logEventChange", "description": "Fires when the value for the configuration attribute 'logEvent' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "printLimitChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "printLimitChange", "description": "Fires when the value for the configuration attribute 'printLimit' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "defaultCategoryChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "defaultCategoryChange", "description": "Fires when the value for the configuration attribute 'defaultCategory' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "pausedChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "pausedChange", "description": "Fires when the value for the configuration attribute 'paused' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "printTimeoutChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "printTimeoutChange", "description": "Fires when the value for the configuration attribute 'printTimeout' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "useBrowserConsoleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "useBrowserConsoleChange", "description": "Fires when the value for the configuration attribute 'useBrowserConsole' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "collapsedChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "collapsedChange", "description": "Fires when the value for the configuration attribute 'collapsed' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "reset": {"description": "Triggers the reset behavior via the default logic in _defResetFn.", "param": "event {Event.Facade} Event Facade object", "params": [{"type": "Event.Facade", "name": "event", "description": "  Event Facade object"}], "guessedname": "defaultFn", "guessedtype": "property", "preventable": "_defResetFn"}, "styleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "styleChange", "description": "Fires when the value for the configuration attribute 'style' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "entry": {"description": "Transfers a received message to the print loop buffer.  Default\nbehavior defined in _defEntryFn.", "param": "event {Event.Facade} An Event Facade object with the following attribute specific properties added:\n<dl>\n<dt>message</dt>\n<dd>The message data normalized into an object literal (see _normalizeMessage)</dd>\n</dl>", "params": [{"type": "Event.Facade", "name": "event", "description": "  An Event Facade object with the following attribute specific properties added:\n<dl>\n<dt>message</dt>\n<dd>The message data normalized into an object literal (see _normalizeMessage)</dd>\n</dl>"}], "guessedname": "defaultFn", "guessedtype": "property", "preventable": "_defEntryFn"}, "widthChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "widthChange", "description": "Fires when the value for the configuration attribute 'width' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "getCN", "methods": {"_normalizeMessage": {"return": {"type": "", "description": "Object the message object"}, "description": "Create a log entry message from the inputs including the following keys:\n<ul>\n<li>time - this moment</li>\n<li>message - leg message</li>\n<li>category - logLevel or custom category for the message</li>\n<li>source - when provided, the widget or util calling Y.log</li>\n<li>sourceAndDetail - same as source but can include instance info</li>\n<li>localTime - readable version of time</li>\n<li>elapsedTime - ms since last entry</li>\n<li>totalTime - ms since Console was instantiated or reset</li>\n</ul>", "param": "e {Event} custom event containing the log message", "protected": "", "params": [{"type": "Event", "name": "e", "description": "  custom event containing the log message"}], "guessedname": "_normalizeMessage", "guessedtype": "function"}, "_uiUpdateCollapsed": {"description": "Updates the UI to reflect the new Collapsed state", "param": "v {Boolean} true for collapsed, false for expanded", "protected": "", "params": [{"type": "Boolean", "name": "v", "description": "  true for collapsed, false for expanded"}], "guessedname": "_uiUpdateCollapsed", "guessedtype": "function"}, "_afterStringsChange": {"description": "Updates the UI if changes are made to any of the strings in the strings\nattribute.", "param": "e {Event} Custom event for the attribute change", "protected": "", "params": [{"type": "Event", "name": "e", "description": "  Custom event for the attribute change"}], "guessedname": "_afterStringsChange", "guessedtype": "function"}, "_setUseBrowserConsole": {"return": {"type": "Boolean", "description": "true|false if logSource is a YUI instance"}, "description": "Setter method for useBrowserConsole attributes.  Only functional if the\nlogSource attribute points to a YUI instance.  Passes the value down to\nthe YUI instance.  NOTE: multiple Console instances cannot maintain\nindependent useBrowserConsole values, since it is just a pass through to\nthe YUI instance configuration.", "param": "v {Boolean} false to disable browser console printing (default)", "protected": "", "params": [{"type": "Boolean", "name": "v", "description": "  false to disable browser console printing (default)"}], "guessedname": "_setUseBrowserConsole", "guessedtype": "function"}, "initializer": {"protected": "", "description": "Constructor code.  Set up the buffer and entry template, publish\ninternal events, and subscribe to the configured logEvent.", "guessedname": "initializer", "guessedtype": "function"}, "_cancelPrintLoop": {"protected": "", "description": "Clears the timeout for printing buffered messages.", "guessedname": "_cancelPrintLoop", "guessedtype": "function"}, "_trimOldEntries": {"protected": "", "description": "Removes the oldest message entries from the UI to maintain the limit\nspecified in the consoleLimit configuration.", "guessedname": "_trimOldEntries", "guessedtype": "function"}, "_getUseBrowserConsole": {"protected": "", "return": {"type": "Boolean", "description": "or null if logSource is not a YUI instance"}, "description": "Getter method for useBrowserConsole attribute.  Just a pass through to\nthe YUI instance configuration setting.", "guessedname": "_getUseBrowserConsole", "guessedtype": "function"}, "_defResetFn": {"protected": "", "description": "Clears the console, resets the startTime attribute, enables and\nunpauses the widget.", "guessedname": "_defResetFn", "guessedtype": "function"}, "_encodeHTML": {"return": {"type": "", "description": "String the encoded string"}, "description": "Returns the input string with ampersands (&amp;), &lt, and &gt; encoded\nas HTML entities.", "param": "s {String} the raw string", "protected": "", "params": [{"type": "String", "name": "s", "description": "  the raw string"}], "guessedname": "_encodeHTML", "guessedtype": "function"}, "_uiSetHeight": {"description": "Set the height of the Console container.  Set the body height to the\ndifference between the configured height and the calculated heights of\nthe header and footer.\nOverrides Widget.prototype._uiSetHeight.", "param": "v {String|Number} the new height", "protected": "", "params": [{"type": "String|Number", "name": "v", "description": "  the new height"}], "guessedname": "_uiSetHeight", "guessedtype": "function"}, "_onCollapseClick": {"description": "Event handler for clicking on the Collapse/Expand button. Sets the\n&quot;collapsed&quot; attribute accordingly.", "param": "e {Event} DOM event facade for the click event", "protected": "", "params": [{"type": "Event", "name": "e", "description": "  DOM event facade for the click event"}], "guessedname": "_onCollapseClick", "guessedtype": "function"}, "log": {"description": "Wrapper for <code>Y.log</code>.", "chainable": "", "param": "arg* {MIXED} (all arguments passed through to <code>Y.log</code>)", "params": [{"type": "MIXED", "name": "arg*", "description": "  (all arguments passed through to <code>Y.log</code>)"}], "guessedname": "log", "guessedtype": "function"}, "_initBody": {"protected": "", "description": "Create the DOM structure for the console body&#8212;where messages are\nrendered.", "guessedname": "_initBody", "guessedtype": "function"}, "_onLogEvent": {"description": "Responds to log events by normalizing qualifying messages and passing\nthem along through the entry event for buffering etc.", "param": "msg {String} the log message", "protected": "", "params": [{"type": "String", "name": "msg", "description": "  the log message"}, {"type": "String", "name": "cat", "description": "  OPTIONAL the category or logLevel of the message"}, {"type": "String", "name": "src", "description": "  OPTIONAL the source of the message (e.g. widget name)"}], "guessedname": "_onLogEvent", "guessedtype": "function"}, "_afterPausedChange": {"description": "Updates the UI and schedules or cancels the print loop.", "param": "e {Event} Custom event for the attribute change", "protected": "", "params": [{"type": "Event", "name": "e", "description": "  Custom event for the attribute change"}], "guessedname": "_afterPausedChange", "guessedtype": "function"}, "_validateStyle": {"return": {"type": "Boolean", "description": "pass/fail"}, "description": "Validates input value for style attribute.  Accepts only values 'inline',\n'block', and 'separate'.", "param": "style {String} the proposed value", "protected": "", "params": [{"type": "String", "name": "style", "description": "  the proposed value"}], "guessedname": "_validateStyle", "guessedtype": "function"}, "destructor": {"protected": "", "description": "Tears down the instance, flushing event subscriptions and purging the UI.", "guessedname": "destructor", "guessedtype": "function"}, "_initHead": {"protected": "", "description": "Create the DOM structure for the header elements.", "guessedname": "_initHead", "guessedtype": "function"}, "_afterConsoleLimitChange": {"description": "Calls this._trimOldEntries() in response to changes in the configured\nconsoleLimit attribute.", "param": "e {Event} Custom event for the attribute change", "protected": "", "params": [{"type": "Event", "name": "e", "description": "  Custom event for the attribute change"}], "guessedname": "_afterConsoleLimitChange", "guessedtype": "function"}, "_uiSizeCB": {"protected": "", "description": "Over-ride default content box sizing to do nothing, since we're sizing\nthe body section to fill out height ourselves.", "guessedname": "_uiSizeCB", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Set up event listeners to wire up the UI to the internal state.", "guessedname": "bindUI", "guessedtype": "function"}, "_defEntryFn": {"description": "Buffers incoming message objects and schedules the printing.", "param": "e {Event} The Custom event carrying the message in its payload", "protected": "", "params": [{"type": "Event", "name": "e", "description": "  The Custom event carrying the message in its payload"}], "guessedname": "_defEntryFn", "guessedtype": "function"}, "_validateLogSource": {"return": {"type": "Boolean", "description": "true if the input is an object with an <code>on</code>\nmethod"}, "description": "Validator for logSource attribute.", "param": "v {Object} the desired logSource", "protected": "", "params": [{"type": "Object", "name": "v", "description": "  the desired logSource"}], "guessedname": "_validateLogSource", "guessedtype": "function"}, "_htmlEscapeMessage": {"return": {"type": "", "description": "Object the message object with proper escapement"}, "description": "Performs HTML escaping on strings in the message object.", "param": "m {Object} the normalized message object", "protected": "", "params": [{"type": "Object", "name": "m", "description": "  the normalized message object"}], "guessedname": "_htmlEscapeMessage", "guessedtype": "function"}, "collapse": {"chainable": "", "description": "Collapses the body and footer.", "guessedname": "collapse", "guessedtype": "function"}, "_onPauseClick": {"description": "Event handler for clicking on the Pause checkbox to update the paused\nattribute.", "param": "e {Event} DOM event facade for the click event", "protected": "", "params": [{"type": "Event", "name": "e", "description": "  DOM event facade for the click event"}], "guessedname": "_onPauseClick", "guessedtype": "function"}, "_afterVisibleChange": {"description": "Makes adjustments to the UI if needed when the Console is hidden or shown", "param": "e {Event} the visibleChange event", "protected": "", "params": [{"type": "Event", "name": "e", "description": "  the visibleChange event"}], "guessedname": "_afterVisibleChange", "guessedtype": "function"}, "scrollToLatest": {"chainable": "", "description": "Scrolls to the most recent entry", "guessedname": "scrollToLatest", "guessedtype": "function"}, "_onClearClick": {"description": "Event handler for clicking on the Clear button.  Pass-through to\n<code>this.clearConsole()</code>.", "param": "e {Event} DOM event facade for the click event", "protected": "", "params": [{"type": "Event", "name": "e", "description": "  DOM event facade for the click event"}], "guessedname": "_onClearClick", "guessedtype": "function"}, "_schedulePrint": {"protected": "", "description": "Sets an interval for buffered messages to be output to the console.", "guessedname": "_schedulePrint", "guessedtype": "function"}, "_uiUpdateFromHideShow": {"description": "Recalculates dimensions and updates appropriately when shown", "param": "v {Boolean} true for visible, false for hidden", "protected": "", "params": [{"type": "Boolean", "name": "v", "description": "  true for visible, false for hidden"}], "guessedname": "_uiUpdateFromHideShow", "guessedtype": "function"}, "_createEntryHTML": {"return": {"type": "", "description": "String"}, "description": "Translates message meta into the markup for a console entry.", "param": "m {Object} object literal containing normalized message metadata", "protected": "", "params": [{"type": "Object", "name": "m", "description": "  object literal containing normalized message metadata"}], "guessedname": "_createEntryHTML", "guessedtype": "function"}, "expand": {"chainable": "", "description": "Expands the body and footer if collapsed.", "guessedname": "expand", "guessedtype": "function"}, "_uiUpdatePaused": {"description": "Checks or unchecks the paused checkbox", "param": "on {Boolean} the new checked state", "protected": "", "params": [{"type": "Boolean", "name": "on", "description": "  the new checked state"}], "guessedname": "_uiUpdatePaused", "guessedtype": "function"}, "reset": {"chainable": "", "description": "Clears the console and resets internal timers.", "guessedname": "reset", "guessedtype": "function"}, "syncUI": {"description": "Sync the UI state to the current attribute state.", "guessedname": "syncUI", "guessedtype": "function"}, "_afterCollapsedChange": {"description": "Updates the className of the contentBox, which should trigger CSS to\nhide or show the body and footer sections depending on the new value.", "param": "e {Event} Custom event for the attribute change", "protected": "", "params": [{"type": "Event", "name": "e", "description": "  Custom event for the attribute change"}], "guessedname": "_afterCollapsedChange", "guessedtype": "function"}, "_initFoot": {"protected": "", "description": "Create the DOM structure for the footer elements.", "guessedname": "_initFoot", "guessedtype": "function"}, "printBuffer": {"description": "Outputs buffered messages to the console UI.  This is typically called\nfrom a scheduled interval until the buffer is empty (referred to as the\nprint loop).  The number of buffered messages output to the Console is\nlimited to the number provided as an argument.  If no limit is passed,\nall buffered messages are rendered.", "chainable": "", "param": "limit {Number} (optional) max number of buffered entries to write", "params": [{"type": "Number", "name": "limit", "description": "  (optional) max number of buffered entries to write"}], "guessedname": "printBuffer", "guessedtype": "function"}, "_setLogLevel": {"return": {"type": "", "description": "String One of Console.LOG_LEVEL_INFO, _WARN, or _ERROR"}, "description": "Setter method for logLevel attribute.  Acceptable values are\n&quot;error&quot, &quot;warn&quot, and &quot;info&quot (case\ninsensitive).  Other values are treated as &quot;info&quot;.", "param": "v {String} the desired log level", "protected": "", "params": [{"type": "String", "name": "v", "description": "  the desired log level"}], "guessedname": "_setLogLevel", "guessedtype": "function"}, "clearConsole": {"chainable": "", "description": "Clear the console of messages and flush the buffer of pending messages.", "guessedname": "clearConsole", "guessedtype": "function"}, "_isInLogLevel": {"protected": "", "description": "Determine if incoming log messages are within the configured logLevel\nto be buffered for printing.", "guessedname": "_isInLogLevel", "guessedtype": "function"}, "renderUI": {"protected": "", "description": "Generate the Console UI.", "guessedname": "renderUI", "guessedtype": "function"}}, "extends": "Widget", "superclass": "Widget", "file": "console.js", "guessedtype": "property", "shortname": "Console", "properties": {"_printLoop": {"description": "Holds the object API returned from <code>Y.later</code> for the print\nloop interval.", "default": "null", "protected": "", "guessedname": "_printLoop", "guessedtype": "property", "type": "Object"}, "LOG_LEVEL_INFO": {"type": "String", "static": "", "description": "Static identifier for logLevel configuration setting to allow all\nincoming messages to generate Console entries.", "guessedname": "LOG_LEVEL_INFO", "guessedtype": "property"}, "NAME": {"type": "String", "static": "", "description": "The identity of the widget.", "guessedname": "NAME", "guessedtype": "property"}, "buffer": {"description": "Array of normalized message objects awaiting printing.", "default": "null", "protected": "", "guessedname": "buffer", "guessedtype": "property", "type": "Array"}, "_body": {"description": "Reference to the Node instance that will house the console messages.", "default": "null", "protected": "", "guessedname": "_body", "guessedtype": "property", "type": "Node"}, "_head": {"description": "Reference to the Node instance containing the header contents.", "default": "null", "protected": "", "guessedname": "_head", "guessedtype": "property", "type": "Node"}, "_foot": {"description": "Reference to the Node instance containing the footer contents.", "default": "null", "protected": "", "guessedname": "_foot", "guessedtype": "property", "type": "Node"}, "ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute configuration of\nthe Widget.", "guessedname": "ATTRS", "guessedtype": "property"}, "BODY_TEMPLATE": {"type": "String", "static": "", "description": "Markup template used to generate the DOM structure for the Console body\n(where the messages are inserted) when it is rendered.  The template\nincludes only the {placeholder} &quot;console_bd_class&quot;, which is\nconstributed by Console.CHROME_CLASSES.", "guessedname": "BODY_TEMPLATE", "guessedtype": "property"}, "CHROME_CLASSES": {"type": "Object", "static": "", "description": "Map (object) of classNames used to populate the placeholders in the\nConsole.HEADER_TEMPLATE, Console.BODY_TEMPLATE, and\nConsole.FOOTER_TEMPLATE markup when rendering the Console UI.\n<p>By default, the keys contained in the object are:</p>\n<ul>\n<li>console_hd_class</li>\n<li>console_bd_class</li>\n<li>console_ft_class</li>\n<li>console_controls_class</li>\n<li>console_checkbox_class</li>\n<li>console_pause_class</li>\n<li>console_pause_label_class</li>\n<li>console_button_class</li>\n<li>console_clear_class</li>\n<li>console_collapse_class</li>\n<li>console_title_class</li>\n</ul>", "guessedname": "CHROME_CLASSES", "guessedtype": "property"}, "LOG_LEVEL_WARN": {"type": "String", "static": "", "description": "Static identifier for logLevel configuration setting to allow only\nincoming messages of logLevel &quot;warn&quot; or &quot;error&quot;\nto generate Console entries.", "guessedname": "LOG_LEVEL_WARN", "guessedtype": "property"}, "ENTRY_TEMPLATE": {"type": "String", "static": "", "description": "Default markup template used to create the DOM structure for Console\nentries. The markup contains {placeholder}s for content and classes\nthat are replaced via Y.substitute.  The default template contains\nthe {placeholder}s identified in Console.ENTRY_CLASSES as well as the\nfollowing placeholders that will be populated by the log entry data:\n<ul>\n<li>cat_class</li>\n<li>src_class</li>\n<li>totalTime</li>\n<li>elapsedTime</li>\n<li>localTime</li>\n<li>sourceAndDetail</li>\n<li>message</li>\n</ul>", "guessedname": "ENTRY_TEMPLATE", "guessedtype": "property"}, "ENTRY_CLASSES": {"type": "Object", "static": "", "description": "Map (object) of classNames used to populate the placeholders in the\nConsole.ENTRY_TEMPLATE markup when rendering a new Console entry.\n<p>By default, the keys contained in the object are:</p>\n<ul>\n<li>entry_class</li>\n<li>entry_meta_class</li>\n<li>entry_cat_class</li>\n<li>entry_src_class</li>\n<li>entry_time_class</li>\n<li>entry_content_class</li>\n</ul>", "guessedname": "ENTRY_CLASSES", "guessedtype": "property"}, "FOOTER_TEMPLATE": {"type": "String", "static": "", "description": "Markup template used to generate the DOM structure for the footer\nsection of the Console when it is rendered.  The template includes\nmany of the {placeholder}s from Console.CHROME_CLASSES as well as:\n<ul>\n<li>id_guid - generated unique id, relates the label and checkbox</li>\n<li>str_pause - pulled from attribute strings.pause</li>\n<li>str_clear - pulled from attribute strings.clear</li>\n</ul>", "guessedname": "FOOTER_TEMPLATE", "guessedtype": "property"}, "HEADER_TEMPLATE": {"type": "String", "static": "", "description": "Markup template used to generate the DOM structure for the header\nsection of the Console when it is rendered.  The template includes\nthese {placeholder}s:\n<ul>\n<li>console_button_class - contributed by Console.CHROME_CLASSES</li>\n<li>console_collapse_class - contributed by Console.CHROME_CLASSES</li>\n<li>console_hd_class - contributed by Console.CHROME_CLASSES</li>\n<li>console_title_class - contributed by Console.CHROME_CLASSES</li>\n<li>str_collapse - pulled from attribute strings.collapse</li>\n<li>str_title - pulled from attribute strings.title</li>\n</ul>", "guessedname": "HEADER_TEMPLATE", "guessedtype": "property"}, "_evtCat": {"protected": "", "type": "string", "description": "Category to prefix all event subscriptions to allow for ease of detach\nduring destroy.", "guessedname": "_evtCat", "guessedtype": "property"}, "LOG_LEVEL_ERROR": {"type": "String", "static": "", "description": "Static identifier for logLevel configuration setting to allow only\nincoming messages of logLevel &quot;error&quot; to generate\nConsole entries.", "guessedname": "LOG_LEVEL_ERROR", "guessedtype": "property"}}, "description": "Console creates a visualization for messages logged through calls to a YUI\ninstance's <code>Y.log( message, category, source )</code> method.  The\ndebug versions of YUI modules will include logging statements to offer some\ninsight into the steps executed during that module's operation.  Including\nlog statements in your code will cause those messages to also appear in the\nConsole.  Use Console to aid in developing your page or application.\nEntry categories &quot;info&quot;, &quot;warn&quot;, and &quot;error&quot;\nare also referred to as the log level, and entries are filtered against the\nconfigured logLevel."}, "Test.Case": {"name": "Test.Case", "constructors": [{"params": [{"type": "", "name": "template", "description": " An object containing any number of test methods, other methods,\nan optional name, and anything else the test case needs."}], "description": "Test case containing various tests to run."}], "namespace": "Test", "module": "test", "guessedname": "Case", "methods": {"tearDown": {"return": {"type": "Void", "description": ""}, "description": "Function to run after each test is executed.", "guessedname": "tearDown", "guessedtype": "function"}, "setUp": {"return": {"type": "Void", "description": ""}, "description": "Function to run before each test is executed.", "guessedname": "setUp", "guessedtype": "function"}, "wait": {"return": {"type": "Void", "description": ""}, "description": "Causes the test case to wait a specified amount of time and then\ncontinue executing the given code.", "param": "{Function} segment (Optional) The function to run after the delay.\nIf omitted, the TestRunner will wait until resume() is called.", "params": [{"type": "Function", "name": "segment", "description": " (Optional) The function to run after the delay.\nIf omitted, the TestRunner will wait until resume() is called."}, {"type": "int", "name": "delay", "description": " (Optional) The number of milliseconds to wait before running\nthe function. If omitted, defaults to zero."}], "guessedname": "wait", "guessedtype": "function"}, "resume": {"return": {"type": "Void", "description": ""}, "description": "Resumes a paused test and runs the given function.", "param": "{Function} segment (Optional) The function to run.\nIf omitted, the test automatically passes.", "params": [{"type": "Function", "name": "segment", "description": " (Optional) The function to run.\nIf omitted, the test automatically passes."}], "guessedname": "resume", "guessedtype": "function"}}, "file": "test.js", "guessedtype": "function", "shortname": "Case", "properties": {"_should": {"protected": "", "type": "Object", "description": "Special rules for the test case. Possible subobjects\nare fail, for tests that should fail, and error, for\ntests that should throw an error.", "guessedname": "_should", "guessedtype": "property"}, "name": {"type": "String", "description": "Name for the test case.", "guessedname": "name", "guessedtype": "property"}}, "description": "Test case containing various tests to run."}, "Text.WordBreak": {"name": "Text.WordBreak", "namespace": "", "module": "text", "guessedname": "Text", "methods": {"_classify": {"return": {"type": "Array", "description": "Classification map."}, "description": "Returns a character classification map for the specified string.", "param": "{String} string String to classify.", "protected": "", "static": "", "guessedname": "_classify", "guessedtype": "function", "params": [{"type": "String", "name": "string", "description": " String to classify."}]}, "getUniqueWords": {"return": {"type": "Array", "description": "Array of unique words."}, "description": "Returns an array containing only unique words from the specified string.\nFor example, the string <code>'foo bar baz foo'</code> would result in\nthe array <code>['foo', 'bar', 'baz']</code>.", "param": "{String} string String to split.", "static": "", "guessedname": "getUniqueWords", "guessedtype": "function", "params": [{"type": "String", "name": "string", "description": " String to split."}, {"type": "Object", "name": "options", "description": " (optional) Options (see <code>getWords()</code>\nfor details)."}]}, "isWordBoundary": {"return": {"type": "Boolean", "description": "<code>true</code> for a word boundary,\n<code>false</code> otherwise."}, "description": "<p>\nReturns <code>true</code> if there is a word boundary between the\nspecified character index and the next character index (or the end of the\nstring).\n</p>\n<p>\nNote that there are always word breaks at the beginning and end of a\nstring, so <code>isWordBoundary('', 0)</code> and\n<code>isWordBoundary('a', 0)</code> will both return <code>true</code>.\n</p>", "param": "{String} string String to test.", "static": "", "guessedname": "isWordBoundary", "guessedtype": "function", "params": [{"type": "String", "name": "string", "description": " String to test."}, {"type": "Number", "name": "index", "description": " Character index to test within the string."}]}, "_isWordBoundary": {"return": {"type": "Boolean", "description": ""}, "description": "<p>\nReturns <code>true</code> if there is a word boundary between the\nspecified character index and the next character index (or the end of the\nstring).\n</p>\n<p>\nNote that there are always word breaks at the beginning and end of a\nstring, so <code>_isWordBoundary('', 0)</code> and\n<code>_isWordBoundary('a', 0)</code> will both return <code>true</code>.\n</p>", "param": "{Array} map Character classification map generated by\n<code>_classify</code>.", "protected": "", "static": "", "guessedname": "_isWordBoundary", "guessedtype": "function", "params": [{"type": "Array", "name": "map", "description": " Character classification map generated by\n<code>_classify</code>."}, {"type": "Number", "name": "index", "description": " Character index to test."}]}, "getWords": {"return": {"type": "Array", "description": "Array of words."}, "description": "Splits the specified string into an array of individual words.", "param": "{String} string String to split.", "static": "", "guessedname": "getWords", "guessedtype": "function", "params": [{"type": "String", "name": "string", "description": " String to split."}, {"type": "Object", "name": "options", "description": " (optional) Options object containing zero or more\nof the following properties:\n<dl>\n<dt>ignoreCase (Boolean)</dt>\n<dd>\nIf <code>true</code>, the string will be converted to lowercase\nbefore being split. Default is <code>false</code>.\n</dd>\n<dt>includePunctuation (Boolean)</dt>\n<dd>\nIf <code>true</code>, the returned array will include punctuation\ncharacters. Default is <code>false</code>.\n</dd>\n<dt>includeWhitespace (Boolean)</dt>\n<dd>\nIf <code>true</code>, the returned array will include whitespace\ncharacters. Default is <code>false</code>.\n</dd>\n</dl>"}]}}, "static": "", "file": "text-wordbreak.js", "guessedtype": "property", "shortname": "Text.WordBreak", "description": "<p>\nProvides utility methods for splitting strings on word breaks and determining\nwhether a character index represents a word boundary, using the generic word\nbreaking algorithm defined in the Unicode Text Segmentation guidelines\n(<a href=\"http://unicode.org/reports/tr29/#Word_Boundaries\">Unicode Standard\nAnnex #29</a>).\n</p>\n<p>\nThis algorithm provides a reasonable default for many languages. However, it\ndoes not cover language or context specific requirements, and it does not\nprovide meaningful results at all for languages that don't use spaces between\nwords, such as Chinese, Japanese, Thai, Lao, Khmer, and others. Server-based\nword breaking services usually provide significantly better results with\nbetter performance.\n</p>"}, "Slider": {"name": "Slider", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Configuration object"}], "description": "Create a slider to represent an integer value between a given minimum and\nmaximum.  Sliders may be aligned vertically or horizontally, based on the\n<code>axis</code> configuration."}], "namespace": "", "module": "slider", "guessedname": "Slider", "uses": ["SliderValueRange", "ClickableRail"], "superclass": "SliderBase", "file": "range-slider.js", "guessedtype": "property", "extends": "SliderBase", "shortname": "Slider", "description": "Create a slider to represent an integer value between a given minimum and\nmaximum.  Sliders may be aligned vertically or horizontally, based on the\n<code>axis</code> configuration."}, "CellEditorSupport": {"name": "CellEditorSupport", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "An extension for A.DataTable.Base to support Cell Editing:\nCheck the list of <a href=\"CellEditorSupport.html#configattributes\">Configuration Attributes</a> available for\nCellEditorSupport."}], "namespace": "", "module": "aui-component", "guessedname": "CellEditorSupport", "extends": "Base", "superclass": "Base", "file": "aui-datatable.js", "guessedtype": "function", "shortname": "CellEditorSupport", "description": "An extension for A.DataTable.Base to support Cell Editing:\nCheck the list of <a href=\"CellEditorSupport.html#configattributes\">Configuration Attributes</a> available for\nCellEditorSupport."}, "Plugin.Drag": {"name": "Plugin.Drag", "configs": {"_widget": {"private": "", "description": "refers to a Y.Widget if its the host, otherwise = false.", "guessedname": "_widget", "guessedtype": "property"}, "_stoppedPosition": {"private": "", "description": "refers to the [x,y] coordinate where the drag was stopped last", "guessedname": "_stoppedPosition", "guessedtype": "property"}}, "constructors": [{"description": "Simple Drag plugin that can be attached to a Node or Widget via the plug method."}], "namespace": "Plugin", "module": "dd", "events": {"_widgetChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "_widgetChange", "description": "Fires when the value for the configuration attribute '_widget' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "_stoppedPositionChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "_stoppedPositionChange", "description": "Fires when the value for the configuration attribute '_stoppedPosition' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "Drag", "methods": {"updateStopPosition": {"description": "Updates the last position where the widget was stopped.", "param": "{EventFacade} e Event Facade", "params": [{"type": "EventFacade", "name": "e", "description": " Event Facade"}], "private": "", "guessedname": "updateStopPosition", "guessedtype": "function"}, "_usesWidgetPosition": {"private": "", "description": "Returns true if widget uses widgetPosition, otherwise returns false", "guessedname": "_usesWidgetPosition", "guessedtype": "function"}, "initializer": {"description": "Sets up event listeners on drag events if interacting with a widget", "private": "", "protected": "", "param": "{EventFacade} e Event Facade", "guessedname": "initializer", "guessedtype": "function"}}, "extends": "DD.Drag", "superclass": "DD.Drag", "file": "dd-plugin.js", "guessedtype": "function", "shortname": "Drag", "properties": {"NS": {"type": "{String}", "description": "The Drag instance will be placed on the Node instance under the dd namespace. It can be accessed via Node.dd;", "guessedname": "NS", "guessedtype": "property"}, "NAME": {"type": "{String}", "description": "dd-plugin", "guessedname": "NAME", "guessedtype": "property"}}, "description": "Simple Drag plugin that can be attached to a Node or Widget via the plug method."}, "Chart": {"name": "Chart", "constructors": [{"description": "The Chart class is the basic application used to create a chart."}], "namespace": "", "module": "charts", "file": "charts.js", "shortname": "Chart", "description": "The Chart class is the basic application used to create a chart."}, "LineSeries": {"name": "LineSeries", "constructors": [{"description": "The LineSeries class renders quantitative data on a graph by connecting relevant data points."}], "namespace": "", "module": "charts", "events": {"typeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "typeChange", "description": "Fires when the value for the configuration attribute 'type' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "stylesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "stylesChange", "description": "Fires when the value for the configuration attribute 'styles' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "LineSeries", "methods": {"drawSeries": {"protected": "", "guessedname": "drawSeries", "guessedtype": "function"}, "_setStyles": {"return": {"type": "", "description": "Object"}, "description": "Method used by `styles` setter. Overrides base implementation.", "param": "{Object} newStyles Hash of properties to update.", "protected": "", "params": [{"type": "Object", "name": "newStyles", "description": " Hash of properties to update."}], "guessedname": "_setStyles", "guessedtype": "function"}, "_getDefaultStyles": {"protected": "", "return": {"type": "", "description": "Object"}, "description": "Gets the default value for the `styles` attribute. Overrides\nbase implementation.", "guessedname": "_getDefaultStyles", "guessedtype": "function"}}, "uses": ["Lines"], "superclass": "CartesianSeries", "file": "charts.js", "guessedtype": "property", "extends": "CartesianSeries", "shortname": "LineSeries", "configs": {"styles": {"type": "Object", "description": "Style properties used for drawing lines. This attribute is inherited from `Renderer`. Below are the default values:\n<dl>\n<dt>color</dt><dd>The color of the line. The default value is determined by the order of the series on the graph. The color will be\nretrieved from the following array: \n`[\"#426ab3\", \"#d09b2c\", \"#000000\", \"#b82837\", \"#b384b5\", \"#ff7200\", \"#779de3\", \"#cbc8ba\", \"#7ed7a6\", \"#007a6c\"]`\n<dt>weight</dt><dd>Number that indicates the width of the line. The default value is 6.</dd>\n<dt>alpha</dt><dd>Number between 0 and 1 that indicates the opacity of the line. The default value is 1.</dd>\n<dt>lineType</dt><dd>Indicates whether the line is solid or dashed. The default value is solid.</dd> \n<dt>dashLength</dt><dd>When the `lineType` is dashed, indicates the length of the dash. The default value is 10.</dd>\n<dt>gapSpace</dt><dd>When the `lineType` is dashed, indicates the distance between dashes. The default value is 10.</dd>\n<dt>connectDiscontinuousPoints</dt><dd>Indicates whether or not to connect lines when there is a missing or null value between points. The default value is true.</dd> \n<dt>discontinuousType</dt><dd>Indicates whether the line between discontinuous points is solid or dashed. The default value is solid.</dd>\n<dt>discontinuousDashLength</dt><dd>When the `discontinuousType` is dashed, indicates the length of the dash. The default value is 10.</dd>\n<dt>discontinuousGapSpace</dt><dd>When the `discontinuousType` is dashed, indicates the distance between dashes. The default value is 10.</dd>\n</dl>"}, "type": {"default": "line", "type": "String", "description": "Read-only attribute indicating the type of series.", "guessedname": "type", "guessedtype": "property"}}, "description": "The LineSeries class renders quantitative data on a graph by connecting relevant data points."}, "config": {"name": "config", "namespace": "", "module": "yui", "static": "", "file": "aui.js", "shortname": "config", "properties": {"purgethreshold": {"default": "20", "type": "int", "description": "The number of dynamic nodes to insert by default before\nautomatically removing them.  This applies to script nodes\nbecause removing the node will not make the evaluated script\nunavailable.  Dynamic CSS is not auto purged, because removing\na linked style sheet will also remove the style definitions."}, "cssAttributes": {"type": "string", "description": "Object literal containing attributes to add to dynamically loaded link\nnodes."}, "force": {"type": "string[]", "description": "A list of modules that should always be loaded when required, even if already\npresent on the page."}, "loadErrorFn": {"since": "3.3.0", "type": "Function", "description": "A callback to execute when the loader fails to load one or\nmore resource.  This could be because of a script load\nfailure.  It can also fail if a javascript module fails\nto register itself, but only when the 'requireRegistration'\nis true.  If this function is defined, the use() callback will\nonly be called when the loader succeeds, otherwise it always\nexecutes unless there was a javascript error when attaching\na module."}, "locale": {"deprecated": "use `config.lang` instead.", "type": "string", "description": "The default locale"}, "win": {"default": "the window hosting YUI", "type": "Window", "description": "The window/frame that this instance should operate in."}, "logExclude": {"type": "object", "description": "A hash of log sources that should be not be logged.  If specified,\nall sources are logged if not on this list."}, "onCSS": {"type": "function", "description": "Callback for the 'CSSComplete' event.  When dynamically loading YUI\ncomponents with CSS, this property fires when the CSS is finished\nloading but script loading is still ongoing.  This provides an\nopportunity to enhance the presentation of a loading page a little\nbit before the entire loading process is done."}, "filters": {"description": "Hash of per-component filter specification.  If specified for a given\ncomponent, this overrides the filter config.\nFor dynamic loading."}, "skin": {"description": "The `skin` config let's you configure application level skin\ncustomizations.  It contains the following attributes which\ncan be specified to override the defaults:\n// The default skin, which is automatically applied if not\n// overriden by a component-specific skin definition.\n// Change this in to apply a different skin globally\ndefaultSkin: 'sam',\n// This is combined with the loader base property to get\n// the default root directory for a skin.\nbase: 'assets/skins/',\n// Any component-specific overrides can be specified here,\n// making it possible to load different skins for different\n// components.  It is possible to load more than one skin\n// for a given component as well.\noverrides: {\nslider: ['capsule', 'round']\n}\nFor dynamic loading."}, "pollInterval": {"default": "20", "type": "int", "description": "The default interval when polling in milliseconds."}, "ignore": {"type": "string[]", "description": "A list of modules that should never be dynamically loaded"}, "useHistoryHTML5": {"since": "3.2.0", "type": "boolean", "description": "<p>\nIf <code>true</code>, the <code>Y.History</code> alias will always point to\n<code>Y.HistoryHTML5</code> when the history-html5 module is loaded, even if\nthe current browser doesn't support HTML5 history.\n</p>\n<p>\nIf <code>false</code>, the <code>Y.History</code> alias will always point to\n<code>Y.HistoryHash</code> when the history-hash module is loaded, even if\nthe current browser supports HTML5 history.\n</p>\n<p>\nIf neither <code>true</code> nor <code>false</code>, the\n<code>Y.History</code> alias will point to the best available history adapter\nthat the browser supports. This is the default behavior.\n</p>"}, "dateFormat": {"deprecated": "use configuration in `DataType.Date.format()` instead.", "type": "string", "description": "The default date format"}, "logInclude": {"type": "object", "description": "A hash of log sources that should be logged.  If specified, only\nlog messages from these sources will be logged."}, "yui2": {"default": "2.8.1", "since": "3.1.0", "type": "string", "description": "The default YUI 2 version to build yui2 module urls.  This is for\nintrinsic YUI 2 support via the 2in3 project.  Also see the '2in3'\nconfig for pulling different revisions of the wrapped YUI 2\nmodules."}, "windowResizeDelay": {"default": "40", "type": "int", "description": "The default interval when polling in milliseconds."}, "combine": {"default": "true if 'base' is not supplied, false if it is.", "type": "boolean", "description": "Use the YUI combo service to reduce the number of http connections\nrequired to load your dependencies.  Turning this off will\ndisable combo handling for YUI and all module groups configured\nwith a combo service.\nFor dynamic loading."}, "use_rls": {"since": "3.2.0", "type": "{Boolean}", "description": "Configure the instance to use a remote loader service instead of\nthe client loader. **Requires the rls seed file.**"}, "rls_base": {"since": "3.2.0", "type": "{String}", "description": "The base path to the remote loader service. **Requires the rls seed file.**"}, "loaderPath": {"default": "loader/loader-min.js", "type": "string", "description": "The loader 'path' attribute to the loader itself.  This is combined\nwith the 'base' attribute to dynamically load the loader component\nwhen boostrapping with the get utility alone."}, "comboBase": {"type": "string", "description": "The YUI combo service base dir. Ex: `http://yui.yahooapis.com/combo?`\nFor dynamic loading."}, "core": {"type": "string[]", "description": "A list of modules that defines the YUI core (overrides the default)."}, "rls_tmpl": {"since": "3.2.0", "type": "{String}", "description": "The template to use for building the querystring portion\nof the remote loader service url.  The default is determined\nby the rls config -- each property that has a value will be\nrepresented. **Requires the rls seed file.**", "example": "m={m}&v={v}&env={env}&lang={lang}&filt={filt}&tests={tests}"}, "insertBefore": {"type": "string", "description": "Node or id for a node that should be used as the insertion point for new\nnodes.  For dynamic loading."}, "useBrowserConsole": {"default": "true", "type": "boolean", "description": "Log to the browser console if debug is on and the browser has a\nsupported console."}, "jsAttributes": {"type": "string", "description": "Object literal containing attributes to add to dynamically loaded script\nnodes."}, "base": {"type": "string", "description": "Base directory for dynamic loading"}, "2in3": {"default": "1", "since": "3.1.0", "type": "string", "description": "The 2in3 project is a deployment of the various versions of YUI 2\ndeployed as first-class YUI 3 modules.  Eventually, the wrapper\nfor the modules will change (but the underlying YUI 2 code will\nbe the same), and you can select a particular version of\nthe wrapper modules via this config."}, "groups": {"type": "object", "description": "A hash of module group definitions.  It for each group you\ncan specify a list of modules and the base path and\ncombo spec to use when dynamically loading the modules.\ngroups: {\nyui2: {\n// specify whether or not this group has a combo service\ncombine: true,\n// the base path for non-combo paths\nbase: 'http://yui.yahooapis.com/2.8.0r4/build/',\n// the path to the combo service\ncomboBase: 'http://yui.yahooapis.com/combo?',\n// a fragment to prepend to the path attribute when\n// when building combo urls\nroot: '2.8.0r4/build/',\n// the module definitions\nmodules:  {\nyui2_yde: {\npath: \"yahoo-dom-event/yahoo-dom-event.js\"\n},\nyui2_anim: {\npath: \"animation/animation.js\",\nrequires: ['yui2_yde']\n}\n}\n}\n}"}, "injected": {"default": "false", "type": "boolean", "description": "Set to true if the yui seed file was dynamically loaded in\norder to bootstrap components relying on the window load event\nand the `domready` custom event."}, "errorFn": {"since": "3.2.0", "type": "Function", "description": "A callback to execute when Y.error is called.  It receives the\nerror message and an javascript error object if Y.error was\nexecuted because a javascript error was caught.  The function\nis executed in the YUI instance context."}, "gallery": {"since": "3.1.0", "type": "string", "description": "The default gallery version to build gallery module urls"}, "rls": {"since": "3.2.0", "type": "{Object}", "description": "The parameter defaults for the remote loader service. **Requires the rls seed file.** The properties that are supported:\n`m`: comma separated list of module requirements.  This\nmust be the param name even for custom implemetations.\n`v`: the version of YUI to load.  Defaults to the version\nof YUI that is being used.\n`gv`: the version of the gallery to load (see the gallery config)\n`env`: comma separated list of modules already on the page.\nthis must be the param name even for custom implemetations.\n`lang`: the languages supported on the page (see the lang config)\n`'2in3v'`:  the version of the 2in3 wrapper to use (see the 2in3 config).\n`'2v'`: the version of yui2 to use in the yui 2in3 wrappers\n`filt`: a filter def to apply to the urls (see the filter config).\n`filts`: a list of custom filters to apply per module\n`tests`: this is a map of conditional module test function id keys\nwith the values of 1 if the test passes, 0 if not.  This must be\nthe name of the querystring param in custom templates."}, "lang": {"type": "string|string[]", "description": "A list of languages in order of preference. This list is matched against\nthe list of available languages in modules that the YUI instance uses to\ndetermine the best possible localization of language sensitive modules.\nLanguages are represented using BCP 47 language tags, such as \"en-GB\" for\nEnglish as used in the United Kingdom, or \"zh-Hans-CN\" for simplified\nChinese as used in China. The list can be provided as a comma-separated\nlist or as an array."}, "requireRegistration": {"default": "false", "since": "3.3.0", "type": "boolean", "description": "When set to true, the YUI loader will expect that all modules\nit is responsible for loading will be first-class YUI modules\nthat register themselves with the YUI global.  If this is\nset to true, loader will fail if the module registration fails\nto happen after the script is loaded."}, "cacheUse": {"default": "true", "deprecated": "no longer used", "since": "3.3.0", "type": "boolean", "description": "Cache serviced use() requests."}, "doc": {"default": "the document hosting YUI", "type": "Document", "description": "The document associated with the 'win' configuration."}, "bootstrap": {"default": "true", "type": "boolean", "description": "Allows the YUI seed file to fetch the loader component and library\nmetadata to dynamically load additional dependencies."}, "modules": {"type": "object", "description": "A hash of module definitions to add to the list of YUI components.\nThese components can then be dynamically loaded side by side with\nYUI via the `use()` method. This is a hash, the key is the module\nname, and the value is an object literal specifying the metdata\nfor the module.  See `Loader.addModule` for the supported module\nmetadata fields.  Also see groups, which provides a way to\nconfigure the base and combo spec for a set of modules.\nmodules: {\nmymod1: {\nrequires: ['node'],\nfullpath: 'http://myserver.mydomain.com/mymod1/mymod1.js'\n},\nmymod2: {\nrequires: ['mymod1'],\nfullpath: 'http://myserver.mydomain.com/mymod2/mymod2.js'\n}\n}"}, "fetchCSS": {"default": "true", "type": "boolean|string", "description": "Specifies whether or not YUI().use(...) will attempt to load CSS\nresources at all.  Any truthy value will cause CSS dependencies\nto load when fetching script.  The special value 'force' will\ncause CSS dependencies to be loaded even if no script is needed."}, "filter": {"type": "string|object", "description": "A filter to apply to result urls.  This filter will modify the default\npath for all modules.  The default path for the YUI library is the\nminified version of the files (e.g., event-min.js).  The filter property\ncan be a predefined filter or a custom filter.  The valid predefined\nfilters are:\n<dl>\n<dt>DEBUG</dt>\n<dd>Selects the debug versions of the library (e.g., event-debug.js).\nThis option will automatically include the Logger widget</dd>\n<dt>RAW</dt>\n<dd>Selects the non-minified version of the library (e.g., event.js).</dd>\n</dl>\nYou can also define a custom filter, which must be an object literal\ncontaining a search expression and a replace string:\nmyFilter: {\n'searchExp': \"-min\\\\.js\",\n'replaceStr': \"-debug.js\"\n}\nFor dynamic loading."}, "timeout": {"type": "int", "description": "Number of milliseconds before a timeout occurs when dynamically\nloading nodes. If not set, there is no timeout."}, "logFn": {"since": "3.1.0", "type": "Function", "description": "Alternative console log function for use in environments without\na supported native console.  The function is executed in the\nYUI instance context."}, "root": {"type": "string", "description": "The root path to prepend to module path for the combo service.\nEx: 3.0.0b1/build/\nFor dynamic loading."}, "throwFail": {"default": "true", "type": "boolean", "description": "If `throwFail` is set, `Y.error` will generate or re-throw a JS Error.\nOtherwise the failure is logged."}}, "description": "The config object contains all of the configuration options for\nthe `YUI` instance.  This object is supplied by the implementer\nwhen instantiating a `YUI` instance.  Some properties have default\nvalues if they are not supplied by the implementer.  This should\nnot be updated directly because some values are cached.  Use\n`applyConfig()` to update the config object on a YUI instance that\nhas already been configured."}, "Resize": {"guessedname": "Resize", "name": "Resize", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "A base class for Resize, providing:\nBasic Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)\nApplies drag handles to an element to make it resizable\nHere is the list of valid resize handles:\n`[ 't', 'tr', 'r', 'br', 'b', 'bl', 'l', 'tl' ]`. You can\nread this list as top, top-right, right, bottom-right, bottom,\nbottom-left, left, top-left.\nThe drag handles are inserted into the element and positioned\nabsolute. Some elements, such as a textarea or image, don't support\nchildren. To overcome that, set wrap:true in your config and the\nelement willbe wrapped for you automatically.\nQuick Example:\nvar instance = new Y.Resize({\nnode: '#resize1',\npreserveRatio: true,\nwrap: true,\nmaxHeight: 170,\nmaxWidth: 400,\nhandles: 't, tr, r, br, b, bl, l, tl'\n});\nCheck the list of <a href=\"Resize.html#configattributes\">Configuration Attributes</a> available for\nResize."}, {"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "<p><img src=\"assets/images/aui-resize/main.png\"/></p>\nA base class for Resize, providing:\n<ul>\n<li>Basic Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Applies drag handles to an element to make it resizable</li>\n<li>Here is the list of valid resize handles:\n<code>[ 't', 'tr', 'r', 'br', 'b', 'bl', 'l', 'tl' ]</code>. You can\nread this list as top, top-right, right, bottom-right, bottom,\nbottom-left, left, top-left.</li>\n<li>The drag handles are inserted into the element and positioned\nabsolute. Some elements, such as a textarea or image, don't support\nchildren. To overcome that, set wrap:true in your config and the\nelement willbe wrapped for you automatically.</li>\n</ul>\nQuick Example:\n<pre><code>var instance = new A.Resize({\nnode: '#resize1',\nproxy: true,\npreserveRatio: true,\nwrap: true,\nmaxHeight: 170,\nmaxWidth: 400,\nhandles: 't, tr, r, br, b, bl, l, tl'\n});\n</code></pre>\nCheck the list of <a href=\"Resize.html#configattributes\">Configuration Attributes</a> available for\nResize."}], "namespace": "", "module": "aui-resize", "events": {"resizingChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "resizingChange", "description": "Fires when the value for the configuration attribute 'resizing' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "wrapTypesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "wrapTypesChange", "description": "Fires when the value for the configuration attribute 'wrapTypes' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "constrainChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "constrainChange", "description": "Fires when the value for the configuration attribute 'constrain' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "tickYChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "tickYChange", "description": "Fires when the value for the configuration attribute 'tickY' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "proxyChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "proxyChange", "description": "Fires when the value for the configuration attribute 'proxy' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "activeHandleElChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "activeHandleElChange", "description": "Fires when the value for the configuration attribute 'activeHandleEl' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "handlesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "handlesChange", "description": "Fires when the value for the configuration attribute 'handles' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "resize:start": {"description": "Handles the resize start event. Fired when a handle starts to be\ndragged.", "param": "{Event.Facade} event The resize start event.", "params": [{"type": "Event.Facade", "name": "event", "description": " The resize start event."}], "preventable": "_defResizeStartFn", "bubbles": "Resize", "type": "{Event.Custom}"}, "tickXChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "tickXChange", "description": "Fires when the value for the configuration attribute 'tickX' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "resize:mouseUp": {"description": "Handles the resize mouseUp event. Fired when a mouseUp event happens on a\nhandle.", "param": "{Event.Facade} event The resize mouseUp event.", "params": [{"type": "Event.Facade", "name": "event", "description": " The resize mouseUp event."}], "preventable": "_defMouseUpFn", "bubbles": "Resize", "type": "{Event.Custom}"}, "activeHandleNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "activeHandleNodeChange", "description": "Fires when the value for the configuration attribute 'activeHandleNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "autoHideChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "autoHideChange", "description": "Fires when the value for the configuration attribute 'autoHide' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "maxHeightChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "maxHeightChange", "description": "Fires when the value for the configuration attribute 'maxHeight' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "resize:align": {"description": "Handles the resize align event.", "param": "{Event.Facade} event The resize align event.", "params": [{"type": "Event.Facade", "name": "event", "description": " The resize align event."}], "preventable": "_defResizeAlignFn", "bubbles": "Resize", "type": "{Event.Custom}"}, "defMinHeightChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "defMinHeightChange", "description": "Fires when the value for the configuration attribute 'defMinHeight' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "defMinWidthChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "defMinWidthChange", "description": "Fires when the value for the configuration attribute 'defMinWidth' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "minWidthChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "minWidthChange", "description": "Fires when the value for the configuration attribute 'minWidth' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "resize:end": {"description": "Handles the resize end event. Fired when a handle stop to be\ndragged.", "param": "{Event.Facade} event The resize end event.", "params": [{"type": "Event.Facade", "name": "event", "description": " The resize end event."}], "preventable": "_defResizeEndFn", "bubbles": "Resize", "type": "{Event.Custom}"}, "proxyElChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "proxyElChange", "description": "Fires when the value for the configuration attribute 'proxyEl' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "handlesWrapperChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "handlesWrapperChange", "description": "Fires when the value for the configuration attribute 'handlesWrapper' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "nodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "nodeChange", "description": "Fires when the value for the configuration attribute 'node' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "activeHandleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "activeHandleChange", "description": "Fires when the value for the configuration attribute 'activeHandle' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "preserveRatioChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "preserveRatioChange", "description": "Fires when the value for the configuration attribute 'preserveRatio' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "minHeightChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "minHeightChange", "description": "Fires when the value for the configuration attribute 'minHeight' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "wrapperChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "wrapperChange", "description": "Fires when the value for the configuration attribute 'wrapper' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "resize:resize": {"description": "Handles the resize event. Fired on each pixel when the handle is\nbeing dragged.", "param": "{Event.Facade} event The resize event.", "params": [{"type": "Event.Facade", "name": "event", "description": " The resize event."}], "preventable": "_defResizeFn", "bubbles": "Resize", "type": "{Event.Custom}"}, "wrapChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "wrapChange", "description": "Fires when the value for the configuration attribute 'wrap' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "maxWidthChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "maxWidthChange", "description": "Fires when the value for the configuration attribute 'maxWidth' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "configs": {"tickX": {"default": "false", "type": "Number | false", "description": "The number of x ticks to span the resize to.", "guessedname": "tickX", "guessedtype": "property"}, "tickY": {"default": "false", "type": "Number | false", "description": "The number of y ticks to span the resize to.", "guessedname": "tickY", "guessedtype": "property"}, "maxWidth": {"default": "Infinity", "type": "Number", "description": "The maximum width of the element", "guessedname": "maxWidth", "guessedtype": "property"}, "activeHandleNode": {"description": "Stores the active handle element during the resize.", "default": "null", "private": "", "guessedname": "activeHandleNode", "guessedtype": "property", "type": "Node"}, "wrap": {"default": "false", "type": "boolean", "description": "True to wrap an element with a div if needed (required for textareas\nand images, defaults to false) in favor of the handles config option.\nThe wrapper element type (default div) could be over-riden passing the\n<code>wrapper</code> attribute.", "guessedname": "wrap", "guessedtype": "property"}, "defMinHeight": {"default": "15", "type": "Number", "description": "The default minimum height of the element. Only used when\nResizeConstrained is not plugged.", "guessedname": "defMinHeight", "guessedtype": "property"}, "activeHandle": {"description": "Stores the active handle during the resize.", "default": "null", "private": "", "guessedname": "activeHandle", "guessedtype": "property", "type": "String"}, "wrapper": {"description": "Element to wrap the <code>wrapTypes</code>. This element will house\nthe handles elements.", "writeonce": "", "default": "div", "guessedname": "wrapper", "guessedtype": "property", "type": "String | Node"}, "minWidth": {"default": "15", "type": "Number", "description": "The minimum width of the element", "guessedname": "minWidth", "guessedtype": "property"}, "handles": {"default": "all", "type": "Array | String", "description": "The handles to use (any combination of): 't', 'b', 'r', 'l', 'bl',\n'br', 'tl', 'tr'. Can use a shortcut of All.", "guessedname": "handles", "guessedtype": "property"}, "proxyEl": {"default": "Generated using an internal HTML markup", "type": "String | Node", "description": "The Resize proxy element.", "guessedname": "proxyEl", "guessedtype": "property"}, "autoHide": {"default": "false", "type": "boolean", "description": "False to ensure that the resize handles are always visible, true to\ndisplay them only when the user mouses over the resizable borders.", "guessedname": "autoHide", "guessedtype": "property"}, "preserveRatio": {"default": "false", "type": "boolean", "description": "Maintain the element's ratio when resizing.", "guessedname": "preserveRatio", "guessedtype": "property"}, "node": {"type": "Node", "description": "The selector or element to resize. Required.", "guessedname": "node", "guessedtype": "property"}, "minHeight": {"default": "15", "type": "Number", "description": "The minimum height of the element", "guessedname": "minHeight", "guessedtype": "property"}, "proxy": {"default": "false", "type": "boolean", "description": "Resize a proxy element instead of the real element.", "guessedname": "proxy", "guessedtype": "property"}, "resizing": {"default": "false", "type": "boolean", "description": "True when the element is being Resized.", "guessedname": "resizing", "guessedtype": "property"}, "activeHandleEl": {"description": "Stores the active handle element during the resize.", "default": "null", "private": "", "guessedname": "activeHandleEl", "guessedtype": "property", "type": "Node"}, "defMinWidth": {"default": "15", "type": "Number", "description": "The default minimum width of the element. Only used when\nResizeConstrained is not plugged.", "guessedname": "defMinWidth", "guessedtype": "property"}, "wrapTypes": {"description": "Elements that requires a wrapper by default. Normally are elements\nwhich cannot have children elements.", "default": "/canvas|textarea|input|select|button|img/i", "readonly": "", "guessedname": "wrapTypes", "guessedtype": "property", "type": "Regex"}, "maxHeight": {"default": "Infinity", "type": "Number", "description": "The maximum height of the element", "guessedname": "maxHeight", "guessedtype": "property"}, "constrain": {"type": "{String/Object/Node}", "description": "Will attempt to constrain the resize node to the boundaries. Arguments:<br>\n'view': Contrain to Viewport<br>\n'#selector_string': Constrain to this node<br>\n'{Region Object}': An Object Literal containing a valid region (top, right, bottom, left) of page positions", "guessedname": "constrain", "guessedtype": "property"}, "handlesWrapper": {"type": "Node", "description": "Node to wrap the resize handles.", "guessedname": "handlesWrapper", "guessedtype": "property"}}, "methods": {"_updateConstrainBorderInfo": {"private": "", "description": "Update <code>instance.constrainBorderInfo</code> values (bottom,\nleft, top, right).", "guessedname": "_updateConstrainBorderInfo", "guessedtype": "function"}, "_checkRatio": {"protected": "", "description": "Update the current values on <a href=\"Resize.html#property_info\">info</a>\ncalculating the correct ratio for the other values.", "guessedname": "_checkRatio", "guessedtype": "function"}, "_checkRegion": {"protected": "", "return": {"type": "boolean", "description": ""}, "description": "Check whether the resizable node is inside the constrain region.", "guessedname": "_checkRegion", "guessedtype": "function"}, "_onHandleMouseEnter": {"description": "Mouseenter event handler for the handles.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onHandleMouseEnter", "guessedtype": "function"}, "_resizeAlign": {"description": "Logic method for _defResizeAlignFn. Allow AOP.", "param": "{EventFacade} event The Event object", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " The Event object"}], "guessedname": "_resizeAlign", "guessedtype": "function"}, "eachHandle": {"param": "{function} fn Callback function to be executed for each handle.", "params": [{"type": "function", "name": "fn", "description": " Callback function to be executed for each handle."}], "description": "<p>Loop through each handle which is being used and executes a callback.</p>\n<p>Example:</p>\n<pre><code>instance.eachHandle(\nfunction(handleName, index) { ... }\n);</code></pre>", "guessedname": "eachHandle", "guessedtype": "function"}, "initializer": {"protected": "", "description": "Construction logic executed during Resize instantiation. Lifecycle.", "guessedname": "initializer", "guessedtype": "function"}, "_valueHandlesWrapper": {"readonly": "", "protected": "", "description": "Default value for the wrapper handles node attribute", "guessedname": "_valueHandlesWrapper", "guessedtype": "function"}, "_onHandleMouseLeave": {"description": "Mouseout event handler for the handles.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onHandleMouseLeave", "guessedtype": "function"}, "_syncProxyUI": {"protected": "", "description": "Sync the proxy UI with internal values from\n<a href=\"Resize.html#property_info\">info</a>.", "guessedname": "_syncProxyUI", "guessedtype": "function"}, "renderer": {"protected": "", "description": "Creates DOM (or manipulates DOM for progressive enhancement)\nThis method is invoked by initializer(). It's chained automatically for\nsubclasses if required.", "guessedname": "renderer", "guessedtype": "function"}, "_checkConstrain": {"description": "Helper method to update the current values on\n<a href=\"Resize.html#property_info\">info</a> to respect the\nconstrain node.", "param": "{String} axis 'top' or 'left'", "protected": "", "params": [{"type": "String", "name": "axis", "description": " 'top' or 'left'"}, {"type": "String", "name": "axisConstrain", "description": " 'bottom' or 'right'"}, {"type": "String", "name": "offset", "description": " 'offsetHeight' or 'offsetWidth'"}], "guessedname": "_checkConstrain", "guessedtype": "function"}, "_handleResizeEvent": {"description": "Fires the resize:resize event.", "param": "{EventFacade} event resize:resize event facade", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " resize:resize event facade"}], "guessedname": "_handleResizeEvent", "guessedtype": "function"}, "_syncUI": {"protected": "", "description": "Sync the Resize UI with internal values from\n<a href=\"Resize.html#property_info\">info</a>.", "guessedname": "_syncUI", "guessedtype": "function"}, "_defResizeFn": {"description": "Default resize:resize handler", "param": "{EventFacade} event The Event object", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " The Event object"}], "guessedname": "_defResizeFn", "guessedtype": "function"}, "_getInfo": {"description": "<p>Generates metadata to the <a href=\"Resize.html#property_info\">info</a>\nand <a href=\"Resize.html#property_originalInfo\">originalInfo</a></p>\n<pre><code>bottom, actXY, left, top, offsetHeight, offsetWidth, right</code></pre>", "param": "{Node} node", "params": [{"type": "Node", "name": "node", "description": ""}, {"type": "EventFacade", "name": "event", "description": ""}], "private": "", "guessedname": "_getInfo", "guessedtype": "function"}, "_defResizeAlignFn": {"description": "Default resize:align handler", "param": "{EventFacade} event The Event object", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " The Event object"}], "guessedname": "_defResizeAlignFn", "guessedtype": "function"}, "_setHandleFromNode": {"description": "Handles setting the activeHandle from a node, used from startDrag (for touch) and mouseenter (for mouse).", "param": "{Node} node", "protected": "", "params": [{"type": "Node", "name": "node", "description": ""}], "guessedname": "_setHandleFromNode", "guessedtype": "function"}, "_updateInfo": {"private": "", "description": "Update <a href=\"Resize.html#property_info\">info</a> values (bottom, actXY, left, top, offsetHeight, offsetWidth, right).", "guessedname": "_updateInfo", "guessedtype": "function"}, "_getBoxSurroundingInfo": {"return": {"type": "Object", "description": ""}, "description": "Each box has a content area and optional surrounding margin,\npadding and * border areas. This method get all this information from\nthe passed node. For more reference see\n<a href=\"http://www.w3.org/TR/CSS21/box.html#box-dimensions\">\nhttp://www.w3.org/TR/CSS21/box.html#box-dimensions</a>.", "private": "", "params": [{"type": "Node", "name": "node", "description": ""}], "param": "{Node} node", "guessedname": "_getBoxSurroundingInfo", "guessedtype": "function"}, "destructor": {"protected": "", "description": "Descructor lifecycle implementation for the Resize class. Purges events attached\nto the node (and all child nodes) and removes the Resize handles.", "guessedname": "destructor", "guessedtype": "function"}, "_buildHandle": {"description": "Creates the handle element based on the handle name and initialize the\nDragDrop on it.", "param": "{String} handle Handle name ('t', 'tr', 'b', ...).", "protected": "", "params": [{"type": "String", "name": "handle", "description": " Handle name ('t', 'tr', 'b', ...)."}], "guessedname": "_buildHandle", "guessedtype": "function"}, "_renderProxy": {"protected": "", "description": "Render the <a href=\"Resize.html#config_proxyEl\">proxyEl</a> element and\nmake it sibling of the <a href=\"Resize.html#config_node\">node</a>.", "guessedname": "_renderProxy", "guessedtype": "function"}, "_handleResizeAlignEvent": {"description": "Fires the resize:align event.", "param": "{EventFacade} event resize:resize event facade", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " resize:resize event facade"}], "guessedname": "_handleResizeAlignEvent", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Bind the events on the Resize UI. Lifecycle.", "guessedname": "bindUI", "guessedtype": "function"}, "_checkHeight": {"protected": "", "description": "Update the current values on <a href=\"Resize.html#property_info\">info</a>\nto respect the maxHeight and minHeight.", "guessedname": "_checkHeight", "guessedtype": "function"}, "_createEvents": {"private": "", "description": "Create the custom events used on the Resize.", "guessedname": "_createEvents", "guessedtype": "function"}, "_resize": {"description": "Logic method for _defResizeFn. Allow AOP.", "param": "{EventFacade} event The Event object", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " The Event object"}], "guessedname": "_resize", "guessedtype": "function"}, "_handleMouseUpEvent": {"description": "Fires the resize:mouseUp event.", "param": "{EventFacade} event resize:mouseUp event facade", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " resize:mouseUp event facade"}], "guessedname": "_handleMouseUpEvent", "guessedtype": "function"}, "_valueWrapper": {"readonly": "", "protected": "", "description": "Default value for the wrapper attribute", "guessedname": "_valueWrapper", "guessedtype": "function"}, "_getConstrainRegion": {"protected": "", "return": {"type": "Object Region", "description": ""}, "description": "Get the constrain region based on the <code>constrain</code>\nattribute.", "guessedname": "_getConstrainRegion", "guessedtype": "function"}, "_defResizeStartFn": {"description": "Default resize:start handler", "param": "{EventFacade} event The Event object", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " The Event object"}], "guessedname": "_defResizeStartFn", "guessedtype": "function"}, "_renderHandles": {"protected": "", "description": "Responsible for loop each handle element and append to the wrapper.", "guessedname": "_renderHandles", "guessedtype": "function"}, "_defMouseUpFn": {"description": "Default resize:mouseUp handler", "param": "{EventFacade} event The Event object", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " The Event object"}], "guessedname": "_defMouseUpFn", "guessedtype": "function"}, "_updateSurroundingInfo": {"private": "", "description": "Update properties\n<a href=\"Resize.html#property_nodeSurrounding\">nodeSurrounding</a>,\n<a href=\"Resize.html#property_nodeSurrounding\">wrapperSurrounding</a>,\n<a href=\"Resize.html#property_nodeSurrounding\">totalVSurrounding</a>,\n<a href=\"Resize.html#property_nodeSurrounding\">totalHSurrounding</a>.", "guessedname": "_updateSurroundingInfo", "guessedtype": "function"}, "_onWrapperMouseEnter": {"description": "Mouseenter event handler for the <a href=\"Resize.html#config_wrapper\">wrapper</a>.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onWrapperMouseEnter", "guessedtype": "function"}, "_setHideHandlesUI": {"description": "Set the visibility of the handles.", "param": "{boolean} val True to hide the handles, false to show.", "protected": "", "params": [{"type": "boolean", "name": "val", "description": " True to hide the handles, false to show."}], "guessedname": "_setHideHandlesUI", "guessedtype": "function"}, "_copyStyles": {"description": "Copy relevant styles of the <a href=\"Resize.html#config_node\">node</a>\nto the <a href=\"Resize.html#config_wrapper\">wrapper</a>.", "param": "{Node} node Node from.", "protected": "", "params": [{"type": "Node", "name": "node", "description": " Node from."}, {"type": "Node", "name": "wrapper", "description": " Node to."}], "guessedname": "_copyStyles", "guessedtype": "function"}, "_resizeStart": {"description": "Logic method for _defResizeStartFn. Allow AOP.", "param": "{EventFacade} event The Event object", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " The Event object"}], "guessedname": "_resizeStart", "guessedtype": "function"}, "_bindHandle": {"private": "", "description": "Bind the events related to the handles (_onHandleMouseEnter, _onHandleMouseLeave).", "guessedname": "_bindHandle", "guessedtype": "function"}, "_handleResizeEndEvent": {"description": "Fires the resize:end event.", "param": "{EventFacade} event resize:end event facade", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " resize:end event facade"}], "guessedname": "_handleResizeEndEvent", "guessedtype": "function"}, "_setHandles": {"description": "Setter for the handles attribute", "param": "{String} val", "protected": "", "params": [{"type": "String", "name": "val", "description": ""}], "guessedname": "_setHandles", "guessedtype": "function"}, "_checkWidth": {"protected": "", "description": "Update the current values on <a href=\"Resize.html#property_info\">info</a>\nto respect the maxWidth and minWidth.", "guessedname": "_checkWidth", "guessedtype": "function"}, "_setWrap": {"description": "Setter for the wrap attribute", "param": "{boolean} val", "protected": "", "params": [{"type": "boolean", "name": "val", "description": ""}], "guessedname": "_setWrap", "guessedtype": "function"}, "_setOffset": {"description": "Set offsetWidth and offsetHeight of the passed node.", "param": "{Node} node Node", "protected": "", "params": [{"type": "Node", "name": "node", "description": " Node"}, {"type": "number", "name": "offsetWidth", "description": ""}, {"type": "number", "name": "offsetHeight", "description": ""}], "guessedname": "_setOffset", "guessedtype": "function"}, "_onWrapperMouseLeave": {"description": "Mouseleave event handler for the <a href=\"Resize.html#config_wrapper\">wrapper</a>.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onWrapperMouseLeave", "guessedtype": "function"}, "_defResizeEndFn": {"description": "Default resize:end handler", "param": "{EventFacade} event The Event object", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " The Event object"}], "guessedname": "_defResizeEndFn", "guessedtype": "function"}, "syncUI": {"protected": "", "description": "Sync the Resize UI.", "guessedname": "syncUI", "guessedtype": "function"}, "_calcResize": {"protected": "", "description": "Basic resize calculations.", "guessedname": "_calcResize", "guessedtype": "function"}, "_checkSize": {"description": "Helper method to update the current size value on\n<a href=\"Resize.html#property_info\">info</a> to respect the\nmin/max values and fix the top/left calculations.", "param": "{String} offset 'offsetHeight' or 'offsetWidth'", "protected": "", "params": [{"type": "String", "name": "offset", "description": " 'offsetHeight' or 'offsetWidth'"}, {"type": "number", "name": "size", "description": " Size to restrict the offset"}], "guessedname": "_checkSize", "guessedtype": "function"}, "_handleResizeStartEvent": {"description": "Fires the resize:start event.", "param": "{EventFacade} event resize:start event facade", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " resize:start event facade"}], "guessedname": "_handleResizeStartEvent", "guessedtype": "function"}, "_resizeEnd": {"description": "Logic method for _defResizeEndFn. Allow AOP.", "param": "{EventFacade} event The Event object", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " The Event object"}], "guessedname": "_resizeEnd", "guessedtype": "function"}, "_setActiveHandlesUI": {"description": "Set the active state of the handles.", "param": "{boolean} val True to activate the handles, false to deactivate.", "protected": "", "params": [{"type": "boolean", "name": "val", "description": " True to activate the handles, false to deactivate."}], "guessedname": "_setActiveHandlesUI", "guessedtype": "function"}, "_updateChangeHandleInfo": {"private": "", "description": "Update <code>instance.changeHeightHandles,\ninstance.changeLeftHandles, instance.changeTopHandles,\ninstance.changeWidthHandles</code> information.", "guessedname": "_updateChangeHandleInfo", "guessedtype": "function"}, "renderUI": {"protected": "", "description": "Create the DOM structure for the Resize. Lifecycle.", "guessedname": "renderUI", "guessedtype": "function"}, "_bindDD": {"private": "", "description": "Bind the handles DragDrop events to the Resize instance.", "guessedname": "_bindDD", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "aui-resize.js", "guessedtype": "property", "shortname": "Resize", "properties": {"REGEX_CHANGE_TOP": {"type": "{String}", "description": "Regex which matches with the handles that could change the top of\nthe resizable element.", "guessedname": "REGEX_CHANGE_TOP", "guessedtype": "property"}, "changeLeftHandles": {"default": "false", "type": "boolean", "description": "Whether the handle being dragged can change the left.", "guessedname": "changeLeftHandles", "guessedtype": "property"}, "HANDLES_WRAP_TEMPLATE": {"type": "{String}", "description": "Template used to create the resize wrapper for the handles.", "guessedname": "HANDLES_WRAP_TEMPLATE", "guessedtype": "property"}, "nodeSurrounding": {"default": "null", "type": "Object", "description": "Stores the <a href=\"Resize.html#config_node\">node</a>\nsurrounding information retrieved from\n<a href=\"Resize.html#method__getBoxSurroundingInfo\">_getBoxSurroundingInfo</a>.", "guessedname": "nodeSurrounding", "guessedtype": "property"}, "Resize.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}, "constrainBorderInfo": {"default": "{}", "type": "Object", "description": "Cache the border widths of the contrain node if constrain\noption is being used.", "guessedname": "constrainBorderInfo", "guessedtype": "property"}, "originalInfo": {"protected": "", "type": "Object", "description": "Stores the original values for the height, width, top and left, stored\non resize start.", "guessedname": "originalInfo", "guessedtype": "property"}, "REGEX_CHANGE_LEFT": {"type": "{String}", "description": "Regex which matches with the handles that could change the left of\nthe resizable element.", "guessedname": "REGEX_CHANGE_LEFT", "guessedtype": "property"}, "ALL_HANDLES": {"type": "{String}", "description": "Array containing all possible resizable handles.", "guessedname": "ALL_HANDLES", "guessedtype": "property"}, "wrapperSurrounding": {"default": "null", "type": "Object", "description": "Stores the <a href=\"Resize.html#config_wrapper\">wrapper</a>\nsurrounding information retrieved from\n<a href=\"Resize.html#method__getBoxSurroundingInfo\">_getBoxSurroundingInfo</a>.", "guessedname": "wrapperSurrounding", "guessedtype": "property"}, "WRAP_TEMPLATE": {"type": "{String}", "description": "Template used to create the resize wrapper node when needed.", "guessedname": "WRAP_TEMPLATE", "guessedtype": "property"}, "REGEX_CHANGE_WIDTH": {"type": "{String}", "description": "Regex which matches with the handles that could change the width of\nthe resizable element.", "guessedname": "REGEX_CHANGE_WIDTH", "guessedtype": "property"}, "changeWidthHandles": {"default": "false", "type": "boolean", "description": "Whether the handle being dragged can change the width.", "guessedname": "changeWidthHandles", "guessedtype": "property"}, "totalHSurrounding": {"default": "0", "type": "number", "description": "Each box has a content area and optional surrounding padding and\nborder areas. This property stores the sum of all horizontal\nsurrounding * information needed to adjust the node height.", "guessedname": "totalHSurrounding", "guessedtype": "property"}, "ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the Resize.", "guessedname": "ATTRS", "guessedtype": "property"}, "HANDLE_TEMPLATE": {"type": "{String}", "description": "Template used to create each resize handle.", "guessedname": "HANDLE_TEMPLATE", "guessedtype": "property"}, "changeHeightHandles": {"default": "false", "type": "boolean", "description": "Whether the handle being dragged can change the height.", "guessedname": "changeHeightHandles", "guessedtype": "property"}, "Resize.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the Resize.", "guessedname": "ATTRS", "guessedtype": "property"}, "info": {"protected": "", "type": "Object", "description": "Stores the current values for the height, width, top and left. You are\nable to manipulate these values on resize in order to change the resize\nbehavior.", "guessedname": "info", "guessedtype": "property"}, "NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}, "changeTopHandles": {"default": "false", "type": "boolean", "description": "Whether the handle being dragged can change the top.", "guessedname": "changeTopHandles", "guessedtype": "property"}, "totalVSurrounding": {"default": "0", "type": "number", "description": "Each box has a content area and optional surrounding padding and\nborder areas. This property stores the sum of all vertical\nsurrounding * information needed to adjust the node height.", "guessedname": "totalVSurrounding", "guessedtype": "property"}, "lastInfo": {"protected": "", "type": "Object", "description": "Stores the last values for the height, width, top and left.", "guessedname": "lastInfo", "guessedtype": "property"}, "delegate": {"default": "null", "type": "Object", "description": "Store DD.Delegate reference for the respective Resize instance.", "guessedname": "delegate", "guessedtype": "property"}, "REGEX_CHANGE_HEIGHT": {"type": "{String}", "description": "Regex which matches with the handles that could change the height of\nthe resizable element.", "guessedname": "REGEX_CHANGE_HEIGHT", "guessedtype": "property"}}, "description": "A base class for Resize, providing:\nBasic Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)\nApplies drag handles to an element to make it resizable\nHere is the list of valid resize handles:\n`[ 't', 'tr', 'r', 'br', 'b', 'bl', 'l', 'tl' ]`. You can\nread this list as top, top-right, right, bottom-right, bottom,\nbottom-left, left, top-left.\nThe drag handles are inserted into the element and positioned\nabsolute. Some elements, such as a textarea or image, don't support\nchildren. To overcome that, set wrap:true in your config and the\nelement willbe wrapped for you automatically.\nQuick Example:\nvar instance = new Y.Resize({\nnode: '#resize1',\npreserveRatio: true,\nwrap: true,\nmaxHeight: 170,\nmaxWidth: 400,\nhandles: 't, tr, r, br, b, bl, l, tl'\n});\nCheck the list of <a href=\"Resize.html#configattributes\">Configuration Attributes</a> available for\nResize."}, "Panel": {"name": "Panel", "configs": {"collapsible": {"default": "false", "type": "boolean", "description": "Whether the panel is able to be collapsed.", "guessedname": "collapsible", "guessedtype": "property"}, "icons": {"default": "[]", "type": "Array", "description": "<p>Array of <a href=\"ButtonItem.html\">ButtonItem</a> configuration objects to be displayed as icons\non the Panel title.</p>\nExample:\n<pre><code>icons: [ { icon: 'close', id: 'close' } ]</code></pre>\nFor more information how to use this option see\n<a href=\"ButtonItem.html\">ButtonItem</a>.", "guessedname": "icons", "guessedtype": "property"}, "collapsed": {"default": "false", "type": "boolean", "description": "Whether the panel is displayed collapsed.", "guessedname": "collapsed", "guessedtype": "property"}, "title": {"default": "''", "type": "Boolean | String", "description": "The title to be displayed on the Panel.", "guessedname": "title", "guessedtype": "property"}, "useARIA": {"default": "true", "type": "Boolean", "description": "True if Panel should use ARIA plugin", "guessedname": "useARIA", "guessedtype": "property"}, "strings": {"default": "null", "type": "Object", "description": "Collection of strings used to label elements of the Panel's UI.", "guessedname": "strings", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "object", "description": " The user configuration for the instance."}], "description": "A basic Panel Widget, which can be positioned based on Page XY co-ordinates and is stackable (z-index support).\nIt also provides alignment and centering support and uses a standard module format for it's content, with header,\nbody and footer section support. It can be made modal, and has functionality to hide and focus on different events.\nThe header and footer sections can be modified to allow for button support."}, {"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "<p><img src=\"assets/images/aui-panel/main.png\"/></p>\nA base class for Panel, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Built-in expandable and collapsible behavior</li>\n<li>Prebuilt tool buttons that can be wired up to provide other customized behavior</li>\n<li>Good for building block for application-oriented user interfaces</li>\n<li>Can be easily dropped into any Container or layout</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.Panel({\ncollapsible: true,\ncollapsed: true,\nheaderContent: 'Panel 1',\nbodyContent: 'Content'\n}).render();\n</code></pre>\nCheck the list of <a href=\"Panel.html#configattributes\">Configuration Attributes</a> available for\nPanel."}], "namespace": "", "module": "aui-panel", "events": {"stringsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "stringsChange", "description": "Fires when the value for the configuration attribute 'strings' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "useARIAChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "useARIAChange", "description": "Fires when the value for the configuration attribute 'useARIA' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "iconsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "iconsChange", "description": "Fires when the value for the configuration attribute 'icons' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "collapsibleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "collapsibleChange", "description": "Fires when the value for the configuration attribute 'collapsible' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "collapsedChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "collapsedChange", "description": "Fires when the value for the configuration attribute 'collapsed' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "titleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "titleChange", "description": "Fires when the value for the configuration attribute 'title' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "Panel", "methods": {"_setDefaultARIAValues": {"protected": "", "description": "Set default ARIA roles and attributes.", "guessedname": "_setDefaultARIAValues", "guessedtype": "function"}, "_afterPanelRender": {"description": "Fires after render phase.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_afterPanelRender", "guessedtype": "function"}, "syncUI": {"protected": "", "description": "Refreshes the rendered UI, based on Widget State", "guessedname": "syncUI", "guessedtype": "function"}, "_afterTitleChange": {"description": "Fires after the value of\n<a href=\"Panel.html#config_title\">title</a> change.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_afterTitleChange", "guessedtype": "function"}, "_syncTitleUI": {"protected": "", "description": "Sync the\n<a href=\"Panel.html#property_headerTextNode\">headerTextNode</a> with the\nvalue of the <a href=\"Panel.html#config_title\">title</a>.", "guessedname": "_syncTitleUI", "guessedtype": "function"}, "_renderIconButtons": {"protected": "", "description": "Render the <a href=\"Panel.html#config_icons\">icons</a>.", "guessedname": "_renderIconButtons", "guessedtype": "function"}, "_syncCollapsedUI": {"protected": "", "description": "Sync the UI for the collapsed status (i.e., icons, height etc).", "guessedname": "_syncCollapsedUI", "guessedtype": "function"}, "_renderHeaderText": {"protected": "", "description": "Render the Panel header text with the value of\n<a href=\"Panel.html#config_title\">title</a>.", "guessedname": "_renderHeaderText", "guessedtype": "function"}, "initializer": {"protected": "", "description": "Construction logic executed during Panel instantiation. Lifecycle.", "guessedname": "initializer", "guessedtype": "function"}, "_addPanelClass": {"description": "Add css classes neede for the Panel in the passed <code>section</code>.", "param": "{String} section <a href=\"WidgetStdMod.html\">WidgetStdMod</a> section (i.e., body, header, footer).", "protected": "", "params": [{"type": "String", "name": "section", "description": " <a href=\"WidgetStdMod.html\">WidgetStdMod</a> section (i.e., body, header, footer)."}], "guessedname": "_addPanelClass", "guessedtype": "function"}, "toggle": {"description": "Toggle the visibility of the Panel toggling the value of the\n<a href=\"Widget.html#config_visible\">visible</a> attribute.", "guessedname": "toggle", "guessedtype": "function"}, "collapse": {"description": "Collapse the panel setting the\n<a href=\"Panel.html#config_collapsed\">collapsed</a> attribute to\n<code>true</code>.", "guessedname": "collapse", "guessedtype": "function"}, "_afterCollapsedChange": {"description": "Fires after the value of\n<a href=\"Panel.html#config_collapsed\">collapsed</a> change.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_afterCollapsedChange", "guessedtype": "function"}, "expand": {"description": "Expand the panel setting the\n<a href=\"Panel.html#config_collapsed\">collapsed</a> attribute to\n<code>false</code>.", "guessedname": "expand", "guessedtype": "function"}, "toggleCollapse": {"description": "Toggle the <a href=\"Panel.html#config_collapsed\">collapsed</a> value.\nExpanding and collapsing the Panel.", "guessedname": "toggleCollapse", "guessedtype": "function"}}, "uses": ["WidgetStdMod"], "superclass": "Component", "file": "aui-panel.js", "guessedtype": "property", "extends": "Widget", "shortname": "Panel", "properties": {"headerTextNode": {"protected": "", "type": "Node", "description": "Stores the created node for the header of the Panel.", "guessedname": "headerTextNode", "guessedtype": "property"}, "Panel.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the Panel.", "guessedname": "ATTRS", "guessedtype": "property"}}, "description": "A basic Panel Widget, which can be positioned based on Page XY co-ordinates and is stackable (z-index support).\nIt also provides alignment and centering support and uses a standard module format for it's content, with header,\nbody and footer section support. It can be made modal, and has functionality to hide and focus on different events.\nThe header and footer sections can be modified to allow for button support."}, "VMLCircle": {"name": "VMLCircle", "configs": {"width": {"type": "Number", "description": "Indicates the width of the shape", "guessedname": "width", "guessedtype": "property"}, "radius": {"type": "Number", "description": "Radius for the circle.", "guessedname": "radius", "guessedtype": "property"}, "height": {"type": "Number", "description": "Indicates the height of the shape", "guessedname": "height", "guessedtype": "property"}}, "constructors": [{"description": "<a href=\"http://www.w3.org/TR/NOTE-VML\">VML</a> implementation of the <a href=\"Circle.html\">`Circle`</a> class. \n`VMLCircle` is not intended to be used directly. Instead, use the <a href=\"Circle.html\">`Circle`</a> class. \nIf the browser lacks <a href=\"http://www.w3.org/TR/SVG/\">SVG</a> and <a href=\"http://www.w3.org/TR/html5/the-canvas-element.html\">Canvas</a> \ncapabilities, the <a href=\"Circle.html\">`Circle`</a> class will point to the `VMLCircle` class."}], "namespace": "", "module": "graphics", "guessedname": "VMLCircle", "file": "graphics-vml-debug.js", "guessedtype": "function", "shortname": "VMLCircle", "properties": {"_type": {"guessedname": "_type", "type": "String", "description": "Indicates the type of shape", "private": "", "guessedtype": "property"}}, "description": "<a href=\"http://www.w3.org/TR/NOTE-VML\">VML</a> implementation of the <a href=\"Circle.html\">`Circle`</a> class. \n`VMLCircle` is not intended to be used directly. Instead, use the <a href=\"Circle.html\">`Circle`</a> class. \nIf the browser lacks <a href=\"http://www.w3.org/TR/SVG/\">SVG</a> and <a href=\"http://www.w3.org/TR/html5/the-canvas-element.html\">Canvas</a> \ncapabilities, the <a href=\"Circle.html\">`Circle`</a> class will point to the `VMLCircle` class."}, "Drawing": {"name": "Drawing", "constructors": [{"description": "`Drawing` provides a set of drawing methods used by `Path` and custom shape classes. \n`Drawing` has the following implementations based on browser capability.\n<ul>\n<li><a href=\"SVGDrawing.html\">`SVGDrawing`</a></li>\n<li><a href=\"VMLDrawing.html\">`VMLDrawing`</a></li>\n<li><a href=\"CanvasDrawing.html\">`CanvasDrawing`</a></li>\n</ul>"}], "namespace": "", "module": "graphics", "methods": {"quadraticCurveTo": {"params": [{"type": "Number", "name": "cpx", "description": " x-coordinate for the control point."}, {"type": "Number", "name": "cpy", "description": " y-coordinate for the control point."}, {"type": "Number", "name": "x", "description": " x-coordinate for the end point."}, {"type": "Number", "name": "y", "description": " y-coordinate for the end point."}], "description": "Draws a quadratic bezier curve.", "param": "{Number} cpx x-coordinate for the control point."}, "moveTo": {"params": [{"type": "Number", "name": "x", "description": " x-coordinate for the end point."}, {"type": "Number", "name": "y", "description": " y-coordinate for the end point."}], "description": "Moves the current drawing position to specified x and y coordinates.", "param": "{Number} x x-coordinate for the end point."}, "lineTo": {"params": [{"type": "Number", "name": "point1", "description": " x-coordinate for the end point."}, {"type": "Number", "name": "point2", "description": " y-coordinate for the end point."}], "description": "Draws a line segment using the current line style from the current drawing position to the specified x and y coordinates.", "param": "{Number} point1 x-coordinate for the end point."}, "end": {"description": "Completes a drawing operation."}, "curveTo": {"params": [{"type": "Number", "name": "cp1x", "description": " x-coordinate for the first control point."}, {"type": "Number", "name": "cp1y", "description": " y-coordinate for the first control point."}, {"type": "Number", "name": "cp2x", "description": " x-coordinate for the second control point."}, {"type": "Number", "name": "cp2y", "description": " y-coordinate for the second control point."}, {"type": "Number", "name": "x", "description": " x-coordinate for the end point."}, {"type": "Number", "name": "y", "description": " y-coordinate for the end point."}], "description": "Draws a bezier curve.", "param": "{Number} cp1x x-coordinate for the first control point."}, "clear": {"description": "Clears the path."}, "drawRoundRect": {"params": [{"type": "Number", "name": "x", "description": " x-coordinate"}, {"type": "Number", "name": "y", "description": " y-coordinate"}, {"type": "Number", "name": "w", "description": " width"}, {"type": "Number", "name": "h", "description": " height"}, {"type": "Number", "name": "ew", "description": " width of the ellipse used to draw the rounded corners"}, {"type": "Number", "name": "eh", "description": " height of the ellipse used to draw the rounded corners"}], "description": "Draws a rectangle with rounded corners.", "param": "{Number} x x-coordinate"}, "drawRect": {"params": [{"type": "Number", "name": "x", "description": " x-coordinate"}, {"type": "Number", "name": "y", "description": " y-coordinate"}, {"type": "Number", "name": "w", "description": " width"}, {"type": "Number", "name": "h", "description": " height"}], "description": "Draws a rectangle.", "param": "{Number} x x-coordinate"}}, "file": "graphics.js", "shortname": "Drawing", "description": "`Drawing` provides a set of drawing methods used by `Path` and custom shape classes. \n`Drawing` has the following implementations based on browser capability.\n<ul>\n<li><a href=\"SVGDrawing.html\">`SVGDrawing`</a></li>\n<li><a href=\"VMLDrawing.html\">`VMLDrawing`</a></li>\n<li><a href=\"CanvasDrawing.html\">`CanvasDrawing`</a></li>\n</ul>"}, "NumericAxis": {"properties": {"_type": {"guessedname": "_type", "readonly": "", "description": "Type of data used in `Axis`.", "private": "", "guessedtype": "property"}}, "name": "NumericAxis", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " (optional) Configuration parameters for the Chart."}], "description": "NumericAxis manages numeric data on an axis."}], "namespace": "", "module": "charts", "events": {"labelFunctionChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "labelFunctionChange", "description": "Fires when the value for the configuration attribute 'labelFunction' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "alwaysShowZeroChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "alwaysShowZeroChange", "description": "Fires when the value for the configuration attribute 'alwaysShowZero' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "labelFormatChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "labelFormatChange", "description": "Fires when the value for the configuration attribute 'labelFormat' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "methods": {"_getMinimumUnit": {"return": {"type": "", "description": "Number"}, "description": "Helper method for getting a `roundingUnit` when calculating the minimum and maximum values.", "private": "", "params": [{"type": "Number", "name": "max", "description": " Maximum number"}, {"type": "Number", "name": "min", "description": " Minimum number"}, {"type": "Number", "name": "units", "description": " Number of units on the axis"}], "param": "{Number} max Maximum number", "guessedname": "_getMinimumUnit", "guessedtype": "function"}, "_roundMinAndMax": {"description": "Rounds the mimimum and maximum values based on the `roundingUnit` attribute.", "param": "{Number} min Minimum value", "params": [{"type": "Number", "name": "min", "description": " Minimum value"}, {"type": "Number", "name": "max", "description": " Maximum value"}], "private": "", "guessedname": "_roundMinAndMax", "guessedtype": "function"}, "_roundToPrecision": {"return": {"type": "", "description": "Number"}, "description": "Rounds a number to a certain level of precision. Useful for limiting the number of\ndecimal places on a fractional number.", "private": "", "params": [{"type": "Number", "name": "number", "description": " Number to round"}, {"type": "Number", "name": "precision", "description": " Multiple to round towards."}], "param": "{Number} number Number to round", "guessedname": "_roundToPrecision", "guessedtype": "function"}, "_roundDownToNearest": {"return": {"type": "", "description": "Number"}, "description": "Rounds a Number down to the nearest multiple of an input. For example, by rounding\n16 down to the nearest 10, you will receive 10. Similar to the built-in function Math.floor().", "private": "", "params": [{"type": "Number", "name": "number", "description": " Number to round"}, {"type": "Number", "name": "nearest", "description": " Multiple to round towards."}], "param": "{Number} number Number to round", "guessedname": "_roundDownToNearest", "guessedtype": "function"}, "getLabelByIndex": {"return": {"type": "", "description": "String"}, "description": "Calculates and returns a value based on the number of labels and the index of\nthe current label.", "param": "{Number} i Index of the label.", "params": [{"type": "Number", "name": "i", "description": " Index of the label."}, {"type": "Number", "name": "l", "description": " Total number of labels."}], "guessedname": "getLabelByIndex", "guessedtype": "function"}, "_getNiceNumber": {"return": {"type": "", "description": "Number"}, "description": "Calculates a nice rounding unit based on the range.", "private": "", "params": [{"type": "Number", "name": "roundingUnit", "description": " The calculated rounding unit."}], "param": "{Number} roundingUnit The calculated rounding unit.", "guessedname": "_getNiceNumber", "guessedtype": "function"}, "getKeyValueAt": {"return": {"type": "", "description": "Object"}, "description": "Returns a value based of a key value and an index.", "param": "{String} key value used to look up the correct array", "params": [{"type": "String", "name": "key", "description": " value used to look up the correct array"}, {"type": "Number", "name": "index", "description": " within the array"}], "guessedname": "getKeyValueAt", "guessedtype": "function"}, "_roundUpToNearest": {"return": {"type": "", "description": "Number"}, "description": "Rounds a Number up to the nearest multiple of an input. For example, by rounding\n16 up to the nearest 10, you will receive 20. Similar to the built-in function Math.ceil().", "private": "", "params": [{"type": "Number", "name": "number", "description": " Number to round"}, {"type": "Number", "name": "nearest", "description": " Multiple to round towards."}], "param": "{Number} number Number to round", "guessedname": "_roundUpToNearest", "guessedtype": "function"}, "_roundToNearest": {"return": {"type": "", "description": "Number"}, "description": "Rounds a Number to the nearest multiple of an input. For example, by rounding\n16 to the nearest 10, you will receive 20. Similar to the built-in function Math.round().", "private": "", "params": [{"type": "Number", "name": "number", "description": " Number to round"}, {"type": "Number", "name": "nearest", "description": " Multiple to round towards."}], "param": "{Number} number Number to round", "guessedname": "_roundToNearest", "guessedtype": "function"}, "_updateMinAndMax": {"private": "", "description": "Calculates the maximum and minimum values for the `Axis`.", "guessedname": "_updateMinAndMax", "guessedtype": "function"}}, "extends": "AxisType", "superclass": "AxisType", "file": "charts.js", "shortname": "NumericAxis", "configs": {"labelFormat": {"type": "Object", "description": "Object containing properties used by the `labelFunction` to format a\nlabel.", "guessedname": "labelFormat", "guessedtype": "property"}, "labelFunction": {"type": "Function", "description": "Method used for formatting a label. This attribute allows for the default label formatting method to overridden. The method use would need\nto implement the arguments below and return a `String`.\n<dl>\n<dt>val</dt><dd>Label to be formatted. (`String`)</dd>\n<dt>format</dt><dd>Object containing properties used to format the label. (optional)</dd>\n</dl>", "guessedname": "labelFunction", "guessedtype": "property"}, "alwaysShowZero": {"type": "Boolean", "description": "Indicates whether 0 should always be displayed.", "guessedname": "alwaysShowZero", "guessedtype": "property"}}, "description": "NumericAxis manages numeric data on an axis."}, "Sortable": {"name": "Sortable", "configs": {"opacity": {"type": "String", "description": "The opacity to change the proxy item to when dragging.", "guessedname": "opacity", "guessedtype": "property"}, "container": {"type": "String", "description": "A selector query to get the container to listen for mousedown events on. All \"nodes\" should be a child of this container.", "guessedname": "container", "guessedtype": "property"}, "invalid": {"type": "String", "description": "A selector string to test if a list item is invalid and not sortable", "guessedname": "invalid", "guessedtype": "property"}, "handles": {"type": "Array", "description": "Drag handles to pass on to the internal DD.Delegate instance.", "guessedname": "handles", "guessedtype": "property"}, "opacityNode": {"type": "String", "description": "The node to set opacity on when dragging (dragNode or currentNode). Default: currentNode.", "guessedname": "opacityNode", "guessedtype": "property"}, "nodes": {"type": "String", "description": "A selector query to get the children of the \"container\" to make draggable elements from.", "guessedname": "nodes", "guessedtype": "property"}, "id": {"type": "String", "description": "The id of this Sortable, used to get a reference to this Sortable list from another list.", "guessedname": "id", "guessedtype": "property"}, "moveType": {"type": "String", "description": "How should an item move to another list: insert, swap, move, copy. Default: insert", "guessedname": "moveType", "guessedtype": "property"}}, "constructors": [{"description": "The class allows you to create a Drag & Drop reordered list."}], "namespace": "", "module": "sortable", "events": {"moveTypeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "moveTypeChange", "description": "Fires when the value for the configuration attribute 'moveType' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "opacityNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "opacityNodeChange", "description": "Fires when the value for the configuration attribute 'opacityNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "invalidChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "invalidChange", "description": "Fires when the value for the configuration attribute 'invalid' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "opacityChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "opacityChange", "description": "Fires when the value for the configuration attribute 'opacity' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "handlesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "handlesChange", "description": "Fires when the value for the configuration attribute 'handles' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "copy": {"description": "A Sortable node was moved.", "param": "{Event.Facade} event An Event Facade object with the following specific property added:\n<dl>\n<dt>same</dt><dd>Moved to the same list.</dd>\n<dt>drag</dt><dd>The Drag Object</dd>\n<dt>drop</dt><dd>The Drop Object</dd>\n</dl>", "params": [{"type": "Event.Facade", "name": "event", "description": " An Event Facade object with the following specific property added:\n<dl>\n<dt>same</dt><dd>Moved to the same list.</dd>\n<dt>drag</dt><dd>The Drag Object</dd>\n<dt>drop</dt><dd>The Drop Object</dd>\n</dl>"}, {"type": "Event.Facade", "name": "event", "description": " An Event Facade object with the following specific property added:\n<dl>\n<dt>same</dt><dd>Moved to the same list.</dd>\n<dt>drag</dt><dd>The Drag Object</dd>\n<dt>drop</dt><dd>The Drop Object</dd>\n</dl>"}, {"type": "Event.Facade", "name": "event", "description": " An Event Facade object with the following specific property added:\n<dl>\n<dt>same</dt><dd>Moved to the same list.</dd>\n<dt>drag</dt><dd>The Drag Object</dd>\n<dt>drop</dt><dd>The Drop Object</dd>\n</dl>"}, {"type": "Event.Facade", "name": "event", "description": " An Event Facade object with the following specific property added:\n<dl>\n<dt>same</dt><dd>Moved to the same list.</dd>\n<dt>drag</dt><dd>The Drag Object</dd>\n<dt>drop</dt><dd>The Drop Object</dd>\n</dl>"}, {"type": "Event.Facade", "name": "event", "description": " An Event Facade object with the following specific property added:\n<dl>\n<dt>same</dt><dd>Moved to the same list.</dd>\n<dt>drag</dt><dd>The Drag Object</dd>\n<dt>drop</dt><dd>The Drop Object</dd>\n</dl>"}], "guessedname": "requires", "guessedtype": "property", "type": "{Event.Custom}"}, "nodesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "nodesChange", "description": "Fires when the value for the configuration attribute 'nodes' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "containerChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "containerChange", "description": "Fires when the value for the configuration attribute 'container' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "idChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "idChange", "description": "Fires when the value for the configuration attribute 'id' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "Sortable", "methods": {"plug": {"description": "Passthrough to the DD.Delegate.ddplug method", "chainable": "", "param": "Class cls The class to plug", "params": [{"type": "", "name": "Class", "description": " cls The class to plug"}, {"type": "", "name": "Object", "description": " config The class config"}], "guessedname": "plug", "guessedtype": "function"}, "join": {"description": "Join this Sortable with another Sortable instance.\n<ul>\n<li>full: Exchange nodes with both lists.</li>\n<li>inner: Items can go into this list from the joined list.</li>\n<li>outer: Items can go out of the joined list into this list.</li>\n<li>none: Removes the join.</li>\n</ul>", "chainable": "", "param": "Sortable sel The Sortable list to join with", "params": [{"type": "", "name": "Sortable", "description": " sel The Sortable list to join with"}, {"type": "", "name": "String", "description": " type The type of join to do: full, inner, outer, none. Default: full"}], "guessedname": "join", "guessedtype": "function"}, "_onDragEnd": {"description": "Handles the DragEnd event that cleans up the settings in the drag:start event.", "param": "Event e The Event Object", "params": [{"type": "", "name": "Event", "description": " e The Event Object"}], "private": "", "guessedname": "_onDragEnd", "guessedtype": "function"}, "_join_outer": {"description": "Allows this Sortable to accept items from the passed Sortable.", "param": "Sortable sel The Sortable list to join with", "params": [{"type": "", "name": "Sortable", "description": " sel The Sortable list to join with"}], "private": "", "guessedname": "_join_outer", "guessedtype": "function"}, "_onDragStart": {"description": "Handles the DragStart event and initializes some settings.", "param": "Event e The Event Object", "params": [{"type": "", "name": "Event", "description": " e The Event Object"}], "private": "", "guessedname": "_onDragStart", "guessedtype": "function"}, "_join_full": {"description": "Joins both of the Sortables together.", "param": "Sortable sel The Sortable list to join with", "params": [{"type": "", "name": "Sortable", "description": " sel The Sortable list to join with"}], "private": "", "guessedname": "_join_full", "guessedtype": "function"}, "getOrdering": {"description": "A custom callback to allow a user to extract some sort of id or any other data from the node to use in the \"ordering list\" and then that data should be returned from the callback.", "param": "Function callback", "returns": "Array", "params": [{"type": "", "name": "Function", "description": " callback"}], "guessedname": "getOrdering", "guessedtype": "function"}, "_onDropOver": {"description": "Handles the DropOver event to append a drop node to an empty target", "param": "Event e The Event Object", "params": [{"type": "", "name": "Event", "description": " e The Event Object"}], "private": "", "guessedname": "_onDropOver", "guessedtype": "function"}, "reg": {"description": "Register a Sortable instance with the singleton to allow lookups later.", "param": "Sortable s A Sortable instance.", "static": "", "guessedname": "reg", "guessedtype": "function", "params": [{"type": "", "name": "Sortable", "description": " s A Sortable instance."}]}, "unreg": {"description": "Unregister a Sortable instance with the singleton.", "param": "Sortable s A Sortable instance.", "static": "", "guessedname": "unreg", "guessedtype": "function", "params": [{"type": "", "name": "Sortable", "description": " s A Sortable instance."}]}, "_onDragOver": {"description": "Handles the DragOver event that moves the object in the list or to another list.", "param": "Event e The Event Object", "params": [{"type": "", "name": "Event", "description": " e The Event Object"}], "private": "", "guessedname": "_onDragOver", "guessedtype": "function"}, "_join_inner": {"description": "Allows this Sortable to give items to the passed Sortable.", "param": "Sortable sel The Sortable list to join with", "params": [{"type": "", "name": "Sortable", "description": " sel The Sortable list to join with"}], "private": "", "guessedname": "_join_inner", "guessedtype": "function"}, "_test": {"description": "Test a Node or a selector for the container", "param": "{Node} node The node instance to test.", "static": "", "guessedname": "_test", "guessedtype": "function", "params": [{"type": "Node", "name": "node", "description": " The node instance to test."}, {"type": "String|Node", "name": "test", "description": " The node instance or selector string to test against."}]}, "getSortable": {"description": "Get a Sortable instance back from a node reference or a selector string.", "param": "{String|Node} node The node instance or selector string to use to find a Sortable instance.", "static": "", "guessedname": "getSortable", "guessedtype": "function", "params": [{"type": "String|Node", "name": "node", "description": " The node instance or selector string to use to find a Sortable instance."}]}, "_join_none": {"description": "Removes the join with the passed Sortable.", "param": "Sortable sel The Sortable to remove the join from", "params": [{"type": "", "name": "Sortable", "description": " sel The Sortable to remove the join from"}], "private": "", "guessedname": "_join_none", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "sortable.js", "guessedtype": "function", "shortname": "Sortable", "properties": {"_sortables": {"description": "Hash map of all Sortables on the page.", "private": "", "static": "", "guessedname": "_sortables", "guessedtype": "property", "type": "Array"}, "delegate": {"type": "DD.Delegate", "description": "A reference to the DD.Delegate instance.", "guessedname": "delegate", "guessedtype": "property"}}, "description": "The class allows you to create a Drag & Drop reordered list."}, "DataSchema.XML": {"name": "DataSchema.XML", "namespace": "", "module": "dataschema", "guessedname": "Lang", "methods": {"_parseResult": {"return": {"type": "Object", "description": "Schema-parsed data."}, "description": "Schema-parsed result to add to results list.", "param": "fields {Array} Required. A collection of field definition.", "protected": "", "static": "", "guessedname": "_parseResult", "guessedtype": "function", "params": [{"type": "Array", "name": "fields", "description": "  Required. A collection of field definition."}, {"type": "Object", "name": "context", "description": "  Required. XML node or document to search within."}]}, "_parseResults": {"return": {"type": "Object", "description": "Schema-parsed data."}, "description": "Schema-parsed list of results from full data", "param": "schema {Object} Schema to parse against.", "protected": "", "static": "", "guessedname": "_parseResults", "guessedtype": "function", "params": [{"type": "Object", "name": "schema", "description": "  Schema to parse against."}, {"type": "Object", "name": "context", "description": "  XML node or document to parse."}, {"type": "Object", "name": "data_out", "description": "  In-progress schema-parsed data to update."}]}, "_parseMeta": {"return": {"type": "Object", "description": "Schema-parsed data."}, "description": "Parses results data according to schema", "param": "xmldoc_in {Object} XML document parse.", "protected": "", "static": "", "guessedname": "_parseMeta", "guessedtype": "function", "params": [{"type": "Object", "name": "xmldoc_in", "description": "  XML document parse."}, {"type": "Object", "name": "data_out", "description": "  In-progress schema-parsed data to update."}]}, "_getLocationValue": {"return": {"type": "Object", "description": "Data value or null."}, "description": "Get an XPath-specified value for a given field from an XML node or document.", "param": "field {String | Object} Field definition.", "protected": "", "static": "", "guessedname": "_getLocationValue", "guessedtype": "function", "params": [{"type": "String | Object", "name": "field", "description": "  Field definition."}, {"type": "Object", "name": "context", "description": "  XML node or document to search within."}]}, "_parseField": {"description": "Schema-parsed result field.", "param": "field {String | Object} Required. Field definition.", "protected": "", "static": "", "guessedname": "_parseField", "guessedtype": "function", "params": [{"type": "String | Object", "name": "field", "description": "  Required. Field definition."}, {"type": "Object", "name": "result", "description": "  Required. Schema parsed data object."}, {"type": "Object", "name": "context", "description": "  Required. XML node or document to search within."}]}, "apply": {"return": {"type": "Object", "description": "An Object with properties `results` and `meta`"}, "description": "Applies a schema to an XML data tree, returning a normalized object with\nresults in the `results` property. Additional information can be parsed out\nof the XML for inclusion in the `meta` property of the response object.  If\nan error is encountered during processing, an `error` property will be\nadded.\nField data in the nodes captured by the XPath in _schema.resultListLocator_\nis extracted with the field identifiers described in _schema.resultFields_.\nField identifiers are objects with the following properties:\n`key`    : <strong>(required)</strong> The desired property name to use\nstore the retrieved value in the result object.  If `locator` is\nnot specified, `key` is also used as the XPath locator (String)\n`locator`: The XPath locator to the node or attribute within each\nresult node found by _schema.resultListLocator_ containing the\ndesired field data (String)\n`parser` : A function or the name of a function on `Y.Parsers` used\nto convert the input value into a normalized type.  Parser\nfunctions are passed the value as input and are expected to\nreturn a value.\n`schema` : Used to retrieve nested field data into an array for\nassignment as the result field value.  This object follows the same\nconventions as _schema_.\nIf no value parsing or nested parsing is needed, you can use XPath locators\n(strings) instead of field identifiers (objects) -- see example below.\n`response.results` will contain an array of objects with key:value pairs.\nThe keys are the field identifier `key`s, and the values are the data\nvalues extracted from the nodes or attributes found by the field `locator`\n(or `key` fallback).\nTo extract additional information from the XML, include an array of\nXPath locators in _schema.metaFields_.  The collected values will be\nstored in `response.meta` with the XPath locator as keys.", "param": "{Object} schema Schema to apply.  Supported configuration\nproperties are:", "static": "", "guessedname": "apply", "guessedtype": "function", "params": [{"type": "Object", "name": "schema", "description": " Schema to apply.  Supported configuration\nproperties are:"}, {"type": "String", "name": "[schema.resultListLocator]", "description": " XPath locator for the\nXML nodes that contain the data to flatten into `response.results`"}, {"type": "Array", "name": "[schema.resultFields]", "description": " Field identifiers to\nlocate/assign values in the response records. See above for\ndetails."}, {"type": "Array", "name": "[schema.metaFields]", "description": " XPath locators to extract extra\nnon-record related information from the XML data"}, {"type": "XMLDoc", "name": "data", "description": " XML data to parse"}], "example": "var schema = {\nresultListLocator: '//produce/item',\nresultFields: [\n{\nlocator: 'name',\nkey: 'name'\n},\n{\nlocator: 'color',\nkey: 'color',\nparser: function (val) { return val.toUpperCase(); }\n}\n]\n};\n// Assumes data like\n// <inventory>\n//   <produce>\n//     <item><name>Banana</name><color>yellow</color></item>\n//     <item><name>Orange</name><color>orange</color></item>\n//     <item><name>Eggplant</name><color>purple</color></item>\n//   </produce>\n// </inventory>\nvar response = Y.DataSchema.JSON.apply(schema, data);\n// response.results[0] is { name: \"Banana\", color: \"YELLOW\" }"}, "_getXPathResult": {"return": {"type": "Object", "description": "Data collection or null."}, "description": "Fetches the XPath-specified result for a given location in an XML node\nor document.", "param": "locator {String} The XPath location.", "protected": "", "static": "", "guessedname": "_getXPathResult", "guessedtype": "function", "params": [{"type": "String", "name": "locator", "description": "  The XPath location."}, {"type": "Object", "name": "context", "description": "  XML node or document to search within."}, {"type": "Object", "name": "xmldoc", "description": "  XML document to resolve namespace."}]}}, "static": "", "superclass": "DataSchema.Base", "file": "dataschema-xml.js", "guessedtype": "property", "extends": "DataSchema.Base", "shortname": "DataSchema.XML", "description": "Provides a DataSchema implementation which can be used to work with XML data.\nSee the `apply` method for usage."}, "AutoCompleteFilters": {"name": "AutoCompleteFilters", "description": "Provides pre-built result matching filters for AutoComplete.", "namespace": "", "module": "autocomplete", "guessedname": "AccentFold", "static": "", "file": "autocomplete-filters.js", "guessedtype": "property", "shortname": "AutoCompleteFilters", "methods": {"phraseMatchFold": {"return": {"type": "Array", "description": "Filtered results"}, "description": "Accent folding version of <code>phraseMatch()</code>.", "param": "{String} query Query to match", "static": "", "guessedname": "phraseMatchFold", "guessedtype": "function", "params": [{"type": "String", "name": "query", "description": " Query to match"}, {"type": "Array", "name": "results", "description": " Results to filter"}]}, "phraseMatch": {"return": {"type": "Array", "description": "Filtered results"}, "description": "Returns an array of results that contain the complete query as a phrase.\nCase-insensitive.", "param": "{String} query Query to match", "static": "", "guessedname": "phraseMatch", "guessedtype": "function", "params": [{"type": "String", "name": "query", "description": " Query to match"}, {"type": "Array", "name": "results", "description": " Results to filter"}]}, "charMatchFold": {"return": {"type": "Array", "description": "Filtered results"}, "description": "Accent folding version of <code>charMatch()</code>.", "param": "{String} query Query to match", "static": "", "guessedname": "charMatchFold", "guessedtype": "function", "params": [{"type": "String", "name": "query", "description": " Query to match"}, {"type": "Array", "name": "results", "description": " Results to filter"}]}, "subWordMatchFold": {"return": {"type": "Array", "description": "Filtered results"}, "description": "Accent folding version of <code>subWordMatch()</code>.", "param": "{String} query Query to match", "static": "", "guessedname": "subWordMatchFold", "guessedtype": "function", "params": [{"type": "String", "name": "query", "description": " Query to match"}, {"type": "Array", "name": "results", "description": " Results to filter"}]}, "charMatchCase": {"return": {"type": "Array", "description": "Filtered results"}, "description": "Case-sensitive version of <code>charMatch()</code>.", "param": "{String} query Query to match", "static": "", "guessedname": "charMatchCase", "guessedtype": "function", "params": [{"type": "String", "name": "query", "description": " Query to match"}, {"type": "Array", "name": "results", "description": " Results to filter"}]}, "startsWith": {"return": {"type": "Array", "description": "Filtered results"}, "description": "Returns an array of results that start with the complete query as a\nphrase. Case-insensitive.", "param": "{String} query Query to match", "static": "", "guessedname": "startsWith", "guessedtype": "function", "params": [{"type": "String", "name": "query", "description": " Query to match"}, {"type": "Array", "name": "results", "description": " Results to filter"}]}, "subWordMatch": {"return": {"type": "Array", "description": "Filtered results"}, "description": "Returns an array of results in which all the words of the query match\neither whole words or parts of words in the result. Non-word characters\nlike whitespace and certain punctuation are ignored. Case-insensitive.\nThis is basically a combination of <code>wordMatch()</code> (by ignoring\nwhitespace and word order) and <code>phraseMatch()</code> (by allowing\npartial matching instead of requiring the entire word to match).\nExample use case: Trying to find personal names independently of name\norder (Western or Eastern order) and supporting immediate feedback by\nallowing partial occurences. So queries like \"J. Doe\", \"Doe, John\", and\n\"J. D.\" would all match \"John Doe\".", "param": "{String} query Query to match", "static": "", "guessedname": "subWordMatch", "guessedtype": "function", "params": [{"type": "String", "name": "query", "description": " Query to match"}, {"type": "Array", "name": "results", "description": " Results to filter"}]}, "wordMatchCase": {"return": {"type": "Array", "description": "Filtered results"}, "description": "Case-sensitive version of <code>wordMatch()</code>.", "param": "{String} query Query to match", "static": "", "guessedname": "wordMatchCase", "guessedtype": "function", "params": [{"type": "String", "name": "query", "description": " Query to match"}, {"type": "Array", "name": "results", "description": " Results to filter"}]}, "startsWithFold": {"return": {"type": "Array", "description": "Filtered results"}, "description": "Accent folding version of <code>startsWith()</code>.", "param": "{String} query Query to match", "static": "", "guessedname": "startsWithFold", "guessedtype": "function", "params": [{"type": "String", "name": "query", "description": " Query to match"}, {"type": "Array", "name": "results", "description": " Results to filter"}]}, "charMatch": {"return": {"type": "Array", "description": "Filtered results"}, "description": "Returns an array of results that contain all of the characters in the\nquery, in any order (not necessarily consecutive). Case-insensitive.", "param": "{String} query Query to match", "static": "", "guessedname": "charMatch", "guessedtype": "function", "params": [{"type": "String", "name": "query", "description": " Query to match"}, {"type": "Array", "name": "results", "description": " Results to filter"}]}, "wordMatch": {"return": {"type": "Array", "description": "Filtered results"}, "description": "Returns an array of results that contain all of the words in the query,\nin any order. Non-word characters like whitespace and certain punctuation\nare ignored. Case-insensitive.", "param": "{String} query Query to match", "static": "", "guessedname": "wordMatch", "guessedtype": "function", "params": [{"type": "String", "name": "query", "description": " Query to match"}, {"type": "Array", "name": "results", "description": " Results to filter"}]}, "startsWithCase": {"return": {"type": "Array", "description": "Filtered results"}, "description": "Case-sensitive version of <code>startsWith()</code>.", "param": "{String} query Query to match", "static": "", "guessedname": "startsWithCase", "guessedtype": "function", "params": [{"type": "String", "name": "query", "description": " Query to match"}, {"type": "Array", "name": "results", "description": " Results to filter"}]}, "phraseMatchCase": {"return": {"type": "Array", "description": "Filtered results"}, "description": "Case-sensitive version of <code>phraseMatch()</code>.", "param": "{String} query Query to match", "static": "", "guessedname": "phraseMatchCase", "guessedtype": "function", "params": [{"type": "String", "name": "query", "description": " Query to match"}, {"type": "Array", "name": "results", "description": " Results to filter"}]}, "subWordMatchCase": {"return": {"type": "Array", "description": "Filtered results"}, "description": "Case-sensitive version of <code>subWordMatch()</code>.", "param": "{String} query Query to match", "static": "", "guessedname": "subWordMatchCase", "guessedtype": "function", "params": [{"type": "String", "name": "query", "description": " Query to match"}, {"type": "Array", "name": "results", "description": " Results to filter"}]}, "wordMatchFold": {"return": {"type": "Array", "description": "Filtered results"}, "description": "Accent folding version of <code>wordMatch()</code>.", "param": "{String} query Query to match", "static": "", "guessedname": "wordMatchFold", "guessedtype": "function", "params": [{"type": "String", "name": "query", "description": " Query to match"}, {"type": "Array", "name": "results", "description": " Results to filter"}]}}}, "TreeNodeTask": {"name": "TreeNodeTask", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "<p><img src=\"assets/images/aui-treeNodeTask/main.png\"/></p>\nA base class for TreeNodeTask, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>3 states checkbox support</li>\n<li>Automatic check/uncheck the parent status based on the children checked status</li>\n</ul>\nCheck the list of <a href=\"TreeNodeTask.html#configattributes\">Configuration Attributes</a> available for\nTreeNodeTask."}], "namespace": "", "module": "aui-tree", "guessedname": "TreeNodeTask", "extends": "TreeNodeCheck", "superclass": "TreeNodeCheck", "file": "aui-tree.js", "guessedtype": "property", "shortname": "TreeNodeTask", "properties": {"TreeNode.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}}, "description": "<p><img src=\"assets/images/aui-treeNodeTask/main.png\"/></p>\nA base class for TreeNodeTask, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>3 states checkbox support</li>\n<li>Automatic check/uncheck the parent status based on the children checked status</li>\n</ul>\nCheck the list of <a href=\"TreeNodeTask.html#configattributes\">Configuration Attributes</a> available for\nTreeNodeTask."}, "PieSeries": {"name": "PieSeries", "configs": {"valueKey": {"type": "String", "description": "Indicates which array to from the hash of value arrays in \nthe value `Axis` instance.", "guessedname": "valueKey", "guessedtype": "property"}, "styles": {"type": "Object", "description": "Style properties used for drawing markers. This attribute is inherited from `MarkerSeries`. Below are the default values:\n<dl>\n<dt>fill</dt><dd>A hash containing the following values:\n<dl>\n<dt>colors</dt><dd>An array of colors to be used for the marker fills. The color for each marker is retrieved from the \narray below:<br/>\n`[\"#66007f\", \"#a86f41\", \"#295454\", \"#996ab2\", \"#e8cdb7\", \"#90bdbd\",\"#000000\",\"#c3b8ca\", \"#968373\", \"#678585\"]`\n</dd>\n<dt>alphas</dt><dd>An array of alpha references (Number from 0 to 1) indicating the opacity of each marker fill. The default value is [1].</dd>\n</dl>\n</dd>\n<dt>border</dt><dd>A hash containing the following values:\n<dl>\n<dt>color</dt><dd>An array of colors to be used for the marker borders. The color for each marker is retrieved from the\narray below:<br/>\n`[\"#205096\", \"#b38206\", \"#000000\", \"#94001e\", \"#9d6fa0\", \"#e55b00\", \"#5e85c9\", \"#adab9e\", \"#6ac291\", \"#006457\"]`\n<dt>alpha</dt><dd>Number from 0 to 1 indicating the opacity of the marker border. The default value is 1.</dd>\n<dt>weight</dt><dd>Number indicating the width of the border. The default value is 1.</dd>\n</dl>\n</dd>\n<dt>over</dt><dd>hash containing styles for markers when highlighted by a `mouseover` event. The default \nvalues for each style is null. When an over style is not set, the non-over value will be used. For example,\nthe default value for `marker.over.fill.color` is equivalent to `marker.fill.color`.</dd>\n</dl>"}, "categoryDisplayName": {"type": "String", "description": "Name used for for displaying category data", "guessedname": "categoryDisplayName", "guessedtype": "property"}, "valueDisplayName": {"type": "String", "description": "Name used for for displaying value data", "guessedname": "valueDisplayName", "guessedtype": "property"}, "categoryKey": {"type": "String", "description": "Indicates which array to from the hash of value arrays in \nthe category `Axis` instance.", "guessedname": "categoryKey", "guessedtype": "property"}, "slices": {"type": "Array", "private": "", "guessedname": "slices", "guessedtype": "property"}, "graph": {"type": "Graph", "description": "Reference to the `Graph` in which the series is drawn into.", "guessedname": "graph", "guessedtype": "property"}, "categoryAxis": {"type": "Axis", "description": "Reference to the `Axis` instance used for assigning \ncategory values to the graph.", "guessedname": "categoryAxis", "guessedtype": "property"}, "type": {"default": "pie", "type": "String", "description": "Read-only attribute indicating the type of series.", "guessedname": "type", "guessedtype": "property"}, "order": {"type": "Number", "description": "Order of this instance of this `type`.", "guessedname": "order", "guessedtype": "property"}}, "constructors": [{"description": "PieSeries visualizes data as a circular chart divided into wedges which represent data as a \npercentage of a whole."}], "namespace": "", "module": "charts", "events": {"categoryKeyChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "categoryKeyChange", "description": "Fires when the value for the configuration attribute 'categoryKey' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "categoryAxisChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "categoryAxisChange", "description": "Fires when the value for the configuration attribute 'categoryAxis' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "graphChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "graphChange", "description": "Fires when the value for the configuration attribute 'graph' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "valueKeyChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "valueKeyChange", "description": "Fires when the value for the configuration attribute 'valueKey' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "slicesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "slicesChange", "description": "Fires when the value for the configuration attribute 'slices' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "valueDisplayNameChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "valueDisplayNameChange", "description": "Fires when the value for the configuration attribute 'valueDisplayName' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "categoryDisplayNameChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "categoryDisplayNameChange", "description": "Fires when the value for the configuration attribute 'categoryDisplayName' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "typeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "typeChange", "description": "Fires when the value for the configuration attribute 'type' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "orderChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "orderChange", "description": "Fires when the value for the configuration attribute 'order' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "stylesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "stylesChange", "description": "Fires when the value for the configuration attribute 'styles' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "PieSeries", "methods": {"_valueAxisChangeHandler": {"description": "Event handler for the valueAxisChange event.", "param": "{Object} e Event object.", "params": [{"type": "Object", "name": "e", "description": " Event object."}], "private": "", "guessedname": "_valueAxisChangeHandler", "guessedtype": "function"}, "_createMarker": {"return": {"type": "", "description": "Shape"}, "description": "Creates a shape to be used as a marker.", "private": "", "params": [{"type": "Object", "name": "styles", "description": " Hash of style properties."}, {"type": "Number", "name": "order", "description": " Order of the series."}, {"type": "Number", "name": "index", "description": " Index within the series associated with the marker."}], "param": "{Object} styles Hash of style properties.", "guessedname": "_createMarker", "guessedtype": "function"}, "draw": {"protected": "", "description": "Draws the series. Overrides the base implementation.", "guessedname": "draw", "guessedtype": "function"}, "_createMarkerCache": {"private": "", "description": "Creates a cache of markers for reuse.", "guessedname": "_clearMarkerCache", "guessedtype": "function"}, "addListeners": {"private": "", "description": "Adds event listeners.", "guessedname": "addListeners", "guessedtype": "function"}, "_getPlotDefaults": {"guessedname": "_getPlotDefaults", "return": {"type": "", "description": "Object"}, "description": "Gets the default style values for the markers.", "private": "", "guessedtype": "function"}, "_getDefaultColor": {"return": {"type": "", "description": "String"}, "description": "Colors used if style colors are not specified", "param": "{Number} index Index indicating the series order.", "protected": "", "params": [{"type": "Number", "name": "index", "description": " Index indicating the series order."}, {"type": "String", "name": "type", "description": " Indicates which type of object needs the color."}], "guessedname": "_getDefaultColor", "guessedtype": "function"}, "updateMarkerState": {"description": "Resizes and positions markers based on a mouse interaction.", "param": "{String} type state of the marker", "protected": "", "params": [{"type": "String", "name": "type", "description": " state of the marker"}, {"type": "Number", "name": "i", "description": " index of the marker"}], "guessedname": "updateMarkerState", "guessedtype": "function"}, "_categoryAxisChangeHandler": {"description": "Event handler for the categoryAxisChange event.", "param": "{Object} e Event object.", "params": [{"type": "Object", "name": "e", "description": " Event object."}], "private": "", "guessedname": "_categoryAxisChangeHandler", "guessedtype": "function"}, "_categoryDataChangeHandler": {"description": "Event handler for categoryDataChange event.", "param": "{Object} event Event object.", "params": [{"type": "Object", "name": "event", "description": " Event object."}], "private": "", "guessedname": "_categoryDataChangeHandler", "guessedtype": "function"}, "_setMap": {"private": "", "description": "Creates or updates the image map when rendered with canvas.", "guessedname": "_setMap", "guessedtype": "function"}, "validate": {"private": "", "description": "Draws the series.", "guessedname": "validate", "guessedtype": "function"}, "drawPlots": {"protected": "", "description": "Draws the markers", "guessedname": "drawPlots", "guessedtype": "function"}, "_addHotspot": {"description": "Adds an interactive map when rendering in canvas.", "param": "{Object} cfg Object containing data used to draw the hotspot", "params": [{"type": "Object", "name": "cfg", "description": " Object containing data used to draw the hotspot"}, {"type": "Number", "name": "seriesIndex", "description": " Index of series in the `seriesCollection`."}, {"type": "Number", "name": "index", "description": " Index of the marker using the hotspot."}], "private": "", "guessedname": "_addHotspot", "guessedtype": "function"}, "_valueDataChangeHandler": {"description": "Event handler for valueDataChange event.", "param": "{Object} event Event object.", "params": [{"type": "Object", "name": "event", "description": " Event object."}], "private": "", "guessedname": "_valueDataChangeHandler", "guessedtype": "function"}}, "extends": "MarkerSeries", "superclass": "MarkerSeries", "file": "charts.js", "guessedtype": "property", "shortname": "PieSeries", "properties": {"_defaultSliceColors": {"protected": "", "type": "Array", "description": "Collection of default colors used for area fills, histogram fills and pie fills in a series when not specified by user.", "guessedname": "_defaultSliceColors", "guessedtype": "property"}, "_map": {"guessedname": "_map", "type": "HTMLElement", "description": "Image map used for interactivity when rendered with canvas.", "private": "", "guessedtype": "property"}, "_valueDisplayName": {"private": "", "description": "Storage for `valueDisplayName` attribute.", "guessedname": "_valueDisplayName", "guessedtype": "property"}, "_defaultFillColors": {"protected": "", "type": "Array", "description": "Collection of default colors used for marker fills in a series when not specified by user.", "guessedname": "_defaultFillColors", "guessedtype": "property"}, "_image": {"guessedname": "_image", "type": "HTMLElement", "description": "Image used for image map when rendered with canvas.", "private": "", "guessedtype": "property"}, "_defaultLineColors": {"protected": "", "type": "Array", "description": "Collection of default colors used for lines in a series when not specified by user.", "guessedname": "_defaultLineColors", "guessedtype": "property"}, "_categoryDisplayName": {"private": "", "description": "Storage for `categoryDisplayName` attribute.", "guessedname": "_categoryDisplayName", "guessedtype": "property"}, "GUID": {"guessedname": "GUID", "type": "String", "description": "Constant used to generate unique id.", "private": "", "guessedtype": "property"}, "_defaultBorderColors": {"protected": "", "type": "Array", "description": "Collection of default colors used for marker borders in a series when not specified by user.", "guessedname": "_defaultBorderColors", "guessedtype": "property"}}, "description": "PieSeries visualizes data as a circular chart divided into wedges which represent data as a \npercentage of a whole."}, "Escape": {"name": "Escape", "since": "3.3.0", "namespace": "", "module": "escape", "guessedname": "HTML_CHARS", "methods": {"regex": {"return": {"type": "String", "description": "Escaped string."}, "description": "Returns a copy of the specified string with special regular expression\ncharacters escaped, allowing the string to be used safely inside a regex.\nThe following characters, and all whitespace characters, are escaped:\n- # $ ^ * ( ) + [ ] { } | \\ , . ?\nIf _string_ is not already a string, it will be coerced to a string.", "param": "{String} string String to escape.", "static": "", "guessedname": "regex", "guessedtype": "function", "params": [{"type": "String", "name": "string", "description": " String to escape."}]}, "html": {"return": {"type": "String", "description": "Escaped string."}, "description": "Returns a copy of the specified string with special HTML characters\nescaped. The following characters will be converted to their\ncorresponding character entities:\n& < > \" ' / `\nThis implementation is based on the [OWASP HTML escaping\nrecommendations][1]. In addition to the characters in the OWASP\nrecommendations, we also escape the <code>&#x60;</code> character, since IE\ninterprets it as an attribute delimiter.\nIf _string_ is not already a string, it will be coerced to a string.\n[1]: http://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet", "static": "", "guessedname": "html", "guessedtype": "function", "params": [{"type": "String", "name": "string", "description": " String to escape."}]}, "_htmlReplacer": {"description": "Regex replacer for HTML escaping.", "param": "{String} match Matched character (must exist in HTML_CHARS).", "returns": "{String} HTML entity.", "protected": "", "static": "", "guessedname": "_htmlReplacer", "guessedtype": "function", "params": [{"type": "String", "name": "match", "description": " Matched character (must exist in HTML_CHARS)."}]}}, "static": "", "file": "escape-debug.js", "guessedtype": "property", "shortname": "Escape", "description": "Provides utility methods for escaping strings."}, "Lines": {"name": "Lines", "constructors": [{"description": "Utility class used for drawing lines."}], "namespace": "", "module": "charts", "methods": {"drawSpline": {"protected": "", "description": "Connects data points with a consistent curve for a series.", "guessedname": "drawSpline", "guessedtype": "function"}, "drawDashedLine": {"description": "Draws a dashed line between two points.", "param": "{Number} xStart\tThe x position of the start of the line", "params": [{"type": "Number", "name": "xStart", "description": "\tThe x position of the start of the line"}, {"type": "Number", "name": "yStart", "description": "\tThe y position of the start of the line"}, {"type": "Number", "name": "xEnd", "description": "\t\tThe x position of the end of the line"}, {"type": "Number", "name": "yEnd", "description": "\t\tThe y position of the end of the line"}, {"type": "Number", "name": "dashSize", "description": "\tthe size of dashes, in pixels"}, {"type": "Number", "name": "gapSize", "description": "\tthe size of gaps between dashes, in pixels"}], "private": "", "guessedname": "drawDashedLine", "guessedtype": "function"}, "_getGraphic": {"guessedname": "_getGraphic", "return": {"type": "", "description": "Graphic"}, "description": "Creates a graphic in which to draw a series.", "private": "", "guessedtype": "function"}, "_getLineDefaults": {"protected": "", "return": {"type": "", "description": "Object"}, "description": "Default values for `styles` attribute.", "guessedname": "_getLineDefaults", "guessedtype": "function"}, "drawLines": {"protected": "", "description": "Draws lines for the series.", "guessedname": "drawLines", "guessedtype": "function"}, "_toggleVisible": {"description": "Toggles visibility", "param": "{Boolean} visible indicates visibilitye", "params": [{"type": "Boolean", "name": "visible", "description": " indicates visibilitye"}], "private": "", "guessedname": "_toggleVisible", "guessedtype": "function"}}, "file": "charts.js", "shortname": "Lines", "properties": {"_lineDefaults": {"type": "Object", "private": "", "guessedname": "_lineDefaults", "guessedtype": "property"}}, "description": "Utility class used for drawing lines."}, "DataType.String": {"name": "DataType.String", "namespace": "", "module": "aui-datatype", "guessedname": "DS", "methods": {"evaluate": {"return": {"type": "boolean | null | number | String | undefined", "description": "Parsed value"}, "description": "Evaluates a string to a primitive value (if possible). Supports\n<code>true</code> and <code>false</code> also. Unrecognized strings are\nreturned without any modification.", "param": "{*} data Input data to be evaluated.", "params": [{"type": "*", "name": "data", "description": " Input data to be evaluated."}], "guessedname": "evaluate", "guessedtype": "function"}}, "static": "", "file": "aui-datatype.js", "guessedtype": "property", "shortname": "DataType.String", "description": "DataType.String provides a set of utility to provides a simple function\nthat evaluates a string to a primitive value (if possible). Supports\n<code>true</code> and <code>false</code> also."}, "DataSchema.Text": {"name": "DataSchema.Text", "namespace": "", "module": "dataschema", "guessedname": "Lang", "methods": {"apply": {"return": {"type": "Object", "description": "An Object with properties `results` and `meta`"}, "description": "Applies a schema to a string of delimited data, returning a normalized\nobject with results in the `results` property. The `meta` property of\nthe response object is present for consistency, but is assigned an\nempty object.  If the input data is absent or not a string, an `error`\nproperty will be added.\nUse _schema.resultDelimiter_ and _schema.fieldDelimiter_ to instruct\n`apply` how to split up the string into an array of data arrays for\nprocessing.\nUse _schema.resultFields_ to specify the keys in the generated result\nobjects in `response.results`. The key:value pairs will be assigned\nin the order of the _schema.resultFields_ array, assuming the values\nin the data records are defined in the same order.\n_schema.resultFields_ field identifiers are objects with the following\nproperties:\n`key`   : <strong>(required)</strong> The property name you want\nthe data value assigned to in the result object (String)\n`parser`: A function or the name of a function on `Y.Parsers` used\nto convert the input value into a normalized type.  Parser\nfunctions are passed the value as input and are expected to\nreturn a value.\nIf no value parsing is needed, you can use just the desired property\nname string as the field identifier instead of an object (see example\nbelow).", "param": "{Object} schema Schema to apply.  Supported configuration\nproperties are:", "static": "", "guessedname": "apply", "guessedtype": "function", "params": [{"type": "Object", "name": "schema", "description": " Schema to apply.  Supported configuration\nproperties are:"}, {"type": "String", "name": "schema.resultDelimiter", "description": " Character or character\nsequence that marks the end of one record and the start of\nanother."}, {"type": "String", "name": "[schema.fieldDelimiter]", "description": " Character or character\nsequence that marks the end of a field and the start of\nanother within the same record."}, {"type": "Array", "name": "[schema.resultFields]", "description": " Field identifiers to\nassign values in the response records. See above for details."}, {"type": "String", "name": "data", "description": " Text data."}], "example": "// Process simple csv\nvar schema = {\nresultDelimiter: \"\\n\",\nfieldDelimiter: \",\",\nresultFields: [ 'fruit', 'color' ]\n},\ndata = \"Banana,yellow\\nOrange,orange\\nEggplant,purple\";\nvar response = Y.DataSchema.Text.apply(schema, data);\n// response.results[0] is { fruit: \"Banana\", color: \"yellow\" }\n// Use parsers\nschema.resultFields = [\n{\nkey: 'fruit',\nparser: function (val) { return val.toUpperCase(); }\n},\n'color' // mix and match objects and strings\n];\nresponse = Y.DataSchema.Text.apply(schema, data);\n// response.results[0] is { fruit: \"BANANA\", color: \"yellow\" }"}, "_parseResults": {"return": {"type": "Object", "description": "Parsed data object."}, "description": "Schema-parsed list of results from full data", "param": "schema {Array} Schema to parse against.", "protected": "", "static": "", "guessedname": "_parseResults", "guessedtype": "function", "params": [{"type": "Array", "name": "schema", "description": "  Schema to parse against."}, {"type": "String", "name": "text_in", "description": "  Text to parse."}, {"type": "Object", "name": "data_out", "description": "  In-progress parsed data to update."}]}}, "static": "", "superclass": "DataSchema.Base", "file": "dataschema-text.js", "guessedtype": "property", "extends": "DataSchema.Base", "shortname": "DataSchema.Text", "description": "Provides a DataSchema implementation which can be used to work with\ndelimited text data.\nSee the `apply` method for usage."}, "EventTarget": {"name": "EventTarget", "namespace": "", "module": "event-custom", "guessedname": "L", "methods": {"on": {"return": {"type": "", "description": "the event target or a detach handle per 'chain' config"}, "description": "Subscribe to a custom event hosted by this object", "param": "type    {string}   The type of the event", "params": [{"type": "string", "name": "type", "description": "       The type of the event"}, {"type": "Function", "name": "fn", "description": "  The callback"}, {"type": "object", "name": "context", "description": "  optional execution context."}, {"type": "mixed", "name": "arg*", "description": "  0..n additional arguments to supply to the subscriber"}], "guessedname": "on", "guessedtype": "function"}, "addTarget": {"param": "o {EventTarget} the target to add", "params": [{"type": "EventTarget", "name": "o", "description": "  the target to add"}], "description": "Registers another EventTarget as a bubble target.  Bubble order\nis determined by the order registered.  Multiple targets can\nbe specified.\nEvents can only bubble if emitFacade is true.\nIncluded in the event-custom-complex submodule.", "guessedname": "addTarget", "guessedtype": "function"}, "parseType": {"return": {"type": "Array", "description": "an array containing:\nthe detach category, if supplied,\nthe prefixed event type,\nwhether or not this is an after listener,\nthe supplied event type"}, "description": "Takes the type parameter passed to 'on' and parses out the\nvarious pieces that could be included in the type.  If the\nevent type is passed without a prefix, it will be expanded\nto include the prefix one is supplied or the event target\nis configured with a default prefix.", "since": "3.3.0", "param": "{string} type the type", "params": [{"type": "string", "name": "type", "description": " the type"}, {"type": "string", "name": "[pre=this._yuievt.config.prefix]", "description": " the prefix"}], "guessedname": "parseType", "guessedtype": "function"}, "_getType": {"private": "", "description": "If the instance has a prefix attribute and the\nevent type is not prefixed, the instance prefix is\napplied to the supplied type.", "guessedname": "_getType", "guessedtype": "function"}, "removeTarget": {"param": "o {EventTarget} the target to remove", "params": [{"type": "EventTarget", "name": "o", "description": "  the target to remove"}], "description": "Removes a bubble target", "guessedname": "removeTarget", "guessedtype": "function"}, "fire": {"return": {"type": "EventTarget", "description": "the event host"}, "description": "Fire a custom event by name.  The callback functions will be executed\nfrom the context specified when the event was created, and with the\nfollowing parameters.\nIf the custom event object hasn't been created, then the event hasn't\nbeen published and it has no subscribers.  For performance sake, we\nimmediate exit in this case.  This means the event won't bubble, so\nif the intention is that a bubble target be notified, the event must\nbe published on this object first.\nThe first argument is the event type, and any additional arguments are\npassed to the listeners as parameters.  If the first of these is an\nobject literal, and the event is configured to emit an event facade,\nthat object is mixed into the event facade and the facade is provided\nin place of the original object.", "param": "type {String|Object} The type of the event, or an object that contains\na 'type' property.", "params": [{"type": "String|Object", "name": "type", "description": "  The type of the event, or an object that contains\na 'type' property."}, {"type": "Object*", "name": "arguments", "description": "  an arbitrary set of parameters to pass to\nthe handler.  If the first of these is an object literal and the event is\nconfigured to emit an event facade, the event facade will replace that\nparameter after the properties the object literal contains are copied to\nthe event facade."}], "guessedname": "fire", "guessedtype": "function"}, "unsubscribeAll": {"description": "Removes all listeners from the specified event.  If the event type\nis not specified, all listeners from all hosted custom events will\nbe removed.", "deprecated": "use detachAll", "param": "type {string}   The type, or name of the event", "params": [{"type": "string", "name": "type", "description": "    The type, or name of the event"}], "guessedname": "unsubscribeAll", "guessedtype": "function"}, "after": {"return": {"type": "", "description": "the event target or a detach handle per 'chain' config"}, "description": "Subscribe to a custom event hosted by this object.  The\nsupplied callback will execute after any listeners add\nvia the subscribe method, and after the default function,\nif configured for the event, has executed.", "param": "type    {string}   The type of the event", "params": [{"type": "string", "name": "type", "description": "       The type of the event"}, {"type": "Function", "name": "fn", "description": "  The callback"}, {"type": "object", "name": "context", "description": "  optional execution context."}, {"type": "mixed", "name": "arg*", "description": "  0..n additional arguments to supply to the subscriber"}], "guessedname": "after", "guessedtype": "function"}, "getTargets": {"return": {"type": "", "description": "EventTarget[]"}, "description": "Returns an array of bubble targets for this object.", "guessedname": "getTargets", "guessedtype": "function"}, "onceAfter": {"return": {"type": "", "description": "the event target or a detach handle per 'chain' config"}, "description": "Listen to a custom event hosted by this object one time.\nThis is the equivalent to <code>after</code> except the\nlistener is immediatelly detached when it is executed.", "param": "type    {string}   The type of the event", "params": [{"type": "string", "name": "type", "description": "       The type of the event"}, {"type": "Function", "name": "fn", "description": "  The callback"}, {"type": "object", "name": "context", "description": "  optional execution context."}, {"type": "mixed", "name": "arg*", "description": "  0..n additional arguments to supply to the subscriber"}], "guessedname": "onceAfter", "guessedtype": "function"}, "detachAll": {"param": "type {string}   The type, or name of the event", "params": [{"type": "string", "name": "type", "description": "    The type, or name of the event"}], "description": "Removes all listeners from the specified event.  If the event type\nis not specified, all listeners from all hosted custom events will\nbe removed.", "guessedname": "detachAll", "guessedtype": "function"}, "subscribe": {"deprecated": "use on", "description": "subscribe to an event", "guessedname": "subscribe", "guessedtype": "function"}, "_monitor": {"description": "This is the entry point for the event monitoring system.\nYou can monitor 'attach', 'detach', 'fire', and 'publish'.\nWhen configured, these events generate an event.  click ->\nclick_attach, click_detach, click_publish -- these can\nbe subscribed to like other events to monitor the event\nsystem.  Inividual published events can have monitoring\nturned on or off (publish can't be turned off before it\nit published) by setting the events 'monitor' config.", "param": "what {String} 'attach', 'detach', 'fire', or 'publish'", "params": [{"type": "String", "name": "what", "description": "  'attach', 'detach', 'fire', or 'publish'"}, {"type": "String", "name": "type", "description": "  Name of the event being monitored"}, {"type": "Object", "name": "o", "description": "  Information about the event interaction, such as\nfire() args, subscription category, publish config"}], "private": "", "guessedname": "_monitor", "guessedtype": "function"}, "unsubscribe": {"deprecated": "use detach", "description": "detach a listener", "guessedname": "unsubscribe", "guessedtype": "function"}, "publish": {"return": {"type": "CustomEvent", "description": "the custom event"}, "description": "Creates a new custom event of the specified type.  If a custom event\nby that name already exists, it will not be re-created.  In either\ncase the custom event is returned.", "param": "type {string} the type, or name of the event", "params": [{"type": "string", "name": "type", "description": "  the type, or name of the event"}, {"type": "object", "name": "opts", "description": "  optional config params.  Valid properties are:\n<ul>\n<li>\n'broadcast': whether or not the YUI instance and YUI global are notified when the event is fired (false)\n</li>\n<li>\n'bubbles': whether or not this event bubbles (true)\nEvents can only bubble if emitFacade is true.\n</li>\n<li>\n'context': the default execution context for the listeners (this)\n</li>\n<li>\n'defaultFn': the default function to execute when this event fires if preventDefault was not called\n</li>\n<li>\n'emitFacade': whether or not this event emits a facade (false)\n</li>\n<li>\n'prefix': the prefix for this targets events, e.g., 'menu' in 'menu:click'\n</li>\n<li>\n'fireOnce': if an event is configured to fire once, new subscribers after\nthe fire will be notified immediately.\n</li>\n<li>\n'async': fireOnce event listeners will fire synchronously if the event has already\nfired unless async is true.\n</li>\n<li>\n'preventable': whether or not preventDefault() has an effect (true)\n</li>\n<li>\n'preventedFn': a function that is executed when preventDefault is called\n</li>\n<li>\n'queuable': whether or not this event can be queued during bubbling (false)\n</li>\n<li>\n'silent': if silent is true, debug messages are not provided for this event.\n</li>\n<li>\n'stoppedFn': a function that is executed when stopPropagation is called\n</li>\n<li>\n'monitored': specifies whether or not this event should send notifications about\nwhen the event has been attached, detached, or published.\n</li>\n<li>\n'type': the event type (valid option if not provided as the first parameter to publish)\n</li>\n</ul>"}], "guessedname": "publish", "guessedtype": "function"}, "before": {"return": {"type": "", "description": "detach handle"}, "description": "Executes the callback before a DOM event, custom event\nor method.  If the first argument is a function, it\nis assumed the target is a method.  For DOM and custom\nevents, this is an alias for Y.on.\nFor DOM and custom events:\ntype, callback, context, 0-n arguments\nFor methods:\ncallback, object (method host), methodName, context, 0-n arguments", "guessedname": "before", "guessedtype": "function"}, "getEvent": {"return": {"type": "CustomEvent", "description": "the custom event or null"}, "description": "Returns the custom event of the provided type has been created, a\nfalsy value otherwise", "param": "type {string} the type, or name of the event", "params": [{"type": "string", "name": "type", "description": "  the type, or name of the event"}, {"type": "string", "name": "prefixed", "description": "  if true, the type is prefixed already"}], "guessedname": "getEvent", "guessedtype": "function"}, "detach": {"return": {"type": "EventTarget", "description": "the host"}, "description": "Detach one or more listeners the from the specified event", "param": "type {string|Object}   Either the handle to the subscriber or the\ntype of event.  If the type\nis not specified, it will attempt to remove\nthe listener from all hosted events.", "params": [{"type": "string|Object", "name": "type", "description": "    Either the handle to the subscriber or the\ntype of event.  If the type\nis not specified, it will attempt to remove\nthe listener from all hosted events."}, {"type": "Function", "name": "fn", "description": "    The subscribed function to unsubscribe, if not\nsupplied, all subscribers will be removed."}, {"type": "Object", "name": "context", "description": "     The custom object passed to subscribe.  This is\noptional, but if supplied will be used to\ndisambiguate multiple listeners that are the same\n(e.g., you subscribe many object using a function\nthat lives on the prototype)"}], "guessedname": "detach", "guessedtype": "function"}, "bubble": {"return": {"type": "boolean", "description": "the aggregated return value from Event.Custom.fire"}, "description": "Propagate an event.  Requires the event-custom-complex module.", "param": "evt {CustomEvent} the custom event to propagate", "params": [{"type": "CustomEvent", "name": "evt", "description": "  the custom event to propagate"}], "guessedname": "bubble", "guessedtype": "function"}, "_parseType": {"private": "", "description": "Returns an array with the detach key (if provided),\nand the prefixed event name from _getType\nY.on('detachcategory| menu:click', fn)", "guessedname": "_parseType", "guessedtype": "function"}, "once": {"return": {"type": "", "description": "the event target or a detach handle per 'chain' config"}, "description": "Listen to a custom event hosted by this object one time.\nThis is the equivalent to <code>on</code> except the\nlistener is immediatelly detached when it is executed.", "param": "type    {string}   The type of the event", "params": [{"type": "string", "name": "type", "description": "       The type of the event"}, {"type": "Function", "name": "fn", "description": "  The callback"}, {"type": "object", "name": "context", "description": "  optional execution context."}, {"type": "mixed", "name": "arg*", "description": "  0..n additional arguments to supply to the subscriber"}], "guessedname": "once", "guessedtype": "function"}}, "param": "opts a configuration object", "file": "event-custom-base.js", "guessedtype": "property", "shortname": "EventTarget", "config": "emitFacade {boolean} if true, all events will emit event\nfacade payloads by default (default false)", "description": "EventTarget provides the implementation for any object to\npublish, subscribe and fire to custom events, and also\nalows other EventTargets to target the object with events\nsourced from the other object.\nEventTarget is designed to be used with Y.augment to wrap\nEventCustom in an interface that allows events to be listened to\nand fired by name.  This makes it possible for implementing code to\nsubscribe to an event that either has not been created yet, or will\nnot be created at all."}, "SVGPieSlice": {"name": "SVGPieSlice", "configs": {"arc": {"type": "Number", "description": "Arc of the slice.", "guessedname": "arc", "guessedtype": "property"}, "radius": {"type": "Number", "description": "Radius of the circle in which the pie slice is drawn", "guessedname": "radius", "guessedtype": "property"}, "startAngle": {"type": "Number", "description": "Starting angle in relation to a circle in which to begin the pie slice drawing.", "guessedname": "startAngle", "guessedtype": "property"}}, "constructors": [{"description": "Draws pie slices"}], "namespace": "", "module": "graphics", "guessedname": "SVGPieSlice", "methods": {"_updateHandler": {"private": "", "description": "Change event listener", "guessedname": "_draw", "guessedtype": "function"}}, "file": "graphics-svg-debug.js", "guessedtype": "function", "shortname": "SVGPieSlice", "properties": {"_type": {"guessedname": "_type", "type": "String", "description": "Indicates the type of shape", "private": "", "guessedtype": "property"}}, "description": "Draws pie slices"}, "RecordsetSort": {"name": "RecordsetSort", "namespace": "", "module": "recordset", "events": {"defaultSorterChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "defaultSorterChange", "description": "Fires when the value for the configuration attribute 'defaultSorter' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "lastSortPropertiesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "lastSortPropertiesChange", "description": "Fires when the value for the configuration attribute 'lastSortProperties' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "methods": {"sort": {"description": "Sorts the recordset.", "param": "field {string} A key to sort by.", "params": [{"type": "string", "name": "field", "description": "  A key to sort by."}, {"type": "boolean", "name": "desc", "description": "  True if you want sort order to be descending, false if you want sort order to be ascending"}], "guessedname": "sort", "guessedtype": "function", "public": ""}, "reverse": {"description": "Reverses the recordset calling the standard array.reverse() method.", "public": "", "guessedname": "reverse", "guessedtype": "function"}, "_defSortFn": {"private": "", "description": "Method that all sort calls go through. \nSets up the lastSortProperties object with the details of the sort, and passes in parameters \nto the \"defaultSorter\" or a custom specified sort function.", "guessedname": "_defSortFn", "guessedtype": "function"}, "flip": {"description": "Sorts the recordset based on the last-used sort parameters, but flips the order. (ie: Descending becomes ascending, and vice versa).", "public": "", "guessedname": "flip", "guessedtype": "function"}, "initializer": {"protected": "", "description": "Sets up the default function to use when the \"sort\" event is fired.", "guessedname": "initializer", "guessedtype": "function"}, "resort": {"description": "Resorts the recordset based on the last-used sort parameters (stored in 'lastSortProperties' ATTR)", "public": "", "guessedname": "resort", "guessedtype": "function"}}, "file": "recordset-sort.js", "shortname": "RecordsetSort", "configs": {"lastSortProperties": {"public": "", "type": "object", "description": "The last properties used to sort. Consists of an object literal with the keys \"field\", \"desc\", and \"sorter\"", "guessedname": "lastSortProperties", "guessedtype": "property"}, "defaultSorter": {"public": "", "type": "function", "description": "Default sort function to use if none is specified by the user.\nTakes two records, the key to sort by, and whether sorting direction is descending or not (boolean).\nIf two records have the same value for a given key, the ID is used as the tie-breaker.", "guessedname": "defaultSorter", "guessedtype": "property"}}, "description": "Plugin that adds default and custom sorting functionality to the Recordset utility"}, "WidgetStdMod": {"name": "WidgetStdMod", "namespace": "", "module": "widget-stdmod", "events": {"headerContentChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "headerContentChange", "description": "Fires when the value for the configuration attribute 'headerContent' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "bodyContentChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "bodyContentChange", "description": "Fires when the value for the configuration attribute 'bodyContent' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "fillHeightChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "fillHeightChange", "description": "Fires when the value for the configuration attribute 'fillHeight' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "footerContentChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "footerContentChange", "description": "Fires when the value for the configuration attribute 'footerContent' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "configs": {"bodyContent": {"default": "undefined", "type": "{String | Node}", "description": "The content to be added to the body section. This will replace any existing content\nin the body. If you want to append, or insert new content, use the <a href=\"#method_setStdModContent\">setStdModContent</a> method.", "guessedname": "bodyContent", "guessedtype": "property"}, "footerContent": {"default": "undefined", "type": "{String | Node}", "description": "The content to be added to the footer section. This will replace any existing content\nin the footer. If you want to append, or insert new content, use the <a href=\"#method_setStdModContent\">setStdModContent</a> method.", "guessedname": "footerContent", "guessedtype": "property"}, "fillHeight": {"default": "WidgetStdMod.BODY", "type": "{String}", "description": "The section (WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER) which should be resized to fill the height of the standard module, when a \nheight is set on the Widget. If a height is not set on the widget, then all sections are sized based on \ntheir content.", "guessedname": "fillHeight", "guessedtype": "property"}, "headerContent": {"default": "undefined", "type": "{String | Node}", "description": "The content to be added to the header section. This will replace any existing content\nin the header. If you want to append, or insert new content, use the <a href=\"#method_setStdModContent\">setStdModContent</a> method.", "guessedname": "headerContent", "guessedtype": "property"}}, "methods": {"_syncUIStdMod": {"protected": "", "description": "Synchronizes the UI to match the Widgets standard module state.\n<p>\nThis method is invoked after syncUI is invoked for the Widget class\nusing YUI's aop infrastructure.\n</p>", "guessedname": "_syncUIStdMod", "guessedtype": "function"}, "_afterHeaderChange": {"description": "Default attribute change listener for the headerContent attribute, responsible\nfor updating the UI, in response to attribute changes.", "param": "{EventFacade} e The event facade for the attribute change", "protected": "", "params": [{"type": "EventFacade", "name": "e", "description": " The event facade for the attribute change"}], "guessedname": "_afterHeaderChange", "guessedtype": "function"}, "_findStdModSection": {"return": {"type": "Node", "description": "The rendered node for the given section, or null if not found."}, "description": "Helper method to to find the rendered node for the given section,\nif it exists.", "private": "", "params": [{"type": "String", "name": "section", "description": " The section for which the render Node is to be found. Either WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER."}], "param": "{String} section The section for which the render Node is to be found. Either WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER.", "guessedname": "_findStdModSection", "guessedtype": "function"}, "_afterFooterChange": {"description": "Default attribute change listener for the footerContent attribute, responsible\nfor updating the UI, in response to attribute changes.", "param": "{EventFacade} e The event facade for the attribute change", "protected": "", "params": [{"type": "EventFacade", "name": "e", "description": " The event facade for the attribute change"}], "guessedname": "_afterFooterChange", "guessedtype": "function"}, "_uiSetStdMod": {"description": "Updates the rendered UI, adding the provided content (either an HTML string, or node reference),\nto the specified section. The content is either added before, after or replaces existing content\nin the section, based on the value of the <code>where</code> argument.", "param": "{String} section The section to be updated. Either WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER.", "protected": "", "params": [{"type": "String", "name": "section", "description": " The section to be updated. Either WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER."}, {"type": "String | Node", "name": "content", "description": " The new content (either as an HTML string, or Node reference) to add to the section"}, {"type": "String", "name": "where", "description": " Optional. Either WidgetStdMod.AFTER, WidgetStdMod.BEFORE or WidgetStdMod.REPLACE.\nIf not provided, the content will replace existing content in the section."}], "guessedname": "_uiSetStdMod", "guessedtype": "function"}, "setStdModContent": {"param": "{String} section The standard module section whose content is to be updated. Either WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER.", "params": [{"type": "String", "name": "section", "description": " The standard module section whose content is to be updated. Either WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER."}, {"type": "String | Node", "name": "content", "description": " The content to be added, either an HTML string or a Node reference."}, {"type": "String", "name": "where", "description": " Optional. Either WidgetStdMod.AFTER, WidgetStdMod.BEFORE or WidgetStdMod.REPLACE.\nIf not provided, the content will replace existing content in the section."}], "description": "Updates the body section of the standard module with the content provided (either an HTML string, or node reference).\n<p>\nThis method can be used instead of the corresponding section content attribute if you'd like to retain the current content of the section,\nand insert content before or after it, by specifying the <code>where</code> argument.\n</p>", "guessedname": "setStdModContent", "guessedtype": "function"}, "_insertStdModSection": {"description": "Helper method to insert the Node for the given section into the correct location in the contentBox.", "param": "{Node} contentBox A reference to the Widgets content box.", "params": [{"type": "Node", "name": "contentBox", "description": " A reference to the Widgets content box."}, {"type": "String", "name": "section", "description": " The section to create/render. Either WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER."}, {"type": "Node", "name": "sectionNode", "description": " The Node for the section."}], "private": "", "guessedname": "_insertStdModSection", "guessedtype": "function"}, "_getPreciseHeight": {"return": {"type": "Number", "description": "The height of the Node including borders and padding, possibly a float."}, "description": "Helper method to obtain the precise height of the node provided, including padding and border.\nThe height could be a sub-pixel value for certain browsers, such as Firefox 3.", "private": "", "params": [{"type": "Node", "name": "node", "description": " The node for which the precise height is required."}], "param": "{Node} node The node for which the precise height is required.", "guessedname": "_getPreciseHeight", "guessedtype": "function"}, "_addStdModContent": {"description": "Helper method to add content to a StdMod section node.\nThe content is added either before, after or replaces the existing node content \nbased on the value of the <code>where</code> argument.", "param": "{Node} node The section Node to be updated.", "params": [{"type": "Node", "name": "node", "description": " The section Node to be updated."}, {"type": "Node|NodeList|String", "name": "children", "description": " The new content Node, NodeList or String to be added to section Node provided."}, {"type": "String", "name": "where", "description": " Optional. Either WidgetStdMod.AFTER, WidgetStdMod.BEFORE or WidgetStdMod.REPLACE.\nIf not provided, the content will replace existing content in the Node."}], "private": "", "guessedname": "_addStdModContent", "guessedtype": "function"}, "_eraseStdMod": {"description": "Removes the DOM node for the given section.", "param": "{String} section The section to remove. Either WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER.", "protected": "", "params": [{"type": "String", "name": "section", "description": " The section to remove. Either WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER."}], "guessedname": "_eraseStdMod", "guessedtype": "function"}, "fillHeight": {"param": "{Node} node The node which should be resized to fill out the height\nof the Widget bounding box. Should be a standard module section node which belongs\nto the widget.", "params": [{"type": "Node", "name": "node", "description": " The node which should be resized to fill out the height\nof the Widget bounding box. Should be a standard module section node which belongs\nto the widget."}], "description": "Sets the height on the provided header, body or footer element to \nfill out the height of the Widget. It determines the height of the \nwidgets bounding box, based on it's configured height value, and \nsets the height of the provided section to fill out any \nspace remaining after the other standard module section heights \nhave been accounted for.\n<p><strong>NOTE:</strong> This method is not designed to work if an explicit \nheight has not been set on the Widget, since for an \"auto\" height Widget, \nthe heights of the header/body/footer will drive the height of the Widget.</p>", "guessedname": "fillHeight", "guessedtype": "function"}, "_getStdModTemplate": {"return": {"type": "Node", "description": "The new Node instance for the section"}, "description": "Gets a new Node reference for the given standard module section, by cloning\nthe stored template node.", "param": "{String} section The section to create a new node for. Either WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER.", "protected": "", "params": [{"type": "String", "name": "section", "description": " The section to create a new node for. Either WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER."}], "guessedname": "_getStdModTemplate", "guessedtype": "function"}, "getStdModNode": {"return": {"type": "Node", "description": "The node reference for the section, or null if not set."}, "description": "Returns the node reference for the given section. Note: The DOM is not queried for the node reference. The reference\nstored by the widget instance is returned if set.", "param": "{String} section The section whose node reference is required. Either WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER.", "params": [{"type": "String", "name": "section", "description": " The section whose node reference is required. Either WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER."}], "guessedname": "getStdModNode", "guessedtype": "function"}, "_applyStdModParsedConfig": {"private": "", "description": "This method is injected before the _applyParsedConfig step in \nthe application of HTML_PARSER, and sets up the state to \nidentify whether or not we should remove the current DOM content\nor not, based on whether or not the current content attribute value\nwas extracted from the DOM, or provided by the user configuration", "guessedname": "_applyStdModParsedConfig", "guessedtype": "function"}, "_parseStdModHTML": {"return": {"type": "String", "description": "Inner HTML string with the contents of the section"}, "description": "Utility method, used by WidgetStdMods HTML_PARSER implementation\nto extract data for each section from markup.", "private": "", "params": [{"type": "String", "name": "section", "description": ""}], "param": "{String} section", "guessedname": "_parseStdModHTML", "guessedtype": "function"}, "_renderStdMod": {"return": {"type": "Node", "description": "A reference to the added section node"}, "description": "Creates the DOM node for the given section, and inserts it into the correct location in the contentBox.", "param": "{String} section The section to create/render. Either WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER.", "protected": "", "params": [{"type": "String", "name": "section", "description": " The section to create/render. Either WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER."}], "guessedname": "_renderStdMod", "guessedtype": "function"}, "_bindUIStdMod": {"protected": "", "description": "Binds event listeners responsible for updating the UI state in response to \nWidget standard module related state changes.\n<p>\nThis method is invoked after bindUI is invoked for the Widget class\nusing YUI's aop infrastructure.\n</p>", "guessedname": "_bindUIStdMod", "guessedtype": "function"}, "_fillHeight": {"private": "", "description": "Updates the rendered UI, to resize the current section specified by the fillHeight attribute, so\nthat the standard module fills out the Widget height. If a height has not been set on Widget,\nthe section is not resized (height is set to \"auto\").", "guessedname": "_fillHeight", "guessedtype": "function"}, "_renderUIStdMod": {"protected": "", "description": "Creates/Initializes the DOM for standard module support.\n<p>\nThis method is invoked after renderUI is invoked for the Widget class\nusing YUI's aop infrastructure.\n</p>", "guessedname": "_renderUIStdMod", "guessedtype": "function"}, "_uiSetFillHeight": {"description": "Updates the rendered UI, to resize the provided section so that the standard module fills out \nthe specified widget height. Note: This method does not check whether or not a height is set \non the Widget.", "param": "{String} fillSection A valid section specifier - one of WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER", "protected": "", "params": [{"type": "String", "name": "fillSection", "description": " A valid section specifier - one of WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER"}], "guessedname": "_uiSetFillHeight", "guessedtype": "function"}, "_validateFillHeight": {"return": {"type": "", "description": "true if valid, false if not"}, "description": "Default validator for the fillHeight attribute. Verifies that the \nvalue set is a valid section specifier - one of WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER,\nor a falsey value if fillHeight is to be disabled.", "param": "{String} val The section which should be setup to fill height, or false/null to disable fillHeight", "protected": "", "params": [{"type": "String", "name": "val", "description": " The section which should be setup to fill height, or false/null to disable fillHeight"}], "guessedname": "_validateFillHeight", "guessedtype": "function"}, "_afterBodyChange": {"description": "Default attribute change listener for the bodyContent attribute, responsible\nfor updating the UI, in response to attribute changes.", "param": "{EventFacade} e The event facade for the attribute change", "protected": "", "params": [{"type": "EventFacade", "name": "e", "description": " The event facade for the attribute change"}], "guessedname": "_afterBodyChange", "guessedtype": "function"}, "_afterFillHeightChange": {"description": "Default attribute change listener for the fillHeight attribute, responsible\nfor updating the UI, in response to attribute changes.", "param": "{EventFacade} e The event facade for the attribute change", "protected": "", "params": [{"type": "EventFacade", "name": "e", "description": " The event facade for the attribute change"}], "guessedname": "_afterFillHeightChange", "guessedtype": "function"}, "_getStdModContent": {"return": {"type": "Node", "description": "The child node collection of the standard module section."}, "description": "Retrieves the child nodes (content) of a standard module section", "private": "", "params": [{"type": "String", "name": "section", "description": " The standard module section whose child nodes are to be retrieved. Either WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER."}], "param": "{String} section The standard module section whose child nodes are to be retrieved. Either WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER.", "guessedname": "_getStdModContent", "guessedtype": "function"}}, "param": "{Object} The user configuration object", "file": "widget-stdmod.js", "shortname": "WidgetStdMod", "properties": {"BODY": {"type": "String", "static": "", "description": "Constant used to refer the the standard module body, in methods which expect a section specifier", "guessedname": "BODY", "guessedtype": "property"}, "TEMPLATES": {"type": "Object", "static": "", "description": "The template HTML strings for each of the standard module sections. Section entries are keyed by the section constants,\nWidgetStdMod.HEADER, WidgetStdMod.BODY, WidgetStdMod.FOOTER, and contain the HTML to be added for each section.\ne.g.\n<pre>\n{\nheader : '&lt;div class=\"yui-widget-hd\"&gt;&lt;/div&gt;',\nbody : '&lt;div class=\"yui-widget-bd\"&gt;&lt;/div&gt;',\nfooter : '&lt;div class=\"yui-widget-ft\"&gt;&lt;/div&gt;'\n}\n</pre>", "guessedname": "TEMPLATES", "guessedtype": "property"}, "FOOTER": {"type": "String", "static": "", "description": "Constant used to refer the the standard module footer, in methods which expect a section specifier", "guessedname": "FOOTER", "guessedtype": "property"}, "AFTER": {"type": "String", "static": "", "description": "Constant used to specify insertion position, when adding content to sections of the standard module in \nmethods which expect a \"where\" argument.\n<p>\nInserts new content <em>before</em> the sections existing content.\n</p>", "guessedname": "AFTER", "guessedtype": "property"}, "SECTION_CLASS_NAMES": {"type": "Object", "static": "", "description": "Static hash of default class names used for the header,\nbody and footer sections of the standard module, keyed by\nthe section identifier (WidgetStdMod.STD_HEADER, WidgetStdMod.STD_BODY, WidgetStdMod.STD_FOOTER)", "guessedname": "SECTION_CLASS_NAMES", "guessedtype": "property"}, "REPLACE": {"type": "String", "static": "", "description": "Constant used to specify insertion position, when adding content to sections of the standard module in\nmethods which expect a \"where\" argument.\n<p>\n<em>Replaces</em> the sections existing content, with new content.\n</p>", "guessedname": "REPLACE", "guessedtype": "property"}, "HEADER": {"type": "String", "static": "", "description": "Constant used to refer the the standard module header, in methods which expect a section specifier", "guessedname": "HEADER", "guessedtype": "property"}, "ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute \nconfiguration introduced by WidgetStdMod.", "guessedname": "ATTRS", "guessedtype": "property"}, "HTML_PARSER": {"type": "Object", "static": "", "description": "The HTML parsing rules for the WidgetStdMod class.", "guessedname": "HTML_PARSER", "guessedtype": "property"}, "BEFORE": {"type": "String", "static": "", "description": "Constant used to specify insertion position, when adding content to sections of the standard module in\nmethods which expect a \"where\" argument.\n<p>\nInserts new content <em>before</em> the sections existing content.\n</p>", "guessedname": "BEFORE", "guessedtype": "property"}}, "description": "Widget extension, which can be used to add Standard Module support to the \nbase Widget class, through the <a href=\"Base.html#method_build\">Base.build</a> \nmethod.\n<p>\nThe extension adds header, body and footer sections to the Widget's content box and \nprovides the corresponding methods and attributes to modify the contents of these sections.\n</p>"}, "IO": {"methods": {"_concat": {"return": {"type": "Number", "description": ""}, "description": "Method that concatenates string data for HTTP GET transactions.", "private": "", "params": [{"type": "String", "name": "s", "description": " - URI or root data."}, {"type": "String", "name": "d", "description": " - data to be concatenated onto URI."}], "param": "{String} s - URI or root data.", "guessedname": "_concat", "guessedtype": "function"}, "_result": {"description": "Method that determines if a transaction response qualifies as success\nor failure, based on the response HTTP status code, and fires the\nappropriate success or failure events.", "private": "", "static": "", "param": "{Object} o - Transaction object generated by _create().", "guessedname": "_result", "guessedtype": "function", "params": [{"type": "Object", "name": "o", "description": " - Transaction object generated by _create()."}, {"type": "Object", "name": "c", "description": " - Configuration object passed to io()."}]}, "_stop": {"guessedname": "qStop", "static": "", "description": "Method for setting queue processing to inactive.\nTransaction requests to YUI.io.queue() will be stored in the queue, but\nnot processed until the queue is reset to \"active\".", "private": "", "guessedtype": "function"}, "xdrResponse": {"return": {"type": "Object", "description": ""}, "description": "Response controller for cross-domain requests when using the\nFlash transport or IE8's XDomainRequest object.", "param": "{String} e Event name", "params": [{"type": "String", "name": "e", "description": " Event name"}, {"type": "Object", "name": "o", "description": " Transaction object generated by _create() in io-base."}, {"type": "Object", "name": "c", "description": " Configuration object for the transaction."}], "guessedname": "xdrResponse", "guessedtype": "function"}, "_startTimeout": {"description": "Starts timeout count if the configuration object\nhas a defined timeout property.", "private": "", "static": "", "param": "{Object} o Transaction object generated by _create().", "guessedname": "_startTimeout", "guessedtype": "function", "params": [{"type": "Object", "name": "o", "description": " Transaction object generated by _create()."}, {"type": "Object", "name": "c", "description": " Configuration object passed to YUI.io()."}]}, "_size": {"return": {"type": "Number", "description": ""}, "description": "Method to query the current size of the queue.", "private": "", "static": "", "guessedname": "qSize", "guessedtype": "function"}, "appendData": {"return": {"type": "Array", "description": "e Array of created fields."}, "description": "Parses the POST data object and creates hidden form elements\nfor each key-value, and appends them to the HTML form object.", "private": "", "static": "", "param": "{Object} f HTML form object.", "guessedname": "_addData", "guessedtype": "function", "params": [{"type": "Object", "name": "f", "description": " HTML form object."}, {"type": "String", "name": "s", "description": " The key-value POST data."}]}, "transport": {"param": "{Object} o - object of transport configurations.", "params": [{"type": "Object", "name": "o", "description": " - object of transport configurations."}], "description": "Initializes the desired transport.", "guessedname": "transport", "guessedtype": "function"}, "end": {"param": "{Object} o - transaction object.", "params": [{"type": "Object", "name": "o", "description": " - transaction object."}, {"type": "Object", "name": "c", "description": " - configuration object for the transaction."}], "description": "Fires event \"io:end\" and creates, fires a transaction-specific \"end\"\nevent, if config.on.end is defined.", "guessedname": "end", "guessedtype": "function"}, "_uploadComplete": {"description": "Bound to the iframe's Load event and processes\nthe response data.", "private": "", "static": "", "param": "{Object} o The transaction object", "guessedname": "_uploadComplete", "guessedtype": "function", "params": [{"type": "Object", "name": "o", "description": " The transaction object"}, {"type": "Object", "name": "c", "description": " Configuration object for the transaction."}]}, "_dFrame": {"param": "{Number} id The transaction ID used in the iframe's creation.", "params": [{"type": "Number", "name": "id", "description": " The transaction ID used in the iframe's creation."}], "description": "Removes the iframe", "private": ""}, "send": {"return": {"type": "Object", "description": ""}, "description": "Requests a transaction. `send()` is implemented as `Y.io()`.  Each\ntransaction may include a configuration object.  Its properties are:\n<dl>\n<dt>method</dt>\n<dd>HTTP method verb (e.g., GET or POST). If this property is not\nnot defined, the default value will be GET.</dd>\n<dt>data</dt>\n<dd>This is the name-value string that will be sent as the\ntransaction data. If the request is HTTP GET, the data become\npart of querystring. If HTTP POST, the data are sent in the\nmessage body.</dd>\n<dt>xdr</dt>\n<dd>Defines the transport to be used for cross-domain requests.\nBy setting this property, the transaction will use the specified\ntransport instead of XMLHttpRequest. The properties of the\ntransport object are:\n<dl>\n<dt>use</dt>\n<dd>The transport to be used: 'flash' or 'native'</dd>\n<dt>dataType</dt>\n<dd>Set the value to 'XML' if that is the expected response\ncontent type.</dd>\n</dl></dd>\n<dt>form</dt>\n<dd>Form serialization configuration object.  Its properties are:\n<dl>\n<dt>id</dt>\n<dd>Node object or id of HTML form</dd>\n<dt>useDisabled</dt>\n<dd>`true` to also serialize disabled form field values\n(defaults to `false`)</dd>\n</dl></dd>\n<dt>on</dt>\n<dd>Assigns transaction event subscriptions. Available events are:\n<dl>\n<dt>start</dt>\n<dd>Fires when a request is sent to a resource.</dd>\n<dt>complete</dt>\n<dd>Fires when the transaction is complete.</dd>\n<dt>success</dt>\n<dd>Fires when the HTTP response status is within the 2xx\nrange.</dd>\n<dt>failure</dt>\n<dd>Fires when the HTTP response status is outside the 2xx\nrange, if an exception occurs, if the transation is aborted,\nor if the transaction exceeds a configured `timeout`.</dd>\n<dt>end</dt>\n<dd>Fires at the conclusion of the transaction\nlifecycle, after `success` or `failure`.</dd>\n</dl>\n<p>Callback functions for `start` and `end` receive the id of the\ntransaction as a first argument. For `complete`, `success`, and\n`failure`, callbacks receive the id and the response object\n(usually the XMLHttpRequest instance).  If the `arguments`\nproperty was included in the configuration object passed to\n`Y.io()`, the configured data will be passed to all callbacks as\nthe last argument.</p>\n</dd>\n<dt>sync</dt>\n<dd>Pass `true` to make a same-domain transaction synchronous.\n<strong>CAVEAT</strong>: This will negatively impact the user\nexperience. Have a <em>very</em> good reason if you intend to use\nthis.</dd>\n<dt>context</dt>\n<dd>The \"`this'\" object for all configured event handlers. If a\nspecific context is needed for individual callbacks, bind the\ncallback to a context using `Y.bind()`.</dd>\n<dt>headers</dt>\n<dd>Object map of transaction headers to send to the server. The\nobject keys are the header names and the values are the header\nvalues.</dd>\n<dt>timeout</dt>\n<dd>Millisecond threshold for the transaction before being\nautomatically aborted.</dd>\n<dt>arguments</dt>\n<dd>User-defined data passed to all registered event handlers.\nThis value is available as the second argument in the \"start\" and\n\"end\" event handlers. It is the third argument in the \"complete\",\n\"success\", and \"failure\" event handlers. <strong>Be sure to quote\nthis property name in the transaction configuration as\n\"arguments\" is a reserved word in JavaScript</strong> (e.g.\n`Y.io({ ..., \"arguments\": stuff })`).</dd>\n</dl>", "private": "", "params": [{"type": "String", "name": "uri", "description": " - qualified path to transaction resource."}, {"type": "Object", "name": "c", "description": " - configuration object for the transaction."}, {"type": "Number", "name": "i", "description": " - transaction id, if already set."}], "param": "{String} uri - qualified path to transaction resource.", "guessedname": "send", "guessedtype": "function"}, "_rS": {"description": "Event handler bound to onreadystatechange.", "param": "{Object} o - Transaction object generated by _create().", "params": [{"type": "Object", "name": "o", "description": " - Transaction object generated by _create()."}, {"type": "Object", "name": "c", "description": " - Configuration object passed to YUI.io()."}], "private": "", "guessedname": "_rS", "guessedtype": "function"}, "start": {"param": "{Object} o - transaction object.", "params": [{"type": "Object", "name": "o", "description": " - transaction object."}, {"type": "Object", "name": "c", "description": " - configuration object for the transaction."}], "description": "Fires event \"io:start\" and creates, fires a transaction-specific\nstart event, if `config.on.start` is defined.", "guessedname": "start", "guessedtype": "function"}, "_clearTimeout": {"description": "Clears the timeout interval started by _startTimeout().", "private": "", "static": "", "param": "{Number} id - Transaction ID.", "guessedname": "_clearTimeout", "guessedtype": "function", "params": [{"type": "Number", "name": "id", "description": " - Transaction ID."}]}, "_isInProgress": {"param": "{Object} o - Transaction object generated by _create() in io-base.", "params": [{"type": "Object", "name": "o", "description": " - Transaction object generated by _create() in io-base."}], "description": "Method for determining if an XDR transaction has completed\nand all data are received.", "private": ""}, "_qShift": {"guessedname": "_qShift", "static": "", "description": "Method Process the first transaction from the\nqueue in FIFO order.", "private": "", "guessedtype": "function"}, "_serialize": {"return": {"type": "String", "description": ""}, "description": "Method to enumerate through an HTML form's elements collection\nand return a string comprised of key-value pairs.", "private": "", "static": "", "param": "{Object} c - YUI form node or HTML form id.", "guessedname": "_serialize", "guessedtype": "function", "params": [{"type": "Object", "name": "c", "description": " - YUI form node or HTML form id."}, {"type": "String", "name": "s", "description": " - Key-value data defined in the configuration object."}]}, "_create": {"return": {"type": "Object", "description": ""}, "description": "Method that creates a unique transaction object for each request.", "private": "", "params": [{"type": "Number", "name": "c", "description": " - configuration object subset to determine if\nthe transaction is an XDR or file upload,\nrequiring an alternate transport."}, {"type": "Number", "name": "i", "description": " - transaction id"}], "param": "{Number} c - configuration object subset to determine if\nthe transaction is an XDR or file upload,\nrequiring an alternate transport.", "guessedname": "_create", "guessedtype": "function"}, "xdrReady": {"description": "Fires event \"io:xdrReady\"", "param": "{Number} yid - YUI sandbox id.", "protected": "", "static": "", "guessedname": "xdrReady", "guessedtype": "function", "params": [{"type": "Number", "name": "yid", "description": " - YUI sandbox id."}, {"type": "Number", "name": "uid", "description": " - IO instance id."}]}, "complete": {"param": "{Object} o - transaction object.", "params": [{"type": "Object", "name": "o", "description": " - transaction object."}, {"type": "Object", "name": "c", "description": " - configuration object for the transaction."}], "description": "Fires event \"io:complete\" and creates, fires a\ntransaction-specific \"complete\" event, if config.on.complete is\ndefined.", "guessedname": "complete", "guessedtype": "function"}, "_ieEvt": {"description": "Sets event handlers for XDomainRequest transactions.", "private": "", "static": "", "param": "{Object} o - Transaction object generated by _create() in io-base.", "guessedname": "_ieEvt", "guessedtype": "function", "params": [{"type": "Object", "name": "o", "description": " - Transaction object generated by _create() in io-base."}, {"type": "Object", "name": "c", "description": " - configuration object for the transaction."}]}, "_upload": {"description": "Uploads HTML form data, inclusive of files/attachments,\nusing the iframe created in _create to facilitate the transaction.", "private": "", "static": "", "param": "{Object} o The transaction object", "guessedname": "_upload", "guessedtype": "function", "params": [{"type": "Object", "name": "o", "description": " The transaction object"}, {"type": "Object", "name": "uri", "description": " Qualified path to transaction resource."}, {"type": "Object", "name": "c", "description": " Configuration object for the transaction."}]}, "_createframe": {"param": "{Object} o Transaction object generated by _create().", "params": [{"type": "Object", "name": "o", "description": " Transaction object generated by _create()."}, {"type": "Object", "name": "c", "description": " Configuration object passed to YUI.io()."}, {"type": "Object", "name": "io", "description": ""}], "description": "Creates the iframe transported used in file upload\ntransactions, and binds the response event handler.", "private": ""}, "failure": {"param": "{Object} o - transaction object.", "params": [{"type": "Object", "name": "o", "description": " - transaction object."}, {"type": "Object", "name": "c", "description": " - configuration object for the transaction."}], "description": "Fires event \"io:failure\" and creates, fires a transaction-specific\n\"failure\" event, if config.on.failure is defined.", "guessedname": "failure", "guessedtype": "function"}, "xdr": {"param": "{String} uri - qualified path to transaction resource.", "params": [{"type": "String", "name": "uri", "description": " - qualified path to transaction resource."}, {"type": "Object", "name": "o", "description": " - Transaction object generated by _create() in io-base."}, {"type": "Object", "name": "c", "description": " - configuration object for the transaction."}], "description": "Method for accessing the transport's interface for making a\ncross-domain transaction.", "guessedname": "xdr", "guessedtype": "function"}, "_data": {"return": {"type": "Object", "description": ""}, "param": "{Object} o - Transaction object generated by _create() in io-base.", "params": [{"type": "Object", "name": "o", "description": " - Transaction object generated by _create() in io-base."}, {"type": "Boolean", "name": "u", "description": " - Configuration xdr.use."}, {"type": "Boolean", "name": "d", "description": " - Configuration xdr.dataType."}], "description": "Creates a response object for XDR transactions, for success\nand failure cases.", "private": ""}, "promote": {"static": "", "description": "Method for promoting a transaction to the top of the queue.", "guessedname": "qPromote", "guessedtype": "function"}, "_setAttrs": {"description": "Sets the appropriate attributes and values to the HTML\nform, in preparation of a file upload transaction.", "private": "", "static": "", "param": "{Object} f HTML form object.", "guessedname": "_setAttrs", "guessedtype": "function", "params": [{"type": "Object", "name": "f", "description": " HTML form object."}, {"type": "Object", "name": "id", "description": " The Transaction ID."}, {"type": "Object", "name": "uri", "description": " Qualified path to transaction resource."}]}, "_setHeaders": {"description": "Method that sets all HTTP headers to be sent in a transaction.", "param": "{Object} o - XHR instance for the specific transaction.", "params": [{"type": "Object", "name": "o", "description": " - XHR instance for the specific transaction."}, {"type": "Object", "name": "h", "description": " - HTTP headers for the specific transaction, as defined\nin the configuration object passed to YUI.io()."}], "private": "", "guessedname": "_setHeaders", "guessedtype": "function"}, "success": {"param": "{Object} o - transaction object.", "params": [{"type": "Object", "name": "o", "description": " - transaction object."}, {"type": "Object", "name": "c", "description": " - configuration object for the transaction."}], "description": "Fires event \"io:success\" and creates, fires a transaction-specific\n\"success\" event, if config.on.success is defined.", "guessedname": "success", "guessedtype": "function"}, "_evt": {"description": "Method for creating and firing events.", "param": "{String} e - event to be published.", "params": [{"type": "String", "name": "e", "description": " - event to be published."}, {"type": "Object", "name": "o", "description": " - transaction object."}, {"type": "Object", "name": "c", "description": " - configuration data subset for event subscription."}], "private": "", "guessedname": "_evt", "guessedtype": "function"}, "_abort": {"description": "Method for intiating an XDR transaction abort.", "param": "{Object} o - Transaction object generated by _create() in io-base.", "params": [{"type": "Object", "name": "o", "description": " - Transaction object generated by _create() in io-base."}, {"type": "Object", "name": "c", "description": " - configuration object for the transaction."}], "private": "", "guessedname": "_abort", "guessedtype": "function"}, "remove": {"guessedname": "qRemove", "static": "", "description": "Method for removing a specific, pending transaction from\nthe queue.", "private": "", "guessedtype": "function"}, "queue": {"static": "", "return": {"type": "Object", "description": ""}, "description": "Method for queueing a transaction before the request is sent to the\nresource, to ensure sequential processing.", "guessedname": "queue", "guessedtype": "function"}, "_resetAttrs": {"description": "Reset the HTML form attributes to their original values.", "private": "", "static": "", "param": "{Object} f HTML form object.", "guessedname": "_resetAttrs", "guessedtype": "function", "params": [{"type": "Object", "name": "f", "description": " HTML form object."}, {"type": "Object", "name": "a", "description": " Object of original attributes."}]}, "_xdrReady": {"description": "Fires event \"io:xdrReady\"", "param": "{Number} yid - YUI sandbox id.", "params": [{"type": "Number", "name": "yid", "description": " - YUI sandbox id."}, {"type": "Number", "name": "uid", "description": " - IO instance id."}], "private": "", "guessedname": "_xdrReady", "guessedtype": "function"}, "_removeData": {"description": "Removes the custom fields created to pass additional POST\ndata, along with the HTML form fields.", "private": "", "static": "", "param": "{Object} f HTML form object.", "guessedname": "_removeData", "guessedtype": "function", "params": [{"type": "Object", "name": "f", "description": " HTML form object."}, {"type": "Object", "name": "o", "description": " HTML form fields created from configuration.data."}]}, "_retry": {"description": "Retry an XDR transaction, using the Flash tranport, if the native\ntransport fails.", "param": "{Object} o - Transaction object generated by _create().", "params": [{"type": "Object", "name": "o", "description": " - Transaction object generated by _create()."}, {"type": "String", "name": "uri", "description": " - qualified path to transaction resource."}, {"type": "Object", "name": "c", "description": " - configuration object for the transaction."}], "private": "", "guessedname": "_retry", "guessedtype": "function"}, "setHeader": {"param": "{String} l - HTTP header", "params": [{"type": "String", "name": "l", "description": " - HTTP header"}, {"type": "String", "name": "v", "description": " - HTTP header value"}], "description": "Stores default client headers for all transactions. If a label is\npassed with no value argument, the header will be deleted.", "guessedname": "setHeader", "guessedtype": "function"}, "_swf": {"param": "{String} uri - location of io.swf.", "params": [{"type": "String", "name": "uri", "description": " - location of io.swf."}, {"type": "String", "name": "yid", "description": " - YUI sandbox id."}, {"type": "String", "name": "yid", "description": " - IO instance id."}], "description": "Method that creates the Flash transport swf.", "private": ""}}, "description": "The IO class is a utility that brokers HTTP requests through a simplified\ninterface.  Specifically, it allows JavaScript to make HTTP requests to\na resource without a page reload.  The underlying transport for making\nsame-domain requests is the XMLHttpRequest object.  IO can also use\nFlash, if specified as a transport, for cross-domain requests.", "constructors": [{"params": [{"type": "Object", "name": "c", "description": " - Object of EventTarget's publish method configurations\nused to configure IO's events."}], "description": "The IO class is a utility that brokers HTTP requests through a simplified\ninterface.  Specifically, it allows JavaScript to make HTTP requests to\na resource without a page reload.  The underlying transport for making\nsame-domain requests is the XMLHttpRequest object.  IO can also use\nFlash, if specified as a transport, for cross-domain requests."}], "namespace": "", "module": "io-base", "events": {"io:end": {"description": "Signals the end of the transaction lifecycle."}, "io:start": {"description": "Signals the start of an IO request."}, "io:complete": {"description": "Signals the completion of the request-response phase of a\ntransaction. Response status and data are accessible, if\navailable, in this event."}, "io:xdrReady": {"description": "Fires when the XDR transport is ready for use.", "guessedname": "E_XDR_READY", "guessedtype": "property"}, "io:success": {"description": "Signals an HTTP response with status in the 2xx range.\nFires after io:complete."}, "io:failure": {"description": "Signals an HTTP response with status outside of the 2xx range.\nFires after io:complete."}}, "file": "io-base.js", "shortname": "IO", "properties": {"_id": {"guessedname": "_id", "type": "{Number}", "description": "A counter that increments for each transaction.", "private": "", "guessedtype": "property"}, "_qState": {"description": "Property to determine whether the queue is set to\n1 (active) or 0 (inactive).  When inactive, transactions\nwill be stored in the queue until the queue is set to active.", "private": "", "static": "", "guessedname": "_qState", "guessedtype": "property", "type": "{Number}"}, "_q": {"description": "Array of transactions queued for processing", "private": "", "static": "", "guessedname": "_q", "guessedtype": "property", "type": "{Object}"}, "delay": {"type": "{Number}", "static": "", "description": "Delay value to calling the Flash transport, in the\nevent io.swf has not finished loading.  Once the E_XDR_READY\nevent is fired, this value will be set to 0.", "guessedname": "xdr", "guessedtype": "property"}, "_headers": {"guessedname": "_headers", "type": "{Object}", "description": "Object of IO HTTP headers sent with each transaction.", "private": "", "guessedtype": "property"}, "_transport": {"guessedname": "_transport", "type": "{Object}", "description": "Map of io transports.", "private": "", "guessedtype": "property"}, "_timeout": {"guessedname": "_timeout", "type": "{Object}", "description": "Object that stores timeout values for any transaction with a defined\n\"timeout\" configuration property.", "private": "", "guessedtype": "property"}, "_cB": {"guessedname": "_cB", "type": "{Object}", "description": "Map of stored configuration objects when using \nFlash as the transport for cross-domain requests.", "private": "", "guessedtype": "property"}, "_rS": {"guessedname": "_rS", "type": "{Object}", "description": "Map of transaction simulated readyState values\nwhen XDomainRequest is the transport.", "private": "", "guessedtype": "property"}}, "name": "IO"}, "TopAxisLayout": {"name": "TopAxisLayout", "constructors": [{"description": "Contains algorithms for rendering a top axis."}], "namespace": "", "module": "charts", "guessedname": "TopAxisLayout", "methods": {"setSizeAndPosition": {"protected": "", "description": "Calculates the size and positions the content elements.", "guessedname": "setSizeAndPosition", "guessedtype": "function"}, "getLineStart": {"protected": "", "description": "Calculates the coordinates for the first point on an axis.", "guessedname": "getLineStart", "guessedtype": "function"}, "_getDefaultMargins": {"guessedname": "_getDefaultMargins", "return": {"type": "", "description": "Object"}, "description": "Default margins for text fields.", "private": "", "guessedtype": "function"}, "setCalculatedSize": {"protected": "", "description": "Assigns a height based on the size of the contents.", "guessedname": "setCalculatedSize", "guessedtype": "function"}, "positionTitle": {"description": "Rotate and position title.", "param": "{HTMLElement} label to rotate position", "protected": "", "params": [{"type": "HTMLElement", "name": "label", "description": " to rotate position"}], "guessedname": "positionTitle", "guessedtype": "function"}, "offsetNodeForTick": {"description": "Adjusts position for inner ticks.", "param": "{Node} cb contentBox of the axis", "protected": "", "params": [{"type": "Node", "name": "cb", "description": " contentBox of the axis"}], "guessedname": "offsetNodeForTick", "guessedtype": "function"}, "positionLabel": {"description": "Rotate and position labels.", "param": "{HTMLElement} label to rotate position", "protected": "", "params": [{"type": "HTMLElement", "name": "label", "description": " to rotate position"}, {"type": "Object", "name": "pt", "description": " hash containing the x and y coordinates in which the label will be positioned\nagainst."}], "guessedname": "positionLabel", "guessedtype": "function"}, "drawTick": {"description": "Draws a tick", "param": "{Object} pt hash containing x and y coordinates", "protected": "", "params": [{"type": "Object", "name": "pt", "description": " hash containing x and y coordinates"}, {"type": "Object", "name": "tickStyles", "description": " hash of properties used to draw the tick"}], "guessedname": "drawTick", "guessedtype": "function"}, "getLabelPoint": {"return": {"type": "", "description": "Object"}, "description": "Calculates the point for a label.", "param": "{Object} pt hash containing x and y coordinates", "protected": "", "params": [{"type": "Object", "name": "pt", "description": " hash containing x and y coordinates"}], "guessedname": "getLabelPoint", "guessedtype": "function"}, "updateMaxLabelSize": {"description": "Updates the value for the `maxLabelSize` for use in calculating total size.", "param": "{HTMLElement} label to measure", "protected": "", "params": [{"type": "HTMLElement", "name": "label", "description": " to measure"}], "guessedname": "updateMaxLabelSize", "guessedtype": "function"}, "setTickOffsets": {"protected": "", "description": "Sets the length of the tick on either side of the axis line.", "guessedname": "setTickOffsets", "guessedtype": "function"}}, "file": "charts.js", "guessedtype": "function", "shortname": "TopAxisLayout", "description": "Contains algorithms for rendering a top axis."}, "ImageGallery": {"name": "ImageGallery", "configs": {"links": {"type": "String | NodeList", "description": "Selector or NodeList containing the links where the ImageViewer\nextracts the information to generate the thumbnails.", "guessedname": "links", "guessedtype": "property"}, "image": {"description": "Image node element used to load the images.", "default": "Generated img element.", "readonly": "", "guessedname": "image", "guessedtype": "property", "type": "Node"}, "totalLinks": {"description": "Helper attribute to get the <code>size</code> of the <a\nhref=\"ImageViewer.html#config_links\">links</a> NodeList.", "default": "true", "readonly": "", "guessedname": "totalLinks", "guessedtype": "property", "type": "boolean"}, "arrowRightEl": {"description": "The element to be used as arrow right.", "default": "Generated HTML div element.", "readonly": "", "guessedname": "arrowRightEl", "guessedtype": "property", "type": "Node"}, "infoTemplate": {"default": "'Image {current} of {total}'", "type": "String", "description": "String template used to display the information.", "guessedname": "infoTemplate", "guessedtype": "property"}, "loader": {"default": "Generated HTML div element.", "type": "Node", "description": "HTML element to house the <code>img</code> which is being loaded.", "guessedname": "loader", "guessedtype": "property"}, "paused": {"default": "false", "type": "boolean", "description": "If <code>true</code> the slide show is paused.", "guessedname": "paused", "guessedtype": "property"}, "infoEl": {"description": "The element to be used as info.", "default": "Generated HTML div element.", "readonly": "", "guessedname": "infoEl", "guessedtype": "property", "type": "Node"}, "preloadAllImages": {"default": "false", "type": "boolean", "description": "Preload all images grabbed from the <a\nhref=\"ImageViewer.html#config_links\">links</a> attribute.", "guessedname": "preloadAllImages", "guessedtype": "property"}, "repeat": {"default": "true", "type": "boolean", "description": "Restart the navigation when reach the last element.", "guessedname": "repeat", "guessedtype": "property"}, "closeEl": {"description": "The element to be used as close.", "default": "Generated HTML div element.", "readonly": "", "guessedname": "closeEl", "guessedtype": "property", "type": "Node"}, "paginatorEl": {"description": "Element which contains the <a href=\"Paginator.html\">Paginator</a>\nwith the thumbnails.", "default": "Generated HTML div.", "readonly": "", "guessedname": "paginatorEl", "guessedtype": "property", "type": "Node"}, "autoPlay": {"default": "false", "type": "boolean", "description": "If <code>true</code> the slide show will be played when the\nImageGallery is displayed.", "guessedname": "autoPlay", "guessedtype": "property"}, "paginator": {"default": "<a href=\"Paginator.html\">Paginator</a> configuration Object.", "type": "Object", "description": "<a href=\"Paginator.html\">Paginator</a> configuration Object. The\n<code>Paginator</code> handles the thumbnails control.", "guessedname": "paginator", "guessedtype": "property"}, "imageAnim": {"default": "Predefined <a href=\"Anim.html\">Anim</a> configuration.", "type": "Object", "description": "Configuration attributes passed to the <a href=\"Anim.html\">Anim</a>\nclass.", "guessedname": "imageAnim", "guessedtype": "property"}, "pausedLabel": {"default": "''", "type": "String", "description": "Label to display when the slide show is paused.", "guessedname": "pausedLabel", "guessedtype": "property"}, "showClose": {"default": "true", "type": "boolean", "description": "Show close icon control.", "guessedname": "showClose", "guessedtype": "property"}, "maxWidth": {"default": "Infinity", "type": "Number", "description": "The maximum width of the element", "guessedname": "maxWidth", "guessedtype": "property"}, "delay": {"default": "7000", "type": "Number", "description": "Delay in milliseconds to change to the next image.", "guessedname": "delay", "guessedtype": "property"}, "loadingEl": {"default": "Generated HTML div element.", "type": "Node", "description": "The element to be used as loading.", "guessedname": "loadingEl", "guessedtype": "property"}, "showArrows": {"default": "true", "type": "boolean", "description": "Show the arrow controls.", "guessedname": "showArrows", "guessedtype": "property"}, "captionFromTitle": {"default": "true", "type": "boolean", "description": "If <code>true</code> the <a\nhref=\"ImageViewer.html#config_caption\">caption</a> will be pulled\nfrom the title DOM attribute.", "guessedname": "captionFromTitle", "guessedtype": "property"}, "anim": {"default": "true", "type": "boolean", "description": "If <code>true</code> the navigation is animated.", "guessedname": "anim", "guessedtype": "property"}, "arrowLeftEl": {"description": "The element to be used as arrow left.", "default": "Generated HTML div element.", "readonly": "", "guessedname": "arrowLeftEl", "guessedtype": "property", "type": "Node"}, "showPlayer": {"default": "true", "type": "boolean", "description": "Show the player controls (i.e., pause and show buttons).", "guessedname": "showPlayer", "guessedtype": "property"}, "useOriginalImage": {"default": "false", "type": "boolean", "description": "If <code>true</code> will use the original image as thumbnails.", "guessedname": "useOriginalImage", "guessedtype": "property"}, "centered": {"default": "true", "type": "boolean", "description": "If <code>true</code> the Overlay with the image will be positioned\non the center of the viewport.", "guessedname": "centered", "guessedtype": "property"}, "captionEl": {"description": "The element to be used as caption.", "default": "Generated HTML div element.", "readonly": "", "guessedname": "captionEl", "guessedtype": "property", "type": "Node"}, "loading": {"default": "false", "type": "boolean", "description": "Whether the image is during a loading state.", "guessedname": "loading", "guessedtype": "property"}, "toolbar": {"default": "Generated Toolbar with a play, and pause buttons.", "type": "Toolbar constructor.", "description": "<a href=\"Toolbar.html\">Toolbar</a> with a play, and pause buttons.", "guessedname": "toolbar", "guessedtype": "property"}, "playingLabel": {"default": "'(Playing)'", "type": "String", "description": "Label to display when the slide show is playing.", "guessedname": "playingLabel", "guessedtype": "property"}, "maxHeight": {"default": "Infinity", "type": "Number", "description": "The maximum height of the element", "guessedname": "maxHeight", "guessedtype": "property"}, "caption": {"default": "''", "type": "String", "description": "The caption of the displayed image.", "guessedname": "caption", "guessedtype": "property"}, "currentIndex": {"default": "0", "type": "Number", "description": "Index of the current image.", "guessedname": "currentIndex", "guessedtype": "property"}, "modal": {"default": "{ opacity: .8, background: '#000' }", "type": "boolean | Object", "description": "Displays the modal <a href=\"OverlayMask.html\">OverlayMask</a> on\nthe viewport. Set to <code>false</code> to disable.", "guessedname": "modal", "guessedtype": "property"}, "paginatorInstance": {"default": "null", "type": "Paginator", "description": "Stores the <a href=\"Paginator.html\">Paginator</a> instance.", "guessedname": "paginatorInstance", "guessedtype": "property"}, "playing": {"default": "false", "type": "boolean", "description": "If <code>true</code> the slide show is playing.", "guessedname": "playing", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "<p><img src=\"assets/images/aui-image-viewer-gallery/main.png\"/></p>\nA base class for ImageGallery, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Displays an image in a Overlay</li>\n<li>Displays list of thumbnails of the images as a control</li>\n<li>Slide show functionalities (i.e., play, pause etc)</li>\n<li>Keyboard navigation support</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.ImageGallery({\nlinks: '#gallery1 a',\ncaption: 'Liferay Champion Soccer',\ncaptionFromTitle: true,\npreloadNeighborImages: true,\npreloadAllImages: true,\nshowInfo: true\n}).render();\n</code></pre>\nCheck the list of <a href=\"ImageGallery.html#configattributes\">Configuration Attributes</a> available for\nImageGallery."}], "namespace": "", "module": "aui-image-viewer", "events": {"preloadAllImagesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "preloadAllImagesChange", "description": "Fires when the value for the configuration attribute 'preloadAllImages' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "load": {"type": "{Event.Custom}", "params": [{"type": "Event.Facade", "name": "event", "description": " The load event."}], "description": "Handles the load event. Fired when a image is laoded."}, "infoTemplateChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "infoTemplateChange", "description": "Fires when the value for the configuration attribute 'infoTemplate' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "modalChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "modalChange", "description": "Fires when the value for the configuration attribute 'modal' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "loaderChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "loaderChange", "description": "Fires when the value for the configuration attribute 'loader' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "request": {"type": "{Event.Custom}", "params": [{"type": "Event.Facade", "name": "event", "description": " The load event."}], "description": "Handles the request event. Fired when a image is requested."}, "delayChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "delayChange", "description": "Fires when the value for the configuration attribute 'delay' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "maxWidthChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "maxWidthChange", "description": "Fires when the value for the configuration attribute 'maxWidth' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "linksChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "linksChange", "description": "Fires when the value for the configuration attribute 'links' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "infoElChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "infoElChange", "description": "Fires when the value for the configuration attribute 'infoEl' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "imageAnimChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "imageAnimChange", "description": "Fires when the value for the configuration attribute 'imageAnim' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "playingLabelChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "playingLabelChange", "description": "Fires when the value for the configuration attribute 'playingLabel' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "autoPlayChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "autoPlayChange", "description": "Fires when the value for the configuration attribute 'autoPlay' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "playingChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "playingChange", "description": "Fires when the value for the configuration attribute 'playing' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "currentIndexChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "currentIndexChange", "description": "Fires when the value for the configuration attribute 'currentIndex' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "arrowRightElChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "arrowRightElChange", "description": "Fires when the value for the configuration attribute 'arrowRightEl' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "totalLinksChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "totalLinksChange", "description": "Fires when the value for the configuration attribute 'totalLinks' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "maxHeightChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "maxHeightChange", "description": "Fires when the value for the configuration attribute 'maxHeight' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "showCloseChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "showCloseChange", "description": "Fires when the value for the configuration attribute 'showClose' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "arrowLeftElChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "arrowLeftElChange", "description": "Fires when the value for the configuration attribute 'arrowLeftEl' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "paginatorInstanceChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "paginatorInstanceChange", "description": "Fires when the value for the configuration attribute 'paginatorInstance' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "showPlayerChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "showPlayerChange", "description": "Fires when the value for the configuration attribute 'showPlayer' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "showArrowsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "showArrowsChange", "description": "Fires when the value for the configuration attribute 'showArrows' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "captionFromTitleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "captionFromTitleChange", "description": "Fires when the value for the configuration attribute 'captionFromTitle' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "anim": {"type": "{Event.Custom}", "params": [{"type": "Event.Facade", "name": "event", "description": " The load event."}], "description": "Handles the anim event. Fired when the image anim ends."}, "pausedChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "pausedChange", "description": "Fires when the value for the configuration attribute 'paused' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "paginatorElChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "paginatorElChange", "description": "Fires when the value for the configuration attribute 'paginatorEl' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "animChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "animChange", "description": "Fires when the value for the configuration attribute 'anim' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "toolbarChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "toolbarChange", "description": "Fires when the value for the configuration attribute 'toolbar' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "captionElChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "captionElChange", "description": "Fires when the value for the configuration attribute 'captionEl' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "loadingElChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "loadingElChange", "description": "Fires when the value for the configuration attribute 'loadingEl' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "repeatChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "repeatChange", "description": "Fires when the value for the configuration attribute 'repeat' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "loadingChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "loadingChange", "description": "Fires when the value for the configuration attribute 'loading' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "paginatorChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "paginatorChange", "description": "Fires when the value for the configuration attribute 'paginator' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "imageChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "imageChange", "description": "Fires when the value for the configuration attribute 'image' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "captionChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "captionChange", "description": "Fires when the value for the configuration attribute 'caption' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "pausedLabelChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "pausedLabelChange", "description": "Fires when the value for the configuration attribute 'pausedLabel' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "centeredChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "centeredChange", "description": "Fires when the value for the configuration attribute 'centered' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "useOriginalImageChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "useOriginalImageChange", "description": "Fires when the value for the configuration attribute 'useOriginalImage' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "closeElChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "closeElChange", "description": "Fires when the value for the configuration attribute 'closeEl' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "ImageGallery", "methods": {"_onClickCloseEl": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " click event facade"}], "description": "Fires the click event on the close icon.", "guessedname": "_onClickCloseEl", "guessedtype": "function"}, "preloadImage": {"params": [{"type": "Number", "name": "currentIndex", "description": ""}], "description": "Preload an image based on its <code>index</code>.", "guessedname": "preloadImage", "guessedtype": "function"}, "_getInfoTemplate": {"return": {"type": "String", "description": "Parsed string."}, "description": "Get the <a href=\"ImageViewer.html#config_info\">info</a> template.", "param": "{String} v template", "protected": "", "params": [{"type": "String", "name": "v", "description": " template"}], "guessedname": "_getInfoTemplate", "guessedtype": "function"}, "hasNext": {"return": {"type": "boolean", "description": ""}, "description": "Check if there is a next element to navigate.", "guessedname": "hasNext", "guessedtype": "function"}, "show": {"description": "<p>Show the ImageGallery.</p>\n<p><strong>NOTE:</strong>Overloads the <a\nhref=\"ImageViewer.html\">ImageViewer</a> show method to not loadImage, the\nchangeRequest now is responsible to do that if we invoke the superclass\nshow method its loading the image, and the changeRequest loads again,\navoiding double request.</p>", "guessedname": "show", "guessedtype": "function"}, "_onClickRightArrow": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " click event facade"}], "description": "Fires the click event on the right arrow icon.", "guessedname": "_onClickRightArrow", "guessedtype": "function"}, "showLoading": {"description": "Show the loading icon.", "guessedname": "showLoading", "guessedtype": "function"}, "hasLink": {"return": {"type": "boolean", "description": ""}, "params": [{"type": "Number", "name": "currentIndex", "description": ""}], "description": "Check if there is a node reference for the <code>currentIndex</code>.", "guessedname": "hasLink", "guessedtype": "function"}, "preloadAllImages": {"description": "Preload all images.", "guessedname": "preloadAllImages", "guessedtype": "function"}, "getLink": {"return": {"type": "Node", "description": ""}, "params": [{"type": "Number", "name": "currentIndex", "description": ""}], "description": "Get the Node reference to the <code>currentIndex</code> element from\nthe <a href=\"ImageViewer.html#config_links\">links</a>.", "guessedname": "getLink", "guessedtype": "function"}, "_cancelTimer": {"protected": "", "description": "Cancel the timer between slides.", "guessedname": "_cancelTimer", "guessedtype": "function"}, "_getRatio": {"return": {"type": "Number", "description": ""}, "description": "Calculate the resize ratio for the loaded image.", "protected": "", "params": [{"type": "Number", "name": "width", "description": " Image width"}, {"type": "Number", "name": "height", "description": " Image height"}], "guessedname": "_getRatio", "guessedtype": "function"}, "close": {"description": "Close the ImageViewer.", "guessedname": "close", "guessedtype": "function"}, "_createPreloadImage": {"protected": "", "description": "Creates the preload image instance, and add's it \nto the internal pool.", "guessedname": "_createPreloadImage", "guessedtype": "function"}, "next": {"description": "Load the next image.", "guessedname": "next", "guessedtype": "function"}, "_afterLoadingChange": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Fires after the value of the\n<a href=\"ImageViewer.html#config_loading\">loading</a> attribute change.", "guessedname": "_afterLoadingChange", "guessedtype": "function"}, "hideMask": {"description": "Hide the <a href=\"OverlayMask.html\">OverlayMask</a> used when <a\nhref=\"ImageViewer.html#config_modal\">modal</a> is <code>true</code>.", "guessedname": "hideMask", "guessedtype": "function"}, "hasPrev": {"return": {"type": "boolean", "description": ""}, "description": "Check if there is a previous element to navigate.", "guessedname": "hasPrev", "guessedtype": "function"}, "_renderControls": {"protected": "", "description": "Render the controls UI.", "guessedname": "_renderControls", "guessedtype": "function"}, "pause": {"description": "Pause the slide show.", "guessedname": "pause", "guessedtype": "function"}, "_displayLoadedImage": {"protected": "", "params": [{"type": "Node", "name": "image", "description": " The loaded image"}], "description": "Display the image once it's been loaded.", "guessedname": "_displayLoadedImage", "guessedtype": "function"}, "destructor": {"protected": "", "description": "Descructor lifecycle implementation for the ImageViewer class.\nPurges events attached to the node (and all child nodes).", "guessedname": "destructor", "guessedtype": "function"}, "_renderPaginator": {"protected": "", "description": "Render the <a href=\"Paginator.html\">Paginator</a> with the thumbnails.", "guessedname": "_renderPaginator", "guessedtype": "function"}, "_bindToolbarUI": {"protected": "", "description": "Bind the Toolbar UI for the play and pause buttons.", "guessedname": "_bindToolbarUI", "guessedtype": "function"}, "_changeRequest": {"description": "Change the UI when click on a thumbnail.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_changeRequest", "guessedtype": "function"}, "destroy": {"protected": "", "description": "Descructor lifecycle implementation for the ImageGallery class.\nPurges events attached to the node (and all child nodes).", "guessedname": "destroy", "guessedtype": "function"}, "loadImage": {"params": [{"type": "String", "name": "src", "description": " Image src."}], "description": "Load an image <code>src</code> on the ImageViewer.", "guessedname": "loadImage", "guessedtype": "function"}, "_renderFooter": {"protected": "", "description": "Render the footer UI.", "guessedname": "_renderFooter", "guessedtype": "function"}, "_syncCaptionUI": {"protected": "", "description": "Sync the caption UI.", "guessedname": "_syncCaptionUI", "guessedtype": "function"}, "_renderPlayer": {"protected": "", "description": "Render the player controls.", "guessedname": "_renderPlayer", "guessedtype": "function"}, "_onClickLinks": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " click event facade"}], "description": "Fires the click event on the links.", "guessedname": "_onClickLinks", "guessedtype": "function"}, "_startTimer": {"protected": "", "description": "Start the timer between slides.", "guessedname": "_startTimer", "guessedtype": "function"}, "_clearPreloadImageFn": {"protected": "", "description": "Removes the references to the preload images to free up memory", "guessedname": "_clearPreloadImageFn", "guessedtype": "function"}, "_syncSelectedThumbUI": {"protected": "", "description": "Sync the selected thumb UI.", "guessedname": "_syncSelectedThumbUI", "guessedtype": "function"}, "play": {"description": "Play the slide show.", "guessedname": "play", "guessedtype": "function"}, "_afterRender": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Fires after the ImageViewer render phase.", "guessedname": "_afterRender", "guessedtype": "function"}, "_syncControlsUI": {"protected": "", "description": "Sync the controls UI.", "guessedname": "_syncControlsUI", "guessedtype": "function"}, "_syncInfoUI": {"protected": "", "description": "Sync the info UI.", "guessedname": "_syncInfoUI", "guessedtype": "function"}, "_syncSlideShow": {"protected": "", "description": "Sync the slide show UI.", "guessedname": "_syncSlideShow", "guessedtype": "function"}, "_setThumbContent": {"description": "See <a href=\"Paginator.html#method_pageLinkContent\">pageLinkContent</a>.", "param": "{Node} pageEl", "protected": "", "params": [{"type": "Node", "name": "pageEl", "description": ""}, {"type": "Number", "name": "pageNumber", "description": ""}], "guessedname": "_setThumbContent", "guessedtype": "function"}, "_afterVisibleChange": {"description": "Fires after the value of the\n<a href=\"ImageViewer.html#config_visible\">visible</a> attribute change.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_afterVisibleChange", "guessedtype": "function"}, "_onPausedChange": {"description": "Fires before the value of the\n<a href=\"ImageGallery.html#config_paused\">paused</a> attribute change.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onPausedChange", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Bind the events on the ImageGallery UI. Lifecycle.", "guessedname": "bindUI", "guessedtype": "function"}, "_onClickLeftArrow": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " click event facade"}], "description": "Fires the click event on the left arrow icon.", "guessedname": "_onClickLeftArrow", "guessedtype": "function"}, "_processChangeRequest": {"protected": "", "description": "Process the change request.\nLoad image and restart the timer, if needed.", "guessedname": "_processChangeRequest", "guessedtype": "function"}, "_uiSetImageSize": {"protected": "", "params": [{"type": "HTMLImage", "name": "image", "description": " Image"}], "description": "Set the size of the image and the overlay respecting the\nmaxHeight/maxWidth ratio.", "guessedname": "_uiSetImageSize", "guessedtype": "function"}, "_syncImageViewerUI": {"protected": "", "description": "Sync the ImageViewer UI.", "guessedname": "_syncImageViewerUI", "guessedtype": "function"}, "hidePaginator": {"description": "Hide the <a href=\"Paginator.html\">Paginator</a> with the thumbnails\nlist.", "guessedname": "hidePaginator", "guessedtype": "function"}, "_onPlayingChange": {"description": "Fires before the value of the\n<a href=\"ImageGallery.html#config_playing\">playing</a> attribute change.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onPlayingChange", "guessedtype": "function"}, "showPaginator": {"description": "Show the <a href=\"Paginator.html\">Paginator</a> with the thumbnails\nlist.", "guessedname": "showPaginator", "guessedtype": "function"}, "hideControls": {"description": "Hide all UI controls (i.e., arrows, close icon etc).", "guessedname": "hideControls", "guessedtype": "function"}, "getCurrentLink": {"return": {"type": "Node", "description": ""}, "description": "Get the current loaded node link reference.", "guessedname": "getCurrentLink", "guessedtype": "function"}, "_onKeyInteraction": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " click event facade"}], "description": "Handles the key interaction (i.e., next, prev etc).", "guessedname": "_onKeyInteraction", "guessedtype": "function"}, "_onLoadImage": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Fires on a image load.", "guessedname": "_onLoadImage", "guessedtype": "function"}, "showMask": {"description": "Show the the OverlayMask used on the <a\nhref=\"ImageViewer.html#config_modal\">modal</a>.", "guessedname": "showMask", "guessedtype": "function"}, "renderUI": {"protected": "", "description": "Create the DOM structure for the ImageGallery. Lifecycle.", "guessedname": "renderUI", "guessedtype": "function"}}, "extends": "ImageViewer", "superclass": "ImageViewer", "file": "ak", "guessedtype": "property", "shortname": "ImageGallery", "properties": {"_timer": {"protected": "", "type": "Number", "description": "Stores the <code>A.later</code> reference.", "guessedname": "_timer", "guessedtype": "property"}, "ImageGallery.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}, "ImageViewer.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}, "_keyHandler": {"protected": "", "type": "EventHandler", "description": "Handler for the key events.", "guessedname": "_keyHandler", "guessedtype": "property"}, "ImageViewer.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the ImageViewer.", "guessedname": "ATTRS", "guessedtype": "property"}, "toolbar": {"protected": "", "type": "Toolbar", "description": "Toolbar instance reference.", "guessedname": "toolbar", "guessedtype": "property"}, "ImageGallery.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the ImageGallery.", "guessedname": "ATTRS", "guessedtype": "property"}}, "description": "<p><img src=\"assets/images/aui-image-viewer-gallery/main.png\"/></p>\nA base class for ImageGallery, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Displays an image in a Overlay</li>\n<li>Displays list of thumbnails of the images as a control</li>\n<li>Slide show functionalities (i.e., play, pause etc)</li>\n<li>Keyboard navigation support</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.ImageGallery({\nlinks: '#gallery1 a',\ncaption: 'Liferay Champion Soccer',\ncaptionFromTitle: true,\npreloadNeighborImages: true,\npreloadAllImages: true,\nshowInfo: true\n}).render();\n</code></pre>\nCheck the list of <a href=\"ImageGallery.html#configattributes\">Configuration Attributes</a> available for\nImageGallery."}, "Model": {"since": "3.4.0", "name": "Model", "configs": {"id": {"default": "`null`", "type": "String|Number|null", "description": "A unique identifier for this model. Among other things, this id may be\nused to retrieve model instances from lists, so it should be unique.\nIf the id is empty, this model instance is assumed to represent a new\nitem that hasn't yet been saved.\nIf you would prefer to use a custom attribute as this model's id instead\nof using the `id` attribute (for example, maybe you'd rather use `_id`\nor `uid` as the primary id), you may set the `idAttribute` property to\nthe name of your custom id attribute. The `id` attribute will then\nact as an alias for your custom attribute.", "guessedname": "id", "guessedtype": "property"}, "clientId": {"readonly": "", "type": "String", "description": "A client-only identifier for this model.\nLike the `id` attribute, `clientId` may be used to retrieve model\ninstances from lists. Unlike the `id` attribute, `clientId` is\nautomatically generated, and is only intended to be used on the client\nduring the current pageview.", "guessedname": "clientId", "guessedtype": "property"}}, "constructors": [{"description": "Attribute-based data model with APIs for getting, setting, validating, and\nsyncing attribute values, as well as events for being notified of model changes.\nIn most cases, you'll want to create your own subclass of `Y.Model` and\ncustomize it to meet your needs. In particular, the `sync()` and `validate()`\nmethods are meant to be overridden by custom implementations. You may also want\nto override the `parse()` method to parse non-generic server responses."}], "namespace": "", "module": "loader", "properties": {"lastChange": {"default": "{}", "type": "Object", "description": "Hash of attributes that were changed in the last `change` event. Each item\nin this hash is an object with the following properties:\n`newVal`: The new value of the attribute after it changed.\n`prevVal`: The old value of the attribute before it changed.\n`src`: The source of the change, or `null` if no source was specified."}, "changed": {"default": "{}", "type": "Object", "description": "Hash of attributes that have changed since the last time this model was\nsaved."}, "lists": {"default": "`[]`", "type": "ModelList[]", "description": "Array of `ModelList` instances that contain this model.\nWhen a model is in one or more lists, the model's events will bubble up to\nthose lists. You can subscribe to a model event on a list to be notified\nwhen any model in the list fires that event.\nThis property is updated automatically when this model is added to or\nremoved from a `ModelList` instance. You shouldn't alter it manually. When\nworking with models in a list, you should always add and remove models using\nthe list's `add()` and `remove()` methods.", "example": "Subscribing to model events on a list:\n// Assuming `list` is an existing Y.ModelList instance.\nlist.on('*:change', function (e) {\n// This function will be called whenever any model in the list\n// fires a `change` event.\n//\n// `e.target` will refer to the model instance that fired the\n// event.\n});"}, "idAttribute": {"default": "`'id'`", "type": "String", "description": "Name of the attribute to use as the unique id (or primary key) for this\nmodel.\nThe default is `id`, but if your persistence layer uses a different name for\nthe primary key (such as `_id` or `uid`), you can specify that here.\nThe built-in `id` attribute will always be an alias for whatever attribute\nname you specify here, so getting and setting `id` will always behave the\nsame as getting and setting your custom id attribute.", "guessedname": "idAttribute", "guessedtype": "property"}}, "guessedname": "GlobalEnv", "methods": {"load": {"description": "Loads this model from the server.\nThis method delegates to the `sync()` method to perform the actual load\noperation, which is an asynchronous action. Specify a _callback_ function to\nbe notified of success or failure.\nIf the load operation succeeds and one or more of the loaded attributes\ndiffer from this model's current attributes, a `change` event will be fired.", "chainable": "", "param": "{Object} [options] Options to be passed to `sync()` and to `set()`\nwhen setting the loaded attributes. It's up to the custom sync\nimplementation to determine what options it supports or requires, if any.", "params": [{"type": "Object", "name": "[options]", "description": " Options to be passed to `sync()` and to `set()`\nwhen setting the loaded attributes. It's up to the custom sync\nimplementation to determine what options it supports or requires, if any."}, {"type": "callback", "name": "[callback]", "description": " Called when the sync operation finishes."}, {"type": "Error|null", "name": "callback.err", "description": " If an error occurred, this parameter will\ncontain the error. If the sync operation succeeded, _err_ will be\n`null`."}, {"type": "Any", "name": "callback.response", "description": " The server's response. This value will\nbe passed to the `parse()` method, which is expected to parse it and\nreturn an attribute hash."}], "guessedname": "load", "guessedtype": "function"}, "set": {"description": "Sets the value of a single attribute. If model validation fails, the\nattribute will not be set and an `error` event will be fired.\nUse `setAttrs()` to set multiple attributes at once.", "chainable": "", "param": "{String} name Attribute name or object property path.", "params": [{"type": "String", "name": "name", "description": " Attribute name or object property path."}, {"type": "any", "name": "value", "description": " Value to set."}, {"type": "Object", "name": "[options]", "description": " Data to be mixed into the event facade of the\n`change` event(s) for these attributes."}, {"type": "Boolean", "name": "[options.silent=false]", "description": " If `true`, no `change` event will\nbe fired."}], "guessedname": "set", "guessedtype": "function", "example": "model.set('foo', 'bar');"}, "get": {"return": {"type": "Any", "description": "Attribute value, or `undefined` if the attribute doesn't\nexist."}, "params": [{"type": "String", "name": "name", "description": " Attribute name or object property path."}], "description": "Returns the value of the specified attribute.\nIf the attribute's value is an object, _name_ may use dot notation to\nspecify the path to a specific property within the object, and the value of\nthat property will be returned.", "param": "{String} name Attribute name or object property path.", "example": "// Set the 'foo' attribute to an object.\nmyModel.set('foo', {\nbar: {\nbaz: 'quux'\n}\n});\n// Get the value of 'foo'.\nmyModel.get('foo');\n// => {bar: {baz: 'quux'}}\n// Get the value of 'foo.bar.baz'.\nmyModel.get('foo.bar.baz');\n// => 'quux'"}, "_validate": {"return": {"type": "Boolean", "description": "`true` if validation succeeded, `false` otherwise."}, "description": "Calls the public, overridable `validate()` method and fires an `error` event\nif validation fails.", "param": "{Object} attributes Attribute hash.", "protected": "", "params": [{"type": "Object", "name": "attributes", "description": " Attribute hash."}], "guessedname": "_validate", "guessedtype": "function"}, "isModified": {"return": {"type": "Boolean", "description": "`true` if this model has changed since it was last saved,\n`false` otherwise."}, "description": "Returns `true` if any attribute of this model has been changed since the\nmodel was last saved.\nNew models (models for which `isNew()` returns `true`) are implicitly\nconsidered to be \"modified\" until the first time they're saved.", "guessedname": "isModified", "guessedtype": "function"}, "isNew": {"return": {"type": "Boolean", "description": "`true` if this model is new, `false` otherwise."}, "description": "Returns `true` if this model is \"new\", meaning it hasn't been saved since it\nwas created.\nNewness is determined by checking whether the model's `id` attribute has\nbeen set. An empty id is assumed to indicate a new model, whereas a\nnon-empty id indicates a model that was either loaded or has been saved\nsince it was created.", "guessedname": "isNew", "guessedtype": "function"}, "sync": {"param": "{String} action Sync action to perform. May be one of the following:\n`create`: Store a newly-created model for the first time.\n`delete`: Delete an existing model.\n`read`  : Load an existing model.\n`update`: Update an existing model.", "params": [{"type": "String", "name": "action", "description": " Sync action to perform. May be one of the following:\n`create`: Store a newly-created model for the first time.\n`delete`: Delete an existing model.\n`read`  : Load an existing model.\n`update`: Update an existing model."}, {"type": "Object", "name": "[options]", "description": " Sync options. It's up to the custom sync\nimplementation to determine what options it supports or requires, if any."}, {"type": "callback", "name": "[callback]", "description": " Called when the sync operation finishes."}, {"type": "Error|null", "name": "callback.err", "description": " If an error occurred, this parameter will\ncontain the error. If the sync operation succeeded, _err_ will be\nfalsy."}, {"type": "Any", "name": "[callback.response]", "description": " The server's response. This value will\nbe passed to the `parse()` method, which is expected to parse it and\nreturn an attribute hash."}], "description": "Override this method to provide a custom persistence implementation for this\nmodel. The default just calls the callback without actually doing anything.\nThis method is called internally by `load()`, `save()`, and `destroy()`.", "guessedname": "sync", "guessedtype": "function"}, "undo": {"description": "Reverts the last change to the model.\nIf an _attrNames_ array is provided, then only the named attributes will be\nreverted (and only if they were modified in the previous change). If no\n_attrNames_ array is provided, then all changed attributes will be reverted\nto their previous values.\nNote that only one level of undo is available: from the current state to the\nprevious state. If `undo()` is called when no previous state is available,\nit will simply do nothing.", "chainable": "", "param": "{Array} [attrNames] Array of specific attribute names to revert. If\nnot specified, all attributes modified in the last change will be\nreverted.", "params": [{"type": "Array", "name": "[attrNames]", "description": " Array of specific attribute names to revert. If\nnot specified, all attributes modified in the last change will be\nreverted."}, {"type": "Object", "name": "[options]", "description": " Data to be mixed into the event facade of the\nchange event(s) for these attributes."}, {"type": "Boolean", "name": "[options.silent=false]", "description": " If `true`, no `change` event will\nbe fired."}], "guessedname": "undo", "guessedtype": "function"}, "generateClientId": {"return": {"type": "String", "description": "Unique clientId."}, "description": "Returns a clientId string that's unique among all models on the current page\n(even models in other YUI instances). Uniqueness across pageviews is\nunlikely.", "guessedname": "generateClientId", "guessedtype": "function"}, "parse": {"return": {"type": "Object", "description": "Attribute hash."}, "description": "Called to parse the _response_ when the model is loaded from the server.\nThis method receives a server _response_ and is expected to return an\nattribute hash.\nThe default implementation assumes that _response_ is either an attribute\nhash or a JSON string that can be parsed into an attribute hash. If\n_response_ is a JSON string and either `Y.JSON` or the native `JSON` object\nare available, it will be parsed automatically. If a parse error occurs, an\n`error` event will be fired and the model will not be updated.\nYou may override this method to implement custom parsing logic if necessary.", "param": "{Any} response Server response.", "params": [{"type": "Any", "name": "response", "description": " Server response."}], "guessedname": "parse", "guessedtype": "function"}, "_defAttrChangeFn": {"description": "Duckpunches the `_defAttrChangeFn()` provided by `Y.Attribute` so we can\nhave a single global notification when a change event occurs.", "param": "{EventFacade} e", "protected": "", "params": [{"type": "EventFacade", "name": "e", "description": ""}], "guessedname": "_defAttrChangeFn", "guessedtype": "function"}, "addAttr": {"return": {"type": "Object", "description": "A reference to the host object."}, "description": "Duckpunches the `addAttr` method provided by `Y.Attribute` to keep the\n`id` attribute’s value and a custom id attribute’s (if provided) value\nin sync when adding the attributes to the model instance object.\nMarked as protected to hide it from Model's public API docs, even though\nthis is a public method in Attribute.", "chainable": "", "param": "{String} name The name of the attribute.", "protected": "", "params": [{"type": "String", "name": "name", "description": " The name of the attribute."}, {"type": "Object", "name": "config", "description": " An object with attribute configuration property/value\npairs, specifying the configuration for the attribute."}, {"type": "boolean", "name": "lazy", "description": " (optional) Whether or not to add this attribute lazily\n(on the first call to get/set)."}], "guessedname": "addAttr", "guessedtype": "function"}, "setAttrs": {"description": "Sets the values of multiple attributes at once. If model validation fails,\nthe attributes will not be set and an `error` event will be fired.", "chainable": "", "param": "{Object} attributes Hash of attribute names and values to set.", "params": [{"type": "Object", "name": "attributes", "description": " Hash of attribute names and values to set."}, {"type": "Object", "name": "[options]", "description": " Data to be mixed into the event facade of the\n`change` event(s) for these attributes."}, {"type": "Boolean", "name": "[options.silent=false]", "description": " If `true`, no `change` event will\nbe fired."}], "guessedname": "setAttrs", "guessedtype": "function", "example": "model.setAttrs({\nfoo: 'bar',\nbaz: 'quux'\n});"}, "destroy": {"description": "Destroys this model instance and removes it from its containing lists, if\nany.\nIf `options['delete']` is `true`, then this method also delegates to the\n`sync()` method to delete the model from the persistence layer, which is an\nasynchronous action. Provide a _callback_ function to be notified of success\nor failure.", "chainable": "", "param": "{Object} [options] Sync options. It's up to the custom sync\nimplementation to determine what options it supports or requires, if\nany.", "params": [{"type": "Object", "name": "[options]", "description": " Sync options. It's up to the custom sync\nimplementation to determine what options it supports or requires, if\nany."}, {"type": "Boolean", "name": "[options.delete=false]", "description": " If `true`, the model will be\ndeleted via the sync layer in addition to the instance being destroyed."}, {"type": "callback", "name": "[callback]", "description": " Called when the sync operation finishes."}, {"type": "Error|null", "name": "callback.err", "description": " If an error occurred, this parameter will\ncontain the error. If the sync operation succeeded, _err_ will be\n`null`."}], "guessedname": "destroy", "guessedtype": "function"}, "getAsHTML": {"return": {"type": "String", "description": "HTML-escaped attribute value."}, "description": "Returns an HTML-escaped version of the value of the specified string\nattribute. The value is escaped using `Y.Escape.html()`.", "param": "{String} name Attribute name or object property path.", "params": [{"type": "String", "name": "name", "description": " Attribute name or object property path."}], "guessedname": "getAsHTML", "guessedtype": "function"}, "save": {"description": "Saves this model to the server.\nThis method delegates to the `sync()` method to perform the actual save\noperation, which is an asynchronous action. Specify a _callback_ function to\nbe notified of success or failure.\nIf the save operation succeeds and one or more of the attributes returned in\nthe server's response differ from this model's current attributes, a\n`change` event will be fired.", "chainable": "", "param": "{Object} [options] Options to be passed to `sync()` and to `set()`\nwhen setting synced attributes. It's up to the custom sync implementation\nto determine what options it supports or requires, if any.", "params": [{"type": "Object", "name": "[options]", "description": " Options to be passed to `sync()` and to `set()`\nwhen setting synced attributes. It's up to the custom sync implementation\nto determine what options it supports or requires, if any."}, {"type": "callback", "name": "[callback]", "description": " Called when the sync operation finishes."}, {"type": "Error|null", "name": "callback.err", "description": " If an error occurred, this parameter will\ncontain the error. If the sync operation succeeded, _err_ will be\n`null`."}, {"type": "Any", "name": "callback.response", "description": " The server's response. This value will\nbe passed to the `parse()` method, which is expected to parse it and\nreturn an attribute hash."}], "guessedname": "save", "guessedtype": "function"}, "toJSON": {"return": {"type": "Object", "description": "Copy of this model's attributes."}, "description": "Returns a copy of this model's attributes that can be passed to\n`Y.JSON.stringify()` or used for other nefarious purposes.\nThe `clientId` attribute is not included in the returned object.\nIf you've specified a custom attribute name in the `idAttribute` property,\nthe default `id` attribute will not be included in the returned object.", "guessedname": "toJSON", "guessedtype": "function"}, "validate": {"return": {"type": "Any", "description": "Any return value other than `undefined` or `null` will be\ntreated as a validation failure."}, "description": "Override this method to provide custom validation logic for this model.\nWhile attribute-specific validators can be used to validate individual\nattributes, this method gives you a hook to validate a hash of attributes\nwhen multiple attributes are changed at once. This method is called\nautomatically before `set`, `setAttrs`, and `save` take action.\nA call to `validate` that doesn't return anything will be treated as a\nsuccess. If the `validate` method returns a value, it will be treated as a\nfailure, and the returned value (which may be a string or an object\ncontaining information about the failure) will be passed along to the\n`error` event.", "param": "{Object} attributes Attribute hash containing changed attributes.", "params": [{"type": "Object", "name": "attributes", "description": " Attribute hash containing changed attributes."}], "guessedname": "validate", "guessedtype": "function"}, "getAsURL": {"return": {"type": "String", "description": "URL-encoded attribute value."}, "description": "Returns a URL-encoded version of the value of the specified string\nattribute. The value is encoded using the native `encodeURIComponent()`\nfunction.", "param": "{String} name Attribute name or object property path.", "params": [{"type": "String", "name": "name", "description": " Attribute name or object property path."}], "guessedname": "getAsURL", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "model.js", "guessedtype": "property", "shortname": "Model", "events": {"idChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "idChange", "description": "Fires when the value for the configuration attribute 'id' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "clientIdChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "clientIdChange", "description": "Fires when the value for the configuration attribute 'clientId' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "change": {"param": "{Object} changed Hash of change information for each attribute that\nchanged. Each item in the hash has the following properties:", "params": [{"type": "Object", "name": "changed", "description": " Hash of change information for each attribute that\nchanged. Each item in the hash has the following properties:"}, {"type": "Any", "name": "changed.newVal", "description": " New value of the attribute."}, {"type": "Any", "name": "changed.prevVal", "description": " Previous value of the attribute."}, {"type": "String|null", "name": "changed.src", "description": " Source of the change event, if any."}], "description": "Fired when one or more attributes on this model are changed.", "guessedname": "EVT_CHANGE", "guessedtype": "property"}, "error": {"param": "{Any} error Error message, object, or exception generated by the\nerror. Calling `toString()` on this should result in a meaningful error\nmessage.", "params": [{"type": "Any", "name": "error", "description": " Error message, object, or exception generated by the\nerror. Calling `toString()` on this should result in a meaningful error\nmessage."}, {"type": "String", "name": "src", "description": " Source of the error. May be one of the following (or any\ncustom error source defined by a Model subclass):\n`parse`: An error parsing a JSON response. The response in question will\nbe provided as the `response` property on the event facade.\n`validate`: The model failed to validate. The attributes being validated\nwill be provided as the `attributes` property on the event facade."}], "description": "Fired when an error occurs, such as when the model doesn't validate or when\na sync layer response can't be parsed.", "guessedname": "EVT_ERROR", "guessedtype": "property"}}, "description": "Attribute-based data model with APIs for getting, setting, validating, and\nsyncing attribute values, as well as events for being notified of model changes.\nIn most cases, you'll want to create your own subclass of `Y.Model` and\ncustomize it to meet your needs. In particular, the `sync()` and `validate()`\nmethods are meant to be overridden by custom implementations. You may also want\nto override the `parse()` method to parse non-generic server responses."}, "Plugin.ResizeConstrained": {"properties": {"constrainSurrounding": {"default": "null", "type": "Object", "description": "Stores the <code>constrain</code>\nsurrounding information retrieved from\n<a href=\"Resize.html#method__getBoxSurroundingInfo\">_getBoxSurroundingInfo</a>.", "guessedname": "constrainSurrounding", "guessedtype": "property"}}, "name": "Plugin.ResizeConstrained", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "A Resize plugin that will attempt to constrain the resize node to the boundaries."}], "namespace": "Plugin", "module": "resize", "events": {"tickXChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "tickXChange", "description": "Fires when the value for the configuration attribute 'tickX' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "minHeightChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "minHeightChange", "description": "Fires when the value for the configuration attribute 'minHeight' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "preserveRatioChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "preserveRatioChange", "description": "Fires when the value for the configuration attribute 'preserveRatio' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "constrainChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "constrainChange", "description": "Fires when the value for the configuration attribute 'constrain' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "tickYChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "tickYChange", "description": "Fires when the value for the configuration attribute 'tickY' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "maxHeightChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "maxHeightChange", "description": "Fires when the value for the configuration attribute 'maxHeight' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "maxWidthChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "maxWidthChange", "description": "Fires when the value for the configuration attribute 'maxWidth' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "minWidthChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "minWidthChange", "description": "Fires when the value for the configuration attribute 'minWidth' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "methods": {"_checkWidth": {"protected": "", "description": "Update the current values on <a href=\"Resize.html#property_info\">info</a>\nto respect the maxWidth and minWidth.", "guessedname": "_checkWidth", "guessedtype": "function"}, "_checkRegion": {"protected": "", "return": {"type": "boolean", "description": ""}, "description": "Check whether the resizable node is inside the constrain region.", "guessedname": "_checkRegion", "guessedtype": "function"}, "_checkRatio": {"protected": "", "description": "Update the current values on <a href=\"Resize.html#property_info\">info</a>\ncalculating the correct ratio for the other values.", "guessedname": "_checkRatio", "guessedtype": "function"}, "_checkConstrain": {"description": "Helper method to update the current values on\n<a href=\"Resize.html#property_info\">info</a> to respect the\nconstrain node.", "param": "{String} axis 'top' or 'left'", "protected": "", "params": [{"type": "String", "name": "axis", "description": " 'top' or 'left'"}, {"type": "String", "name": "axisConstrain", "description": " 'bottom' or 'right'"}, {"type": "String", "name": "offset", "description": " 'offsetHeight' or 'offsetWidth'"}], "guessedname": "_checkConstrain", "guessedtype": "function"}, "_getConstrainRegion": {"protected": "", "return": {"type": "Object Region", "description": ""}, "description": "Get the constrain region based on the <code>constrain</code>\nattribute.", "guessedname": "_getConstrainRegion", "guessedtype": "function"}, "_checkHeight": {"protected": "", "description": "Update the current values on <a href=\"Resize.html#property_info\">info</a>\nto respect the maxHeight and minHeight.", "guessedname": "_checkHeight", "guessedtype": "function"}}, "extends": "Plugin.Base", "superclass": "Plugin.Base", "file": "resize.js", "shortname": "ResizeConstrained", "configs": {"tickX": {"default": "false", "type": "Number | false", "description": "The number of x ticks to span the resize to.", "guessedname": "tickX", "guessedtype": "property"}, "tickY": {"default": "false", "type": "Number | false", "description": "The number of y ticks to span the resize to.", "guessedname": "tickY", "guessedtype": "property"}, "maxWidth": {"default": "Infinity", "type": "Number", "description": "The maximum width of the element", "guessedname": "maxWidth", "guessedtype": "property"}, "minHeight": {"default": "15", "type": "Number", "description": "The minimum height of the element", "guessedname": "minHeight", "guessedtype": "property"}, "maxHeight": {"default": "Infinity", "type": "Number", "description": "The maximum height of the element", "guessedname": "maxHeight", "guessedtype": "property"}, "minWidth": {"default": "15", "type": "Number", "description": "The minimum width of the element", "guessedname": "minWidth", "guessedtype": "property"}, "preserveRatio": {"default": "false", "type": "boolean", "description": "Maintain the element's ratio when resizing.", "guessedname": "preserveRatio", "guessedtype": "property"}, "constrain": {"type": "{String|Object|Node}", "description": "Will attempt to constrain the resize node to the boundaries. Arguments:<br>\n'view': Contrain to Viewport<br>\n'#selector_string': Constrain to this node<br>\n'{Region Object}': An Object Literal containing a valid region (top, right, bottom, left) of page positions", "guessedname": "constrain", "guessedtype": "property"}}, "description": "A Resize plugin that will attempt to constrain the resize node to the boundaries."}, "Plugin.EditorPara": {"name": "Plugin.EditorPara", "constructors": [{"description": "Plugin for Editor to paragraph auto wrapping and correction."}], "namespace": "", "module": "editor", "guessedname": "EditorPara", "methods": {"_afterEditorReady": {"private": "", "description": "Performs a block element filter when the Editor is first ready", "guessedname": "_afterEditorReady", "guessedtype": "function"}, "_onNodeChange": {"private": "", "description": "nodeChange handler to handle fixing an empty document.", "guessedname": "_onNodeChange", "guessedtype": "function"}, "_afterPaste": {"private": "", "description": "Performs block/paste filtering after paste.", "guessedname": "_afterPaste", "guessedtype": "function"}, "_fixFirstPara": {"private": "", "description": "Utility method to create an empty paragraph when the document is empty.", "guessedname": "_fixFirstPara", "guessedtype": "function"}, "_afterContentChange": {"private": "", "description": "Performs a block element filter when the Editor after an content change", "guessedname": "_afterContentChange", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "editor.js", "guessedtype": "function", "shortname": "Plugin.EditorPara", "properties": {"NS": {"static": "", "description": "editorPara", "guessedname": "NS", "guessedtype": "property"}, "NAME": {"static": "", "description": "editorPara", "guessedname": "NAME", "guessedtype": "property"}}, "description": "Plugin for Editor to paragraph auto wrapping and correction."}, "View": {"since": "3.4.0", "name": "View", "constructors": [{"description": "Represents a logical piece of an application's user interface, and provides a\nlightweight, overridable API for rendering content and handling delegated DOM\nevents on a container element.\nThe View class imposes little structure and provides only minimal functionality\nof its own: it's basically just an overridable API interface that helps you\nimplement custom views."}], "namespace": "", "module": "uploader", "methods": {"attachEvents": {"param": "{Object} events Hash of events to attach. See the docs for the\n`events` property for details on the format.", "params": [{"type": "Object", "name": "events", "description": " Hash of events to attach. See the docs for the\n`events` property for details on the format."}], "description": "Attaches delegated event handlers to this view's `container` element. This\nmethod is called internally to subscribe to events configured in the\n`events` property or config attribute when the view is initialized.\nYou may override this method to customize the event attaching logic.", "guessedname": "attachEvents", "guessedtype": "function"}, "create": {"return": {"type": "Node", "description": "Node instance of the created container node."}, "description": "Creates and returns this view's `container` node from the specified HTML\nstring, DOM element, or existing `Y.Node` instance. This method is called\ninternally when the view is initialized.\nBy default, the created node is _not_ added to the DOM automatically.\nYou may override this method to customize how the container node is created\n(such as by rendering it from a template). Your method should return a\n`Y.Node` instance.", "param": "{HTMLElement|Node|String} container HTML string, DOM element, or\n`Y.Node` instance to use as the container node.", "params": [{"type": "HTMLElement|Node|String", "name": "container", "description": " HTML string, DOM element, or\n`Y.Node` instance to use as the container node."}], "guessedname": "create", "guessedtype": "function"}, "render": {"chainable": "", "description": "Renders the view.\nThis method is a noop by default. Override it in your subclass to provide a\ncustom implementation that renders this view's content and appends it to the\n`container` element. Ideally your `render` method should also return `this`\nas the end to allow chaining, but that's up to you.\nSince there's no default renderer, you're free to render your view however\nyou see fit, whether that means manipulating the DOM directly, dumping\nstrings into `innerHTML`, or using a template language of some kind.\nFor basic templating needs, `Y.Node.create()` and `Y.Lang.sub()` may\nsuffice, but there are no restrictions on what tools or techniques you can\nuse to render your view. All you need to do is append something to the\n`container` element at some point, and optionally append the `container`\nto the DOM if it's not there already.", "guessedname": "render", "guessedtype": "function"}, "remove": {"chainable": "", "description": "Removes this view's `container` element from the DOM (if it's in the DOM),\nbut doesn't destroy it or any event listeners attached to it.", "guessedname": "remove", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "view.js", "shortname": "View", "properties": {"model": {"default": "undefined", "type": "Model", "description": "Model instance associated with this view instance.\nThis is entirely optional. There's no requirement that views be associated\nwith models, but if you do intend to associate your view with a model, then\nspecifying that model instance at instantiation time will cause a reference\nto be stored here for convenience."}, "container": {"default": "\"<div/>\"", "type": "HTMLElement|Node|String", "description": "Container node into which this view's content will be rendered.\nThe container node serves as the host for all DOM events attached by the\nview. Delegation is used to handle events on children of the container,\nallowing the container's contents to be re-rendered at any time without\nlosing event subscriptions.\nThe default container is a simple `<div>`, but you can override this in a\nsubclass, or by passing in a custom `container` config value at\ninstantiation time.\nWhen `container` is overridden by a subclass or passed as a config option at\ninstantiation time, it may be provided as an HTML string, a DOM element, or\na `Y.Node` instance. During initialization, this view's `create()` method\nwill be called to convert the container into a `Y.Node` instance if it isn't\none already.\nThe container is not added to the page automatically. This allows you to\nhave full control over how and when your view is actually rendered to the\npage.", "guessedname": "container", "guessedtype": "property"}, "events": {"description": "Hash of CSS selectors mapped to events to delegate to elements matching\nthose selectors.\nCSS selectors are relative to the `container` element. Events are attached\nto the container, and delegation is used so that subscribers are only\nnotified of events that occur on elements inside the container that match\nthe specified selectors. This allows the container's contents to be\nre-rendered as needed without losing event subscriptions.\nEvent handlers can be specified either as functions or as strings that map\nto function names on this view instance or its prototype.\nThe `this` object in event handlers will refer to this view instance. If\nyou'd prefer `this` to be something else, use `Y.bind()` to bind a custom\n`this` object.", "default": "{}", "guessedname": "events", "guessedtype": "property", "type": "Object", "example": "var view = new Y.View({\nevents: {\n// Call `this.toggle()` whenever the element with the id\n// \"toggle-button\" is clicked.\n'#toggle-button': {click: 'toggle'},\n// Call `this.hoverOn()` when the mouse moves over any element\n// with the \"hoverable\" class, and `this.hoverOff()` when the\n// mouse moves out of any element with the \"hoverable\" class.\n'.hoverable': {\nmouseover: 'hoverOn',\nmouseout : 'hoverOff'\n}\n}\n});"}, "template": {"default": "''", "type": "any", "description": "Template for this view.\nThis is a convenience property that has no default behavior of its own. It's\nonly provided as a convention to allow you to store whatever you consider to\nbe a template, whether that's an HTML string, a `Y.Node` instance, a\nMustache template, or anything else your little heart desires.\nHow this template gets used is entirely up to you and your custom `render()`\nmethod.", "guessedname": "template", "guessedtype": "property"}, "modelList": {"default": "undefined", "type": "ModelList", "description": "ModelList instance associated with this view instance.\nThis is entirely optional. There's no requirement that views be associated\nwith model lists, but if you do intend to associate your view with a model\nlist, then specifying that list instance at instantiation time will cause a\nreference to be stored here for convenience."}}, "description": "Represents a logical piece of an application's user interface, and provides a\nlightweight, overridable API for rendering content and handling delegated DOM\nevents on a container element.\nThe View class imposes little structure and provides only minimal functionality\nof its own: it's basically just an overridable API interface that helps you\nimplement custom views."}, "Plugin.ScrollViewPaginator": {"name": "Plugin.ScrollViewPaginator", "constructors": [{"description": "Scrollview plugin that adds support for paging"}], "namespace": "Plugin", "module": "scrollview-paginator", "events": {"selectorChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "selectorChange", "description": "Fires when the value for the configuration attribute 'selector' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "totalChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "totalChange", "description": "Fires when the value for the configuration attribute 'total' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "indexChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "indexChange", "description": "Fires when the value for the configuration attribute 'index' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "configs": {"index": {"default": "0", "type": "{Number}", "description": "The active page number for a paged scrollview", "guessedname": "index", "guessedtype": "property"}, "total": {"default": "0", "type": "{Number}", "description": "The total number of pages", "guessedname": "total", "guessedtype": "property"}, "selector": {"type": "{String}", "description": "CSS selector for a page inside the scrollview. The scrollview\nwill snap to the closest page.", "guessedname": "selector", "guessedtype": "property"}}, "methods": {"_afterIndexChange": {"protected": "", "description": "index attr change handler", "guessedname": "_afterIndexChange", "guessedtype": "function"}, "prev": {"description": "Scroll to the previous page in the scrollview, with animation", "guessedname": "prev", "guessedtype": "function"}, "_flickFrame": {"protected": "", "description": "Executed to respond to the flick event, by over-riding the default flickFrame animation. \nThis is needed to determine if the next or prev page should be activated.", "guessedname": "_flickFrame", "guessedtype": "function"}, "_calcOffsets": {"protected": "", "description": "Calculate the page boundary offsets", "guessedname": "_calcOffsets", "guessedtype": "function"}, "_uiIndex": {"protected": "", "description": "Update the UI based on the current page index", "guessedname": "_uiIndex", "guessedtype": "function"}, "initializer": {"description": "Designated initializer", "guessedname": "initializer", "guessedtype": "function"}, "scrollTo": {"param": "index {Number} The index of the page to scroll to", "params": [{"type": "Number", "name": "index", "description": "  The index of the page to scroll to"}, {"type": "Number", "name": "duration", "description": "  The number of ms the animation should last"}, {"type": "String", "name": "easing", "description": "  The timing function to use in the animation"}], "description": "Scroll to a given page in the scrollview, with animation.", "guessedname": "scrollTo", "guessedtype": "function"}, "snapToCurrent": {"param": "duration {Number} The number of ms the animation should last", "params": [{"type": "Number", "name": "duration", "description": "  The number of ms the animation should last"}, {"type": "String", "name": "easing", "description": "  The timing function to use in the animation"}], "description": "Snaps the scrollview to the currently selected page", "guessedname": "snapToCurrent", "guessedtype": "function"}, "next": {"description": "Scroll to the next page in the scrollview, with animation", "guessedname": "next", "guessedtype": "function"}, "_scrollEnded": {"description": "scrollEnd handler detects if a page needs to change", "param": "{Event.Facade}", "protected": "", "params": [], "guessedname": "_scrollEnded", "guessedtype": "function"}, "_afterRender": {"protected": "", "description": "After host render handler", "guessedname": "_afterRender", "guessedtype": "function"}}, "extends": "Plugin.Base", "superclass": "Plugin.Base", "file": "scrollview-paginator.js", "shortname": "ScrollViewPaginator", "properties": {"SNAP_TO_CURRENT": {"static": "", "description": "The default snap to current duration and easing values used on scroll end.", "guessedname": "SNAP_TO_CURRENT", "guessedtype": "property"}, "NS": {"description": "The namespace on which the plugin will reside", "default": "'pages'", "static": "", "guessedname": "NS", "guessedtype": "property", "type": "String"}, "NAME": {"description": "The identity of the plugin", "default": "'paginatorPlugin'", "static": "", "guessedname": "NAME", "guessedtype": "property", "type": "String"}, "ATTRS": {"type": "Object", "static": "", "description": "The default attribute configuration for the plugin", "guessedname": "ATTRS", "guessedtype": "property"}}, "description": "Scrollview plugin that adds support for paging"}, "EventHandle": {"name": "EventHandle", "constructors": [{"params": [{"type": "CustomEvent", "name": "evt", "description": " the custom event."}, {"type": "Subscriber", "name": "sub", "description": " the subscriber."}], "description": "Return value from all subscribe operations"}], "namespace": "", "module": "event-custom", "guessedname": "EventHandle", "methods": {"detach": {"return": {"type": "int", "description": "the number of detached listeners"}, "description": "Detaches this subscriber", "guessedname": "detach", "guessedtype": "function"}, "monitor": {"return": {"type": "EventHandle", "description": "return value from the monitor event subscription."}, "description": "Monitor the event state for the subscribed event.  The first parameter\nis what should be monitored, the rest are the normal parameters when\nsubscribing to an event.", "param": "what {string} what to monitor ('attach', 'detach', 'publish').", "params": [{"type": "string", "name": "what", "description": "  what to monitor ('attach', 'detach', 'publish')."}], "guessedname": "monitor", "guessedtype": "function"}}, "file": "event-custom-base.js", "guessedtype": "function", "shortname": "EventHandle", "properties": {"evt": {"type": "CustomEvent", "description": "The custom event", "guessedname": "evt", "guessedtype": "property"}, "sub": {"type": "Subscriber", "description": "The subscriber object", "guessedname": "sub", "guessedtype": "property"}}, "description": "Return value from all subscribe operations"}, "Do.Error": {"name": "Do.Error", "deprecated": "use Y.Do.Halt or Y.Do.Prevent", "constructors": [{"params": [{"type": "String", "name": "msg", "description": "  (optional) Explanation of the altered return value"}, {"type": "any", "name": "retVal", "description": "  Return value passed to code that invoked the wrapped\nfunction."}], "description": "Return an Error object when you want to terminate the execution\nof all subsequent method calls."}], "namespace": "", "module": "event-custom", "guessedname": "Error", "file": "event-custom-base.js", "guessedtype": "property", "shortname": "Do.Error", "description": "Return an Error object when you want to terminate the execution\nof all subsequent method calls."}, "HistoryHTML5": {"name": "HistoryHTML5", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " (optional) Configuration object."}], "description": "<p>\nProvides browser history management using the HTML5 history API.\n</p>\n<p>\nWhen calling the <code>add()</code>, <code>addValue()</code>,\n<code>replace()</code>, or <code>replaceValue()</code> methods on\n<code>HistoryHTML5</code>, the following additional options are supported:\n</p>\n<dl>\n<dt><strong>title (String)</strong></dt>\n<dd>\nTitle to use for the new history entry. Browsers will typically display\nthis title to the user in the detailed history window or in a dropdown\nmenu attached to the back/forward buttons. If not specified, the title\nof the current document will be used.\n</dd>\n<dt><strong>url (String)</strong></dt>\n<dd>\nURL to display to the user for the new history entry. This URL will be\nvisible in the browser's address bar and will be the bookmarked URL if\nthe user bookmarks the page. It may be a relative path (\"foo/bar\"), an\nabsolute path (\"/foo/bar\"), or a full URL (\"http://example.com/foo/bar\").\nIf you specify a full URL, the origin <i>must</i> be the same as the \norigin of the current page, or an error will occur. If no URL is\nspecified, the current URL will not be changed.\n</dd>\n</dl>"}], "namespace": "", "module": "history", "guessedname": "HistoryBase", "methods": {"_storeState": {"description": "Overrides HistoryBase's <code>_storeState()</code> and pushes or replaces\na history entry using the HTML5 history API when necessary.", "param": "{String} src Source of the changes.", "protected": "", "params": [{"type": "String", "name": "src", "description": " Source of the changes."}, {"type": "Object", "name": "newState", "description": " New state to store."}, {"type": "Object", "name": "options", "description": " Zero or more options."}], "guessedname": "_storeState", "guessedtype": "function"}, "_onPopState": {"description": "Handler for popstate events.", "param": "{Event} e", "protected": "", "params": [{"type": "Event", "name": "e", "description": ""}], "guessedname": "_onPopState", "guessedtype": "function"}}, "extends": "HistoryBase", "superclass": "HistoryBase", "file": "history-html5.js", "guessedtype": "property", "shortname": "HistoryHTML5", "properties": {"SRC_POPSTATE": {"description": "Constant used to identify state changes originating from\n<code>popstate</code> events.", "static": "", "guessedname": "SRC_POPSTATE", "guessedtype": "property", "type": "String", "final": ""}}, "description": "<p>\nProvides browser history management using the HTML5 history API.\n</p>\n<p>\nWhen calling the <code>add()</code>, <code>addValue()</code>,\n<code>replace()</code>, or <code>replaceValue()</code> methods on\n<code>HistoryHTML5</code>, the following additional options are supported:\n</p>\n<dl>\n<dt><strong>title (String)</strong></dt>\n<dd>\nTitle to use for the new history entry. Browsers will typically display\nthis title to the user in the detailed history window or in a dropdown\nmenu attached to the back/forward buttons. If not specified, the title\nof the current document will be used.\n</dd>\n<dt><strong>url (String)</strong></dt>\n<dd>\nURL to display to the user for the new history entry. This URL will be\nvisible in the browser's address bar and will be the bookmarked URL if\nthe user bookmarks the page. It may be a relative path (\"foo/bar\"), an\nabsolute path (\"/foo/bar\"), or a full URL (\"http://example.com/foo/bar\").\nIf you specify a full URL, the origin <i>must</i> be the same as the \norigin of the current page, or an error will occur. If no URL is\nspecified, the current URL will not be changed.\n</dd>\n</dl>"}, "Plugin.ScrollViewScrollbars": {"name": "Plugin.ScrollViewScrollbars", "constructors": [{"description": "ScrollView plugin that adds scroll indicators to ScrollView instances"}], "namespace": "Plugin", "module": "scrollview-scrollbars", "events": {"horizontalNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "horizontalNodeChange", "description": "Fires when the value for the configuration attribute 'horizontalNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "verticalNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "verticalNodeChange", "description": "Fires when the value for the configuration attribute 'verticalNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "configs": {"horizontalNode": {"type": "Y.Node", "description": "Horizontal scrollbar node", "guessedname": "horizontalNode", "guessedtype": "property"}, "verticalNode": {"type": "Y.Node", "description": "Vertical scrollbar node", "guessedname": "verticalNode", "guessedtype": "property"}}, "methods": {"_setNode": {"return": {"type": "Node", "description": "The Y.Node instance for the scrollbar"}, "description": "Setter for the verticalNode and horizontalNode attributes", "param": "node {Node} The Y.Node instance for the scrollbar", "protected": "", "params": [{"type": "Node", "name": "node", "description": "  The Y.Node instance for the scrollbar"}, {"type": "String", "name": "name", "description": "  The attribute name"}], "guessedname": "_setNode", "guessedtype": "function"}, "_hostDimensionsChange": {"protected": "", "description": "Set up the DOM nodes for the scrollbars. This method is invoked whenever the\nhost's _uiDimensionsChange fires, giving us the opportunity to remove un-needed\nscrollbars, as well as add one if necessary.", "guessedname": "_hostDimensionsChange", "guessedtype": "function"}, "_renderBar": {"description": "Adds or removes a scrollbar node from the document.", "param": "{Node} bar The scrollbar node", "params": [{"type": "Node", "name": "bar", "description": " The scrollbar node"}, {"type": "boolean", "name": "add", "description": " true, to add the node, false to remove it"}], "private": "", "guessedname": "_renderBar", "guessedtype": "function"}, "show": {"param": "animated {Boolean} Whether or not to animate the showing", "params": [{"type": "Boolean", "name": "animated", "description": "  Whether or not to animate the showing"}], "description": "Show the scroll bar indicators", "guessedname": "show", "guessedtype": "function"}, "hide": {"param": "animated {Boolean} Whether or not to animate the hiding", "params": [{"type": "Boolean", "name": "animated", "description": "  Whether or not to animate the hiding"}], "description": "Hide the scroll bar indicators", "guessedname": "hide", "guessedtype": "function"}, "_show": {"description": "Internal hide/show implementation utility method", "param": "{boolean} show Whether to show or hide the scrollbar", "protected": "", "params": [{"type": "boolean", "name": "show", "description": " Whether to show or hide the scrollbar"}, {"type": "bolean", "name": "animated", "description": " Whether or not to animate while showing/hide"}], "guessedname": "_show", "guessedtype": "function"}, "flash": {"description": "Momentarily flash the scroll bars to indicate current scroll position", "guessedname": "flash", "guessedtype": "function"}, "_clearChildCache": {"description": "Clears child cache", "param": "{Node} node", "params": [{"type": "Node", "name": "node", "description": ""}], "private": "", "guessedname": "_clearChildCache", "guessedtype": "function"}, "initializer": {"description": "Designated initializer", "guessedname": "initializer", "guessedtype": "function"}, "_setChildCache": {"description": "Caches scrollbar child element information,\nto optimize _update implementation", "param": "{Node} node", "params": [{"type": "Node", "name": "node", "description": ""}], "private": "", "guessedname": "_setChildCache", "guessedtype": "function"}, "_updateBar": {"description": "Utility method, to move/resize either vertical or horizontal scrollbars", "param": "{Node} scrollbar The scrollbar node.", "params": [{"type": "Node", "name": "scrollbar", "description": " The scrollbar node."}, {"type": "Number", "name": "current", "description": " The current scroll position."}, {"type": "Number", "name": "duration", "description": " The transition duration."}, {"type": "boolean", "name": "horiz", "description": " true if horizontal, false if vertical."}], "private": "", "guessedname": "_updateBar", "guessedtype": "function"}, "_defaultNode": {"protected": "", "return": {"type": "Node", "description": "The Y.Node instance for the scrollbar"}, "description": "Creates default node instances for scrollbars", "guessedname": "_defaultNode", "guessedtype": "function"}, "_update": {"description": "AOP method, invoked after the host's _uiScrollTo method, \nto position and resize the scroll bars", "param": "x {Number} The current scrollX value", "protected": "", "params": [{"type": "Number", "name": "x", "description": "  The current scrollX value"}, {"type": "Number", "name": "y", "description": "  The current scrollY value"}, {"type": "Number", "name": "duration", "description": "  Number of ms of animation (optional) - used when snapping to bounds"}, {"type": "String", "name": "easing", "description": "  Optional easing equation to use during the animation, if duration is set"}], "guessedname": "_update", "guessedtype": "function"}, "_hostScrollEnd": {"param": "{Event.Facade} e The event facade.", "params": [{"type": "Event.Facade", "name": "e", "description": " The event facade."}], "description": "Handler for the scrollEnd event fired by the host. Default implementation flashes the scrollbar", "guessedname": "_hostScrollEnd", "guessedtype": "function"}}, "extends": "Plugin.Base", "superclass": "Plugin.Base", "file": "scrollview-list.js", "shortname": "ScrollViewScrollbars", "properties": {"SCROLLBAR_TEMPLATE": {"type": "Object", "static": "", "description": "HTML template for the scrollbar", "guessedname": "SCROLLBAR_TEMPLATE", "guessedtype": "property"}, "NS": {"description": "The namespace on which the plugin will reside.", "default": "'scrollbars'", "static": "", "guessedname": "NS", "guessedtype": "property", "type": "String"}, "NAME": {"description": "The identity of the plugin", "default": "'pluginScrollViewScrollbars'", "static": "", "guessedname": "NAME", "guessedtype": "property", "type": "String"}, "isAttached": {"type": "boolean", "static": "", "description": "Specifies whether the list elements (the immediate <ul>'s and the immediate <li>'s inside those <ul>'s) have class names attached to them or not", "guessedname": "isAttached", "guessedtype": "property"}, "ATTRS": {"type": "Object", "static": "", "description": "The default attribute configuration for the plugin", "guessedname": "ATTRS", "guessedtype": "property"}}, "description": "ScrollView plugin that adds scroll indicators to ScrollView instances"}, "Plugin.ConsoleFilters": {"name": "Plugin.ConsoleFilters", "configs": {"category": {"type": "Object", "description": "<p>Map of entry categories to their visibility status.  Update a\nparticular category's visibility by setting the subattribute to true\n(visible) or false (hidden).</p>\n<p>For example, yconsole.filter.set('category.info', false) to hide\nlog entries with the category/logLevel of 'info'.</p>\n<p>Similarly, yconsole.filter.get('category.warn') will return a\nboolean indicating whether that category is currently being included\nin the UI.</p>\n<p>Unlike the YUI instance configuration's logInclude and logExclude\nproperties, filtered entries are only hidden from the UI, but\ncan be made visible again.</p>", "guessedname": "category", "guessedtype": "property"}, "source": {"type": "Object", "description": "<p>Map of entry sources to their visibility status.  Update a\nparticular sources's visibility by setting the subattribute to true\n(visible) or false (hidden).</p>\n<p>For example, yconsole.filter.set('sources.slider', false) to hide\nlog entries originating from Y.Slider.</p>", "guessedname": "source", "guessedtype": "property"}, "defaultVisibility": {"default": "true", "type": "{Boolean}", "description": "Default visibility applied to new categories and sources.", "guessedname": "defaultVisibility", "guessedtype": "property"}, "cacheLimit": {"default": "Number.POSITIVE_INFINITY", "type": "{Number}", "description": "Maximum number of entries to store in the message cache.  Use this to\nlimit the memory footprint in environments with heavy log usage.\nBy default, there is no limit (Number.POSITIVE_INFINITY).", "guessedname": "cacheLimit", "guessedtype": "property"}}, "namespace": "Plugin", "module": "console-filters", "events": {"defaultVisibilityChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "defaultVisibilityChange", "description": "Fires when the value for the configuration attribute 'defaultVisibility' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "sourceChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "sourceChange", "description": "Fires when the value for the configuration attribute 'source' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "cacheLimitChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "cacheLimitChange", "description": "Fires when the value for the configuration attribute 'cacheLimit' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "categoryChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "categoryChange", "description": "Fires when the value for the configuration attribute 'category' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "methods": {"_createCheckbox": {"description": "Creates a checkbox and label from the ConsoleFilters.FILTER_TEMPLATE for\nthe provided type and name.  The checkbox and label are appended to the\ncontainer node passes as the first arg.", "param": "container {Node} the parentNode of the new checkbox and label", "protected": "", "params": [{"type": "Node", "name": "container", "description": "  the parentNode of the new checkbox and label"}, {"type": "String", "name": "name", "description": "  the identifier of the filter"}], "guessedname": "_createCheckbox", "guessedtype": "function"}, "initializer": {"protected": "", "description": "Initialize entries collection and attach listeners to host events and\nmethods.", "guessedname": "initializer", "guessedtype": "function"}, "_setCacheLimit": {"return": {"type": "Number", "description": ""}, "description": "Setter method for cacheLimit attribute.  Basically a validator to ensure\nnumeric input.", "param": "v {Number} Maximum number of entries", "protected": "", "params": [{"type": "Number", "name": "v", "description": "  Maximum number of entries"}], "guessedname": "_setCacheLimit", "guessedtype": "function"}, "_onCategoryCheckboxClick": {"description": "Passes checkbox clicks on to the category attribute.", "param": "e {Event} the DOM event", "protected": "", "params": [{"type": "Event", "name": "e", "description": "  the DOM event"}], "guessedname": "_onCategoryCheckboxClick", "guessedtype": "function"}, "_uiSetCheckbox": {"description": "Updates the checked property of a filter checkbox of the specified type.\nIf no checkbox is found for the input params, one is created.", "param": "type {String} 'category' or 'source'", "protected": "", "params": [{"type": "String", "name": "type", "description": "  'category' or 'source'"}, {"type": "String", "name": "item", "description": "  the name of the filter (e.g. 'info', 'event')"}, {"type": "Boolean", "name": "checked", "description": "  value to set the checkbox's checked property"}], "guessedname": "_uiSetCheckbox", "guessedtype": "function"}, "_onEntry": {"description": "Ensures a filter is set up for any new categories or sources and\ncollects the messages in _entries.  If the message is stamped with a\ncategory or source that is currently being filtered out, the message\nwill not pass to the Console's print buffer.", "param": "e {Event} the custom event object", "protected": "", "params": [{"type": "Event", "name": "e", "description": "  the custom event object"}], "guessedname": "_onEntry", "guessedtype": "function"}, "refreshConsole": {"description": "Repopulates the Console with entries appropriate to the current filter\nsettings.", "guessedname": "refreshConsole", "guessedtype": "function"}, "destructor": {"protected": "", "description": "Removes the plugin UI and unwires events.", "guessedname": "destructor", "guessedtype": "function"}, "_afterCategoryChange": {"description": "Triggers the Console to update if a known category filter\nchanges value (e.g. visible => hidden).  Updates the appropriate\ncheckbox's checked state if necessary.", "param": "e {Event} the attribute change event object", "protected": "", "params": [{"type": "Event", "name": "e", "description": "  the attribute change event object"}], "guessedname": "_afterCategoryChange", "guessedtype": "function"}, "showSource": {"param": "src* {String} 1..n sources to allow to display in the UI", "params": [{"type": "String", "name": "src*", "description": "  1..n sources to allow to display in the UI"}], "description": "Shows any number of sources in the UI.  Convenience method for\nmyConsole.filter.set('source.foo', true); set('source.bar', true);\nand so on.", "guessedname": "showSource", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Binds to checkbox click events and internal attribute change events to\nmaintain the UI state.", "guessedname": "bindUI", "guessedtype": "function"}, "showCategory": {"param": "cat* {String} 1..n categories to allow to display in the UI", "params": [{"type": "String", "name": "cat*", "description": "  1..n categories to allow to display in the UI"}], "description": "Shows any number of categories in the UI.  Convenience method for\nmyConsole.filter.set('category.foo', true); set('category.bar', true);\nand so on.", "guessedname": "showCategory", "guessedtype": "function"}, "_validateCategory": {"return": {"type": "", "description": "Boolean"}, "description": "Validates category updates are objects and the subattribute is not too\ndeep.", "param": "cat {String} the new category:visibility map", "protected": "", "params": [{"type": "String", "name": "cat", "description": "  the new category:visibility map"}, {"type": "String", "name": "v", "description": "  the subattribute path updated"}], "guessedname": "_validateCategory", "guessedtype": "function"}, "_onSourceCheckboxClick": {"description": "Passes checkbox clicks on to the source attribute.", "param": "e {Event} the DOM event", "protected": "", "params": [{"type": "Event", "name": "e", "description": "  the DOM event"}], "guessedname": "_onSourceCheckboxClick", "guessedtype": "function"}, "_validateSource": {"return": {"type": "", "description": "Boolean"}, "description": "Validates source updates are objects and the subattribute is not too\ndeep.", "param": "cat {String} the new source:visibility map", "protected": "", "params": [{"type": "String", "name": "cat", "description": "  the new source:visibility map"}, {"type": "String", "name": "v", "description": "  the subattribute path updated"}], "guessedname": "_validateSource", "guessedtype": "function"}, "hideCategory": {"param": "cat* {String} 1..n categories to filter out of the UI", "params": [{"type": "String", "name": "cat*", "description": "  1..n categories to filter out of the UI"}], "description": "Hides any number of categories from the UI.  Convenience method for\nmyConsole.filter.set('category.foo', false); set('category.bar', false);\nand so on.", "guessedname": "hideCategory", "guessedtype": "function"}, "syncUI": {"description": "Updates the UI to be in accordance with the current state of the plugin.", "guessedname": "syncUI", "guessedtype": "function"}, "_afterClearConsole": {"protected": "", "description": "Flushes the cached entries after a call to the Console's clearConsole().", "guessedname": "_afterClearConsole", "guessedtype": "function"}, "_afterCacheLimitChange": {"description": "Trims the cache of entries to the appropriate new length.", "param": "e {Event} the attribute change event object", "protected": "", "params": [{"type": "Event", "name": "e", "description": "  the attribute change event object"}], "guessedname": "_afterCacheLimitChange", "guessedtype": "function"}, "_afterSourceChange": {"description": "Triggers the Console to update if a known source filter\nchanges value (e.g. visible => hidden).  Updates the appropriate\ncheckbox's checked state if necessary.", "param": "e {Event} the attribute change event object", "protected": "", "params": [{"type": "Event", "name": "e", "description": "  the attribute change event object"}], "guessedname": "_afterSourceChange", "guessedtype": "function"}, "_filterBuffer": {"protected": "", "description": "Flushes the Console's print buffer of any entries that have a category\nor source that is currently being excluded.", "guessedname": "_filterBuffer", "guessedtype": "function"}, "hideSource": {"param": "src* {String} 1..n sources to filter out of the UI", "params": [{"type": "String", "name": "src*", "description": "  1..n sources to filter out of the UI"}], "description": "Hides any number of sources from the UI.  Convenience method for\nmyConsole.filter.set('source.foo', false); set('source.bar', false);\nand so on.", "guessedname": "hideSource", "guessedtype": "function"}, "renderUI": {"protected": "", "description": "Adds the category and source filter sections to the Console footer.", "guessedname": "renderUI", "guessedtype": "function"}}, "file": "console-filters.js", "shortname": "ConsoleFilters", "properties": {"_entries": {"protected": "", "type": "Array", "description": "Collection of all log messages passed through since the plugin's\ninstantiation.  This holds all messages regardless of filter status.\nUsed as a single source of truth for repopulating the Console body when\nfilters are changed.", "guessedname": "_entries", "guessedtype": "property"}, "_sources": {"protected": "", "type": "Node", "description": "The container node created to house the source filters.", "guessedname": "_sources", "guessedtype": "property"}, "NAME": {"description": "Plugin name.", "default": "'consoleFilters'", "static": "", "guessedname": "NAME", "guessedtype": "property", "type": "String"}, "CATEGORIES_TEMPLATE": {"type": "String", "static": "", "description": "Markup template used to create the container for the category filters.", "guessedname": "CATEGORIES_TEMPLATE", "guessedtype": "property"}, "SOURCES_TEMPLATE": {"type": "String", "static": "", "description": "Markup template used to create the container for the source filters.", "guessedname": "SOURCES_TEMPLATE", "guessedtype": "property"}, "_categories": {"protected": "", "type": "Node", "description": "The container node created to house the category filters.", "guessedname": "_categories", "guessedtype": "property"}, "CHROME_CLASSES": {"description": "Classnames used by the templates when creating nodes.", "protected": "", "static": "", "guessedname": "CHROME_CLASSES", "guessedtype": "property", "type": "Object"}, "FILTER_TEMPLATE": {"type": "String", "static": "", "description": "Markup template used to create the category and source filter checkboxes.", "guessedname": "FILTER_TEMPLATE", "guessedtype": "property"}, "NS": {"description": "The namespace hung off the host object that this plugin will inhabit.", "default": "'filter'", "static": "", "guessedname": "NS", "guessedtype": "property", "type": "String"}, "_cacheLimit": {"description": "Maximum number of entries to store in the message cache.", "default": "Infinity", "protected": "", "guessedname": "_cacheLimit", "guessedtype": "property", "type": "{Number}"}}, "description": "<p>Provides Plugin.ConsoleFilters plugin class.</p>\n<p>This plugin adds the ability to control which Console entries display by filtering on category and source. Two groups of checkboxes are added to the Console footer, one for categories and the other for sources.  Only those messages that match a checked category or source are displayed.</p>"}, "Ellipse": {"name": "Ellipse", "constructors": [{"description": "<p>Creates an ellipse shape with editable attributes.</p>\n<p>`Ellipse` instances can be created using the <a href=\"Graphic.html#method_addShape\">`addShape`</a> method of the <a href=\"Graphic.html\">`Graphic`</a> class. \nThe method's `cfg` argument contains a `type` attribute. Assigning \"ellipse\" or `Y.Ellipse` to this attribute will create a `Ellipse` instance. Required attributes\nfor instantiating a `Ellipse` are `type`, `width` and `height`. Optional attributes include:\n<ul>\n<li><a href=\"#attr_fill\">fill</a></li>\n<li><a href=\"#attr_id\">id</a></li>\n<li><a href=\"#attr_stroke\">stroke</a></li>\n<li><a href=\"#attr_transform\">transform</a></li>\n<li><a href=\"#attr_transformOrigin\">transformOrigin</a></li>\n<li><a href=\"#attr_visible\">visible</a></li>\n<li><a href=\"#attr_x\">x</a></li>\n<li><a href=\"#attr_y\">y</a></li>\n</ul>\nThe below code creates an ellipse by defining the `type` attribute as \"ellipse\":</p>\nvar myEllipse = myGraphic.addShape({\ntype: \"ellipse\",\nwidth: 20,\nheight: 10,\nfill: {\ncolor: \"#9aa\"\n},\nstroke: {\nweight: 1,\ncolor: \"#000\"\n}\n});\nBelow, the same ellipse is created by defining the `type` attribute with a class reference:\nvar myEllipse = myGraphic.addShape({\ntype: Y.Ellipse,\nwidth: 20,\nheight: 10,\nfill: {\ncolor: \"#9aa\"\n},\nstroke: {\nweight: 1,\ncolor: \"#000\"\n}\n});\n<p>`Ellipse` has the following implementations based on browser capability.\n<ul>\n<li><a href=\"SVGEllipse.html\">`SVGEllipse`</a></li>\n<li><a href=\"VMLEllipse.html\">`VMLEllipse`</a></li>\n<li><a href=\"CanvasEllipse.html\">`CanvasEllipse`</a></li>\n</ul>\nIt is not necessary to interact with these classes directly. `Ellipse` will point to the appropriate implemention.</p>"}], "namespace": "", "module": "graphics", "extends": "Shape", "superclass": "Shape", "file": "graphics.js", "shortname": "Ellipse", "description": "<p>Creates an ellipse shape with editable attributes.</p>\n<p>`Ellipse` instances can be created using the <a href=\"Graphic.html#method_addShape\">`addShape`</a> method of the <a href=\"Graphic.html\">`Graphic`</a> class. \nThe method's `cfg` argument contains a `type` attribute. Assigning \"ellipse\" or `Y.Ellipse` to this attribute will create a `Ellipse` instance. Required attributes\nfor instantiating a `Ellipse` are `type`, `width` and `height`. Optional attributes include:\n<ul>\n<li><a href=\"#attr_fill\">fill</a></li>\n<li><a href=\"#attr_id\">id</a></li>\n<li><a href=\"#attr_stroke\">stroke</a></li>\n<li><a href=\"#attr_transform\">transform</a></li>\n<li><a href=\"#attr_transformOrigin\">transformOrigin</a></li>\n<li><a href=\"#attr_visible\">visible</a></li>\n<li><a href=\"#attr_x\">x</a></li>\n<li><a href=\"#attr_y\">y</a></li>\n</ul>\nThe below code creates an ellipse by defining the `type` attribute as \"ellipse\":</p>\nvar myEllipse = myGraphic.addShape({\ntype: \"ellipse\",\nwidth: 20,\nheight: 10,\nfill: {\ncolor: \"#9aa\"\n},\nstroke: {\nweight: 1,\ncolor: \"#000\"\n}\n});\nBelow, the same ellipse is created by defining the `type` attribute with a class reference:\nvar myEllipse = myGraphic.addShape({\ntype: Y.Ellipse,\nwidth: 20,\nheight: 10,\nfill: {\ncolor: \"#9aa\"\n},\nstroke: {\nweight: 1,\ncolor: \"#000\"\n}\n});\n<p>`Ellipse` has the following implementations based on browser capability.\n<ul>\n<li><a href=\"SVGEllipse.html\">`SVGEllipse`</a></li>\n<li><a href=\"VMLEllipse.html\">`VMLEllipse`</a></li>\n<li><a href=\"CanvasEllipse.html\">`CanvasEllipse`</a></li>\n</ul>\nIt is not necessary to interact with these classes directly. `Ellipse` will point to the appropriate implemention.</p>"}, "QueryString": {"name": "QueryString", "description": "<p>The QueryString module adds support for serializing JavaScript objects into\nquery strings and parsing JavaScript objects from query strings format.</p>\n<p>The QueryString namespace is added to your YUI instance including static methods\nY.QueryString.parse(..) and Y.QueryString.stringify(..).</p>\n<p>The <code>querystring</code> module is a rollup of <code>querystring-parse</code> and\n<code>querystring-stringify</code>.</p>\n<p>As their names suggest, <code>querystring-parse</code> adds support for parsing\nQuery String data (Y.QueryString.parse) and <code>querystring-stringify</code> for serializing\nJavaScript data into Query Strings (Y.QueryString.stringify).  You may choose to\ninclude either of the submodules individually if you don't need the\ncomplementary functionality, or include the rollup for both.</p>", "namespace": "", "module": "querystring", "guessedname": "QueryString", "static": "", "file": "querystring-parse.js", "guessedtype": "property", "shortname": "QueryString", "methods": {"parse": {"submodule": "querystring-parse", "description": "Provides Y.QueryString.parse method to accept Query Strings and return native\nJavaScript objects.", "module": "querystring", "static": "", "param": "qs {String} Querystring to be parsed into an object.", "guessedname": "parse", "guessedtype": "function", "params": [{"type": "String", "name": "qs", "description": "  Querystring to be parsed into an object."}, {"type": "String", "name": "sep", "description": "  (optional) Character that should join param k=v pairs together. Default: \"&\""}, {"type": "String", "name": "eq", "description": "   (optional) Character that should join keys to their values. Default: \"=\""}], "public": ""}, "stringify": {"submodule": "querystring-stringify-simple", "description": "<p>Converts a simple object to a Query String representation.</p>\n<p>Nested objects, Arrays, and so on, are not supported.</p>", "param": "obj {Object} A single-level object to convert to a querystring.", "static": "", "guessedname": "stringify", "guessedtype": "function", "params": [{"type": "Object", "name": "obj", "description": "  A single-level object to convert to a querystring."}, {"type": "Object", "name": "cfg", "description": "  (optional) Configuration object.  In the simple\nmodule, only the arrayKey setting is\nsupported.  When set to true, the key of an\narray will have the '[]' notation appended\nto the key;."}], "public": ""}, "unescape": {"submodule": "querystring-parse", "description": "Provides Y.QueryString.unescape method to be able to override default decoding\nmethod.  This is important in cases where non-standard delimiters are used, if\nthe delimiters would not normally be handled properly by the builtin\n(en|de)codeURIComponent functions.\nDefault: replace \"+\" with \" \", and then decodeURIComponent behavior.", "module": "querystring", "static": "", "param": "s {String} String to be decoded.", "guessedname": "unescape", "guessedtype": "function", "params": [{"type": "String", "name": "s", "description": "  String to be decoded."}], "public": ""}}}, "Plugin.EditorBidi": {"name": "Plugin.EditorBidi", "constructors": [{"description": "Plugin for Editor to support BiDirectional (bidi) text operations."}], "namespace": "", "module": "editor", "guessedname": "EditorBidi", "methods": {"addParents": {"static": "", "description": "Generates a list of all the block parents of the current NodeList", "guessedname": "addParents", "guessedtype": "function"}, "removeTextAlign": {"static": "", "description": "Method to test a node's style attribute for text-align and removing it.", "guessedname": "removeTextAlign", "guessedtype": "function"}, "_afterMouseUp": {"private": "", "description": "Checks for a direction change after a mouseup occurs.", "guessedname": "_afterMouseUp", "guessedtype": "function"}, "blockParent": {"static": "", "description": "Returns a block parent for a given element", "guessedname": "blockParent", "guessedtype": "function"}, "_afterNodeChange": {"private": "", "description": "Checked for a change after a specific nodeChange event has been fired.", "guessedname": "_afterNodeChange", "guessedtype": "function"}, "_checkForChange": {"private": "", "description": "Method checks to see if the direction of the text has changed based on a nodeChange event.", "guessedname": "_checkForChange", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "editor.js", "guessedtype": "function", "shortname": "Plugin.EditorBidi", "properties": {"BLOCKS": {"static": "", "description": "More elements may be needed. BODY *must* be in the list to take care of the special case.\nblockParent could be changed to use inst.Selection.BLOCKS\ninstead, but that would make Y.Plugin.EditorBidi.blockParent\nunusable in non-RTE contexts (it being usable is a nice\nside-effect)."}, "NAME": {"static": "", "description": "editorBidi", "guessedname": "NAME", "guessedtype": "property"}, "lastDirection": {"private": "", "description": "Place holder for the last direction when checking for a switch", "guessedname": "lastDirection", "guessedtype": "property"}, "_NODE_SELECTED": {"static": "", "description": "The data key to store on the node.", "guessedname": "_NODE_SELECTED", "guessedtype": "property"}, "firstEvent": {"private": "", "description": "Tells us that an initial bidi check has already been performed", "guessedname": "firstEvent", "guessedtype": "property"}, "NS": {"static": "", "description": "editorBidi", "guessedname": "NS", "guessedtype": "property"}, "RE_TEXT_ALIGN": {"static": "", "description": "Regex for testing/removing text-align style from an element", "guessedname": "RE_TEXT_ALIGN", "guessedtype": "property"}, "EVENTS": {"static": "", "description": "The events to check for a direction change on", "guessedname": "EVENTS", "guessedtype": "property"}, "DIV_WRAPPER": {"static": "", "description": "Template for creating a block element", "guessedname": "DIV_WRAPPER", "guessedtype": "property"}}, "description": "Plugin for Editor to support BiDirectional (bidi) text operations."}, "StackedAreaSeries": {"name": "StackedAreaSeries", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " (optional) Configuration parameters for the Chart."}], "description": "StackedAreaSeries area fills to display data showing its contribution to a whole."}], "namespace": "", "module": "charts", "events": {"typeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "typeChange", "description": "Fires when the value for the configuration attribute 'type' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "StackedAreaSeries", "methods": {"setAreaData": {"protected": "", "description": "Calculates the coordinates for the series. Overrides base implementation.", "guessedname": "setAreaData", "guessedtype": "function"}, "drawSeries": {"protected": "", "description": "Draws the series", "guessedname": "drawSeries", "guessedtype": "function"}}, "uses": ["StackingUtil"], "superclass": "AreaSeries", "file": "charts.js", "guessedtype": "property", "extends": "AreaSeries", "shortname": "StackedAreaSeries", "configs": {"type": {"default": "stackedArea", "type": "String", "description": "Read-only attribute indicating the type of series.", "guessedname": "type", "guessedtype": "property"}}, "description": "StackedAreaSeries area fills to display data showing its contribution to a whole."}, "WidgetPositionAlign": {"name": "WidgetPositionAlign", "namespace": "", "module": "widget-position-align", "events": {"alignChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "alignChange", "description": "Fires when the value for the configuration attribute 'align' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "alignOnChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "alignOnChange", "description": "Fires when the value for the configuration attribute 'alignOn' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "centeredChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "centeredChange", "description": "Fires when the value for the configuration attribute 'centered' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "configs": {"centered": {"default": "false", "type": "{boolean | node}", "description": "A convenience attribute, which can be used as a shortcut for the align attribute.\nIf set to true, the Widget is centered in the viewport. If set to a node reference or valid selector string,\nthe Widget will be centered within the node. If set the false, no center positioning is applied.", "guessedname": "centered", "guessedtype": "property"}, "align": {"default": "null", "type": "Object", "desciption": "The align attribute is used to align a reference point on the widget, with the refernce point on another node, or the viewport. \nThe object which align expects has the following properties:\n<dl>\n<dt>node</dt>\n<dd>\nThe node to which the Widget is to be aligned. If set to null, or not provided, the Widget is aligned to the viewport\n</dd>\n<dt>points</dt>\n<dd>\n<p>\nA two element array, defining the two points on the Widget and node/viewport which are to be aligned. The first element is the point on the Widget, and the second element is the point on the node/viewport.\nSupported alignment points are defined as static properties on <code>WidgetPositionAlign</code>.\n</p>\n<p>\ne.g. <code>[WidgetPositionAlign.TR, WidgetPositionAlign.TL]</code> aligns the Top-Right corner of the Widget with the\nTop-Left corner of the node/viewport, and <code>[WidgetPositionAlign.CC, WidgetPositionAlign.TC]</code> aligns the Center of the \nWidget with the Top-Center edge of the node/viewport.\n</p>\n</dd>\n</dl>", "guessedname": "align", "guessedtype": "property"}, "alignOn": {"type": "array", "description": "An array of objects corresponding to the nodes and events that will sync the alignment of the widget.\nThe implementer can supply an array of objects, with each object having the following properties:\neventName: (string, required): The eventName to listen to.\nnode: (Y.Node, optional): The Y.Node that will fire the event (defaults to the boundingBox of the widget)\nBy default, this attribute consists of two objects which will cause the widget to re-align to the node that it is aligned to:\n(1) Scrolling the window, and (2) resizing the window.", "guessedname": "alignOn", "guessedtype": "property"}}, "methods": {"_doAlign": {"description": "Helper method, used to align the given point on the widget, with the XY page co-ordinates provided.", "param": "{String} widgetPoint Supported point constant (e.g. WidgetPositionAlign.TL)", "params": [{"type": "String", "name": "widgetPoint", "description": " Supported point constant (e.g. WidgetPositionAlign.TL)"}, {"type": "Number", "name": "x", "description": " X page co-ordinate to align to"}, {"type": "Number", "name": "y", "description": " Y page co-ordinate to align to"}], "private": "", "guessedname": "_doAlign", "guessedtype": "function"}, "centered": {"param": "{Node | String} node Optional. A node reference or selector string defining the node \ninside which the Widget is to be centered. If not passed in, the Widget will be centered in the \nviewport.", "params": [{"type": "Node | String", "name": "node", "description": " Optional. A node reference or selector string defining the node \ninside which the Widget is to be centered. If not passed in, the Widget will be centered in the \nviewport."}], "description": "Centers the container in the viewport, or if a node is passed in,\nthe node.", "guessedname": "centered", "guessedtype": "function"}, "_syncUIPosAlign": {"protected": "", "description": "Synchronizes the UI to match the Widgets align configuration.\nThis method in invoked after syncUI is invoked for the Widget class\nusing YUI's aop infrastructure.", "guessedname": "_syncUIPosAlign", "guessedtype": "function"}, "_setAlignCenter": {"return": {"type": "Number", "description": "The attribute value being set."}, "description": "Default setter for center attribute changes. Sets up the appropriate value, and passes \nit through the to the align attribute.", "param": "{boolean | node} The attribute value being set.", "protected": "", "params": [{"type": "boolean | node", "name": "The", "description": " attribute value being set."}], "guessedname": "_setAlignCenter", "guessedtype": "function"}, "_bindUIStack": {"protected": "", "description": "Binds event listeners responsible for updating the UI state in response to \nWidget extended positioning related state changes.\n<p>\nThis method is invoked after bindUI is invoked for the Widget class\nusing YUI's aop infrastructure.\n</p>", "guessedname": "_bindUIPosAlign", "guessedtype": "function"}, "_uiSetAlign": {"description": "Updates the UI to reflect the align value passed in (see the align attribute documentation, for the object stucture expected)", "param": "{Node | null} The node to align to, or null to indicate the viewport", "protected": "", "params": [{"type": "Node | null", "name": "The", "description": " node to align to, or null to indicate the viewport"}], "guessedname": "_uiSetAlign", "guessedtype": "function"}, "_afterAlignChange": {"description": "Default attribute change listener for the align attribute, responsible\nfor updating the UI, in response to attribute changes.", "param": "{EventFacade} e The event facade for the attribute change", "protected": "", "params": [{"type": "EventFacade", "name": "e", "description": " The event facade for the attribute change"}], "guessedname": "_afterAlignChange", "guessedtype": "function"}, "align": {"param": "{Node | String | null} node A reference (or selector string) for the Node which with the Widget is to be aligned.\nIf null is passed in, the Widget will be aligned with the viewport.", "params": [{"type": "Node | String | null", "name": "node", "description": " A reference (or selector string) for the Node which with the Widget is to be aligned.\nIf null is passed in, the Widget will be aligned with the viewport."}, {"type": "Array[2]", "name": "points", "description": " A two element array, specifying the points on the Widget and node/viewport which need to be aligned. \nThe first entry is the point on the Widget, and the second entry is the point on the node/viewport which need to align.\nValid point references are defined as static constants on the WidgetPositionAlign class. \ne.g. [WidgetPositionAlign.TL, WidgetPositionAlign.TR] will align the top-left corner of the Widget with the top-right corner of the node/viewport."}], "description": "Aligns the Widget to the provided node (or viewport) using the provided\npoints. The method can be invoked directly, however it will result in \nthe align attribute being out of sync with current position of the of Widget.", "guessedname": "align", "guessedtype": "function"}, "_afterAlignOnChange": {"private": "", "description": "Default function called when alignOn Attribute is changed. Remove existing listeners and create new listeners.", "guessedname": "_afterAlignOnChange", "guessedtype": "function"}}, "param": "{Object} User configuration object", "file": "widget-position-align.js", "shortname": "WidgetPositionAlign", "properties": {"LC": {"description": "Constant used to specify the left edge, center point for alignment", "value": "\"lc\"", "static": "", "guessedname": "LC", "guessedtype": "property", "type": "String"}, "BC": {"description": "Constant used to specify the bottom edge, center point for alignment", "value": "\"bc\"", "static": "", "guessedname": "BC", "guessedtype": "property", "type": "String"}, "BL": {"description": "Constant used to specify the bottom-left corner for alignment", "value": "\"bl\"", "static": "", "guessedname": "BL", "guessedtype": "property", "type": "String"}, "TR": {"description": "Constant used to specify the top-right corner for alignment", "value": "\"tr\"", "static": "", "guessedname": "TR", "guessedtype": "property", "type": "String"}, "CC": {"description": "Constant used to specify the center of widget/node/viewport for alignment", "value": "\"cc\"", "static": "", "guessedname": "CC", "guessedtype": "property", "type": "String"}, "TL": {"description": "Constant used to specify the top-left corner for alignment", "value": "\"tl\"", "static": "", "guessedname": "TL", "guessedtype": "property", "type": "String"}, "ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute \nconfiguration introduced by WidgetPositionAlign.", "guessedname": "ATTRS", "guessedtype": "property"}, "BR": {"description": "Constant used to specify the bottom-right corner for alignment", "value": "\"br\"", "static": "", "guessedname": "BR", "guessedtype": "property", "type": "String"}, "RC": {"description": "Constant used to specify the right edge, center point for alignment", "value": "\"rc\"", "static": "", "guessedname": "RC", "guessedtype": "property", "type": "String"}, "TC": {"description": "Constant used to specify the top edge-center point for alignment", "value": "\"tc\"", "static": "", "guessedname": "TC", "guessedtype": "property", "type": "String"}}, "description": "Widget extension, which can be used to add extended XY positioning support to the base Widget class,\nthrough the <a href=\"Base.html#method_build\">Base.build</a> method. This extension requires that \nthe WidgetPosition extension be added to the Widget (before WidgetPositionAlign, if part of the same \nextension list passed to Base.build)."}, "VMLRect": {"name": "VMLRect", "constructors": [{"description": "<a href=\"http://www.w3.org/TR/NOTE-VML\">VML</a> implementation of the <a href=\"Rect.html\">`Rect`</a> class. \n`VMLRect` is not intended to be used directly. Instead, use the <a href=\"Rect.html\">`Rect`</a> class. \nIf the browser lacks <a href=\"http://www.w3.org/TR/SVG/\">SVG</a> and <a href=\"http://www.w3.org/TR/html5/the-canvas-element.html\">Canvas</a> \ncapabilities, the <a href=\"Rect.html\">`Rect`</a> class will point to the `VMLRect` class."}], "namespace": "", "module": "graphics", "guessedname": "VMLRect", "file": "graphics-vml-debug.js", "guessedtype": "function", "shortname": "VMLRect", "properties": {"_type": {"guessedname": "_type", "type": "String", "description": "Indicates the type of shape", "private": "", "guessedtype": "property"}}, "description": "<a href=\"http://www.w3.org/TR/NOTE-VML\">VML</a> implementation of the <a href=\"Rect.html\">`Rect`</a> class. \n`VMLRect` is not intended to be used directly. Instead, use the <a href=\"Rect.html\">`Rect`</a> class. \nIf the browser lacks <a href=\"http://www.w3.org/TR/SVG/\">SVG</a> and <a href=\"http://www.w3.org/TR/html5/the-canvas-element.html\">Canvas</a> \ncapabilities, the <a href=\"Rect.html\">`Rect`</a> class will point to the `VMLRect` class."}, "Columnset": {"name": "Columnset", "constructors": [{"description": "The Columnset class defines and manages a collection of Columns."}], "namespace": "", "module": "datatable", "events": {"definitionsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "definitionsChange", "description": "Fires when the value for the configuration attribute 'definitions' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "configs": {"definitions": {"type": "Array", "description": "Array of column definitions that will populate this Columnset.", "guessedname": "definitions", "guessedtype": "property"}}, "methods": {"_setHeaders": {"description": "Calculates and sets headers attribute on all Columns.", "private": "", "guessedname": "_setHeaders", "guessedtype": "function"}, "_setRowSpans": {"description": "Calculates and sets rowSpan attribute on all Columns.", "private": "", "guessedname": "_setRowSpans", "guessedtype": "function"}, "destructor": {"private": "", "description": "Destructor.", "guessedname": "destructor", "guessedtype": "function"}, "_setColSpans": {"description": "Calculates and sets colSpan attribute on given Column.", "param": "column {Array} Column instance.", "params": [{"type": "Array", "name": "column", "description": "  Column instance."}, {"type": "Object", "name": "definition", "description": "  Column definition."}], "private": "", "guessedname": "_setColSpans", "guessedtype": "function"}, "_cascadePropertiesToChildren": {"private": "", "description": "Cascade certain properties to children if not defined on their own.", "guessedname": "_cascadePropertiesToChildren", "guessedtype": "function"}, "_setDefinitions": {"return": {"type": "", "description": "Array"}, "description": "Clones definitions before setting.", "private": "", "params": [{"type": "Array", "name": "definitions", "description": "  Array of column definitions."}], "param": "definitions {Array} Array of column definitions.", "guessedname": "_setDefinitions", "guessedtype": "function"}, "initializer": {"description": "Initializer. Generates all internal representations of the collection of\nColumns.", "param": "config {Object} Config object.", "params": [{"type": "Object", "name": "config", "description": "  Config object."}], "private": "", "guessedname": "initializer", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "datatable-base.js", "shortname": "Columnset", "properties": {"keys": {"type": "Y.Column[]", "description": "Array of only Columns that are meant to be displayed in DOM.", "guessedname": "keys", "guessedtype": "property"}, "keyHash": {"type": "Object", "description": "Hash of all Columns by key.", "guessedname": "keyHash", "guessedtype": "property"}, "tree": {"type": "Y.Column[]", "description": "Top-down tree representation of Column hierarchy. Used to create DOM\nelements.", "guessedname": "tree", "guessedtype": "property"}, "NAME": {"description": "Class name.", "value": "\"columnset\"", "static": "", "guessedname": "NAME", "guessedtype": "property", "type": "String", "final": ""}, "idHash": {"type": "Object", "description": "Hash of all Columns by ID.", "guessedname": "idHash", "guessedtype": "property"}}, "description": "The Columnset class defines and manages a collection of Columns."}, "DD.Scroll": {"properties": {"_scrollTimer": {"guessedname": "_scrollTimer", "type": "{Y.later}", "description": "Holder for the Timer object returned from Y.later.", "private": "", "guessedtype": "property"}, "_dimCache": {"guessedname": "_dimCache", "type": "Object", "description": "Cache of the dragNode dims.", "private": "", "guessedtype": "property"}, "_vpRegionCache": {"guessedname": "_vpRegionCache", "type": "Object", "description": "Cache of the Viewport dims.", "private": "", "guessedtype": "property"}, "_scrolling": {"guessedname": "_scrolling", "type": "Boolean", "description": "Tells if we are actively scrolling or not.", "private": "", "guessedtype": "property"}}, "name": "DD.Scroll", "constructors": [{"description": "Base scroller class used to create the Plugin.DDNodeScroll and Plugin.DDWinScroll.\nThis class should not be called on it's own, it's designed to be a plugin."}], "namespace": "DD", "module": "dd", "events": {"hostChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "hostChange", "description": "Fires when the value for the configuration attribute 'host' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "windowScrollChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "windowScrollChange", "description": "Fires when the value for the configuration attribute 'windowScroll' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "verticalChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "verticalChange", "description": "Fires when the value for the configuration attribute 'vertical' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "bufferChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "bufferChange", "description": "Fires when the value for the configuration attribute 'buffer' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "horizontalChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "horizontalChange", "description": "Fires when the value for the configuration attribute 'horizontal' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "parentScrollChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "parentScrollChange", "description": "Fires when the value for the configuration attribute 'parentScroll' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "scrollDelayChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "scrollDelayChange", "description": "Fires when the value for the configuration attribute 'scrollDelay' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "S", "methods": {"_cancelScroll": {"description": "Cancel a currently running scroll timer.", "private": "", "guessedname": "_cancelScroll", "guessedtype": "function"}, "end": {"description": "Called from the drag:end event", "guessedname": "end", "guessedtype": "function"}, "start": {"description": "Called from the drag:start event", "guessedname": "start", "guessedtype": "function"}, "align": {"description": "Called from the drag:align event to determine if we need to scroll.", "guessedname": "align", "guessedtype": "function"}, "_checkWinScroll": {"description": "Check to see if we need to fire the scroll timer. If scroll timer is running this will scroll the window.", "param": "{Boolean} move Should we move the window. From Y.later", "params": [{"type": "Boolean", "name": "move", "description": " Should we move the window. From Y.later"}], "private": "", "guessedname": "_checkWinScroll", "guessedtype": "function"}, "_setDimCache": {"description": "Set the cache of the dragNode dims.", "private": "", "guessedname": "_setDimCache", "guessedtype": "function"}, "toString": {"return": {"type": "", "description": "String name for the object"}, "description": "General toString method for logging", "guessedname": "toString", "guessedtype": "function"}, "_initScroll": {"description": "Cancel a previous scroll timer and init a new one.", "private": "", "guessedname": "_initScroll", "guessedtype": "function"}, "_getVPRegion": {"description": "Sets the _vpRegionCache property with an Object containing the dims from the viewport.", "private": "", "guessedname": "_getVPRegion", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "dd.js", "guessedtype": "function", "shortname": "Scroll", "configs": {"vertical": {"type": "Boolean", "description": "Allow vertical scrolling, default: true.", "guessedname": "vertical", "guessedtype": "property"}, "scrollDelay": {"type": "Number", "description": "The number of milliseconds delay to pass to the auto scroller. Default: 235", "guessedname": "scrollDelay", "guessedtype": "property"}, "buffer": {"type": "Number", "description": "The number of pixels from the edge of the screen to turn on scrolling. Default: 30", "guessedname": "buffer", "guessedtype": "property"}, "windowScroll": {"type": "Boolean", "description": "Turn on window scroll support, default: false", "guessedname": "windowScroll", "guessedtype": "property"}, "host": {"type": "Object", "description": "The host we are plugged into.", "guessedname": "host", "guessedtype": "property"}, "parentScroll": {"type": "Node", "description": "Internal config option to hold the node that we are scrolling. Should not be set by the developer.", "guessedname": "parentScroll", "guessedtype": "property"}, "horizontal": {"type": "Boolean", "description": "Allow horizontal scrolling, default: true.", "guessedname": "horizontal", "guessedtype": "property"}}, "description": "Base scroller class used to create the Plugin.DDNodeScroll and Plugin.DDWinScroll.\nThis class should not be called on it's own, it's designed to be a plugin."}, "ButtonItem": {"name": "ButtonItem", "configs": {"hoverState": {"default": "true", "type": "Boolean", "description": "Whether to track the hover interaction state of the button.", "guessedname": "hoverState", "guessedtype": "property"}, "labelNode": {"default": "Generated div element.", "type": "String", "description": "DOM Node to display the text of the ButtonItem. If not\nspecified try to query using HTML_PARSER an element inside\nboundingBox which matches <code>aui-button-label</code>.", "guessedname": "labelNode", "guessedtype": "property"}, "label": {"type": "String", "description": "Text to use inside of the button.", "guessedname": "label", "guessedtype": "property"}, "classNames": {"type": "Object", "description": "An object map of the CSS class names to use for the different interaction states.", "guessedname": "classNames", "guessedtype": "property"}, "handler": {"default": "false", "type": "Function | Object", "description": "An event callback to handle when a user interacts with the button.\nThis can either be a function that will be attached on click, or\nan object map that accepts the following keys:\n<code>{fn: // The function to execute\ncontext: // The context to execute the function in\ntype: // The type of event to listen for (defaults to \"click\")\n}</code>", "guessedname": "handler", "guessedtype": "property"}, "defaultState": {"default": "true", "type": "Boolean", "description": "Whether to apply the default interaction state to the button", "guessedname": "defaultState", "guessedtype": "property"}, "title": {"type": "String", "description": "Text to use as the title attribute of the button.", "guessedname": "title", "guessedtype": "property"}, "iconNode": {"default": "Generated div element.", "type": "String", "description": "DOM Node to display the icon of the ButtonItem. If not\nspecified try to query using HTML_PARSER an element inside\nboundingBox which matches <code>aui-button-icon</code>.", "guessedname": "iconNode", "guessedtype": "property"}, "type": {"default": "button", "type": "String", "description": "Button type.", "guessedname": "type", "guessedtype": "property"}, "activeState": {"default": "false", "type": "Boolean", "description": "Whether to track the active state of the button.", "guessedname": "activeState", "guessedtype": "property"}, "icon": {"type": "String", "description": "The icon to use inside of the button. Possible values are:", "guessedname": "icon", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "A base class for ButtonItem, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>An optional icon or label</li>\n<li>Managed user interaction states (default, active, hover)</li>\n<li>Keyboard accessible</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.ButtonItem({\nicon: 'gear',\nlabel: 'Configuration'\n}).render();\n</code></pre>\nCheck the list of <a href=\"ButtonItem.html#configattributes\">Configuration Attributes</a> available for\nButtonItem."}], "namespace": "", "module": "aui-button-item", "events": {"classNamesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "classNamesChange", "description": "Fires when the value for the configuration attribute 'classNames' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "iconChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "iconChange", "description": "Fires when the value for the configuration attribute 'icon' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "hoverStateChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "hoverStateChange", "description": "Fires when the value for the configuration attribute 'hoverState' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "activeStateChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "activeStateChange", "description": "Fires when the value for the configuration attribute 'activeState' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "iconNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "iconNodeChange", "description": "Fires when the value for the configuration attribute 'iconNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "labelChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "labelChange", "description": "Fires when the value for the configuration attribute 'label' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "handlerChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "handlerChange", "description": "Fires when the value for the configuration attribute 'handler' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "typeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "typeChange", "description": "Fires when the value for the configuration attribute 'type' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "defaultStateChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "defaultStateChange", "description": "Fires when the value for the configuration attribute 'defaultState' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "titleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "titleChange", "description": "Fires when the value for the configuration attribute 'title' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "labelNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "labelNodeChange", "description": "Fires when the value for the configuration attribute 'labelNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "ButtonItem", "methods": {"_uiSetHandler": {"description": "Updates the UI for the icon in response to the <a href=\"ButtonItem.html#event_HandlerChange\">Handler</a> event.", "param": "{String} val Handler name", "protected": "", "params": [{"type": "String", "name": "val", "description": " Handler name"}], "guessedname": "_uiSetHandler", "guessedtype": "function"}, "_uiSetType": {"description": "Updates the UI for the type in response to the <a href=\"ButtonItem.html#event_typeChange\">typeChange</a> event.", "param": "{String} val The new value", "protected": "", "params": [{"type": "String", "name": "val", "description": " The new value"}], "guessedname": "_uiSetType", "guessedtype": "function"}, "syncUI": {"protected": "", "description": "Sync the ButtonItem UI. Lifecycle.", "guessedname": "syncUI", "guessedtype": "function"}, "_renderStates": {"description": "Attaches state interaction management to the widget.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_renderStates", "guessedtype": "function"}, "_renderIconNode": {"protected": "", "return": {"type": "Node", "description": ""}, "description": "Renders the underlying markup for the <a href=\"ButtonItem.html#config_icon\">icon</a>.", "guessedname": "_renderIconNode", "guessedtype": "function"}, "_uiSetIcon": {"description": "Updates the UI for the icon in response to the <a href=\"ButtonItem.html#event_iconChange\">iconChange</a> event.", "param": "{String} val Icon name", "protected": "", "params": [{"type": "String", "name": "val", "description": " Icon name"}], "guessedname": "_uiSetIcon", "guessedtype": "function"}, "_setTitle": {"protected": "", "description": "Setter for the title attribute", "guessedname": "_setTitle", "guessedtype": "function"}, "_uiSetLabel": {"description": "Updates the UI for the label in response to the <a href=\"ButtonItem.html#event_labelChange\">labelChange</a> event.", "param": "{String} val The new value", "protected": "", "params": [{"type": "String", "name": "val", "description": " The new value"}], "guessedname": "_uiSetLabel", "guessedtype": "function"}, "_uiSetTitle": {"description": "Updates the UI for the title in response to the <a href=\"ButtonItem.html#event_titleChange\">titleChange</a> event.", "param": "{String} val The new value", "protected": "", "params": [{"type": "String", "name": "val", "description": " The new value"}], "guessedname": "_uiSetTitle", "guessedtype": "function"}, "_syncChildrenStates": {"protected": "", "description": "Syncs the boundingBox class names to reflect whether the children only have icons or labels or both.", "guessedname": "_syncChildrenStates", "guessedtype": "function"}, "_renderLabelNode": {"protected": "", "return": {"type": "Node", "description": ""}, "description": "Renders the underlying markup for the <a href=\"ButtonItem.html#config_label\">label</a>.", "guessedname": "_renderLabelNode", "guessedtype": "function"}, "_getState": {"return": {"type": "Object", "description": ""}, "description": "Retrieves the state value from either the current instance, or if defined, the\nparent widget.", "param": "{String} key The state name to retrieve", "protected": "", "params": [{"type": "String", "name": "key", "description": " The state name to retrieve"}, {"type": "Object", "name": "parent", "description": " The parent widget to attempt to retrieve the state from"}], "guessedname": "_getState", "guessedtype": "function"}, "renderUI": {"protected": "", "description": "Create the DOM structure for the ButtonItem. Lifecycle.", "guessedname": "renderUI", "guessedtype": "function"}}, "uses": ["WidgetChild"], "superclass": "Component", "file": "aui-button-item.js", "guessedtype": "property", "extends": "Component", "shortname": "ButtonItem", "properties": {"ButtonItem.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}, "ButtonItem.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the ButtonItem.", "guessedname": "ATTRS", "guessedtype": "property"}, "ButtonItem.HTML_PARSER": {"type": "Object", "static": "", "description": "Object hash, defining how attribute values are to be parsed from\nmarkup contained in the widget's content box.", "guessedname": "HTML_PARSER", "guessedtype": "property"}, "ButtonItem.AUGMENTS": {"type": "array", "static": "", "description": "Static property provides an array to specify which classes augment this one.", "guessedname": "AUGMENTS", "guessedtype": "property"}}, "description": "A base class for ButtonItem, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>An optional icon or label</li>\n<li>Managed user interaction states (default, active, hover)</li>\n<li>Keyboard accessible</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.ButtonItem({\nicon: 'gear',\nlabel: 'Configuration'\n}).render();\n</code></pre>\nCheck the list of <a href=\"ButtonItem.html#configattributes\">Configuration Attributes</a> available for\nButtonItem."}, "ClickableRail": {"name": "ClickableRail", "configs": {"clickableRail": {"default": "true", "type": "{Boolean}", "description": "Enable or disable clickable rail support.", "guessedname": "clickableRail", "guessedtype": "property"}}, "namespace": "", "module": "slider", "methods": {"_defRailMouseDownFn": {"description": "Default behavior for the railMouseDown event.  Centers the thumb at\nthe click location and passes control to the DDM to behave as though\nthe thumb itself were clicked in preparation for a drag operation.", "param": "e {Event} the EventFacade for the railMouseDown custom event", "protected": "", "params": [{"type": "Event", "name": "e", "description": "  the EventFacade for the railMouseDown custom event"}], "guessedname": "_defRailMouseDownFn", "guessedtype": "function"}, "_resolveThumb": {"return": {"type": "DD.Drag", "description": "the Drag instance that should be moved"}, "description": "Resolves which thumb to actuate if any.  Override this if you want to\nsupport multiple thumbs.  By default, returns the Drag instance for\nthe thumb stored by the Slider.", "param": "e {DOMEvent} the mousedown event object", "protected": "", "params": [{"type": "DOMEvent", "name": "e", "description": "  the mousedown event object"}], "guessedname": "_resolveThumb", "guessedtype": "function"}, "_getThumbDestination": {"return": {"type": "Array", "description": "the [top, left] pixel position of the destination"}, "description": "Calculates the top left position the thumb should be moved to to\nalign the click XY with the center of the specified node.", "param": "e {DOMEvent} The mousedown event object", "protected": "", "params": [{"type": "DOMEvent", "name": "e", "description": "  The mousedown event object"}, {"type": "Node", "name": "node", "description": "  The node to position"}], "guessedname": "_getThumbDestination", "guessedtype": "function"}, "_bindClickableRail": {"protected": "", "description": "Attaches DOM event subscribers to support rail interaction.", "guessedname": "_bindClickableRail", "guessedtype": "function"}, "_onRailMouseDown": {"description": "Dispatches the railMouseDown event.", "param": "e {DOMEvent} the mousedown event object", "protected": "", "params": [{"type": "DOMEvent", "name": "e", "description": "  the mousedown event object"}], "guessedname": "_onRailMouseDown", "guessedtype": "function"}, "_unbindClickableRail": {"protected": "", "description": "Detaches DOM event subscribers for cleanup/destruction cycle.", "guessedname": "_unbindClickableRail", "guessedtype": "function"}, "_initClickableRail": {"protected": "", "description": "Initializes the internal state and sets up events.", "guessedname": "_initClickableRail", "guessedtype": "function"}}, "file": "clickable-rail.js", "shortname": "ClickableRail", "events": {"railMouseDown": {"preventable": "_defRailMouseDownFn", "description": "Broadcasts when the rail has received a mousedown event and\ntriggers the thumb positioning.  Use\n<code>e.preventDefault()</code> or\n<code>set(&quot;clickableRail&quot;, false)</code> to prevent\nthe thumb positioning."}, "clickableRailChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "clickableRailChange", "description": "Fires when the value for the configuration attribute 'clickableRail' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "description": "Slider extension that allows clicking on the Slider's rail element,\ntriggering the thumb to align with the location of the click."}, "SplineSeries": {"name": "SplineSeries", "constructors": [{"description": "SplineSeries renders a graph with data points connected by a curve."}], "namespace": "", "module": "charts", "events": {"typeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "typeChange", "description": "Fires when the value for the configuration attribute 'type' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "stylesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "stylesChange", "description": "Fires when the value for the configuration attribute 'styles' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "SplineSeries", "methods": {"drawSeries": {"protected": "", "description": "Draws the series.", "guessedname": "drawSeries", "guessedtype": "function"}}, "uses": ["CurveUtil", "Lines"], "superclass": "CartesianSeries", "file": "charts.js", "guessedtype": "property", "extends": "CartesianSeries", "shortname": "SplineSeries", "configs": {"styles": {"type": "Object", "description": "Style properties used for drawing lines. This attribute is inherited from `Renderer`. Below are the default values:\n<dl>\n<dt>color</dt><dd>The color of the line. The default value is determined by the order of the series on the graph. The color will be\nretrieved from the following array: \n`[\"#426ab3\", \"#d09b2c\", \"#000000\", \"#b82837\", \"#b384b5\", \"#ff7200\", \"#779de3\", \"#cbc8ba\", \"#7ed7a6\", \"#007a6c\"]`\n<dt>weight</dt><dd>Number that indicates the width of the line. The default value is 6.</dd>\n<dt>alpha</dt><dd>Number between 0 and 1 that indicates the opacity of the line. The default value is 1.</dd>\n<dt>lineType</dt><dd>Indicates whether the line is solid or dashed. The default value is solid.</dd> \n<dt>dashLength</dt><dd>When the `lineType` is dashed, indicates the length of the dash. The default value is 10.</dd>\n<dt>gapSpace</dt><dd>When the `lineType` is dashed, indicates the distance between dashes. The default value is 10.</dd>\n<dt>connectDiscontinuousPoints</dt><dd>Indicates whether or not to connect lines when there is a missing or null value between points. The default value is true.</dd> \n<dt>discontinuousType</dt><dd>Indicates whether the line between discontinuous points is solid or dashed. The default value is solid.</dd>\n<dt>discontinuousDashLength</dt><dd>When the `discontinuousType` is dashed, indicates the length of the dash. The default value is 10.</dd>\n<dt>discontinuousGapSpace</dt><dd>When the `discontinuousType` is dashed, indicates the distance between dashes. The default value is 10.</dd>\n</dl>"}, "type": {"default": "spline", "type": "String", "description": "Read-only attribute indicating the type of series.", "guessedname": "type", "guessedtype": "property"}}, "description": "SplineSeries renders a graph with data points connected by a curve."}, "Test.Assert.Error": {"name": "Test.Assert.Error", "constructors": [{"params": [{"type": "String", "name": "message", "description": " The message to display when the error occurs."}], "description": "Error is thrown whenever an assertion fails. It provides methods\nto more easily get at error information and also provides a base class\nfrom which more specific assertion errors can be derived."}], "namespace": "Test", "module": "test", "guessedname": "Error", "methods": {"valueOf": {"return": {"type": "String", "description": "A primitive value version of the error."}, "description": "Returns a primitive value version of the error. Same as toString().", "guessedname": "valueOf", "guessedtype": "function"}, "getMessage": {"return": {"type": "String", "description": "A string describing the error."}, "description": "Returns a fully formatted error for an assertion failure. This should\nbe overridden by all subclasses to provide specific information.", "guessedname": "getMessage", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "A string representation of the error."}, "description": "Returns a string representation of the error.", "guessedname": "toString", "guessedtype": "function"}}, "file": "test.js", "guessedtype": "function", "shortname": "Assert.Error", "properties": {"name": {"type": "String", "description": "The name of the error that occurred.", "guessedname": "name", "guessedtype": "property"}}, "description": "Error is thrown whenever an assertion fails. It provides methods\nto more easily get at error information and also provides a base class\nfrom which more specific assertion errors can be derived."}, "Array": {"return": "{Array} A native array created from _thing_, according to the rules\ndescribed above.", "name": "Array", "constructors": [{"params": [{"type": "Any", "name": "thing", "description": " The thing to arrayify."}, {"type": "Number", "name": "[startIndex=0]", "description": " If non-zero and _thing_ is an array or array-like\ncollection, a subset of items starting at the specified index will be\nreturned."}, {"type": "Boolean", "name": "[force=false]", "description": " If `true`, _thing_ will be treated as an\narray-like collection no matter what."}], "description": "Provides utility methods for working with arrays. Additional array helpers can\nbe found in the `collection` and `array-extras` modules.\n`Y.Array(thing)` returns a native array created from _thing_. Depending on\n_thing_'s type, one of the following will happen:\nArrays are returned unmodified unless a non-zero _startIndex_ is\nspecified.\nArray-like collections (see `Array.test()`) are converted to arrays.\nFor everything else, a new array is created with _thing_ as the sole\nitem.\nNote: elements that are also collections, such as `<form>` and `<select>`\nelements, are not automatically converted to arrays. To force a conversion,\npass `true` as the value of the _force_ parameter."}], "namespace": "", "module": "yui", "methods": {"map": {"return": {"type": "Array", "description": "A new array containing the return value of the supplied function\nfor each item in the original array."}, "description": "Executes the supplied function on each item in the array and returns a new array\ncontaining all the values returned by the supplied function.", "param": "{Array} a the array to iterate.", "static": "", "guessedname": "map", "guessedtype": "property", "params": [{"type": "Array", "name": "a", "description": " the array to iterate."}, {"type": "Function", "name": "f", "description": " the function to execute on each item."}, {"type": "object", "name": "[o]", "description": " Optional context object."}], "example": "// Convert an array of numbers into an array of strings.\nY.Array.map([1, 2, 3, 4], function (item) {\nreturn '' + item;\n});\n// => ['1', '2', '3', '4']"}, "unique": {"return": {"type": "Array", "description": "Copy of the array with duplicate items removed."}, "description": "Returns a copy of the specified array with duplicate items removed.", "param": "{Array} a Array to dedupe.", "static": "", "guessedname": "unique", "guessedtype": "function", "params": [{"type": "Array", "name": "a", "description": " Array to dedupe."}]}, "hash": {"return": {"type": "Object", "description": "Hash using the first array as keys and the second as values."}, "description": "Returns an object using the first array as keys and the second as values. If\nthe second array is not provided, or if it doesn't contain the same number of\nvalues as the first array, then `true` will be used in place of the missing\nvalues.", "param": "{String[]} keys Array of strings to use as keys.", "static": "", "guessedname": "hash", "guessedtype": "function", "params": [{"type": "String[]", "name": "keys", "description": " Array of strings to use as keys."}, {"type": "Array", "name": "[values]", "description": " Array to use as values."}], "example": "Y.Array.hash(['a', 'b', 'c'], ['foo', 'bar']);\n// => {a: 'foo', b: 'bar', c: true}"}, "zip": {"return": {"type": "Array", "description": "An array of arrays formed by pairing each element of the first\narray with an item in the second array having the corresponding index."}, "description": "Creates an array of arrays by pairing the corresponding elements of two arrays\ntogether into a new array.", "param": "{Array} a Array to iterate over.", "static": "", "guessedname": "zip", "guessedtype": "function", "params": [{"type": "Array", "name": "a", "description": " Array to iterate over."}, {"type": "Array", "name": "a2", "description": " Another array whose values will be paired with values of the\nfirst array."}]}, "invoke": {"return": {"type": "Array", "description": "All return values, indexed according to the item index."}, "description": "Executes a named method on each item in an array of objects. Items in the array\nthat do not have a function by that name will be skipped.", "param": "{Array} items Array of objects supporting the named method.", "static": "", "guessedname": "invoke", "guessedtype": "function", "params": [{"type": "Array", "name": "items", "description": " Array of objects supporting the named method."}, {"type": "String", "name": "name", "description": " the name of the method to execute on each item."}, {"type": "Any", "name": "[args*]", "description": " Any number of additional args are passed as parameters to\nthe execution of the named method."}], "example": "Y.Array.invoke(arrayOfDrags, 'plug', Y.Plugin.DDProxy);"}, "indexOf": {"return": {"type": "Number", "description": "Index of the item strictly equal to _value_, or `-1` if not\nfound."}, "description": "Returns the index of the first item in the array that's equal (using a strict\nequality check) to the specified _value_, or `-1` if the value isn't found.\nThis method wraps the native ES5 `Array.indexOf()` method if available.", "param": "{Array} array Array to search.", "static": "", "guessedname": "indexOf", "guessedtype": "function", "params": [{"type": "Array", "name": "array", "description": " Array to search."}, {"type": "Any", "name": "value", "description": " Value to search for."}]}, "reduce": {"return": {"type": "Any", "description": "Final result from iteratively applying the given function to each\nelement in the array."}, "description": "Executes the supplied function on each item in the array, \"folding\" the array\ninto a single value.", "param": "{Array} a Array to iterate.", "static": "", "guessedname": "reduce", "guessedtype": "property", "params": [{"type": "Array", "name": "a", "description": " Array to iterate."}, {"type": "Any", "name": "init", "description": " Initial value to start with."}, {"type": "Function", "name": "f", "description": " Function to execute on each item. This function should\nupdate and return the value of the computation. It will receive the following\narguments:"}, {"type": "Any", "name": "f.previousValue", "description": " Value returned from the previous iteration,\nor the initial value if this is the first iteration."}, {"type": "Any", "name": "f.currentValue", "description": " Value of the current item being iterated."}, {"type": "Number", "name": "f.index", "description": " Index of the current item."}, {"type": "Array", "name": "f.array", "description": " Array being iterated."}, {"type": "Object", "name": "[o]", "description": " Optional context object."}]}, "grep": {"return": {"type": "Array", "description": "All the items in the array that produce a match against the\nsupplied regular expression. If no items match, an empty array is returned."}, "description": "Iterates over an array, returning a new array of all the elements that match the\nsupplied regular expression.", "param": "{Array} a Array to iterate over.", "static": "", "guessedname": "grep", "guessedtype": "function", "params": [{"type": "Array", "name": "a", "description": " Array to iterate over."}, {"type": "RegExp", "name": "pattern", "description": " Regular expression to test against each item."}]}, "reject": {"return": {"type": "Array", "description": "The items for which the supplied function returned `false`."}, "description": "The inverse of `Array.filter()`. Executes the supplied function on each item.\nReturns a new array containing the items for which the supplied function\nreturned `false`.", "param": "{Array} a the array to iterate.", "static": "", "guessedname": "reject", "guessedtype": "function", "params": [{"type": "Array", "name": "a", "description": " the array to iterate."}, {"type": "Function", "name": "f", "description": " the function to execute on each item."}, {"type": "object", "name": "[o]", "description": " Optional context object."}]}, "some": {"return": {"type": "Boolean", "description": "`true` if the function returns a truthy value on any of the\nitems in the array; `false` otherwise."}, "description": "Executes the supplied function on each item in the array. Returning a truthy\nvalue from the function will stop the processing of remaining items.", "param": "{Array} array Array to iterate over.", "static": "", "guessedname": "some", "guessedtype": "function", "params": [{"type": "Array", "name": "array", "description": " Array to iterate over."}, {"type": "Function", "name": "fn", "description": " Function to execute on each item. The function will receive\nthe following arguments:"}, {"type": "Any", "name": "fn.value", "description": " Current array item."}, {"type": "Number", "name": "fn.index", "description": " Current array index."}, {"type": "Array", "name": "fn.array", "description": " Array being iterated over."}, {"type": "Object", "name": "[thisObj]", "description": " `this` object to use when calling _fn_."}]}, "partition": {"return": {"type": "Object", "description": "An object with two properties: `matches` and `rejects`. Each is\nan array containing the items that were selected or rejected by the test\nfunction (or an empty array if none)."}, "description": "Partitions an array into two new arrays, one with the items for which the\nsupplied function returns `true`, and one with the items for which the function\nreturns `false`.", "param": "{Array} a Array to iterate over.", "static": "", "guessedname": "partition", "guessedtype": "function", "params": [{"type": "Array", "name": "a", "description": " Array to iterate over."}, {"type": "Function", "name": "f", "description": " Function to execute for each item in the array. It will\nreceive the following arguments:"}, {"type": "Any", "name": "f.item", "description": " Current item."}, {"type": "Number", "name": "f.index", "description": " Index of the current item."}, {"type": "Array", "name": "f.array", "description": " The array being iterated."}, {"type": "Object", "name": "[o]", "description": " Optional execution context."}]}, "filter": {"return": {"type": "Array", "description": "Array of items for which the supplied function returned a\ntruthy value (empty if it never returned a truthy value)."}, "description": "Executes the supplied function on each item in the array. Returns a new array\ncontaining the items for which the supplied function returned a truthy value.", "param": "{Array} a Array to filter.", "static": "", "guessedname": "filter", "guessedtype": "property", "params": [{"type": "Array", "name": "a", "description": " Array to filter."}, {"type": "Function", "name": "f", "description": " Function to execute on each item."}, {"type": "Object", "name": "[o]", "description": " Optional context object."}]}, "every": {"return": {"type": "Boolean", "description": "`true` if every item in the array returns `true` from the\nsupplied function, `false` otherwise."}, "description": "Executes the supplied function on each item in the array. Iteration stops if the\nsupplied function does not return a truthy value.", "param": "{Array} a the array to iterate.", "static": "", "guessedname": "every", "guessedtype": "property", "params": [{"type": "Array", "name": "a", "description": " the array to iterate."}, {"type": "Function", "name": "f", "description": " the function to execute on each item."}, {"type": "Object", "name": "[o]", "description": " Optional context object."}]}, "forEach": {"static": "", "description": "Alias for `each()`."}, "each": {"return": {"type": "YUI", "description": "The YUI instance."}, "description": "Executes the supplied function on each item in the array. This method wraps\nthe native ES5 `Array.forEach()` method if available.", "param": "{Array} array Array to iterate.", "static": "", "guessedname": "each", "guessedtype": "function", "params": [{"type": "Array", "name": "array", "description": " Array to iterate."}, {"type": "Function", "name": "fn", "description": " Function to execute on each item in the array. The function\nwill receive the following arguments:"}, {"type": "Any", "name": "fn.item", "description": " Current array item."}, {"type": "Number", "name": "fn.index", "description": " Current array index."}, {"type": "Array", "name": "fn.array", "description": " Array being iterated."}, {"type": "Object", "name": "[thisObj]", "description": " `this` object to use when calling _fn_."}]}, "test": {"return": {"type": "Number", "description": "A number indicating the results of the test:\n0: Neither an array nor an array-like collection.\n1: Real array.\n2: Array-like collection."}, "description": "Evaluates _obj_ to determine if it's an array, an array-like collection, or\nsomething else. This is useful when working with the function `arguments`\ncollection and `HTMLElement` collections.\nNote: This implementation doesn't consider elements that are also\ncollections, such as `<form>` and `<select>`, to be array-like.", "param": "{Object} obj Object to test.", "static": "", "guessedname": "test", "guessedtype": "function", "params": [{"type": "Object", "name": "obj", "description": " Object to test."}]}, "lastIndexOf": {"return": {"type": "Number", "description": "Index of the item that contains the value, or `-1` if not\nfound."}, "description": "Returns the index of the last item in the array that contains the specified\nvalue, or `-1` if the value isn't found.", "param": "{Array} a Array to search in.", "static": "", "guessedname": "lastIndexOf", "guessedtype": "property", "params": [{"type": "Array", "name": "a", "description": " Array to search in."}, {"type": "Any", "name": "val", "description": " Value to search for."}, {"type": "Number", "name": "[fromIndex]", "description": " Index at which to start searching backwards.\nDefaults to the array's length - 1. If negative, it will be taken as an offset\nfrom the end of the array. If the calculated index is less than 0, the array\nwill not be searched and `-1` will be returned."}]}, "numericSort": {"return": {"type": "Number", "description": "Difference between _a_ and _b_."}, "description": "Numeric sort convenience function.\nThe native `Array.prototype.sort()` function converts values to strings and\nsorts them in lexicographic order, which is unsuitable for sorting numeric\nvalues. Provide `Array.numericSort` as a custom sort function when you want\nto sort values in numeric order.", "param": "{Number} a First value to compare.", "static": "", "guessedname": "numericSort", "guessedtype": "function", "params": [{"type": "Number", "name": "a", "description": " First value to compare."}, {"type": "Number", "name": "b", "description": " Second value to compare."}], "example": "[42, 23, 8, 16, 4, 15].sort(Y.Array.numericSort);\n// => [4, 8, 15, 16, 23, 42]"}, "dedupe": {"return": {"type": "Array", "description": "Deduped copy of _array_."}, "description": "Dedupes an array of strings, returning an array that's guaranteed to contain\nonly one copy of a given string.\nThis method differs from `Array.unique()` in that it's optimized for use only\nwith strings, whereas `unique` may be used with other types (but is slower).\nUsing `dedupe()` with non-string values may result in unexpected behavior.", "since": "3.4.0", "param": "{String[]} array Array of strings to dedupe.", "static": "", "guessedname": "dedupe", "guessedtype": "function", "params": [{"type": "String[]", "name": "array", "description": " Array of strings to dedupe."}]}, "find": {"return": {"type": "Object", "description": "the first item that the supplied function returns `true` for,\nor `null` if it never returns `true`."}, "description": "Executes the supplied function on each item in the array, searching for the\nfirst item that matches the supplied function.", "param": "{Array} a the array to search.", "static": "", "guessedname": "find", "guessedtype": "function", "params": [{"type": "Array", "name": "a", "description": " the array to search."}, {"type": "Function", "name": "f", "description": " the function to execute on each item. Iteration is stopped\nas soon as this function returns `true`."}, {"type": "Object", "name": "[o]", "description": " Optional context object."}]}}, "file": "aui.js", "shortname": "Array", "description": "Provides utility methods for working with arrays. Additional array helpers can\nbe found in the `collection` and `array-extras` modules.\n`Y.Array(thing)` returns a native array created from _thing_. Depending on\n_thing_'s type, one of the following will happen:\nArrays are returned unmodified unless a non-zero _startIndex_ is\nspecified.\nArray-like collections (see `Array.test()`) are converted to arrays.\nFor everything else, a new array is created with _thing_ as the sole\nitem.\nNote: elements that are also collections, such as `<form>` and `<select>`\nelements, are not automatically converted to arrays. To force a conversion,\npass `true` as the value of the _force_ parameter."}, "RightAxisLayout": {"name": "RightAxisLayout", "constructors": [{"description": "RightAxisLayout contains algorithms for rendering a right axis."}], "namespace": "", "module": "charts", "guessedname": "RightAxisLayout", "methods": {"getLineStart": {"protected": "", "return": {"type": "Object", "description": ""}, "description": "Calculates the coordinates for the first point on an axis.", "guessedname": "getLineStart", "guessedtype": "function"}, "_getDefaultMargins": {"guessedname": "_getDefaultMargins", "return": {"type": "", "description": "Object"}, "description": "Default margins for text fields.", "private": "", "guessedtype": "function"}, "setCalculatedSize": {"protected": "", "description": "Assigns a height based on the size of the contents.", "guessedname": "setCalculatedSize", "guessedtype": "function"}, "positionTitle": {"description": "Rotate and position title.", "param": "{HTMLElement} label to rotate position", "protected": "", "params": [{"type": "HTMLElement", "name": "label", "description": " to rotate position"}], "guessedname": "positionTitle", "guessedtype": "function"}, "offsetNodeForTick": {"description": "Adjusts position for inner ticks.", "param": "{Node} cb contentBox of the axis", "protected": "", "params": [{"type": "Node", "name": "cb", "description": " contentBox of the axis"}], "guessedname": "offsetNodeForTick", "guessedtype": "function"}, "positionLabel": {"description": "Rotate and position labels.", "param": "{HTMLElement} label to rotate position", "protected": "", "params": [{"type": "HTMLElement", "name": "label", "description": " to rotate position"}, {"type": "Object", "name": "pt", "description": " hash containing the x and y coordinates in which the label will be positioned\nagainst."}], "guessedname": "positionLabel", "guessedtype": "function"}, "drawTick": {"description": "Draws a tick", "param": "{Object} pt Point on the axis in which the tick will intersect.", "protected": "", "params": [{"type": "Object", "name": "pt", "description": " Point on the axis in which the tick will intersect."}], "guessedname": "drawTick", "guessedtype": "function"}, "getLabelPoint": {"return": {"type": "Object", "description": ""}, "description": "Calculates the point for a label.", "param": "{Object} point Point on the axis in which the tick will intersect.", "protected": "", "params": [{"type": "Object", "name": "point", "description": " Point on the axis in which the tick will intersect."}], "guessedname": "getLabelPoint", "guessedtype": "function"}, "setTickOffset": {"protected": "", "description": "Sets the length of the tick on either side of the axis line.", "guessedname": "setTickOffsets", "guessedtype": "function"}, "updateMaxLabelSize": {"description": "Updates the value for the `maxLabelSize` for use in calculating total size.", "param": "{HTMLElement} label to measure", "protected": "", "params": [{"type": "HTMLElement", "name": "label", "description": " to measure"}], "guessedname": "updateMaxLabelSize", "guessedtype": "function"}, "setSizeAndPosition": {"protected": "", "description": "Calculates the size and positions the content elements.", "guessedname": "setSizeAndPosition", "guessedtype": "function"}}, "file": "charts.js", "guessedtype": "function", "shortname": "RightAxisLayout", "description": "RightAxisLayout contains algorithms for rendering a right axis."}, "EventFacade": {"file": "event-custom-complex.js", "description": "Wraps and protects a custom event for use when emitFacade is set to true.\nRequires the event-custom-complex module", "namespace": "", "module": "event-custom", "methods": {"stopImmediatePropagation": {"description": "Stops the propagation to the next bubble target and\nprevents any additional listeners from being exectued\non the current target.", "guessedname": "stopImmediatePropagation", "guessedtype": "function"}, "stopPropagation": {"description": "Stops the propagation to the next bubble target", "guessedname": "stopPropagation", "guessedtype": "function"}, "preventDefault": {"description": "Prevents the event's default behavior", "guessedname": "preventDefault", "guessedtype": "function"}, "halt": {"param": "immediate {boolean} if true additional listeners\non the current target will not be executed", "params": [{"type": "boolean", "name": "immediate", "description": "  if true additional listeners\non the current target will not be executed"}], "description": "Stops the event propagation and prevents the default\nevent behavior.", "guessedname": "halt", "guessedtype": "function"}}, "param": "e {Event} the custom event", "guessedname": "EventFacade", "guessedtype": "function", "shortname": "EventFacade", "properties": {"_type": {"guessedname": "_type", "type": "string", "description": "The real event type", "private": "", "guessedtype": "property"}, "target": {"type": "Node", "description": "Node reference for the targeted eventtarget", "guessedname": "target", "guessedtype": "property"}, "relatedTarget": {"type": "Node", "description": "Node reference to the relatedTarget", "guessedname": "relatedTarget", "guessedtype": "property"}, "details": {"type": "Array", "description": "The arguments passed to fire", "guessedname": "details", "guessedtype": "property"}, "type": {"type": "string", "description": "The event type, this can be overridden by the fire() payload", "guessedname": "type", "guessedtype": "property"}, "currentTarget": {"type": "Node", "description": "Node reference for the element that the listener was attached to.", "guessedname": "currentTarget", "guessedtype": "property"}}, "name": "EventFacade"}, "DataSourceTextSchema": {"name": "DataSourceTextSchema", "namespace": "", "module": "datasource", "guessedname": "DataSourceTextSchema", "methods": {"_beforeDefDataFn": {"description": "Parses raw data into a normalized response.", "param": "tId {Number} Unique transaction ID.", "protected": "", "params": [{"type": "Number", "name": "tId", "description": "  Unique transaction ID."}, {"type": "Object", "name": "request", "description": "  The request."}, {"type": "Object", "name": "callback", "description": "  The callback object with the following properties:\n<dl>\n<dt>success (Function)</dt> <dd>Success handler.</dd>\n<dt>failure (Function)</dt> <dd>Failure handler.</dd>\n</dl>"}, {"type": "Object", "name": "data", "description": "  Raw data."}], "guessedname": "_beforeDefDataFn", "guessedtype": "function"}, "initializer": {"description": "Internal init() handler.", "param": "config {Object} Config object.", "params": [{"type": "Object", "name": "config", "description": "  Config object."}], "private": "", "guessedname": "initializer", "guessedtype": "function"}}, "extends": "Plugin.Base", "superclass": "Plugin.Base", "file": "datasource-textschema.js", "guessedtype": "function", "shortname": "DataSourceTextSchema", "properties": {"NS": {"description": "The namespace for the plugin. This will be the property on the host which\nreferences the plugin instance.", "value": "\"schema\"", "static": "", "guessedname": "NS", "guessedtype": "property", "type": "String", "final": ""}, "NAME": {"description": "Class name.", "value": "\"dataSourceTextSchema\"", "static": "", "guessedname": "NAME", "guessedtype": "property", "type": "String", "final": ""}}, "description": "Adds schema-parsing to the DataSource Utility."}}, "version": "1.0.1", "namespaces": ["Plugin", "Test", "plugin", "DD"]}